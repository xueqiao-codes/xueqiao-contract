/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.broker.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqBrokerAccessInfoOption implements org.apache.thrift.TBase<ReqBrokerAccessInfoOption, ReqBrokerAccessInfoOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqBrokerAccessInfoOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqBrokerAccessInfoOption");

  private static final org.apache.thrift.protocol.TField BROKER_ACCESS_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerAccessIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField BROKER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PLATFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("platforms", org.apache.thrift.protocol.TType.SET, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqBrokerAccessInfoOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqBrokerAccessInfoOptionTupleSchemeFactory());
  }

  public List<Integer> brokerAccessIds; // optional
  public List<Integer> brokerIds; // optional
  public Set<com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform> platforms; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ACCESS_IDS((short)1, "brokerAccessIds"),
    BROKER_IDS((short)2, "brokerIds"),
    PLATFORMS((short)3, "platforms");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ACCESS_IDS
          return BROKER_ACCESS_IDS;
        case 2: // BROKER_IDS
          return BROKER_IDS;
        case 3: // PLATFORMS
          return PLATFORMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.BROKER_ACCESS_IDS,_Fields.BROKER_IDS,_Fields.PLATFORMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ACCESS_IDS, new org.apache.thrift.meta_data.FieldMetaData("brokerAccessIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BROKER_IDS, new org.apache.thrift.meta_data.FieldMetaData("brokerIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PLATFORMS, new org.apache.thrift.meta_data.FieldMetaData("platforms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqBrokerAccessInfoOption.class, metaDataMap);
  }

  public ReqBrokerAccessInfoOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqBrokerAccessInfoOption(ReqBrokerAccessInfoOption other) {
    if (other.isSetBrokerAccessIds()) {
      List<Integer> __this__brokerAccessIds = new ArrayList<Integer>(other.brokerAccessIds);
      this.brokerAccessIds = __this__brokerAccessIds;
    }
    if (other.isSetBrokerIds()) {
      List<Integer> __this__brokerIds = new ArrayList<Integer>(other.brokerIds);
      this.brokerIds = __this__brokerIds;
    }
    if (other.isSetPlatforms()) {
      Set<com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform> __this__platforms = new HashSet<com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform>(other.platforms.size());
      for (com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform other_element : other.platforms) {
        __this__platforms.add(other_element);
      }
      this.platforms = __this__platforms;
    }
  }

  public ReqBrokerAccessInfoOption deepCopy() {
    return new ReqBrokerAccessInfoOption(this);
  }

  @Override
  public void clear() {
    this.brokerAccessIds = null;
    this.brokerIds = null;
    this.platforms = null;
  }

  public int getBrokerAccessIdsSize() {
    return (this.brokerAccessIds == null) ? 0 : this.brokerAccessIds.size();
  }

  public java.util.Iterator<Integer> getBrokerAccessIdsIterator() {
    return (this.brokerAccessIds == null) ? null : this.brokerAccessIds.iterator();
  }

  public void addToBrokerAccessIds(int elem) {
    if (this.brokerAccessIds == null) {
      this.brokerAccessIds = new ArrayList<Integer>();
    }
    this.brokerAccessIds.add(elem);
  }

  public List<Integer> getBrokerAccessIds() {
    return this.brokerAccessIds;
  }

  public ReqBrokerAccessInfoOption setBrokerAccessIds(List<Integer> brokerAccessIds) {
    this.brokerAccessIds = brokerAccessIds;
    return this;
  }

  public void unsetBrokerAccessIds() {
    this.brokerAccessIds = null;
  }

  /** Returns true if field brokerAccessIds is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerAccessIds() {
    return this.brokerAccessIds != null;
  }

  public void setBrokerAccessIdsIsSet(boolean value) {
    if (!value) {
      this.brokerAccessIds = null;
    }
  }

  public int getBrokerIdsSize() {
    return (this.brokerIds == null) ? 0 : this.brokerIds.size();
  }

  public java.util.Iterator<Integer> getBrokerIdsIterator() {
    return (this.brokerIds == null) ? null : this.brokerIds.iterator();
  }

  public void addToBrokerIds(int elem) {
    if (this.brokerIds == null) {
      this.brokerIds = new ArrayList<Integer>();
    }
    this.brokerIds.add(elem);
  }

  public List<Integer> getBrokerIds() {
    return this.brokerIds;
  }

  public ReqBrokerAccessInfoOption setBrokerIds(List<Integer> brokerIds) {
    this.brokerIds = brokerIds;
    return this;
  }

  public void unsetBrokerIds() {
    this.brokerIds = null;
  }

  /** Returns true if field brokerIds is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerIds() {
    return this.brokerIds != null;
  }

  public void setBrokerIdsIsSet(boolean value) {
    if (!value) {
      this.brokerIds = null;
    }
  }

  public int getPlatformsSize() {
    return (this.platforms == null) ? 0 : this.platforms.size();
  }

  public java.util.Iterator<com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform> getPlatformsIterator() {
    return (this.platforms == null) ? null : this.platforms.iterator();
  }

  public void addToPlatforms(com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform elem) {
    if (this.platforms == null) {
      this.platforms = new HashSet<com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform>();
    }
    this.platforms.add(elem);
  }

  public Set<com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform> getPlatforms() {
    return this.platforms;
  }

  public ReqBrokerAccessInfoOption setPlatforms(Set<com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform> platforms) {
    this.platforms = platforms;
    return this;
  }

  public void unsetPlatforms() {
    this.platforms = null;
  }

  /** Returns true if field platforms is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatforms() {
    return this.platforms != null;
  }

  public void setPlatformsIsSet(boolean value) {
    if (!value) {
      this.platforms = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ACCESS_IDS:
      if (value == null) {
        unsetBrokerAccessIds();
      } else {
        setBrokerAccessIds((List<Integer>)value);
      }
      break;

    case BROKER_IDS:
      if (value == null) {
        unsetBrokerIds();
      } else {
        setBrokerIds((List<Integer>)value);
      }
      break;

    case PLATFORMS:
      if (value == null) {
        unsetPlatforms();
      } else {
        setPlatforms((Set<com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ACCESS_IDS:
      return getBrokerAccessIds();

    case BROKER_IDS:
      return getBrokerIds();

    case PLATFORMS:
      return getPlatforms();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ACCESS_IDS:
      return isSetBrokerAccessIds();
    case BROKER_IDS:
      return isSetBrokerIds();
    case PLATFORMS:
      return isSetPlatforms();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqBrokerAccessInfoOption)
      return this.equals((ReqBrokerAccessInfoOption)that);
    return false;
  }

  public boolean equals(ReqBrokerAccessInfoOption that) {
    if (that == null)
      return false;

    boolean this_present_brokerAccessIds = true && this.isSetBrokerAccessIds();
    boolean that_present_brokerAccessIds = true && that.isSetBrokerAccessIds();
    if (this_present_brokerAccessIds || that_present_brokerAccessIds) {
      if (!(this_present_brokerAccessIds && that_present_brokerAccessIds))
        return false;
      if (!this.brokerAccessIds.equals(that.brokerAccessIds))
        return false;
    }

    boolean this_present_brokerIds = true && this.isSetBrokerIds();
    boolean that_present_brokerIds = true && that.isSetBrokerIds();
    if (this_present_brokerIds || that_present_brokerIds) {
      if (!(this_present_brokerIds && that_present_brokerIds))
        return false;
      if (!this.brokerIds.equals(that.brokerIds))
        return false;
    }

    boolean this_present_platforms = true && this.isSetPlatforms();
    boolean that_present_platforms = true && that.isSetPlatforms();
    if (this_present_platforms || that_present_platforms) {
      if (!(this_present_platforms && that_present_platforms))
        return false;
      if (!this.platforms.equals(that.platforms))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqBrokerAccessInfoOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerAccessIds()).compareTo(other.isSetBrokerAccessIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerAccessIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerAccessIds, other.brokerAccessIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerIds()).compareTo(other.isSetBrokerIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerIds, other.brokerIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatforms()).compareTo(other.isSetPlatforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platforms, other.platforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqBrokerAccessInfoOption(");
    boolean first = true;

    if (isSetBrokerAccessIds()) {
      sb.append("brokerAccessIds:");
      if (this.brokerAccessIds == null) {
        sb.append("null");
      } else {
        sb.append(this.brokerAccessIds);
      }
      first = false;
    }
    if (isSetBrokerIds()) {
      if (!first) sb.append(", ");
      sb.append("brokerIds:");
      if (this.brokerIds == null) {
        sb.append("null");
      } else {
        sb.append(this.brokerIds);
      }
      first = false;
    }
    if (isSetPlatforms()) {
      if (!first) sb.append(", ");
      sb.append("platforms:");
      if (this.platforms == null) {
        sb.append("null");
      } else {
        sb.append(this.platforms);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqBrokerAccessInfoOptionStandardSchemeFactory implements SchemeFactory {
    public ReqBrokerAccessInfoOptionStandardScheme getScheme() {
      return new ReqBrokerAccessInfoOptionStandardScheme();
    }
  }

  private static class ReqBrokerAccessInfoOptionStandardScheme extends StandardScheme<ReqBrokerAccessInfoOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqBrokerAccessInfoOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ACCESS_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.brokerAccessIds = new ArrayList<Integer>(_list80.size);
                for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                {
                  int _elem82;
                  _elem82 = iprot.readI32();
                  struct.brokerAccessIds.add(_elem82);
                }
                iprot.readListEnd();
              }
              struct.setBrokerAccessIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BROKER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                struct.brokerIds = new ArrayList<Integer>(_list83.size);
                for (int _i84 = 0; _i84 < _list83.size; ++_i84)
                {
                  int _elem85;
                  _elem85 = iprot.readI32();
                  struct.brokerIds.add(_elem85);
                }
                iprot.readListEnd();
              }
              struct.setBrokerIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLATFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set86 = iprot.readSetBegin();
                struct.platforms = new HashSet<com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform>(2*_set86.size);
                for (int _i87 = 0; _i87 < _set86.size; ++_i87)
                {
                  com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform _elem88;
                  _elem88 = com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform.findByValue(iprot.readI32());
                  struct.platforms.add(_elem88);
                }
                iprot.readSetEnd();
              }
              struct.setPlatformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqBrokerAccessInfoOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerAccessIds != null) {
        if (struct.isSetBrokerAccessIds()) {
          oprot.writeFieldBegin(BROKER_ACCESS_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.brokerAccessIds.size()));
            for (int _iter89 : struct.brokerAccessIds)
            {
              oprot.writeI32(_iter89);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.brokerIds != null) {
        if (struct.isSetBrokerIds()) {
          oprot.writeFieldBegin(BROKER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.brokerIds.size()));
            for (int _iter90 : struct.brokerIds)
            {
              oprot.writeI32(_iter90);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.platforms != null) {
        if (struct.isSetPlatforms()) {
          oprot.writeFieldBegin(PLATFORMS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.platforms.size()));
            for (com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform _iter91 : struct.platforms)
            {
              oprot.writeI32(_iter91.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqBrokerAccessInfoOptionTupleSchemeFactory implements SchemeFactory {
    public ReqBrokerAccessInfoOptionTupleScheme getScheme() {
      return new ReqBrokerAccessInfoOptionTupleScheme();
    }
  }

  private static class ReqBrokerAccessInfoOptionTupleScheme extends TupleScheme<ReqBrokerAccessInfoOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqBrokerAccessInfoOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerAccessIds()) {
        optionals.set(0);
      }
      if (struct.isSetBrokerIds()) {
        optionals.set(1);
      }
      if (struct.isSetPlatforms()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBrokerAccessIds()) {
        {
          oprot.writeI32(struct.brokerAccessIds.size());
          for (int _iter92 : struct.brokerAccessIds)
          {
            oprot.writeI32(_iter92);
          }
        }
      }
      if (struct.isSetBrokerIds()) {
        {
          oprot.writeI32(struct.brokerIds.size());
          for (int _iter93 : struct.brokerIds)
          {
            oprot.writeI32(_iter93);
          }
        }
      }
      if (struct.isSetPlatforms()) {
        {
          oprot.writeI32(struct.platforms.size());
          for (com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform _iter94 : struct.platforms)
          {
            oprot.writeI32(_iter94.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqBrokerAccessInfoOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.brokerAccessIds = new ArrayList<Integer>(_list95.size);
          for (int _i96 = 0; _i96 < _list95.size; ++_i96)
          {
            int _elem97;
            _elem97 = iprot.readI32();
            struct.brokerAccessIds.add(_elem97);
          }
        }
        struct.setBrokerAccessIdsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.brokerIds = new ArrayList<Integer>(_list98.size);
          for (int _i99 = 0; _i99 < _list98.size; ++_i99)
          {
            int _elem100;
            _elem100 = iprot.readI32();
            struct.brokerIds.add(_elem100);
          }
        }
        struct.setBrokerIdsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set101 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.platforms = new HashSet<com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform>(2*_set101.size);
          for (int _i102 = 0; _i102 < _set101.size; ++_i102)
          {
            com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform _elem103;
            _elem103 = com.longsheng.xueqiao.broker.thriftapi.BrokerPlatform.findByValue(iprot.readI32());
            struct.platforms.add(_elem103);
          }
        }
        struct.setPlatformsIsSet(true);
      }
    }
  }

}

