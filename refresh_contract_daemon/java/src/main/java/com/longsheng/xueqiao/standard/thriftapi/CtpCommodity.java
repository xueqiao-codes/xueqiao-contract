/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.standard.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CtpCommodity implements org.apache.thrift.TBase<CtpCommodity, CtpCommodity._Fields>, java.io.Serializable, Cloneable, Comparable<CtpCommodity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CtpCommodity");

  private static final org.apache.thrift.protocol.TField CTP_EXCHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ctpExchange", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMMODITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityCode", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CtpCommodityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CtpCommodityTupleSchemeFactory());
  }

  public String ctpExchange; // optional
  public String commodityType; // optional
  public String commodityCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CTP_EXCHANGE((short)2, "ctpExchange"),
    COMMODITY_TYPE((short)3, "commodityType"),
    COMMODITY_CODE((short)4, "commodityCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // CTP_EXCHANGE
          return CTP_EXCHANGE;
        case 3: // COMMODITY_TYPE
          return COMMODITY_TYPE;
        case 4: // COMMODITY_CODE
          return COMMODITY_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.CTP_EXCHANGE,_Fields.COMMODITY_TYPE,_Fields.COMMODITY_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CTP_EXCHANGE, new org.apache.thrift.meta_data.FieldMetaData("ctpExchange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("commodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("commodityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CtpCommodity.class, metaDataMap);
  }

  public CtpCommodity() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CtpCommodity(CtpCommodity other) {
    if (other.isSetCtpExchange()) {
      this.ctpExchange = other.ctpExchange;
    }
    if (other.isSetCommodityType()) {
      this.commodityType = other.commodityType;
    }
    if (other.isSetCommodityCode()) {
      this.commodityCode = other.commodityCode;
    }
  }

  public CtpCommodity deepCopy() {
    return new CtpCommodity(this);
  }

  @Override
  public void clear() {
    this.ctpExchange = null;
    this.commodityType = null;
    this.commodityCode = null;
  }

  public String getCtpExchange() {
    return this.ctpExchange;
  }

  public CtpCommodity setCtpExchange(String ctpExchange) {
    this.ctpExchange = ctpExchange;
    return this;
  }

  public void unsetCtpExchange() {
    this.ctpExchange = null;
  }

  /** Returns true if field ctpExchange is set (has been assigned a value) and false otherwise */
  public boolean isSetCtpExchange() {
    return this.ctpExchange != null;
  }

  public void setCtpExchangeIsSet(boolean value) {
    if (!value) {
      this.ctpExchange = null;
    }
  }

  public String getCommodityType() {
    return this.commodityType;
  }

  public CtpCommodity setCommodityType(String commodityType) {
    this.commodityType = commodityType;
    return this;
  }

  public void unsetCommodityType() {
    this.commodityType = null;
  }

  /** Returns true if field commodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityType() {
    return this.commodityType != null;
  }

  public void setCommodityTypeIsSet(boolean value) {
    if (!value) {
      this.commodityType = null;
    }
  }

  public String getCommodityCode() {
    return this.commodityCode;
  }

  public CtpCommodity setCommodityCode(String commodityCode) {
    this.commodityCode = commodityCode;
    return this;
  }

  public void unsetCommodityCode() {
    this.commodityCode = null;
  }

  /** Returns true if field commodityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityCode() {
    return this.commodityCode != null;
  }

  public void setCommodityCodeIsSet(boolean value) {
    if (!value) {
      this.commodityCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CTP_EXCHANGE:
      if (value == null) {
        unsetCtpExchange();
      } else {
        setCtpExchange((String)value);
      }
      break;

    case COMMODITY_TYPE:
      if (value == null) {
        unsetCommodityType();
      } else {
        setCommodityType((String)value);
      }
      break;

    case COMMODITY_CODE:
      if (value == null) {
        unsetCommodityCode();
      } else {
        setCommodityCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CTP_EXCHANGE:
      return getCtpExchange();

    case COMMODITY_TYPE:
      return getCommodityType();

    case COMMODITY_CODE:
      return getCommodityCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CTP_EXCHANGE:
      return isSetCtpExchange();
    case COMMODITY_TYPE:
      return isSetCommodityType();
    case COMMODITY_CODE:
      return isSetCommodityCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CtpCommodity)
      return this.equals((CtpCommodity)that);
    return false;
  }

  public boolean equals(CtpCommodity that) {
    if (that == null)
      return false;

    boolean this_present_ctpExchange = true && this.isSetCtpExchange();
    boolean that_present_ctpExchange = true && that.isSetCtpExchange();
    if (this_present_ctpExchange || that_present_ctpExchange) {
      if (!(this_present_ctpExchange && that_present_ctpExchange))
        return false;
      if (!this.ctpExchange.equals(that.ctpExchange))
        return false;
    }

    boolean this_present_commodityType = true && this.isSetCommodityType();
    boolean that_present_commodityType = true && that.isSetCommodityType();
    if (this_present_commodityType || that_present_commodityType) {
      if (!(this_present_commodityType && that_present_commodityType))
        return false;
      if (!this.commodityType.equals(that.commodityType))
        return false;
    }

    boolean this_present_commodityCode = true && this.isSetCommodityCode();
    boolean that_present_commodityCode = true && that.isSetCommodityCode();
    if (this_present_commodityCode || that_present_commodityCode) {
      if (!(this_present_commodityCode && that_present_commodityCode))
        return false;
      if (!this.commodityCode.equals(that.commodityCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CtpCommodity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCtpExchange()).compareTo(other.isSetCtpExchange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCtpExchange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ctpExchange, other.ctpExchange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityType()).compareTo(other.isSetCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityType, other.commodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityCode()).compareTo(other.isSetCommodityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityCode, other.commodityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CtpCommodity(");
    boolean first = true;

    if (isSetCtpExchange()) {
      sb.append("ctpExchange:");
      if (this.ctpExchange == null) {
        sb.append("null");
      } else {
        sb.append(this.ctpExchange);
      }
      first = false;
    }
    if (isSetCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("commodityType:");
      if (this.commodityType == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityType);
      }
      first = false;
    }
    if (isSetCommodityCode()) {
      if (!first) sb.append(", ");
      sb.append("commodityCode:");
      if (this.commodityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CtpCommodityStandardSchemeFactory implements SchemeFactory {
    public CtpCommodityStandardScheme getScheme() {
      return new CtpCommodityStandardScheme();
    }
  }

  private static class CtpCommodityStandardScheme extends StandardScheme<CtpCommodity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CtpCommodity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // CTP_EXCHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ctpExchange = iprot.readString();
              struct.setCtpExchangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityType = iprot.readString();
              struct.setCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMODITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityCode = iprot.readString();
              struct.setCommodityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CtpCommodity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ctpExchange != null) {
        if (struct.isSetCtpExchange()) {
          oprot.writeFieldBegin(CTP_EXCHANGE_FIELD_DESC);
          oprot.writeString(struct.ctpExchange);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityType != null) {
        if (struct.isSetCommodityType()) {
          oprot.writeFieldBegin(COMMODITY_TYPE_FIELD_DESC);
          oprot.writeString(struct.commodityType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityCode != null) {
        if (struct.isSetCommodityCode()) {
          oprot.writeFieldBegin(COMMODITY_CODE_FIELD_DESC);
          oprot.writeString(struct.commodityCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CtpCommodityTupleSchemeFactory implements SchemeFactory {
    public CtpCommodityTupleScheme getScheme() {
      return new CtpCommodityTupleScheme();
    }
  }

  private static class CtpCommodityTupleScheme extends TupleScheme<CtpCommodity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CtpCommodity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCtpExchange()) {
        optionals.set(0);
      }
      if (struct.isSetCommodityType()) {
        optionals.set(1);
      }
      if (struct.isSetCommodityCode()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCtpExchange()) {
        oprot.writeString(struct.ctpExchange);
      }
      if (struct.isSetCommodityType()) {
        oprot.writeString(struct.commodityType);
      }
      if (struct.isSetCommodityCode()) {
        oprot.writeString(struct.commodityCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CtpCommodity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.ctpExchange = iprot.readString();
        struct.setCtpExchangeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.commodityType = iprot.readString();
        struct.setCommodityTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commodityCode = iprot.readString();
        struct.setCommodityCodeIsSet(true);
      }
    }
  }

}

