/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.ctp_service.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CtpPosition implements org.apache.thrift.TBase<CtpPosition, CtpPosition._Fields>, java.io.Serializable, Cloneable, Comparable<CtpPosition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CtpPosition");

  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField POSITION_DATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionDateType", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField POSI_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("posiDirection", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField HISTORY_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("historyPosition", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TODAY_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("todayPosition", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField AVERAGE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("averagePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField POSITION_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("positionProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField YD_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("ydPosition", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CLOSE_HISTORY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("closeHistoryVolume", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField OPEN_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("openVolume", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CLOSE_TODAY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("closeTodayVolume", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField USE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("useMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField FROZEN_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("commission", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField FROZEN_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenCommission", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField POSITION_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("positionCost", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField HISTORY_POSITION_AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("historyPositionAvailable", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField TODAY_POSITION_AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("todayPositionAvailable", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CtpPositionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CtpPositionTupleSchemeFactory());
  }

  public String instrumentId; // optional
  public byte positionDateType; // optional
  public byte posiDirection; // optional
  public int historyPosition; // optional
  public int todayPosition; // optional
  public double averagePrice; // optional
  public double positionProfit; // optional
  public double closeProfit; // optional
  public int ydPosition; // optional
  public int closeHistoryVolume; // optional
  public int openVolume; // optional
  public int closeTodayVolume; // optional
  public double useMargin; // optional
  public double frozenMargin; // optional
  public double commission; // optional
  public double frozenCommission; // optional
  public double positionCost; // optional
  public int historyPositionAvailable; // optional
  public int todayPositionAvailable; // optional
  public int sledAccountId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTRUMENT_ID((short)1, "instrumentId"),
    POSITION_DATE_TYPE((short)2, "positionDateType"),
    POSI_DIRECTION((short)3, "posiDirection"),
    HISTORY_POSITION((short)4, "historyPosition"),
    TODAY_POSITION((short)5, "todayPosition"),
    AVERAGE_PRICE((short)6, "averagePrice"),
    POSITION_PROFIT((short)7, "positionProfit"),
    CLOSE_PROFIT((short)8, "closeProfit"),
    YD_POSITION((short)9, "ydPosition"),
    CLOSE_HISTORY_VOLUME((short)10, "closeHistoryVolume"),
    OPEN_VOLUME((short)11, "openVolume"),
    CLOSE_TODAY_VOLUME((short)12, "closeTodayVolume"),
    USE_MARGIN((short)13, "useMargin"),
    FROZEN_MARGIN((short)14, "frozenMargin"),
    COMMISSION((short)15, "commission"),
    FROZEN_COMMISSION((short)16, "frozenCommission"),
    POSITION_COST((short)17, "positionCost"),
    HISTORY_POSITION_AVAILABLE((short)18, "historyPositionAvailable"),
    TODAY_POSITION_AVAILABLE((short)19, "todayPositionAvailable"),
    SLED_ACCOUNT_ID((short)20, "sledAccountId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 2: // POSITION_DATE_TYPE
          return POSITION_DATE_TYPE;
        case 3: // POSI_DIRECTION
          return POSI_DIRECTION;
        case 4: // HISTORY_POSITION
          return HISTORY_POSITION;
        case 5: // TODAY_POSITION
          return TODAY_POSITION;
        case 6: // AVERAGE_PRICE
          return AVERAGE_PRICE;
        case 7: // POSITION_PROFIT
          return POSITION_PROFIT;
        case 8: // CLOSE_PROFIT
          return CLOSE_PROFIT;
        case 9: // YD_POSITION
          return YD_POSITION;
        case 10: // CLOSE_HISTORY_VOLUME
          return CLOSE_HISTORY_VOLUME;
        case 11: // OPEN_VOLUME
          return OPEN_VOLUME;
        case 12: // CLOSE_TODAY_VOLUME
          return CLOSE_TODAY_VOLUME;
        case 13: // USE_MARGIN
          return USE_MARGIN;
        case 14: // FROZEN_MARGIN
          return FROZEN_MARGIN;
        case 15: // COMMISSION
          return COMMISSION;
        case 16: // FROZEN_COMMISSION
          return FROZEN_COMMISSION;
        case 17: // POSITION_COST
          return POSITION_COST;
        case 18: // HISTORY_POSITION_AVAILABLE
          return HISTORY_POSITION_AVAILABLE;
        case 19: // TODAY_POSITION_AVAILABLE
          return TODAY_POSITION_AVAILABLE;
        case 20: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POSITIONDATETYPE_ISSET_ID = 0;
  private static final int __POSIDIRECTION_ISSET_ID = 1;
  private static final int __HISTORYPOSITION_ISSET_ID = 2;
  private static final int __TODAYPOSITION_ISSET_ID = 3;
  private static final int __AVERAGEPRICE_ISSET_ID = 4;
  private static final int __POSITIONPROFIT_ISSET_ID = 5;
  private static final int __CLOSEPROFIT_ISSET_ID = 6;
  private static final int __YDPOSITION_ISSET_ID = 7;
  private static final int __CLOSEHISTORYVOLUME_ISSET_ID = 8;
  private static final int __OPENVOLUME_ISSET_ID = 9;
  private static final int __CLOSETODAYVOLUME_ISSET_ID = 10;
  private static final int __USEMARGIN_ISSET_ID = 11;
  private static final int __FROZENMARGIN_ISSET_ID = 12;
  private static final int __COMMISSION_ISSET_ID = 13;
  private static final int __FROZENCOMMISSION_ISSET_ID = 14;
  private static final int __POSITIONCOST_ISSET_ID = 15;
  private static final int __HISTORYPOSITIONAVAILABLE_ISSET_ID = 16;
  private static final int __TODAYPOSITIONAVAILABLE_ISSET_ID = 17;
  private static final int __SLEDACCOUNTID_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.INSTRUMENT_ID,_Fields.POSITION_DATE_TYPE,_Fields.POSI_DIRECTION,_Fields.HISTORY_POSITION,_Fields.TODAY_POSITION,_Fields.AVERAGE_PRICE,_Fields.POSITION_PROFIT,_Fields.CLOSE_PROFIT,_Fields.YD_POSITION,_Fields.CLOSE_HISTORY_VOLUME,_Fields.OPEN_VOLUME,_Fields.CLOSE_TODAY_VOLUME,_Fields.USE_MARGIN,_Fields.FROZEN_MARGIN,_Fields.COMMISSION,_Fields.FROZEN_COMMISSION,_Fields.POSITION_COST,_Fields.HISTORY_POSITION_AVAILABLE,_Fields.TODAY_POSITION_AVAILABLE,_Fields.SLED_ACCOUNT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION_DATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("positionDateType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.POSI_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("posiDirection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.HISTORY_POSITION, new org.apache.thrift.meta_data.FieldMetaData("historyPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TODAY_POSITION, new org.apache.thrift.meta_data.FieldMetaData("todayPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVERAGE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("averagePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("positionProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("closeProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YD_POSITION, new org.apache.thrift.meta_data.FieldMetaData("ydPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLOSE_HISTORY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("closeHistoryVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("openVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLOSE_TODAY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("closeTodayVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("useMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("frozenMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("commission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("frozenCommission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_COST, new org.apache.thrift.meta_data.FieldMetaData("positionCost", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HISTORY_POSITION_AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("historyPositionAvailable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TODAY_POSITION_AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("todayPositionAvailable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CtpPosition.class, metaDataMap);
  }

  public CtpPosition() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CtpPosition(CtpPosition other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstrumentId()) {
      this.instrumentId = other.instrumentId;
    }
    this.positionDateType = other.positionDateType;
    this.posiDirection = other.posiDirection;
    this.historyPosition = other.historyPosition;
    this.todayPosition = other.todayPosition;
    this.averagePrice = other.averagePrice;
    this.positionProfit = other.positionProfit;
    this.closeProfit = other.closeProfit;
    this.ydPosition = other.ydPosition;
    this.closeHistoryVolume = other.closeHistoryVolume;
    this.openVolume = other.openVolume;
    this.closeTodayVolume = other.closeTodayVolume;
    this.useMargin = other.useMargin;
    this.frozenMargin = other.frozenMargin;
    this.commission = other.commission;
    this.frozenCommission = other.frozenCommission;
    this.positionCost = other.positionCost;
    this.historyPositionAvailable = other.historyPositionAvailable;
    this.todayPositionAvailable = other.todayPositionAvailable;
    this.sledAccountId = other.sledAccountId;
  }

  public CtpPosition deepCopy() {
    return new CtpPosition(this);
  }

  @Override
  public void clear() {
    this.instrumentId = null;
    setPositionDateTypeIsSet(false);
    this.positionDateType = 0;
    setPosiDirectionIsSet(false);
    this.posiDirection = 0;
    setHistoryPositionIsSet(false);
    this.historyPosition = 0;
    setTodayPositionIsSet(false);
    this.todayPosition = 0;
    setAveragePriceIsSet(false);
    this.averagePrice = 0.0;
    setPositionProfitIsSet(false);
    this.positionProfit = 0.0;
    setCloseProfitIsSet(false);
    this.closeProfit = 0.0;
    setYdPositionIsSet(false);
    this.ydPosition = 0;
    setCloseHistoryVolumeIsSet(false);
    this.closeHistoryVolume = 0;
    setOpenVolumeIsSet(false);
    this.openVolume = 0;
    setCloseTodayVolumeIsSet(false);
    this.closeTodayVolume = 0;
    setUseMarginIsSet(false);
    this.useMargin = 0.0;
    setFrozenMarginIsSet(false);
    this.frozenMargin = 0.0;
    setCommissionIsSet(false);
    this.commission = 0.0;
    setFrozenCommissionIsSet(false);
    this.frozenCommission = 0.0;
    setPositionCostIsSet(false);
    this.positionCost = 0.0;
    setHistoryPositionAvailableIsSet(false);
    this.historyPositionAvailable = 0;
    setTodayPositionAvailableIsSet(false);
    this.todayPositionAvailable = 0;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
  }

  public String getInstrumentId() {
    return this.instrumentId;
  }

  public CtpPosition setInstrumentId(String instrumentId) {
    this.instrumentId = instrumentId;
    return this;
  }

  public void unsetInstrumentId() {
    this.instrumentId = null;
  }

  /** Returns true if field instrumentId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentId() {
    return this.instrumentId != null;
  }

  public void setInstrumentIdIsSet(boolean value) {
    if (!value) {
      this.instrumentId = null;
    }
  }

  public byte getPositionDateType() {
    return this.positionDateType;
  }

  public CtpPosition setPositionDateType(byte positionDateType) {
    this.positionDateType = positionDateType;
    setPositionDateTypeIsSet(true);
    return this;
  }

  public void unsetPositionDateType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONDATETYPE_ISSET_ID);
  }

  /** Returns true if field positionDateType is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionDateType() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONDATETYPE_ISSET_ID);
  }

  public void setPositionDateTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONDATETYPE_ISSET_ID, value);
  }

  public byte getPosiDirection() {
    return this.posiDirection;
  }

  public CtpPosition setPosiDirection(byte posiDirection) {
    this.posiDirection = posiDirection;
    setPosiDirectionIsSet(true);
    return this;
  }

  public void unsetPosiDirection() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSIDIRECTION_ISSET_ID);
  }

  /** Returns true if field posiDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetPosiDirection() {
    return EncodingUtils.testBit(__isset_bitfield, __POSIDIRECTION_ISSET_ID);
  }

  public void setPosiDirectionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSIDIRECTION_ISSET_ID, value);
  }

  public int getHistoryPosition() {
    return this.historyPosition;
  }

  public CtpPosition setHistoryPosition(int historyPosition) {
    this.historyPosition = historyPosition;
    setHistoryPositionIsSet(true);
    return this;
  }

  public void unsetHistoryPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HISTORYPOSITION_ISSET_ID);
  }

  /** Returns true if field historyPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetHistoryPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __HISTORYPOSITION_ISSET_ID);
  }

  public void setHistoryPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HISTORYPOSITION_ISSET_ID, value);
  }

  public int getTodayPosition() {
    return this.todayPosition;
  }

  public CtpPosition setTodayPosition(int todayPosition) {
    this.todayPosition = todayPosition;
    setTodayPositionIsSet(true);
    return this;
  }

  public void unsetTodayPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TODAYPOSITION_ISSET_ID);
  }

  /** Returns true if field todayPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetTodayPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __TODAYPOSITION_ISSET_ID);
  }

  public void setTodayPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TODAYPOSITION_ISSET_ID, value);
  }

  public double getAveragePrice() {
    return this.averagePrice;
  }

  public CtpPosition setAveragePrice(double averagePrice) {
    this.averagePrice = averagePrice;
    setAveragePriceIsSet(true);
    return this;
  }

  public void unsetAveragePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGEPRICE_ISSET_ID);
  }

  /** Returns true if field averagePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetAveragePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __AVERAGEPRICE_ISSET_ID);
  }

  public void setAveragePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGEPRICE_ISSET_ID, value);
  }

  public double getPositionProfit() {
    return this.positionProfit;
  }

  public CtpPosition setPositionProfit(double positionProfit) {
    this.positionProfit = positionProfit;
    setPositionProfitIsSet(true);
    return this;
  }

  public void unsetPositionProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  /** Returns true if field positionProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  public void setPositionProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID, value);
  }

  public double getCloseProfit() {
    return this.closeProfit;
  }

  public CtpPosition setCloseProfit(double closeProfit) {
    this.closeProfit = closeProfit;
    setCloseProfitIsSet(true);
    return this;
  }

  public void unsetCloseProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  /** Returns true if field closeProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  public void setCloseProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID, value);
  }

  public int getYdPosition() {
    return this.ydPosition;
  }

  public CtpPosition setYdPosition(int ydPosition) {
    this.ydPosition = ydPosition;
    setYdPositionIsSet(true);
    return this;
  }

  public void unsetYdPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YDPOSITION_ISSET_ID);
  }

  /** Returns true if field ydPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetYdPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __YDPOSITION_ISSET_ID);
  }

  public void setYdPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YDPOSITION_ISSET_ID, value);
  }

  public int getCloseHistoryVolume() {
    return this.closeHistoryVolume;
  }

  public CtpPosition setCloseHistoryVolume(int closeHistoryVolume) {
    this.closeHistoryVolume = closeHistoryVolume;
    setCloseHistoryVolumeIsSet(true);
    return this;
  }

  public void unsetCloseHistoryVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEHISTORYVOLUME_ISSET_ID);
  }

  /** Returns true if field closeHistoryVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseHistoryVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEHISTORYVOLUME_ISSET_ID);
  }

  public void setCloseHistoryVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEHISTORYVOLUME_ISSET_ID, value);
  }

  public int getOpenVolume() {
    return this.openVolume;
  }

  public CtpPosition setOpenVolume(int openVolume) {
    this.openVolume = openVolume;
    setOpenVolumeIsSet(true);
    return this;
  }

  public void unsetOpenVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENVOLUME_ISSET_ID);
  }

  /** Returns true if field openVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENVOLUME_ISSET_ID);
  }

  public void setOpenVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENVOLUME_ISSET_ID, value);
  }

  public int getCloseTodayVolume() {
    return this.closeTodayVolume;
  }

  public CtpPosition setCloseTodayVolume(int closeTodayVolume) {
    this.closeTodayVolume = closeTodayVolume;
    setCloseTodayVolumeIsSet(true);
    return this;
  }

  public void unsetCloseTodayVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSETODAYVOLUME_ISSET_ID);
  }

  /** Returns true if field closeTodayVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseTodayVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSETODAYVOLUME_ISSET_ID);
  }

  public void setCloseTodayVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSETODAYVOLUME_ISSET_ID, value);
  }

  public double getUseMargin() {
    return this.useMargin;
  }

  public CtpPosition setUseMargin(double useMargin) {
    this.useMargin = useMargin;
    setUseMarginIsSet(true);
    return this;
  }

  public void unsetUseMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  /** Returns true if field useMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetUseMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  public void setUseMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEMARGIN_ISSET_ID, value);
  }

  public double getFrozenMargin() {
    return this.frozenMargin;
  }

  public CtpPosition setFrozenMargin(double frozenMargin) {
    this.frozenMargin = frozenMargin;
    setFrozenMarginIsSet(true);
    return this;
  }

  public void unsetFrozenMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  /** Returns true if field frozenMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  public void setFrozenMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID, value);
  }

  public double getCommission() {
    return this.commission;
  }

  public CtpPosition setCommission(double commission) {
    this.commission = commission;
    setCommissionIsSet(true);
    return this;
  }

  public void unsetCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  /** Returns true if field commission is set (has been assigned a value) and false otherwise */
  public boolean isSetCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  public void setCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMISSION_ISSET_ID, value);
  }

  public double getFrozenCommission() {
    return this.frozenCommission;
  }

  public CtpPosition setFrozenCommission(double frozenCommission) {
    this.frozenCommission = frozenCommission;
    setFrozenCommissionIsSet(true);
    return this;
  }

  public void unsetFrozenCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID);
  }

  /** Returns true if field frozenCommission is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID);
  }

  public void setFrozenCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID, value);
  }

  public double getPositionCost() {
    return this.positionCost;
  }

  public CtpPosition setPositionCost(double positionCost) {
    this.positionCost = positionCost;
    setPositionCostIsSet(true);
    return this;
  }

  public void unsetPositionCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONCOST_ISSET_ID);
  }

  /** Returns true if field positionCost is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionCost() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONCOST_ISSET_ID);
  }

  public void setPositionCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONCOST_ISSET_ID, value);
  }

  public int getHistoryPositionAvailable() {
    return this.historyPositionAvailable;
  }

  public CtpPosition setHistoryPositionAvailable(int historyPositionAvailable) {
    this.historyPositionAvailable = historyPositionAvailable;
    setHistoryPositionAvailableIsSet(true);
    return this;
  }

  public void unsetHistoryPositionAvailable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HISTORYPOSITIONAVAILABLE_ISSET_ID);
  }

  /** Returns true if field historyPositionAvailable is set (has been assigned a value) and false otherwise */
  public boolean isSetHistoryPositionAvailable() {
    return EncodingUtils.testBit(__isset_bitfield, __HISTORYPOSITIONAVAILABLE_ISSET_ID);
  }

  public void setHistoryPositionAvailableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HISTORYPOSITIONAVAILABLE_ISSET_ID, value);
  }

  public int getTodayPositionAvailable() {
    return this.todayPositionAvailable;
  }

  public CtpPosition setTodayPositionAvailable(int todayPositionAvailable) {
    this.todayPositionAvailable = todayPositionAvailable;
    setTodayPositionAvailableIsSet(true);
    return this;
  }

  public void unsetTodayPositionAvailable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TODAYPOSITIONAVAILABLE_ISSET_ID);
  }

  /** Returns true if field todayPositionAvailable is set (has been assigned a value) and false otherwise */
  public boolean isSetTodayPositionAvailable() {
    return EncodingUtils.testBit(__isset_bitfield, __TODAYPOSITIONAVAILABLE_ISSET_ID);
  }

  public void setTodayPositionAvailableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TODAYPOSITIONAVAILABLE_ISSET_ID, value);
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public CtpPosition setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentId();
      } else {
        setInstrumentId((String)value);
      }
      break;

    case POSITION_DATE_TYPE:
      if (value == null) {
        unsetPositionDateType();
      } else {
        setPositionDateType((Byte)value);
      }
      break;

    case POSI_DIRECTION:
      if (value == null) {
        unsetPosiDirection();
      } else {
        setPosiDirection((Byte)value);
      }
      break;

    case HISTORY_POSITION:
      if (value == null) {
        unsetHistoryPosition();
      } else {
        setHistoryPosition((Integer)value);
      }
      break;

    case TODAY_POSITION:
      if (value == null) {
        unsetTodayPosition();
      } else {
        setTodayPosition((Integer)value);
      }
      break;

    case AVERAGE_PRICE:
      if (value == null) {
        unsetAveragePrice();
      } else {
        setAveragePrice((Double)value);
      }
      break;

    case POSITION_PROFIT:
      if (value == null) {
        unsetPositionProfit();
      } else {
        setPositionProfit((Double)value);
      }
      break;

    case CLOSE_PROFIT:
      if (value == null) {
        unsetCloseProfit();
      } else {
        setCloseProfit((Double)value);
      }
      break;

    case YD_POSITION:
      if (value == null) {
        unsetYdPosition();
      } else {
        setYdPosition((Integer)value);
      }
      break;

    case CLOSE_HISTORY_VOLUME:
      if (value == null) {
        unsetCloseHistoryVolume();
      } else {
        setCloseHistoryVolume((Integer)value);
      }
      break;

    case OPEN_VOLUME:
      if (value == null) {
        unsetOpenVolume();
      } else {
        setOpenVolume((Integer)value);
      }
      break;

    case CLOSE_TODAY_VOLUME:
      if (value == null) {
        unsetCloseTodayVolume();
      } else {
        setCloseTodayVolume((Integer)value);
      }
      break;

    case USE_MARGIN:
      if (value == null) {
        unsetUseMargin();
      } else {
        setUseMargin((Double)value);
      }
      break;

    case FROZEN_MARGIN:
      if (value == null) {
        unsetFrozenMargin();
      } else {
        setFrozenMargin((Double)value);
      }
      break;

    case COMMISSION:
      if (value == null) {
        unsetCommission();
      } else {
        setCommission((Double)value);
      }
      break;

    case FROZEN_COMMISSION:
      if (value == null) {
        unsetFrozenCommission();
      } else {
        setFrozenCommission((Double)value);
      }
      break;

    case POSITION_COST:
      if (value == null) {
        unsetPositionCost();
      } else {
        setPositionCost((Double)value);
      }
      break;

    case HISTORY_POSITION_AVAILABLE:
      if (value == null) {
        unsetHistoryPositionAvailable();
      } else {
        setHistoryPositionAvailable((Integer)value);
      }
      break;

    case TODAY_POSITION_AVAILABLE:
      if (value == null) {
        unsetTodayPositionAvailable();
      } else {
        setTodayPositionAvailable((Integer)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTRUMENT_ID:
      return getInstrumentId();

    case POSITION_DATE_TYPE:
      return Byte.valueOf(getPositionDateType());

    case POSI_DIRECTION:
      return Byte.valueOf(getPosiDirection());

    case HISTORY_POSITION:
      return Integer.valueOf(getHistoryPosition());

    case TODAY_POSITION:
      return Integer.valueOf(getTodayPosition());

    case AVERAGE_PRICE:
      return Double.valueOf(getAveragePrice());

    case POSITION_PROFIT:
      return Double.valueOf(getPositionProfit());

    case CLOSE_PROFIT:
      return Double.valueOf(getCloseProfit());

    case YD_POSITION:
      return Integer.valueOf(getYdPosition());

    case CLOSE_HISTORY_VOLUME:
      return Integer.valueOf(getCloseHistoryVolume());

    case OPEN_VOLUME:
      return Integer.valueOf(getOpenVolume());

    case CLOSE_TODAY_VOLUME:
      return Integer.valueOf(getCloseTodayVolume());

    case USE_MARGIN:
      return Double.valueOf(getUseMargin());

    case FROZEN_MARGIN:
      return Double.valueOf(getFrozenMargin());

    case COMMISSION:
      return Double.valueOf(getCommission());

    case FROZEN_COMMISSION:
      return Double.valueOf(getFrozenCommission());

    case POSITION_COST:
      return Double.valueOf(getPositionCost());

    case HISTORY_POSITION_AVAILABLE:
      return Integer.valueOf(getHistoryPositionAvailable());

    case TODAY_POSITION_AVAILABLE:
      return Integer.valueOf(getTodayPositionAvailable());

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTRUMENT_ID:
      return isSetInstrumentId();
    case POSITION_DATE_TYPE:
      return isSetPositionDateType();
    case POSI_DIRECTION:
      return isSetPosiDirection();
    case HISTORY_POSITION:
      return isSetHistoryPosition();
    case TODAY_POSITION:
      return isSetTodayPosition();
    case AVERAGE_PRICE:
      return isSetAveragePrice();
    case POSITION_PROFIT:
      return isSetPositionProfit();
    case CLOSE_PROFIT:
      return isSetCloseProfit();
    case YD_POSITION:
      return isSetYdPosition();
    case CLOSE_HISTORY_VOLUME:
      return isSetCloseHistoryVolume();
    case OPEN_VOLUME:
      return isSetOpenVolume();
    case CLOSE_TODAY_VOLUME:
      return isSetCloseTodayVolume();
    case USE_MARGIN:
      return isSetUseMargin();
    case FROZEN_MARGIN:
      return isSetFrozenMargin();
    case COMMISSION:
      return isSetCommission();
    case FROZEN_COMMISSION:
      return isSetFrozenCommission();
    case POSITION_COST:
      return isSetPositionCost();
    case HISTORY_POSITION_AVAILABLE:
      return isSetHistoryPositionAvailable();
    case TODAY_POSITION_AVAILABLE:
      return isSetTodayPositionAvailable();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CtpPosition)
      return this.equals((CtpPosition)that);
    return false;
  }

  public boolean equals(CtpPosition that) {
    if (that == null)
      return false;

    boolean this_present_instrumentId = true && this.isSetInstrumentId();
    boolean that_present_instrumentId = true && that.isSetInstrumentId();
    if (this_present_instrumentId || that_present_instrumentId) {
      if (!(this_present_instrumentId && that_present_instrumentId))
        return false;
      if (!this.instrumentId.equals(that.instrumentId))
        return false;
    }

    boolean this_present_positionDateType = true && this.isSetPositionDateType();
    boolean that_present_positionDateType = true && that.isSetPositionDateType();
    if (this_present_positionDateType || that_present_positionDateType) {
      if (!(this_present_positionDateType && that_present_positionDateType))
        return false;
      if (this.positionDateType != that.positionDateType)
        return false;
    }

    boolean this_present_posiDirection = true && this.isSetPosiDirection();
    boolean that_present_posiDirection = true && that.isSetPosiDirection();
    if (this_present_posiDirection || that_present_posiDirection) {
      if (!(this_present_posiDirection && that_present_posiDirection))
        return false;
      if (this.posiDirection != that.posiDirection)
        return false;
    }

    boolean this_present_historyPosition = true && this.isSetHistoryPosition();
    boolean that_present_historyPosition = true && that.isSetHistoryPosition();
    if (this_present_historyPosition || that_present_historyPosition) {
      if (!(this_present_historyPosition && that_present_historyPosition))
        return false;
      if (this.historyPosition != that.historyPosition)
        return false;
    }

    boolean this_present_todayPosition = true && this.isSetTodayPosition();
    boolean that_present_todayPosition = true && that.isSetTodayPosition();
    if (this_present_todayPosition || that_present_todayPosition) {
      if (!(this_present_todayPosition && that_present_todayPosition))
        return false;
      if (this.todayPosition != that.todayPosition)
        return false;
    }

    boolean this_present_averagePrice = true && this.isSetAveragePrice();
    boolean that_present_averagePrice = true && that.isSetAveragePrice();
    if (this_present_averagePrice || that_present_averagePrice) {
      if (!(this_present_averagePrice && that_present_averagePrice))
        return false;
      if (this.averagePrice != that.averagePrice)
        return false;
    }

    boolean this_present_positionProfit = true && this.isSetPositionProfit();
    boolean that_present_positionProfit = true && that.isSetPositionProfit();
    if (this_present_positionProfit || that_present_positionProfit) {
      if (!(this_present_positionProfit && that_present_positionProfit))
        return false;
      if (this.positionProfit != that.positionProfit)
        return false;
    }

    boolean this_present_closeProfit = true && this.isSetCloseProfit();
    boolean that_present_closeProfit = true && that.isSetCloseProfit();
    if (this_present_closeProfit || that_present_closeProfit) {
      if (!(this_present_closeProfit && that_present_closeProfit))
        return false;
      if (this.closeProfit != that.closeProfit)
        return false;
    }

    boolean this_present_ydPosition = true && this.isSetYdPosition();
    boolean that_present_ydPosition = true && that.isSetYdPosition();
    if (this_present_ydPosition || that_present_ydPosition) {
      if (!(this_present_ydPosition && that_present_ydPosition))
        return false;
      if (this.ydPosition != that.ydPosition)
        return false;
    }

    boolean this_present_closeHistoryVolume = true && this.isSetCloseHistoryVolume();
    boolean that_present_closeHistoryVolume = true && that.isSetCloseHistoryVolume();
    if (this_present_closeHistoryVolume || that_present_closeHistoryVolume) {
      if (!(this_present_closeHistoryVolume && that_present_closeHistoryVolume))
        return false;
      if (this.closeHistoryVolume != that.closeHistoryVolume)
        return false;
    }

    boolean this_present_openVolume = true && this.isSetOpenVolume();
    boolean that_present_openVolume = true && that.isSetOpenVolume();
    if (this_present_openVolume || that_present_openVolume) {
      if (!(this_present_openVolume && that_present_openVolume))
        return false;
      if (this.openVolume != that.openVolume)
        return false;
    }

    boolean this_present_closeTodayVolume = true && this.isSetCloseTodayVolume();
    boolean that_present_closeTodayVolume = true && that.isSetCloseTodayVolume();
    if (this_present_closeTodayVolume || that_present_closeTodayVolume) {
      if (!(this_present_closeTodayVolume && that_present_closeTodayVolume))
        return false;
      if (this.closeTodayVolume != that.closeTodayVolume)
        return false;
    }

    boolean this_present_useMargin = true && this.isSetUseMargin();
    boolean that_present_useMargin = true && that.isSetUseMargin();
    if (this_present_useMargin || that_present_useMargin) {
      if (!(this_present_useMargin && that_present_useMargin))
        return false;
      if (this.useMargin != that.useMargin)
        return false;
    }

    boolean this_present_frozenMargin = true && this.isSetFrozenMargin();
    boolean that_present_frozenMargin = true && that.isSetFrozenMargin();
    if (this_present_frozenMargin || that_present_frozenMargin) {
      if (!(this_present_frozenMargin && that_present_frozenMargin))
        return false;
      if (this.frozenMargin != that.frozenMargin)
        return false;
    }

    boolean this_present_commission = true && this.isSetCommission();
    boolean that_present_commission = true && that.isSetCommission();
    if (this_present_commission || that_present_commission) {
      if (!(this_present_commission && that_present_commission))
        return false;
      if (this.commission != that.commission)
        return false;
    }

    boolean this_present_frozenCommission = true && this.isSetFrozenCommission();
    boolean that_present_frozenCommission = true && that.isSetFrozenCommission();
    if (this_present_frozenCommission || that_present_frozenCommission) {
      if (!(this_present_frozenCommission && that_present_frozenCommission))
        return false;
      if (this.frozenCommission != that.frozenCommission)
        return false;
    }

    boolean this_present_positionCost = true && this.isSetPositionCost();
    boolean that_present_positionCost = true && that.isSetPositionCost();
    if (this_present_positionCost || that_present_positionCost) {
      if (!(this_present_positionCost && that_present_positionCost))
        return false;
      if (this.positionCost != that.positionCost)
        return false;
    }

    boolean this_present_historyPositionAvailable = true && this.isSetHistoryPositionAvailable();
    boolean that_present_historyPositionAvailable = true && that.isSetHistoryPositionAvailable();
    if (this_present_historyPositionAvailable || that_present_historyPositionAvailable) {
      if (!(this_present_historyPositionAvailable && that_present_historyPositionAvailable))
        return false;
      if (this.historyPositionAvailable != that.historyPositionAvailable)
        return false;
    }

    boolean this_present_todayPositionAvailable = true && this.isSetTodayPositionAvailable();
    boolean that_present_todayPositionAvailable = true && that.isSetTodayPositionAvailable();
    if (this_present_todayPositionAvailable || that_present_todayPositionAvailable) {
      if (!(this_present_todayPositionAvailable && that_present_todayPositionAvailable))
        return false;
      if (this.todayPositionAvailable != that.todayPositionAvailable)
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CtpPosition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstrumentId()).compareTo(other.isSetInstrumentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentId, other.instrumentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionDateType()).compareTo(other.isSetPositionDateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionDateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionDateType, other.positionDateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosiDirection()).compareTo(other.isSetPosiDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosiDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posiDirection, other.posiDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHistoryPosition()).compareTo(other.isSetHistoryPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHistoryPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyPosition, other.historyPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTodayPosition()).compareTo(other.isSetTodayPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTodayPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todayPosition, other.todayPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAveragePrice()).compareTo(other.isSetAveragePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAveragePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averagePrice, other.averagePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionProfit()).compareTo(other.isSetPositionProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionProfit, other.positionProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfit()).compareTo(other.isSetCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfit, other.closeProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYdPosition()).compareTo(other.isSetYdPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYdPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ydPosition, other.ydPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseHistoryVolume()).compareTo(other.isSetCloseHistoryVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseHistoryVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeHistoryVolume, other.closeHistoryVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenVolume()).compareTo(other.isSetOpenVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openVolume, other.openVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseTodayVolume()).compareTo(other.isSetCloseTodayVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseTodayVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeTodayVolume, other.closeTodayVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseMargin()).compareTo(other.isSetUseMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useMargin, other.useMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenMargin()).compareTo(other.isSetFrozenMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenMargin, other.frozenMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommission()).compareTo(other.isSetCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commission, other.commission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenCommission()).compareTo(other.isSetFrozenCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenCommission, other.frozenCommission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionCost()).compareTo(other.isSetPositionCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionCost, other.positionCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHistoryPositionAvailable()).compareTo(other.isSetHistoryPositionAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHistoryPositionAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyPositionAvailable, other.historyPositionAvailable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTodayPositionAvailable()).compareTo(other.isSetTodayPositionAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTodayPositionAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todayPositionAvailable, other.todayPositionAvailable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CtpPosition(");
    boolean first = true;

    if (isSetInstrumentId()) {
      sb.append("instrumentId:");
      if (this.instrumentId == null) {
        sb.append("null");
      } else {
        sb.append(this.instrumentId);
      }
      first = false;
    }
    if (isSetPositionDateType()) {
      if (!first) sb.append(", ");
      sb.append("positionDateType:");
      sb.append(this.positionDateType);
      first = false;
    }
    if (isSetPosiDirection()) {
      if (!first) sb.append(", ");
      sb.append("posiDirection:");
      sb.append(this.posiDirection);
      first = false;
    }
    if (isSetHistoryPosition()) {
      if (!first) sb.append(", ");
      sb.append("historyPosition:");
      sb.append(this.historyPosition);
      first = false;
    }
    if (isSetTodayPosition()) {
      if (!first) sb.append(", ");
      sb.append("todayPosition:");
      sb.append(this.todayPosition);
      first = false;
    }
    if (isSetAveragePrice()) {
      if (!first) sb.append(", ");
      sb.append("averagePrice:");
      sb.append(this.averagePrice);
      first = false;
    }
    if (isSetPositionProfit()) {
      if (!first) sb.append(", ");
      sb.append("positionProfit:");
      sb.append(this.positionProfit);
      first = false;
    }
    if (isSetCloseProfit()) {
      if (!first) sb.append(", ");
      sb.append("closeProfit:");
      sb.append(this.closeProfit);
      first = false;
    }
    if (isSetYdPosition()) {
      if (!first) sb.append(", ");
      sb.append("ydPosition:");
      sb.append(this.ydPosition);
      first = false;
    }
    if (isSetCloseHistoryVolume()) {
      if (!first) sb.append(", ");
      sb.append("closeHistoryVolume:");
      sb.append(this.closeHistoryVolume);
      first = false;
    }
    if (isSetOpenVolume()) {
      if (!first) sb.append(", ");
      sb.append("openVolume:");
      sb.append(this.openVolume);
      first = false;
    }
    if (isSetCloseTodayVolume()) {
      if (!first) sb.append(", ");
      sb.append("closeTodayVolume:");
      sb.append(this.closeTodayVolume);
      first = false;
    }
    if (isSetUseMargin()) {
      if (!first) sb.append(", ");
      sb.append("useMargin:");
      sb.append(this.useMargin);
      first = false;
    }
    if (isSetFrozenMargin()) {
      if (!first) sb.append(", ");
      sb.append("frozenMargin:");
      sb.append(this.frozenMargin);
      first = false;
    }
    if (isSetCommission()) {
      if (!first) sb.append(", ");
      sb.append("commission:");
      sb.append(this.commission);
      first = false;
    }
    if (isSetFrozenCommission()) {
      if (!first) sb.append(", ");
      sb.append("frozenCommission:");
      sb.append(this.frozenCommission);
      first = false;
    }
    if (isSetPositionCost()) {
      if (!first) sb.append(", ");
      sb.append("positionCost:");
      sb.append(this.positionCost);
      first = false;
    }
    if (isSetHistoryPositionAvailable()) {
      if (!first) sb.append(", ");
      sb.append("historyPositionAvailable:");
      sb.append(this.historyPositionAvailable);
      first = false;
    }
    if (isSetTodayPositionAvailable()) {
      if (!first) sb.append(", ");
      sb.append("todayPositionAvailable:");
      sb.append(this.todayPositionAvailable);
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CtpPositionStandardSchemeFactory implements SchemeFactory {
    public CtpPositionStandardScheme getScheme() {
      return new CtpPositionStandardScheme();
    }
  }

  private static class CtpPositionStandardScheme extends StandardScheme<CtpPosition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CtpPosition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentId = iprot.readString();
              struct.setInstrumentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSITION_DATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.positionDateType = iprot.readByte();
              struct.setPositionDateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POSI_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.posiDirection = iprot.readByte();
              struct.setPosiDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HISTORY_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.historyPosition = iprot.readI32();
              struct.setHistoryPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TODAY_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.todayPosition = iprot.readI32();
              struct.setTodayPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AVERAGE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.averagePrice = iprot.readDouble();
              struct.setAveragePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POSITION_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionProfit = iprot.readDouble();
              struct.setPositionProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfit = iprot.readDouble();
              struct.setCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // YD_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ydPosition = iprot.readI32();
              struct.setYdPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CLOSE_HISTORY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.closeHistoryVolume = iprot.readI32();
              struct.setCloseHistoryVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OPEN_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.openVolume = iprot.readI32();
              struct.setOpenVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CLOSE_TODAY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.closeTodayVolume = iprot.readI32();
              struct.setCloseTodayVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.useMargin = iprot.readDouble();
              struct.setUseMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FROZEN_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenMargin = iprot.readDouble();
              struct.setFrozenMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.commission = iprot.readDouble();
              struct.setCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FROZEN_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenCommission = iprot.readDouble();
              struct.setFrozenCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // POSITION_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionCost = iprot.readDouble();
              struct.setPositionCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // HISTORY_POSITION_AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.historyPositionAvailable = iprot.readI32();
              struct.setHistoryPositionAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TODAY_POSITION_AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.todayPositionAvailable = iprot.readI32();
              struct.setTodayPositionAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CtpPosition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instrumentId != null) {
        if (struct.isSetInstrumentId()) {
          oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
          oprot.writeString(struct.instrumentId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPositionDateType()) {
        oprot.writeFieldBegin(POSITION_DATE_TYPE_FIELD_DESC);
        oprot.writeByte(struct.positionDateType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPosiDirection()) {
        oprot.writeFieldBegin(POSI_DIRECTION_FIELD_DESC);
        oprot.writeByte(struct.posiDirection);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHistoryPosition()) {
        oprot.writeFieldBegin(HISTORY_POSITION_FIELD_DESC);
        oprot.writeI32(struct.historyPosition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTodayPosition()) {
        oprot.writeFieldBegin(TODAY_POSITION_FIELD_DESC);
        oprot.writeI32(struct.todayPosition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAveragePrice()) {
        oprot.writeFieldBegin(AVERAGE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.averagePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeFieldBegin(POSITION_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.positionProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeFieldBegin(CLOSE_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.closeProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYdPosition()) {
        oprot.writeFieldBegin(YD_POSITION_FIELD_DESC);
        oprot.writeI32(struct.ydPosition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseHistoryVolume()) {
        oprot.writeFieldBegin(CLOSE_HISTORY_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.closeHistoryVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOpenVolume()) {
        oprot.writeFieldBegin(OPEN_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.openVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseTodayVolume()) {
        oprot.writeFieldBegin(CLOSE_TODAY_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.closeTodayVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUseMargin()) {
        oprot.writeFieldBegin(USE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.useMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeFieldBegin(FROZEN_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.frozenMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommission()) {
        oprot.writeFieldBegin(COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.commission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenCommission()) {
        oprot.writeFieldBegin(FROZEN_COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.frozenCommission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionCost()) {
        oprot.writeFieldBegin(POSITION_COST_FIELD_DESC);
        oprot.writeDouble(struct.positionCost);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHistoryPositionAvailable()) {
        oprot.writeFieldBegin(HISTORY_POSITION_AVAILABLE_FIELD_DESC);
        oprot.writeI32(struct.historyPositionAvailable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTodayPositionAvailable()) {
        oprot.writeFieldBegin(TODAY_POSITION_AVAILABLE_FIELD_DESC);
        oprot.writeI32(struct.todayPositionAvailable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CtpPositionTupleSchemeFactory implements SchemeFactory {
    public CtpPositionTupleScheme getScheme() {
      return new CtpPositionTupleScheme();
    }
  }

  private static class CtpPositionTupleScheme extends TupleScheme<CtpPosition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CtpPosition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstrumentId()) {
        optionals.set(0);
      }
      if (struct.isSetPositionDateType()) {
        optionals.set(1);
      }
      if (struct.isSetPosiDirection()) {
        optionals.set(2);
      }
      if (struct.isSetHistoryPosition()) {
        optionals.set(3);
      }
      if (struct.isSetTodayPosition()) {
        optionals.set(4);
      }
      if (struct.isSetAveragePrice()) {
        optionals.set(5);
      }
      if (struct.isSetPositionProfit()) {
        optionals.set(6);
      }
      if (struct.isSetCloseProfit()) {
        optionals.set(7);
      }
      if (struct.isSetYdPosition()) {
        optionals.set(8);
      }
      if (struct.isSetCloseHistoryVolume()) {
        optionals.set(9);
      }
      if (struct.isSetOpenVolume()) {
        optionals.set(10);
      }
      if (struct.isSetCloseTodayVolume()) {
        optionals.set(11);
      }
      if (struct.isSetUseMargin()) {
        optionals.set(12);
      }
      if (struct.isSetFrozenMargin()) {
        optionals.set(13);
      }
      if (struct.isSetCommission()) {
        optionals.set(14);
      }
      if (struct.isSetFrozenCommission()) {
        optionals.set(15);
      }
      if (struct.isSetPositionCost()) {
        optionals.set(16);
      }
      if (struct.isSetHistoryPositionAvailable()) {
        optionals.set(17);
      }
      if (struct.isSetTodayPositionAvailable()) {
        optionals.set(18);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetInstrumentId()) {
        oprot.writeString(struct.instrumentId);
      }
      if (struct.isSetPositionDateType()) {
        oprot.writeByte(struct.positionDateType);
      }
      if (struct.isSetPosiDirection()) {
        oprot.writeByte(struct.posiDirection);
      }
      if (struct.isSetHistoryPosition()) {
        oprot.writeI32(struct.historyPosition);
      }
      if (struct.isSetTodayPosition()) {
        oprot.writeI32(struct.todayPosition);
      }
      if (struct.isSetAveragePrice()) {
        oprot.writeDouble(struct.averagePrice);
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeDouble(struct.positionProfit);
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeDouble(struct.closeProfit);
      }
      if (struct.isSetYdPosition()) {
        oprot.writeI32(struct.ydPosition);
      }
      if (struct.isSetCloseHistoryVolume()) {
        oprot.writeI32(struct.closeHistoryVolume);
      }
      if (struct.isSetOpenVolume()) {
        oprot.writeI32(struct.openVolume);
      }
      if (struct.isSetCloseTodayVolume()) {
        oprot.writeI32(struct.closeTodayVolume);
      }
      if (struct.isSetUseMargin()) {
        oprot.writeDouble(struct.useMargin);
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeDouble(struct.frozenMargin);
      }
      if (struct.isSetCommission()) {
        oprot.writeDouble(struct.commission);
      }
      if (struct.isSetFrozenCommission()) {
        oprot.writeDouble(struct.frozenCommission);
      }
      if (struct.isSetPositionCost()) {
        oprot.writeDouble(struct.positionCost);
      }
      if (struct.isSetHistoryPositionAvailable()) {
        oprot.writeI32(struct.historyPositionAvailable);
      }
      if (struct.isSetTodayPositionAvailable()) {
        oprot.writeI32(struct.todayPositionAvailable);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CtpPosition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.instrumentId = iprot.readString();
        struct.setInstrumentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.positionDateType = iprot.readByte();
        struct.setPositionDateTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.posiDirection = iprot.readByte();
        struct.setPosiDirectionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.historyPosition = iprot.readI32();
        struct.setHistoryPositionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.todayPosition = iprot.readI32();
        struct.setTodayPositionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.averagePrice = iprot.readDouble();
        struct.setAveragePriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.positionProfit = iprot.readDouble();
        struct.setPositionProfitIsSet(true);
      }
      if (incoming.get(7)) {
        struct.closeProfit = iprot.readDouble();
        struct.setCloseProfitIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ydPosition = iprot.readI32();
        struct.setYdPositionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.closeHistoryVolume = iprot.readI32();
        struct.setCloseHistoryVolumeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.openVolume = iprot.readI32();
        struct.setOpenVolumeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.closeTodayVolume = iprot.readI32();
        struct.setCloseTodayVolumeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.useMargin = iprot.readDouble();
        struct.setUseMarginIsSet(true);
      }
      if (incoming.get(13)) {
        struct.frozenMargin = iprot.readDouble();
        struct.setFrozenMarginIsSet(true);
      }
      if (incoming.get(14)) {
        struct.commission = iprot.readDouble();
        struct.setCommissionIsSet(true);
      }
      if (incoming.get(15)) {
        struct.frozenCommission = iprot.readDouble();
        struct.setFrozenCommissionIsSet(true);
      }
      if (incoming.get(16)) {
        struct.positionCost = iprot.readDouble();
        struct.setPositionCostIsSet(true);
      }
      if (incoming.get(17)) {
        struct.historyPositionAvailable = iprot.readI32();
        struct.setHistoryPositionAvailableIsSet(true);
      }
      if (incoming.get(18)) {
        struct.todayPositionAvailable = iprot.readI32();
        struct.setTodayPositionAvailableIsSet(true);
      }
      if (incoming.get(19)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
    }
  }

}

