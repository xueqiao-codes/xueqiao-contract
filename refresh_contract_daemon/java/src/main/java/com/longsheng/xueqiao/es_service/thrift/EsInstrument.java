/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.es_service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EsInstrument implements org.apache.thrift.TBase<EsInstrument, EsInstrument._Fields>, java.io.Serializable, Cloneable, Comparable<EsInstrument> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EsInstrument");

  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMMODITY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTRACT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTRACT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("contractName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTRACT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CONTRACT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractState", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EXPIRY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("expiryDate", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_TRADE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastTradeDate", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField FIRST_NOTICE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("firstNoticeDate", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EsInstrumentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EsInstrumentTupleSchemeFactory());
  }

  public String instrumentId; // optional
  public String commodityNo; // optional
  public String contractNo; // optional
  public String contractName; // optional
  /**
   * 
   * @see EsContractType
   */
  public EsContractType contractType; // optional
  /**
   * 
   * @see EsContractState
   */
  public EsContractState contractState; // optional
  public long expiryDate; // optional
  public long lastTradeDate; // optional
  public long firstNoticeDate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTRUMENT_ID((short)1, "instrumentId"),
    COMMODITY_NO((short)2, "commodityNo"),
    CONTRACT_NO((short)3, "contractNo"),
    CONTRACT_NAME((short)4, "contractName"),
    /**
     * 
     * @see EsContractType
     */
    CONTRACT_TYPE((short)5, "contractType"),
    /**
     * 
     * @see EsContractState
     */
    CONTRACT_STATE((short)6, "contractState"),
    EXPIRY_DATE((short)7, "expiryDate"),
    LAST_TRADE_DATE((short)8, "lastTradeDate"),
    FIRST_NOTICE_DATE((short)9, "firstNoticeDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 2: // COMMODITY_NO
          return COMMODITY_NO;
        case 3: // CONTRACT_NO
          return CONTRACT_NO;
        case 4: // CONTRACT_NAME
          return CONTRACT_NAME;
        case 5: // CONTRACT_TYPE
          return CONTRACT_TYPE;
        case 6: // CONTRACT_STATE
          return CONTRACT_STATE;
        case 7: // EXPIRY_DATE
          return EXPIRY_DATE;
        case 8: // LAST_TRADE_DATE
          return LAST_TRADE_DATE;
        case 9: // FIRST_NOTICE_DATE
          return FIRST_NOTICE_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPIRYDATE_ISSET_ID = 0;
  private static final int __LASTTRADEDATE_ISSET_ID = 1;
  private static final int __FIRSTNOTICEDATE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.INSTRUMENT_ID,_Fields.COMMODITY_NO,_Fields.CONTRACT_NO,_Fields.CONTRACT_NAME,_Fields.CONTRACT_TYPE,_Fields.CONTRACT_STATE,_Fields.EXPIRY_DATE,_Fields.LAST_TRADE_DATE,_Fields.FIRST_NOTICE_DATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_NO, new org.apache.thrift.meta_data.FieldMetaData("commodityNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_NO, new org.apache.thrift.meta_data.FieldMetaData("contractNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_NAME, new org.apache.thrift.meta_data.FieldMetaData("contractName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contractType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsContractType.class)));
    tmpMap.put(_Fields.CONTRACT_STATE, new org.apache.thrift.meta_data.FieldMetaData("contractState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsContractState.class)));
    tmpMap.put(_Fields.EXPIRY_DATE, new org.apache.thrift.meta_data.FieldMetaData("expiryDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_TRADE_DATE, new org.apache.thrift.meta_data.FieldMetaData("lastTradeDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FIRST_NOTICE_DATE, new org.apache.thrift.meta_data.FieldMetaData("firstNoticeDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EsInstrument.class, metaDataMap);
  }

  public EsInstrument() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EsInstrument(EsInstrument other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstrumentId()) {
      this.instrumentId = other.instrumentId;
    }
    if (other.isSetCommodityNo()) {
      this.commodityNo = other.commodityNo;
    }
    if (other.isSetContractNo()) {
      this.contractNo = other.contractNo;
    }
    if (other.isSetContractName()) {
      this.contractName = other.contractName;
    }
    if (other.isSetContractType()) {
      this.contractType = other.contractType;
    }
    if (other.isSetContractState()) {
      this.contractState = other.contractState;
    }
    this.expiryDate = other.expiryDate;
    this.lastTradeDate = other.lastTradeDate;
    this.firstNoticeDate = other.firstNoticeDate;
  }

  public EsInstrument deepCopy() {
    return new EsInstrument(this);
  }

  @Override
  public void clear() {
    this.instrumentId = null;
    this.commodityNo = null;
    this.contractNo = null;
    this.contractName = null;
    this.contractType = null;
    this.contractState = null;
    setExpiryDateIsSet(false);
    this.expiryDate = 0;
    setLastTradeDateIsSet(false);
    this.lastTradeDate = 0;
    setFirstNoticeDateIsSet(false);
    this.firstNoticeDate = 0;
  }

  public String getInstrumentId() {
    return this.instrumentId;
  }

  public EsInstrument setInstrumentId(String instrumentId) {
    this.instrumentId = instrumentId;
    return this;
  }

  public void unsetInstrumentId() {
    this.instrumentId = null;
  }

  /** Returns true if field instrumentId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentId() {
    return this.instrumentId != null;
  }

  public void setInstrumentIdIsSet(boolean value) {
    if (!value) {
      this.instrumentId = null;
    }
  }

  public String getCommodityNo() {
    return this.commodityNo;
  }

  public EsInstrument setCommodityNo(String commodityNo) {
    this.commodityNo = commodityNo;
    return this;
  }

  public void unsetCommodityNo() {
    this.commodityNo = null;
  }

  /** Returns true if field commodityNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityNo() {
    return this.commodityNo != null;
  }

  public void setCommodityNoIsSet(boolean value) {
    if (!value) {
      this.commodityNo = null;
    }
  }

  public String getContractNo() {
    return this.contractNo;
  }

  public EsInstrument setContractNo(String contractNo) {
    this.contractNo = contractNo;
    return this;
  }

  public void unsetContractNo() {
    this.contractNo = null;
  }

  /** Returns true if field contractNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContractNo() {
    return this.contractNo != null;
  }

  public void setContractNoIsSet(boolean value) {
    if (!value) {
      this.contractNo = null;
    }
  }

  public String getContractName() {
    return this.contractName;
  }

  public EsInstrument setContractName(String contractName) {
    this.contractName = contractName;
    return this;
  }

  public void unsetContractName() {
    this.contractName = null;
  }

  /** Returns true if field contractName is set (has been assigned a value) and false otherwise */
  public boolean isSetContractName() {
    return this.contractName != null;
  }

  public void setContractNameIsSet(boolean value) {
    if (!value) {
      this.contractName = null;
    }
  }

  /**
   * 
   * @see EsContractType
   */
  public EsContractType getContractType() {
    return this.contractType;
  }

  /**
   * 
   * @see EsContractType
   */
  public EsInstrument setContractType(EsContractType contractType) {
    this.contractType = contractType;
    return this;
  }

  public void unsetContractType() {
    this.contractType = null;
  }

  /** Returns true if field contractType is set (has been assigned a value) and false otherwise */
  public boolean isSetContractType() {
    return this.contractType != null;
  }

  public void setContractTypeIsSet(boolean value) {
    if (!value) {
      this.contractType = null;
    }
  }

  /**
   * 
   * @see EsContractState
   */
  public EsContractState getContractState() {
    return this.contractState;
  }

  /**
   * 
   * @see EsContractState
   */
  public EsInstrument setContractState(EsContractState contractState) {
    this.contractState = contractState;
    return this;
  }

  public void unsetContractState() {
    this.contractState = null;
  }

  /** Returns true if field contractState is set (has been assigned a value) and false otherwise */
  public boolean isSetContractState() {
    return this.contractState != null;
  }

  public void setContractStateIsSet(boolean value) {
    if (!value) {
      this.contractState = null;
    }
  }

  public long getExpiryDate() {
    return this.expiryDate;
  }

  public EsInstrument setExpiryDate(long expiryDate) {
    this.expiryDate = expiryDate;
    setExpiryDateIsSet(true);
    return this;
  }

  public void unsetExpiryDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRYDATE_ISSET_ID);
  }

  /** Returns true if field expiryDate is set (has been assigned a value) and false otherwise */
  public boolean isSetExpiryDate() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRYDATE_ISSET_ID);
  }

  public void setExpiryDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRYDATE_ISSET_ID, value);
  }

  public long getLastTradeDate() {
    return this.lastTradeDate;
  }

  public EsInstrument setLastTradeDate(long lastTradeDate) {
    this.lastTradeDate = lastTradeDate;
    setLastTradeDateIsSet(true);
    return this;
  }

  public void unsetLastTradeDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTTRADEDATE_ISSET_ID);
  }

  /** Returns true if field lastTradeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastTradeDate() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTTRADEDATE_ISSET_ID);
  }

  public void setLastTradeDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTTRADEDATE_ISSET_ID, value);
  }

  public long getFirstNoticeDate() {
    return this.firstNoticeDate;
  }

  public EsInstrument setFirstNoticeDate(long firstNoticeDate) {
    this.firstNoticeDate = firstNoticeDate;
    setFirstNoticeDateIsSet(true);
    return this;
  }

  public void unsetFirstNoticeDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTNOTICEDATE_ISSET_ID);
  }

  /** Returns true if field firstNoticeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstNoticeDate() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTNOTICEDATE_ISSET_ID);
  }

  public void setFirstNoticeDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTNOTICEDATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentId();
      } else {
        setInstrumentId((String)value);
      }
      break;

    case COMMODITY_NO:
      if (value == null) {
        unsetCommodityNo();
      } else {
        setCommodityNo((String)value);
      }
      break;

    case CONTRACT_NO:
      if (value == null) {
        unsetContractNo();
      } else {
        setContractNo((String)value);
      }
      break;

    case CONTRACT_NAME:
      if (value == null) {
        unsetContractName();
      } else {
        setContractName((String)value);
      }
      break;

    case CONTRACT_TYPE:
      if (value == null) {
        unsetContractType();
      } else {
        setContractType((EsContractType)value);
      }
      break;

    case CONTRACT_STATE:
      if (value == null) {
        unsetContractState();
      } else {
        setContractState((EsContractState)value);
      }
      break;

    case EXPIRY_DATE:
      if (value == null) {
        unsetExpiryDate();
      } else {
        setExpiryDate((Long)value);
      }
      break;

    case LAST_TRADE_DATE:
      if (value == null) {
        unsetLastTradeDate();
      } else {
        setLastTradeDate((Long)value);
      }
      break;

    case FIRST_NOTICE_DATE:
      if (value == null) {
        unsetFirstNoticeDate();
      } else {
        setFirstNoticeDate((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTRUMENT_ID:
      return getInstrumentId();

    case COMMODITY_NO:
      return getCommodityNo();

    case CONTRACT_NO:
      return getContractNo();

    case CONTRACT_NAME:
      return getContractName();

    case CONTRACT_TYPE:
      return getContractType();

    case CONTRACT_STATE:
      return getContractState();

    case EXPIRY_DATE:
      return Long.valueOf(getExpiryDate());

    case LAST_TRADE_DATE:
      return Long.valueOf(getLastTradeDate());

    case FIRST_NOTICE_DATE:
      return Long.valueOf(getFirstNoticeDate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTRUMENT_ID:
      return isSetInstrumentId();
    case COMMODITY_NO:
      return isSetCommodityNo();
    case CONTRACT_NO:
      return isSetContractNo();
    case CONTRACT_NAME:
      return isSetContractName();
    case CONTRACT_TYPE:
      return isSetContractType();
    case CONTRACT_STATE:
      return isSetContractState();
    case EXPIRY_DATE:
      return isSetExpiryDate();
    case LAST_TRADE_DATE:
      return isSetLastTradeDate();
    case FIRST_NOTICE_DATE:
      return isSetFirstNoticeDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EsInstrument)
      return this.equals((EsInstrument)that);
    return false;
  }

  public boolean equals(EsInstrument that) {
    if (that == null)
      return false;

    boolean this_present_instrumentId = true && this.isSetInstrumentId();
    boolean that_present_instrumentId = true && that.isSetInstrumentId();
    if (this_present_instrumentId || that_present_instrumentId) {
      if (!(this_present_instrumentId && that_present_instrumentId))
        return false;
      if (!this.instrumentId.equals(that.instrumentId))
        return false;
    }

    boolean this_present_commodityNo = true && this.isSetCommodityNo();
    boolean that_present_commodityNo = true && that.isSetCommodityNo();
    if (this_present_commodityNo || that_present_commodityNo) {
      if (!(this_present_commodityNo && that_present_commodityNo))
        return false;
      if (!this.commodityNo.equals(that.commodityNo))
        return false;
    }

    boolean this_present_contractNo = true && this.isSetContractNo();
    boolean that_present_contractNo = true && that.isSetContractNo();
    if (this_present_contractNo || that_present_contractNo) {
      if (!(this_present_contractNo && that_present_contractNo))
        return false;
      if (!this.contractNo.equals(that.contractNo))
        return false;
    }

    boolean this_present_contractName = true && this.isSetContractName();
    boolean that_present_contractName = true && that.isSetContractName();
    if (this_present_contractName || that_present_contractName) {
      if (!(this_present_contractName && that_present_contractName))
        return false;
      if (!this.contractName.equals(that.contractName))
        return false;
    }

    boolean this_present_contractType = true && this.isSetContractType();
    boolean that_present_contractType = true && that.isSetContractType();
    if (this_present_contractType || that_present_contractType) {
      if (!(this_present_contractType && that_present_contractType))
        return false;
      if (!this.contractType.equals(that.contractType))
        return false;
    }

    boolean this_present_contractState = true && this.isSetContractState();
    boolean that_present_contractState = true && that.isSetContractState();
    if (this_present_contractState || that_present_contractState) {
      if (!(this_present_contractState && that_present_contractState))
        return false;
      if (!this.contractState.equals(that.contractState))
        return false;
    }

    boolean this_present_expiryDate = true && this.isSetExpiryDate();
    boolean that_present_expiryDate = true && that.isSetExpiryDate();
    if (this_present_expiryDate || that_present_expiryDate) {
      if (!(this_present_expiryDate && that_present_expiryDate))
        return false;
      if (this.expiryDate != that.expiryDate)
        return false;
    }

    boolean this_present_lastTradeDate = true && this.isSetLastTradeDate();
    boolean that_present_lastTradeDate = true && that.isSetLastTradeDate();
    if (this_present_lastTradeDate || that_present_lastTradeDate) {
      if (!(this_present_lastTradeDate && that_present_lastTradeDate))
        return false;
      if (this.lastTradeDate != that.lastTradeDate)
        return false;
    }

    boolean this_present_firstNoticeDate = true && this.isSetFirstNoticeDate();
    boolean that_present_firstNoticeDate = true && that.isSetFirstNoticeDate();
    if (this_present_firstNoticeDate || that_present_firstNoticeDate) {
      if (!(this_present_firstNoticeDate && that_present_firstNoticeDate))
        return false;
      if (this.firstNoticeDate != that.firstNoticeDate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EsInstrument other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstrumentId()).compareTo(other.isSetInstrumentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentId, other.instrumentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityNo()).compareTo(other.isSetCommodityNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityNo, other.commodityNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractNo()).compareTo(other.isSetContractNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractNo, other.contractNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractName()).compareTo(other.isSetContractName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractName, other.contractName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractType()).compareTo(other.isSetContractType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractType, other.contractType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractState()).compareTo(other.isSetContractState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractState, other.contractState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpiryDate()).compareTo(other.isSetExpiryDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpiryDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expiryDate, other.expiryDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastTradeDate()).compareTo(other.isSetLastTradeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastTradeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastTradeDate, other.lastTradeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstNoticeDate()).compareTo(other.isSetFirstNoticeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstNoticeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstNoticeDate, other.firstNoticeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EsInstrument(");
    boolean first = true;

    if (isSetInstrumentId()) {
      sb.append("instrumentId:");
      if (this.instrumentId == null) {
        sb.append("null");
      } else {
        sb.append(this.instrumentId);
      }
      first = false;
    }
    if (isSetCommodityNo()) {
      if (!first) sb.append(", ");
      sb.append("commodityNo:");
      if (this.commodityNo == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityNo);
      }
      first = false;
    }
    if (isSetContractNo()) {
      if (!first) sb.append(", ");
      sb.append("contractNo:");
      if (this.contractNo == null) {
        sb.append("null");
      } else {
        sb.append(this.contractNo);
      }
      first = false;
    }
    if (isSetContractName()) {
      if (!first) sb.append(", ");
      sb.append("contractName:");
      if (this.contractName == null) {
        sb.append("null");
      } else {
        sb.append(this.contractName);
      }
      first = false;
    }
    if (isSetContractType()) {
      if (!first) sb.append(", ");
      sb.append("contractType:");
      if (this.contractType == null) {
        sb.append("null");
      } else {
        sb.append(this.contractType);
      }
      first = false;
    }
    if (isSetContractState()) {
      if (!first) sb.append(", ");
      sb.append("contractState:");
      if (this.contractState == null) {
        sb.append("null");
      } else {
        sb.append(this.contractState);
      }
      first = false;
    }
    if (isSetExpiryDate()) {
      if (!first) sb.append(", ");
      sb.append("expiryDate:");
      sb.append(this.expiryDate);
      first = false;
    }
    if (isSetLastTradeDate()) {
      if (!first) sb.append(", ");
      sb.append("lastTradeDate:");
      sb.append(this.lastTradeDate);
      first = false;
    }
    if (isSetFirstNoticeDate()) {
      if (!first) sb.append(", ");
      sb.append("firstNoticeDate:");
      sb.append(this.firstNoticeDate);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EsInstrumentStandardSchemeFactory implements SchemeFactory {
    public EsInstrumentStandardScheme getScheme() {
      return new EsInstrumentStandardScheme();
    }
  }

  private static class EsInstrumentStandardScheme extends StandardScheme<EsInstrument> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EsInstrument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentId = iprot.readString();
              struct.setInstrumentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMMODITY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityNo = iprot.readString();
              struct.setCommodityNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTRACT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractNo = iprot.readString();
              struct.setContractNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTRACT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractName = iprot.readString();
              struct.setContractNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTRACT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractType = EsContractType.findByValue(iprot.readI32());
              struct.setContractTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTRACT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractState = EsContractState.findByValue(iprot.readI32());
              struct.setContractStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXPIRY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expiryDate = iprot.readI64();
              struct.setExpiryDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_TRADE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastTradeDate = iprot.readI64();
              struct.setLastTradeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FIRST_NOTICE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.firstNoticeDate = iprot.readI64();
              struct.setFirstNoticeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EsInstrument struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instrumentId != null) {
        if (struct.isSetInstrumentId()) {
          oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
          oprot.writeString(struct.instrumentId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityNo != null) {
        if (struct.isSetCommodityNo()) {
          oprot.writeFieldBegin(COMMODITY_NO_FIELD_DESC);
          oprot.writeString(struct.commodityNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractNo != null) {
        if (struct.isSetContractNo()) {
          oprot.writeFieldBegin(CONTRACT_NO_FIELD_DESC);
          oprot.writeString(struct.contractNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractName != null) {
        if (struct.isSetContractName()) {
          oprot.writeFieldBegin(CONTRACT_NAME_FIELD_DESC);
          oprot.writeString(struct.contractName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractType != null) {
        if (struct.isSetContractType()) {
          oprot.writeFieldBegin(CONTRACT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.contractType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractState != null) {
        if (struct.isSetContractState()) {
          oprot.writeFieldBegin(CONTRACT_STATE_FIELD_DESC);
          oprot.writeI32(struct.contractState.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExpiryDate()) {
        oprot.writeFieldBegin(EXPIRY_DATE_FIELD_DESC);
        oprot.writeI64(struct.expiryDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastTradeDate()) {
        oprot.writeFieldBegin(LAST_TRADE_DATE_FIELD_DESC);
        oprot.writeI64(struct.lastTradeDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFirstNoticeDate()) {
        oprot.writeFieldBegin(FIRST_NOTICE_DATE_FIELD_DESC);
        oprot.writeI64(struct.firstNoticeDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EsInstrumentTupleSchemeFactory implements SchemeFactory {
    public EsInstrumentTupleScheme getScheme() {
      return new EsInstrumentTupleScheme();
    }
  }

  private static class EsInstrumentTupleScheme extends TupleScheme<EsInstrument> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EsInstrument struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstrumentId()) {
        optionals.set(0);
      }
      if (struct.isSetCommodityNo()) {
        optionals.set(1);
      }
      if (struct.isSetContractNo()) {
        optionals.set(2);
      }
      if (struct.isSetContractName()) {
        optionals.set(3);
      }
      if (struct.isSetContractType()) {
        optionals.set(4);
      }
      if (struct.isSetContractState()) {
        optionals.set(5);
      }
      if (struct.isSetExpiryDate()) {
        optionals.set(6);
      }
      if (struct.isSetLastTradeDate()) {
        optionals.set(7);
      }
      if (struct.isSetFirstNoticeDate()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetInstrumentId()) {
        oprot.writeString(struct.instrumentId);
      }
      if (struct.isSetCommodityNo()) {
        oprot.writeString(struct.commodityNo);
      }
      if (struct.isSetContractNo()) {
        oprot.writeString(struct.contractNo);
      }
      if (struct.isSetContractName()) {
        oprot.writeString(struct.contractName);
      }
      if (struct.isSetContractType()) {
        oprot.writeI32(struct.contractType.getValue());
      }
      if (struct.isSetContractState()) {
        oprot.writeI32(struct.contractState.getValue());
      }
      if (struct.isSetExpiryDate()) {
        oprot.writeI64(struct.expiryDate);
      }
      if (struct.isSetLastTradeDate()) {
        oprot.writeI64(struct.lastTradeDate);
      }
      if (struct.isSetFirstNoticeDate()) {
        oprot.writeI64(struct.firstNoticeDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EsInstrument struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.instrumentId = iprot.readString();
        struct.setInstrumentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.commodityNo = iprot.readString();
        struct.setCommodityNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contractNo = iprot.readString();
        struct.setContractNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.contractName = iprot.readString();
        struct.setContractNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.contractType = EsContractType.findByValue(iprot.readI32());
        struct.setContractTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.contractState = EsContractState.findByValue(iprot.readI32());
        struct.setContractStateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.expiryDate = iprot.readI64();
        struct.setExpiryDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lastTradeDate = iprot.readI64();
        struct.setLastTradeDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.firstNoticeDate = iprot.readI64();
        struct.setFirstNoticeDateIsSet(true);
      }
    }
  }

}

