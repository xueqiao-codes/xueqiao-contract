/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.ctp_service.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CtpOrderField implements org.apache.thrift.TBase<CtpOrderField, CtpOrderField._Fields>, java.io.Serializable, Cloneable, Comparable<CtpOrderField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CtpOrderField");

  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("orderRef", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORDER_PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderPriceType", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField COMB_OFFSET_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("combOffsetFlag", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMB_HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("combHedgeFlag", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("limitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField VOLUME_TOTAL_ORIGINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeTotalOriginal", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TIME_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("timeCondition", org.apache.thrift.protocol.TType.BYTE, (short)9);
  private static final org.apache.thrift.protocol.TField GTDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("GTDDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField VOLUME_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeCondition", org.apache.thrift.protocol.TType.BYTE, (short)11);
  private static final org.apache.thrift.protocol.TField MIN_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("minVolume", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CONTINGENT_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("contingentCondition", org.apache.thrift.protocol.TType.BYTE, (short)13);
  private static final org.apache.thrift.protocol.TField STOP_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("stopPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField FORCE_CLOSE_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("forceCloseReason", org.apache.thrift.protocol.TType.BYTE, (short)15);
  private static final org.apache.thrift.protocol.TField IS_AUTO_SUSPEND_FIELD_DESC = new org.apache.thrift.protocol.TField("isAutoSuspend", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField BUSINESS_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("businessUnit", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField ORDER_LOCAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderLocalID", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField PARTICIPANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("participantID", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientID", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField EXCHANGE_INST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeInstID", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField TRADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traderID", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField INSTALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("installID", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField ORDER_SUBMIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderSubmitStatus", org.apache.thrift.protocol.TType.BYTE, (short)26);
  private static final org.apache.thrift.protocol.TField NOTIFY_SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("notifySequence", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementID", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField ORDER_SYS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderSysID", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField ORDER_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderSource", org.apache.thrift.protocol.TType.BYTE, (short)31);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.BYTE, (short)32);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.BYTE, (short)33);
  private static final org.apache.thrift.protocol.TField VOLUME_TRADED_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeTraded", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField VOLUME_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeTotal", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField INSERT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("insertDate", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField INSERT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("insertTime", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField ACTIVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("activeTime", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField SUSPEND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("suspendTime", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField CANCEL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelTime", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField ACTIVE_TRADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeTraderID", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField CLEARING_PART_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clearingPartID", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField SEQUENCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("sequenceNo", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField FRONT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("frontID", org.apache.thrift.protocol.TType.I32, (short)45);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.I32, (short)46);
  private static final org.apache.thrift.protocol.TField USER_PRODUCT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userProductInfo", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField STATUS_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("statusMsg", org.apache.thrift.protocol.TType.STRING, (short)48);
  private static final org.apache.thrift.protocol.TField USER_FORCE_CLOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("userForceClose", org.apache.thrift.protocol.TType.BOOL, (short)49);
  private static final org.apache.thrift.protocol.TField ACTIVE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeUserID", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField BROKER_ORDER_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerOrderSeq", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField RELATIVE_ORDER_SYS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("relativeOrderSysID", org.apache.thrift.protocol.TType.STRING, (short)52);
  private static final org.apache.thrift.protocol.TField ZCETOTAL_TRADED_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("ZCETotalTradedVolume", org.apache.thrift.protocol.TType.I32, (short)53);
  private static final org.apache.thrift.protocol.TField IS_SWAP_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isSwapOrder", org.apache.thrift.protocol.TType.BOOL, (short)54);
  private static final org.apache.thrift.protocol.TField SLED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledId", org.apache.thrift.protocol.TType.STRING, (short)55);
  private static final org.apache.thrift.protocol.TField INSERT_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("insertDateTime", org.apache.thrift.protocol.TType.I64, (short)56);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDateTime", org.apache.thrift.protocol.TType.I64, (short)57);
  private static final org.apache.thrift.protocol.TField CANCEL_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelDateTime", org.apache.thrift.protocol.TType.I64, (short)58);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)59);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)60);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CtpOrderFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CtpOrderFieldTupleSchemeFactory());
  }

  public String instrumentID; // optional
  public String orderRef; // optional
  public byte orderPriceType; // optional
  public byte direction; // optional
  public String combOffsetFlag; // optional
  public String combHedgeFlag; // optional
  public double limitPrice; // optional
  public int volumeTotalOriginal; // optional
  public byte timeCondition; // optional
  public String GTDDate; // optional
  public byte volumeCondition; // optional
  public int minVolume; // optional
  public byte contingentCondition; // optional
  public double stopPrice; // optional
  public byte forceCloseReason; // optional
  public boolean isAutoSuspend; // optional
  public String businessUnit; // optional
  public int requestID; // optional
  public String orderLocalID; // optional
  public String exchangeID; // optional
  public String participantID; // optional
  public String clientID; // optional
  public String exchangeInstID; // optional
  public String traderID; // optional
  public int installID; // optional
  public byte orderSubmitStatus; // optional
  public int notifySequence; // optional
  public String tradingDay; // optional
  public int settlementID; // optional
  public String orderSysID; // optional
  public byte orderSource; // optional
  public byte orderStatus; // optional
  public byte orderType; // optional
  public int volumeTraded; // optional
  public int volumeTotal; // optional
  public String insertDate; // optional
  public String insertTime; // optional
  public String activeTime; // optional
  public String suspendTime; // optional
  public String updateTime; // optional
  public String cancelTime; // optional
  public String activeTraderID; // optional
  public String clearingPartID; // optional
  public int sequenceNo; // optional
  public int frontID; // optional
  public int sessionID; // optional
  public String userProductInfo; // optional
  public String statusMsg; // optional
  public boolean userForceClose; // optional
  public String activeUserID; // optional
  public int brokerOrderSeq; // optional
  public String relativeOrderSysID; // optional
  public int ZCETotalTradedVolume; // optional
  public boolean isSwapOrder; // optional
  public String sledId; // required
  public long insertDateTime; // optional
  public long updateDateTime; // optional
  public long cancelDateTime; // optional
  public int sledAccountId; // optional
  public int userId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTRUMENT_ID((short)1, "instrumentID"),
    ORDER_REF((short)2, "orderRef"),
    ORDER_PRICE_TYPE((short)3, "orderPriceType"),
    DIRECTION((short)4, "direction"),
    COMB_OFFSET_FLAG((short)5, "combOffsetFlag"),
    COMB_HEDGE_FLAG((short)6, "combHedgeFlag"),
    LIMIT_PRICE((short)7, "limitPrice"),
    VOLUME_TOTAL_ORIGINAL((short)8, "volumeTotalOriginal"),
    TIME_CONDITION((short)9, "timeCondition"),
    GTDDATE((short)10, "GTDDate"),
    VOLUME_CONDITION((short)11, "volumeCondition"),
    MIN_VOLUME((short)12, "minVolume"),
    CONTINGENT_CONDITION((short)13, "contingentCondition"),
    STOP_PRICE((short)14, "stopPrice"),
    FORCE_CLOSE_REASON((short)15, "forceCloseReason"),
    IS_AUTO_SUSPEND((short)16, "isAutoSuspend"),
    BUSINESS_UNIT((short)17, "businessUnit"),
    REQUEST_ID((short)18, "requestID"),
    ORDER_LOCAL_ID((short)19, "orderLocalID"),
    EXCHANGE_ID((short)20, "exchangeID"),
    PARTICIPANT_ID((short)21, "participantID"),
    CLIENT_ID((short)22, "clientID"),
    EXCHANGE_INST_ID((short)23, "exchangeInstID"),
    TRADER_ID((short)24, "traderID"),
    INSTALL_ID((short)25, "installID"),
    ORDER_SUBMIT_STATUS((short)26, "orderSubmitStatus"),
    NOTIFY_SEQUENCE((short)27, "notifySequence"),
    TRADING_DAY((short)28, "tradingDay"),
    SETTLEMENT_ID((short)29, "settlementID"),
    ORDER_SYS_ID((short)30, "orderSysID"),
    ORDER_SOURCE((short)31, "orderSource"),
    ORDER_STATUS((short)32, "orderStatus"),
    ORDER_TYPE((short)33, "orderType"),
    VOLUME_TRADED((short)34, "volumeTraded"),
    VOLUME_TOTAL((short)35, "volumeTotal"),
    INSERT_DATE((short)36, "insertDate"),
    INSERT_TIME((short)37, "insertTime"),
    ACTIVE_TIME((short)38, "activeTime"),
    SUSPEND_TIME((short)39, "suspendTime"),
    UPDATE_TIME((short)40, "updateTime"),
    CANCEL_TIME((short)41, "cancelTime"),
    ACTIVE_TRADER_ID((short)42, "activeTraderID"),
    CLEARING_PART_ID((short)43, "clearingPartID"),
    SEQUENCE_NO((short)44, "sequenceNo"),
    FRONT_ID((short)45, "frontID"),
    SESSION_ID((short)46, "sessionID"),
    USER_PRODUCT_INFO((short)47, "userProductInfo"),
    STATUS_MSG((short)48, "statusMsg"),
    USER_FORCE_CLOSE((short)49, "userForceClose"),
    ACTIVE_USER_ID((short)50, "activeUserID"),
    BROKER_ORDER_SEQ((short)51, "brokerOrderSeq"),
    RELATIVE_ORDER_SYS_ID((short)52, "relativeOrderSysID"),
    ZCETOTAL_TRADED_VOLUME((short)53, "ZCETotalTradedVolume"),
    IS_SWAP_ORDER((short)54, "isSwapOrder"),
    SLED_ID((short)55, "sledId"),
    INSERT_DATE_TIME((short)56, "insertDateTime"),
    UPDATE_DATE_TIME((short)57, "updateDateTime"),
    CANCEL_DATE_TIME((short)58, "cancelDateTime"),
    SLED_ACCOUNT_ID((short)59, "sledAccountId"),
    USER_ID((short)60, "userId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 2: // ORDER_REF
          return ORDER_REF;
        case 3: // ORDER_PRICE_TYPE
          return ORDER_PRICE_TYPE;
        case 4: // DIRECTION
          return DIRECTION;
        case 5: // COMB_OFFSET_FLAG
          return COMB_OFFSET_FLAG;
        case 6: // COMB_HEDGE_FLAG
          return COMB_HEDGE_FLAG;
        case 7: // LIMIT_PRICE
          return LIMIT_PRICE;
        case 8: // VOLUME_TOTAL_ORIGINAL
          return VOLUME_TOTAL_ORIGINAL;
        case 9: // TIME_CONDITION
          return TIME_CONDITION;
        case 10: // GTDDATE
          return GTDDATE;
        case 11: // VOLUME_CONDITION
          return VOLUME_CONDITION;
        case 12: // MIN_VOLUME
          return MIN_VOLUME;
        case 13: // CONTINGENT_CONDITION
          return CONTINGENT_CONDITION;
        case 14: // STOP_PRICE
          return STOP_PRICE;
        case 15: // FORCE_CLOSE_REASON
          return FORCE_CLOSE_REASON;
        case 16: // IS_AUTO_SUSPEND
          return IS_AUTO_SUSPEND;
        case 17: // BUSINESS_UNIT
          return BUSINESS_UNIT;
        case 18: // REQUEST_ID
          return REQUEST_ID;
        case 19: // ORDER_LOCAL_ID
          return ORDER_LOCAL_ID;
        case 20: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 21: // PARTICIPANT_ID
          return PARTICIPANT_ID;
        case 22: // CLIENT_ID
          return CLIENT_ID;
        case 23: // EXCHANGE_INST_ID
          return EXCHANGE_INST_ID;
        case 24: // TRADER_ID
          return TRADER_ID;
        case 25: // INSTALL_ID
          return INSTALL_ID;
        case 26: // ORDER_SUBMIT_STATUS
          return ORDER_SUBMIT_STATUS;
        case 27: // NOTIFY_SEQUENCE
          return NOTIFY_SEQUENCE;
        case 28: // TRADING_DAY
          return TRADING_DAY;
        case 29: // SETTLEMENT_ID
          return SETTLEMENT_ID;
        case 30: // ORDER_SYS_ID
          return ORDER_SYS_ID;
        case 31: // ORDER_SOURCE
          return ORDER_SOURCE;
        case 32: // ORDER_STATUS
          return ORDER_STATUS;
        case 33: // ORDER_TYPE
          return ORDER_TYPE;
        case 34: // VOLUME_TRADED
          return VOLUME_TRADED;
        case 35: // VOLUME_TOTAL
          return VOLUME_TOTAL;
        case 36: // INSERT_DATE
          return INSERT_DATE;
        case 37: // INSERT_TIME
          return INSERT_TIME;
        case 38: // ACTIVE_TIME
          return ACTIVE_TIME;
        case 39: // SUSPEND_TIME
          return SUSPEND_TIME;
        case 40: // UPDATE_TIME
          return UPDATE_TIME;
        case 41: // CANCEL_TIME
          return CANCEL_TIME;
        case 42: // ACTIVE_TRADER_ID
          return ACTIVE_TRADER_ID;
        case 43: // CLEARING_PART_ID
          return CLEARING_PART_ID;
        case 44: // SEQUENCE_NO
          return SEQUENCE_NO;
        case 45: // FRONT_ID
          return FRONT_ID;
        case 46: // SESSION_ID
          return SESSION_ID;
        case 47: // USER_PRODUCT_INFO
          return USER_PRODUCT_INFO;
        case 48: // STATUS_MSG
          return STATUS_MSG;
        case 49: // USER_FORCE_CLOSE
          return USER_FORCE_CLOSE;
        case 50: // ACTIVE_USER_ID
          return ACTIVE_USER_ID;
        case 51: // BROKER_ORDER_SEQ
          return BROKER_ORDER_SEQ;
        case 52: // RELATIVE_ORDER_SYS_ID
          return RELATIVE_ORDER_SYS_ID;
        case 53: // ZCETOTAL_TRADED_VOLUME
          return ZCETOTAL_TRADED_VOLUME;
        case 54: // IS_SWAP_ORDER
          return IS_SWAP_ORDER;
        case 55: // SLED_ID
          return SLED_ID;
        case 56: // INSERT_DATE_TIME
          return INSERT_DATE_TIME;
        case 57: // UPDATE_DATE_TIME
          return UPDATE_DATE_TIME;
        case 58: // CANCEL_DATE_TIME
          return CANCEL_DATE_TIME;
        case 59: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        case 60: // USER_ID
          return USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERPRICETYPE_ISSET_ID = 0;
  private static final int __DIRECTION_ISSET_ID = 1;
  private static final int __LIMITPRICE_ISSET_ID = 2;
  private static final int __VOLUMETOTALORIGINAL_ISSET_ID = 3;
  private static final int __TIMECONDITION_ISSET_ID = 4;
  private static final int __VOLUMECONDITION_ISSET_ID = 5;
  private static final int __MINVOLUME_ISSET_ID = 6;
  private static final int __CONTINGENTCONDITION_ISSET_ID = 7;
  private static final int __STOPPRICE_ISSET_ID = 8;
  private static final int __FORCECLOSEREASON_ISSET_ID = 9;
  private static final int __ISAUTOSUSPEND_ISSET_ID = 10;
  private static final int __REQUESTID_ISSET_ID = 11;
  private static final int __INSTALLID_ISSET_ID = 12;
  private static final int __ORDERSUBMITSTATUS_ISSET_ID = 13;
  private static final int __NOTIFYSEQUENCE_ISSET_ID = 14;
  private static final int __SETTLEMENTID_ISSET_ID = 15;
  private static final int __ORDERSOURCE_ISSET_ID = 16;
  private static final int __ORDERSTATUS_ISSET_ID = 17;
  private static final int __ORDERTYPE_ISSET_ID = 18;
  private static final int __VOLUMETRADED_ISSET_ID = 19;
  private static final int __VOLUMETOTAL_ISSET_ID = 20;
  private static final int __SEQUENCENO_ISSET_ID = 21;
  private static final int __FRONTID_ISSET_ID = 22;
  private static final int __SESSIONID_ISSET_ID = 23;
  private static final int __USERFORCECLOSE_ISSET_ID = 24;
  private static final int __BROKERORDERSEQ_ISSET_ID = 25;
  private static final int __ZCETOTALTRADEDVOLUME_ISSET_ID = 26;
  private static final int __ISSWAPORDER_ISSET_ID = 27;
  private static final int __INSERTDATETIME_ISSET_ID = 28;
  private static final int __UPDATEDATETIME_ISSET_ID = 29;
  private static final int __CANCELDATETIME_ISSET_ID = 30;
  private static final int __SLEDACCOUNTID_ISSET_ID = 31;
  private static final int __USERID_ISSET_ID = 32;
  private long __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.INSTRUMENT_ID,_Fields.ORDER_REF,_Fields.ORDER_PRICE_TYPE,_Fields.DIRECTION,_Fields.COMB_OFFSET_FLAG,_Fields.COMB_HEDGE_FLAG,_Fields.LIMIT_PRICE,_Fields.VOLUME_TOTAL_ORIGINAL,_Fields.TIME_CONDITION,_Fields.GTDDATE,_Fields.VOLUME_CONDITION,_Fields.MIN_VOLUME,_Fields.CONTINGENT_CONDITION,_Fields.STOP_PRICE,_Fields.FORCE_CLOSE_REASON,_Fields.IS_AUTO_SUSPEND,_Fields.BUSINESS_UNIT,_Fields.REQUEST_ID,_Fields.ORDER_LOCAL_ID,_Fields.EXCHANGE_ID,_Fields.PARTICIPANT_ID,_Fields.CLIENT_ID,_Fields.EXCHANGE_INST_ID,_Fields.TRADER_ID,_Fields.INSTALL_ID,_Fields.ORDER_SUBMIT_STATUS,_Fields.NOTIFY_SEQUENCE,_Fields.TRADING_DAY,_Fields.SETTLEMENT_ID,_Fields.ORDER_SYS_ID,_Fields.ORDER_SOURCE,_Fields.ORDER_STATUS,_Fields.ORDER_TYPE,_Fields.VOLUME_TRADED,_Fields.VOLUME_TOTAL,_Fields.INSERT_DATE,_Fields.INSERT_TIME,_Fields.ACTIVE_TIME,_Fields.SUSPEND_TIME,_Fields.UPDATE_TIME,_Fields.CANCEL_TIME,_Fields.ACTIVE_TRADER_ID,_Fields.CLEARING_PART_ID,_Fields.SEQUENCE_NO,_Fields.FRONT_ID,_Fields.SESSION_ID,_Fields.USER_PRODUCT_INFO,_Fields.STATUS_MSG,_Fields.USER_FORCE_CLOSE,_Fields.ACTIVE_USER_ID,_Fields.BROKER_ORDER_SEQ,_Fields.RELATIVE_ORDER_SYS_ID,_Fields.ZCETOTAL_TRADED_VOLUME,_Fields.IS_SWAP_ORDER,_Fields.INSERT_DATE_TIME,_Fields.UPDATE_DATE_TIME,_Fields.CANCEL_DATE_TIME,_Fields.SLED_ACCOUNT_ID,_Fields.USER_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_REF, new org.apache.thrift.meta_data.FieldMetaData("orderRef", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderPriceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COMB_OFFSET_FLAG, new org.apache.thrift.meta_data.FieldMetaData("combOffsetFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMB_HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("combHedgeFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("limitPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VOLUME_TOTAL_ORIGINAL, new org.apache.thrift.meta_data.FieldMetaData("volumeTotalOriginal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("timeCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.GTDDATE, new org.apache.thrift.meta_data.FieldMetaData("GTDDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VOLUME_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("volumeCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MIN_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("minVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTINGENT_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("contingentCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.STOP_PRICE, new org.apache.thrift.meta_data.FieldMetaData("stopPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FORCE_CLOSE_REASON, new org.apache.thrift.meta_data.FieldMetaData("forceCloseReason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.IS_AUTO_SUSPEND, new org.apache.thrift.meta_data.FieldMetaData("isAutoSuspend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BUSINESS_UNIT, new org.apache.thrift.meta_data.FieldMetaData("businessUnit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_LOCAL_ID, new org.apache.thrift.meta_data.FieldMetaData("orderLocalID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTICIPANT_ID, new org.apache.thrift.meta_data.FieldMetaData("participantID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCHANGE_INST_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeInstID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRADER_ID, new org.apache.thrift.meta_data.FieldMetaData("traderID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTALL_ID, new org.apache.thrift.meta_data.FieldMetaData("installID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_SUBMIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderSubmitStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.NOTIFY_SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("notifySequence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("settlementID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_SYS_ID, new org.apache.thrift.meta_data.FieldMetaData("orderSysID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("orderSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.VOLUME_TRADED, new org.apache.thrift.meta_data.FieldMetaData("volumeTraded", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VOLUME_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("volumeTotal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INSERT_DATE, new org.apache.thrift.meta_data.FieldMetaData("insertDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSERT_TIME, new org.apache.thrift.meta_data.FieldMetaData("insertTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("activeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUSPEND_TIME, new org.apache.thrift.meta_data.FieldMetaData("suspendTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CANCEL_TIME, new org.apache.thrift.meta_data.FieldMetaData("cancelTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_TRADER_ID, new org.apache.thrift.meta_data.FieldMetaData("activeTraderID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLEARING_PART_ID, new org.apache.thrift.meta_data.FieldMetaData("clearingPartID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEQUENCE_NO, new org.apache.thrift.meta_data.FieldMetaData("sequenceNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRONT_ID, new org.apache.thrift.meta_data.FieldMetaData("frontID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_PRODUCT_INFO, new org.apache.thrift.meta_data.FieldMetaData("userProductInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS_MSG, new org.apache.thrift.meta_data.FieldMetaData("statusMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_FORCE_CLOSE, new org.apache.thrift.meta_data.FieldMetaData("userForceClose", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ACTIVE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("activeUserID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BROKER_ORDER_SEQ, new org.apache.thrift.meta_data.FieldMetaData("brokerOrderSeq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RELATIVE_ORDER_SYS_ID, new org.apache.thrift.meta_data.FieldMetaData("relativeOrderSysID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZCETOTAL_TRADED_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("ZCETotalTradedVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_SWAP_ORDER, new org.apache.thrift.meta_data.FieldMetaData("isSwapOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SLED_ID, new org.apache.thrift.meta_data.FieldMetaData("sledId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSERT_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("insertDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CANCEL_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("cancelDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CtpOrderField.class, metaDataMap);
  }

  public CtpOrderField() {
  }

  public CtpOrderField(
    String sledId)
  {
    this();
    this.sledId = sledId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CtpOrderField(CtpOrderField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetOrderRef()) {
      this.orderRef = other.orderRef;
    }
    this.orderPriceType = other.orderPriceType;
    this.direction = other.direction;
    if (other.isSetCombOffsetFlag()) {
      this.combOffsetFlag = other.combOffsetFlag;
    }
    if (other.isSetCombHedgeFlag()) {
      this.combHedgeFlag = other.combHedgeFlag;
    }
    this.limitPrice = other.limitPrice;
    this.volumeTotalOriginal = other.volumeTotalOriginal;
    this.timeCondition = other.timeCondition;
    if (other.isSetGTDDate()) {
      this.GTDDate = other.GTDDate;
    }
    this.volumeCondition = other.volumeCondition;
    this.minVolume = other.minVolume;
    this.contingentCondition = other.contingentCondition;
    this.stopPrice = other.stopPrice;
    this.forceCloseReason = other.forceCloseReason;
    this.isAutoSuspend = other.isAutoSuspend;
    if (other.isSetBusinessUnit()) {
      this.businessUnit = other.businessUnit;
    }
    this.requestID = other.requestID;
    if (other.isSetOrderLocalID()) {
      this.orderLocalID = other.orderLocalID;
    }
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    if (other.isSetParticipantID()) {
      this.participantID = other.participantID;
    }
    if (other.isSetClientID()) {
      this.clientID = other.clientID;
    }
    if (other.isSetExchangeInstID()) {
      this.exchangeInstID = other.exchangeInstID;
    }
    if (other.isSetTraderID()) {
      this.traderID = other.traderID;
    }
    this.installID = other.installID;
    this.orderSubmitStatus = other.orderSubmitStatus;
    this.notifySequence = other.notifySequence;
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    this.settlementID = other.settlementID;
    if (other.isSetOrderSysID()) {
      this.orderSysID = other.orderSysID;
    }
    this.orderSource = other.orderSource;
    this.orderStatus = other.orderStatus;
    this.orderType = other.orderType;
    this.volumeTraded = other.volumeTraded;
    this.volumeTotal = other.volumeTotal;
    if (other.isSetInsertDate()) {
      this.insertDate = other.insertDate;
    }
    if (other.isSetInsertTime()) {
      this.insertTime = other.insertTime;
    }
    if (other.isSetActiveTime()) {
      this.activeTime = other.activeTime;
    }
    if (other.isSetSuspendTime()) {
      this.suspendTime = other.suspendTime;
    }
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    if (other.isSetCancelTime()) {
      this.cancelTime = other.cancelTime;
    }
    if (other.isSetActiveTraderID()) {
      this.activeTraderID = other.activeTraderID;
    }
    if (other.isSetClearingPartID()) {
      this.clearingPartID = other.clearingPartID;
    }
    this.sequenceNo = other.sequenceNo;
    this.frontID = other.frontID;
    this.sessionID = other.sessionID;
    if (other.isSetUserProductInfo()) {
      this.userProductInfo = other.userProductInfo;
    }
    if (other.isSetStatusMsg()) {
      this.statusMsg = other.statusMsg;
    }
    this.userForceClose = other.userForceClose;
    if (other.isSetActiveUserID()) {
      this.activeUserID = other.activeUserID;
    }
    this.brokerOrderSeq = other.brokerOrderSeq;
    if (other.isSetRelativeOrderSysID()) {
      this.relativeOrderSysID = other.relativeOrderSysID;
    }
    this.ZCETotalTradedVolume = other.ZCETotalTradedVolume;
    this.isSwapOrder = other.isSwapOrder;
    if (other.isSetSledId()) {
      this.sledId = other.sledId;
    }
    this.insertDateTime = other.insertDateTime;
    this.updateDateTime = other.updateDateTime;
    this.cancelDateTime = other.cancelDateTime;
    this.sledAccountId = other.sledAccountId;
    this.userId = other.userId;
  }

  public CtpOrderField deepCopy() {
    return new CtpOrderField(this);
  }

  @Override
  public void clear() {
    this.instrumentID = null;
    this.orderRef = null;
    setOrderPriceTypeIsSet(false);
    this.orderPriceType = 0;
    setDirectionIsSet(false);
    this.direction = 0;
    this.combOffsetFlag = null;
    this.combHedgeFlag = null;
    setLimitPriceIsSet(false);
    this.limitPrice = 0.0;
    setVolumeTotalOriginalIsSet(false);
    this.volumeTotalOriginal = 0;
    setTimeConditionIsSet(false);
    this.timeCondition = 0;
    this.GTDDate = null;
    setVolumeConditionIsSet(false);
    this.volumeCondition = 0;
    setMinVolumeIsSet(false);
    this.minVolume = 0;
    setContingentConditionIsSet(false);
    this.contingentCondition = 0;
    setStopPriceIsSet(false);
    this.stopPrice = 0.0;
    setForceCloseReasonIsSet(false);
    this.forceCloseReason = 0;
    setIsAutoSuspendIsSet(false);
    this.isAutoSuspend = false;
    this.businessUnit = null;
    setRequestIDIsSet(false);
    this.requestID = 0;
    this.orderLocalID = null;
    this.exchangeID = null;
    this.participantID = null;
    this.clientID = null;
    this.exchangeInstID = null;
    this.traderID = null;
    setInstallIDIsSet(false);
    this.installID = 0;
    setOrderSubmitStatusIsSet(false);
    this.orderSubmitStatus = 0;
    setNotifySequenceIsSet(false);
    this.notifySequence = 0;
    this.tradingDay = null;
    setSettlementIDIsSet(false);
    this.settlementID = 0;
    this.orderSysID = null;
    setOrderSourceIsSet(false);
    this.orderSource = 0;
    setOrderStatusIsSet(false);
    this.orderStatus = 0;
    setOrderTypeIsSet(false);
    this.orderType = 0;
    setVolumeTradedIsSet(false);
    this.volumeTraded = 0;
    setVolumeTotalIsSet(false);
    this.volumeTotal = 0;
    this.insertDate = null;
    this.insertTime = null;
    this.activeTime = null;
    this.suspendTime = null;
    this.updateTime = null;
    this.cancelTime = null;
    this.activeTraderID = null;
    this.clearingPartID = null;
    setSequenceNoIsSet(false);
    this.sequenceNo = 0;
    setFrontIDIsSet(false);
    this.frontID = 0;
    setSessionIDIsSet(false);
    this.sessionID = 0;
    this.userProductInfo = null;
    this.statusMsg = null;
    setUserForceCloseIsSet(false);
    this.userForceClose = false;
    this.activeUserID = null;
    setBrokerOrderSeqIsSet(false);
    this.brokerOrderSeq = 0;
    this.relativeOrderSysID = null;
    setZCETotalTradedVolumeIsSet(false);
    this.ZCETotalTradedVolume = 0;
    setIsSwapOrderIsSet(false);
    this.isSwapOrder = false;
    this.sledId = null;
    setInsertDateTimeIsSet(false);
    this.insertDateTime = 0;
    setUpdateDateTimeIsSet(false);
    this.updateDateTime = 0;
    setCancelDateTimeIsSet(false);
    this.cancelDateTime = 0;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CtpOrderField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getOrderRef() {
    return this.orderRef;
  }

  public CtpOrderField setOrderRef(String orderRef) {
    this.orderRef = orderRef;
    return this;
  }

  public void unsetOrderRef() {
    this.orderRef = null;
  }

  /** Returns true if field orderRef is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderRef() {
    return this.orderRef != null;
  }

  public void setOrderRefIsSet(boolean value) {
    if (!value) {
      this.orderRef = null;
    }
  }

  public byte getOrderPriceType() {
    return this.orderPriceType;
  }

  public CtpOrderField setOrderPriceType(byte orderPriceType) {
    this.orderPriceType = orderPriceType;
    setOrderPriceTypeIsSet(true);
    return this;
  }

  public void unsetOrderPriceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERPRICETYPE_ISSET_ID);
  }

  /** Returns true if field orderPriceType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderPriceType() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERPRICETYPE_ISSET_ID);
  }

  public void setOrderPriceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERPRICETYPE_ISSET_ID, value);
  }

  public byte getDirection() {
    return this.direction;
  }

  public CtpOrderField setDirection(byte direction) {
    this.direction = direction;
    setDirectionIsSet(true);
    return this;
  }

  public void unsetDirection() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return EncodingUtils.testBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  public void setDirectionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIRECTION_ISSET_ID, value);
  }

  public String getCombOffsetFlag() {
    return this.combOffsetFlag;
  }

  public CtpOrderField setCombOffsetFlag(String combOffsetFlag) {
    this.combOffsetFlag = combOffsetFlag;
    return this;
  }

  public void unsetCombOffsetFlag() {
    this.combOffsetFlag = null;
  }

  /** Returns true if field combOffsetFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCombOffsetFlag() {
    return this.combOffsetFlag != null;
  }

  public void setCombOffsetFlagIsSet(boolean value) {
    if (!value) {
      this.combOffsetFlag = null;
    }
  }

  public String getCombHedgeFlag() {
    return this.combHedgeFlag;
  }

  public CtpOrderField setCombHedgeFlag(String combHedgeFlag) {
    this.combHedgeFlag = combHedgeFlag;
    return this;
  }

  public void unsetCombHedgeFlag() {
    this.combHedgeFlag = null;
  }

  /** Returns true if field combHedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCombHedgeFlag() {
    return this.combHedgeFlag != null;
  }

  public void setCombHedgeFlagIsSet(boolean value) {
    if (!value) {
      this.combHedgeFlag = null;
    }
  }

  public double getLimitPrice() {
    return this.limitPrice;
  }

  public CtpOrderField setLimitPrice(double limitPrice) {
    this.limitPrice = limitPrice;
    setLimitPriceIsSet(true);
    return this;
  }

  public void unsetLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  /** Returns true if field limitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  public void setLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITPRICE_ISSET_ID, value);
  }

  public int getVolumeTotalOriginal() {
    return this.volumeTotalOriginal;
  }

  public CtpOrderField setVolumeTotalOriginal(int volumeTotalOriginal) {
    this.volumeTotalOriginal = volumeTotalOriginal;
    setVolumeTotalOriginalIsSet(true);
    return this;
  }

  public void unsetVolumeTotalOriginal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMETOTALORIGINAL_ISSET_ID);
  }

  /** Returns true if field volumeTotalOriginal is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeTotalOriginal() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMETOTALORIGINAL_ISSET_ID);
  }

  public void setVolumeTotalOriginalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMETOTALORIGINAL_ISSET_ID, value);
  }

  public byte getTimeCondition() {
    return this.timeCondition;
  }

  public CtpOrderField setTimeCondition(byte timeCondition) {
    this.timeCondition = timeCondition;
    setTimeConditionIsSet(true);
    return this;
  }

  public void unsetTimeCondition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMECONDITION_ISSET_ID);
  }

  /** Returns true if field timeCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeCondition() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMECONDITION_ISSET_ID);
  }

  public void setTimeConditionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMECONDITION_ISSET_ID, value);
  }

  public String getGTDDate() {
    return this.GTDDate;
  }

  public CtpOrderField setGTDDate(String GTDDate) {
    this.GTDDate = GTDDate;
    return this;
  }

  public void unsetGTDDate() {
    this.GTDDate = null;
  }

  /** Returns true if field GTDDate is set (has been assigned a value) and false otherwise */
  public boolean isSetGTDDate() {
    return this.GTDDate != null;
  }

  public void setGTDDateIsSet(boolean value) {
    if (!value) {
      this.GTDDate = null;
    }
  }

  public byte getVolumeCondition() {
    return this.volumeCondition;
  }

  public CtpOrderField setVolumeCondition(byte volumeCondition) {
    this.volumeCondition = volumeCondition;
    setVolumeConditionIsSet(true);
    return this;
  }

  public void unsetVolumeCondition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMECONDITION_ISSET_ID);
  }

  /** Returns true if field volumeCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeCondition() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMECONDITION_ISSET_ID);
  }

  public void setVolumeConditionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMECONDITION_ISSET_ID, value);
  }

  public int getMinVolume() {
    return this.minVolume;
  }

  public CtpOrderField setMinVolume(int minVolume) {
    this.minVolume = minVolume;
    setMinVolumeIsSet(true);
    return this;
  }

  public void unsetMinVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINVOLUME_ISSET_ID);
  }

  /** Returns true if field minVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMinVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MINVOLUME_ISSET_ID);
  }

  public void setMinVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINVOLUME_ISSET_ID, value);
  }

  public byte getContingentCondition() {
    return this.contingentCondition;
  }

  public CtpOrderField setContingentCondition(byte contingentCondition) {
    this.contingentCondition = contingentCondition;
    setContingentConditionIsSet(true);
    return this;
  }

  public void unsetContingentCondition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTINGENTCONDITION_ISSET_ID);
  }

  /** Returns true if field contingentCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetContingentCondition() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTINGENTCONDITION_ISSET_ID);
  }

  public void setContingentConditionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTINGENTCONDITION_ISSET_ID, value);
  }

  public double getStopPrice() {
    return this.stopPrice;
  }

  public CtpOrderField setStopPrice(double stopPrice) {
    this.stopPrice = stopPrice;
    setStopPriceIsSet(true);
    return this;
  }

  public void unsetStopPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPPRICE_ISSET_ID);
  }

  /** Returns true if field stopPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetStopPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __STOPPRICE_ISSET_ID);
  }

  public void setStopPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPPRICE_ISSET_ID, value);
  }

  public byte getForceCloseReason() {
    return this.forceCloseReason;
  }

  public CtpOrderField setForceCloseReason(byte forceCloseReason) {
    this.forceCloseReason = forceCloseReason;
    setForceCloseReasonIsSet(true);
    return this;
  }

  public void unsetForceCloseReason() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORCECLOSEREASON_ISSET_ID);
  }

  /** Returns true if field forceCloseReason is set (has been assigned a value) and false otherwise */
  public boolean isSetForceCloseReason() {
    return EncodingUtils.testBit(__isset_bitfield, __FORCECLOSEREASON_ISSET_ID);
  }

  public void setForceCloseReasonIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORCECLOSEREASON_ISSET_ID, value);
  }

  public boolean isIsAutoSuspend() {
    return this.isAutoSuspend;
  }

  public CtpOrderField setIsAutoSuspend(boolean isAutoSuspend) {
    this.isAutoSuspend = isAutoSuspend;
    setIsAutoSuspendIsSet(true);
    return this;
  }

  public void unsetIsAutoSuspend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAUTOSUSPEND_ISSET_ID);
  }

  /** Returns true if field isAutoSuspend is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAutoSuspend() {
    return EncodingUtils.testBit(__isset_bitfield, __ISAUTOSUSPEND_ISSET_ID);
  }

  public void setIsAutoSuspendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAUTOSUSPEND_ISSET_ID, value);
  }

  public String getBusinessUnit() {
    return this.businessUnit;
  }

  public CtpOrderField setBusinessUnit(String businessUnit) {
    this.businessUnit = businessUnit;
    return this;
  }

  public void unsetBusinessUnit() {
    this.businessUnit = null;
  }

  /** Returns true if field businessUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessUnit() {
    return this.businessUnit != null;
  }

  public void setBusinessUnitIsSet(boolean value) {
    if (!value) {
      this.businessUnit = null;
    }
  }

  public int getRequestID() {
    return this.requestID;
  }

  public CtpOrderField setRequestID(int requestID) {
    this.requestID = requestID;
    setRequestIDIsSet(true);
    return this;
  }

  public void unsetRequestID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestID() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  public String getOrderLocalID() {
    return this.orderLocalID;
  }

  public CtpOrderField setOrderLocalID(String orderLocalID) {
    this.orderLocalID = orderLocalID;
    return this;
  }

  public void unsetOrderLocalID() {
    this.orderLocalID = null;
  }

  /** Returns true if field orderLocalID is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderLocalID() {
    return this.orderLocalID != null;
  }

  public void setOrderLocalIDIsSet(boolean value) {
    if (!value) {
      this.orderLocalID = null;
    }
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CtpOrderField setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public String getParticipantID() {
    return this.participantID;
  }

  public CtpOrderField setParticipantID(String participantID) {
    this.participantID = participantID;
    return this;
  }

  public void unsetParticipantID() {
    this.participantID = null;
  }

  /** Returns true if field participantID is set (has been assigned a value) and false otherwise */
  public boolean isSetParticipantID() {
    return this.participantID != null;
  }

  public void setParticipantIDIsSet(boolean value) {
    if (!value) {
      this.participantID = null;
    }
  }

  public String getClientID() {
    return this.clientID;
  }

  public CtpOrderField setClientID(String clientID) {
    this.clientID = clientID;
    return this;
  }

  public void unsetClientID() {
    this.clientID = null;
  }

  /** Returns true if field clientID is set (has been assigned a value) and false otherwise */
  public boolean isSetClientID() {
    return this.clientID != null;
  }

  public void setClientIDIsSet(boolean value) {
    if (!value) {
      this.clientID = null;
    }
  }

  public String getExchangeInstID() {
    return this.exchangeInstID;
  }

  public CtpOrderField setExchangeInstID(String exchangeInstID) {
    this.exchangeInstID = exchangeInstID;
    return this;
  }

  public void unsetExchangeInstID() {
    this.exchangeInstID = null;
  }

  /** Returns true if field exchangeInstID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeInstID() {
    return this.exchangeInstID != null;
  }

  public void setExchangeInstIDIsSet(boolean value) {
    if (!value) {
      this.exchangeInstID = null;
    }
  }

  public String getTraderID() {
    return this.traderID;
  }

  public CtpOrderField setTraderID(String traderID) {
    this.traderID = traderID;
    return this;
  }

  public void unsetTraderID() {
    this.traderID = null;
  }

  /** Returns true if field traderID is set (has been assigned a value) and false otherwise */
  public boolean isSetTraderID() {
    return this.traderID != null;
  }

  public void setTraderIDIsSet(boolean value) {
    if (!value) {
      this.traderID = null;
    }
  }

  public int getInstallID() {
    return this.installID;
  }

  public CtpOrderField setInstallID(int installID) {
    this.installID = installID;
    setInstallIDIsSet(true);
    return this;
  }

  public void unsetInstallID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  /** Returns true if field installID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstallID() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  public void setInstallIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTALLID_ISSET_ID, value);
  }

  public byte getOrderSubmitStatus() {
    return this.orderSubmitStatus;
  }

  public CtpOrderField setOrderSubmitStatus(byte orderSubmitStatus) {
    this.orderSubmitStatus = orderSubmitStatus;
    setOrderSubmitStatusIsSet(true);
    return this;
  }

  public void unsetOrderSubmitStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERSUBMITSTATUS_ISSET_ID);
  }

  /** Returns true if field orderSubmitStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderSubmitStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERSUBMITSTATUS_ISSET_ID);
  }

  public void setOrderSubmitStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERSUBMITSTATUS_ISSET_ID, value);
  }

  public int getNotifySequence() {
    return this.notifySequence;
  }

  public CtpOrderField setNotifySequence(int notifySequence) {
    this.notifySequence = notifySequence;
    setNotifySequenceIsSet(true);
    return this;
  }

  public void unsetNotifySequence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFYSEQUENCE_ISSET_ID);
  }

  /** Returns true if field notifySequence is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifySequence() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFYSEQUENCE_ISSET_ID);
  }

  public void setNotifySequenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFYSEQUENCE_ISSET_ID, value);
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CtpOrderField setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public int getSettlementID() {
    return this.settlementID;
  }

  public CtpOrderField setSettlementID(int settlementID) {
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    return this;
  }

  public void unsetSettlementID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  /** Returns true if field settlementID is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementID() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  public void setSettlementIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID, value);
  }

  public String getOrderSysID() {
    return this.orderSysID;
  }

  public CtpOrderField setOrderSysID(String orderSysID) {
    this.orderSysID = orderSysID;
    return this;
  }

  public void unsetOrderSysID() {
    this.orderSysID = null;
  }

  /** Returns true if field orderSysID is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderSysID() {
    return this.orderSysID != null;
  }

  public void setOrderSysIDIsSet(boolean value) {
    if (!value) {
      this.orderSysID = null;
    }
  }

  public byte getOrderSource() {
    return this.orderSource;
  }

  public CtpOrderField setOrderSource(byte orderSource) {
    this.orderSource = orderSource;
    setOrderSourceIsSet(true);
    return this;
  }

  public void unsetOrderSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERSOURCE_ISSET_ID);
  }

  /** Returns true if field orderSource is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderSource() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERSOURCE_ISSET_ID);
  }

  public void setOrderSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERSOURCE_ISSET_ID, value);
  }

  public byte getOrderStatus() {
    return this.orderStatus;
  }

  public CtpOrderField setOrderStatus(byte orderStatus) {
    this.orderStatus = orderStatus;
    setOrderStatusIsSet(true);
    return this;
  }

  public void unsetOrderStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERSTATUS_ISSET_ID);
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERSTATUS_ISSET_ID);
  }

  public void setOrderStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERSTATUS_ISSET_ID, value);
  }

  public byte getOrderType() {
    return this.orderType;
  }

  public CtpOrderField setOrderType(byte orderType) {
    this.orderType = orderType;
    setOrderTypeIsSet(true);
    return this;
  }

  public void unsetOrderType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
  }

  public void setOrderTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERTYPE_ISSET_ID, value);
  }

  public int getVolumeTraded() {
    return this.volumeTraded;
  }

  public CtpOrderField setVolumeTraded(int volumeTraded) {
    this.volumeTraded = volumeTraded;
    setVolumeTradedIsSet(true);
    return this;
  }

  public void unsetVolumeTraded() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMETRADED_ISSET_ID);
  }

  /** Returns true if field volumeTraded is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeTraded() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMETRADED_ISSET_ID);
  }

  public void setVolumeTradedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMETRADED_ISSET_ID, value);
  }

  public int getVolumeTotal() {
    return this.volumeTotal;
  }

  public CtpOrderField setVolumeTotal(int volumeTotal) {
    this.volumeTotal = volumeTotal;
    setVolumeTotalIsSet(true);
    return this;
  }

  public void unsetVolumeTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMETOTAL_ISSET_ID);
  }

  /** Returns true if field volumeTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMETOTAL_ISSET_ID);
  }

  public void setVolumeTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMETOTAL_ISSET_ID, value);
  }

  public String getInsertDate() {
    return this.insertDate;
  }

  public CtpOrderField setInsertDate(String insertDate) {
    this.insertDate = insertDate;
    return this;
  }

  public void unsetInsertDate() {
    this.insertDate = null;
  }

  /** Returns true if field insertDate is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertDate() {
    return this.insertDate != null;
  }

  public void setInsertDateIsSet(boolean value) {
    if (!value) {
      this.insertDate = null;
    }
  }

  public String getInsertTime() {
    return this.insertTime;
  }

  public CtpOrderField setInsertTime(String insertTime) {
    this.insertTime = insertTime;
    return this;
  }

  public void unsetInsertTime() {
    this.insertTime = null;
  }

  /** Returns true if field insertTime is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertTime() {
    return this.insertTime != null;
  }

  public void setInsertTimeIsSet(boolean value) {
    if (!value) {
      this.insertTime = null;
    }
  }

  public String getActiveTime() {
    return this.activeTime;
  }

  public CtpOrderField setActiveTime(String activeTime) {
    this.activeTime = activeTime;
    return this;
  }

  public void unsetActiveTime() {
    this.activeTime = null;
  }

  /** Returns true if field activeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveTime() {
    return this.activeTime != null;
  }

  public void setActiveTimeIsSet(boolean value) {
    if (!value) {
      this.activeTime = null;
    }
  }

  public String getSuspendTime() {
    return this.suspendTime;
  }

  public CtpOrderField setSuspendTime(String suspendTime) {
    this.suspendTime = suspendTime;
    return this;
  }

  public void unsetSuspendTime() {
    this.suspendTime = null;
  }

  /** Returns true if field suspendTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSuspendTime() {
    return this.suspendTime != null;
  }

  public void setSuspendTimeIsSet(boolean value) {
    if (!value) {
      this.suspendTime = null;
    }
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public CtpOrderField setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public String getCancelTime() {
    return this.cancelTime;
  }

  public CtpOrderField setCancelTime(String cancelTime) {
    this.cancelTime = cancelTime;
    return this;
  }

  public void unsetCancelTime() {
    this.cancelTime = null;
  }

  /** Returns true if field cancelTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelTime() {
    return this.cancelTime != null;
  }

  public void setCancelTimeIsSet(boolean value) {
    if (!value) {
      this.cancelTime = null;
    }
  }

  public String getActiveTraderID() {
    return this.activeTraderID;
  }

  public CtpOrderField setActiveTraderID(String activeTraderID) {
    this.activeTraderID = activeTraderID;
    return this;
  }

  public void unsetActiveTraderID() {
    this.activeTraderID = null;
  }

  /** Returns true if field activeTraderID is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveTraderID() {
    return this.activeTraderID != null;
  }

  public void setActiveTraderIDIsSet(boolean value) {
    if (!value) {
      this.activeTraderID = null;
    }
  }

  public String getClearingPartID() {
    return this.clearingPartID;
  }

  public CtpOrderField setClearingPartID(String clearingPartID) {
    this.clearingPartID = clearingPartID;
    return this;
  }

  public void unsetClearingPartID() {
    this.clearingPartID = null;
  }

  /** Returns true if field clearingPartID is set (has been assigned a value) and false otherwise */
  public boolean isSetClearingPartID() {
    return this.clearingPartID != null;
  }

  public void setClearingPartIDIsSet(boolean value) {
    if (!value) {
      this.clearingPartID = null;
    }
  }

  public int getSequenceNo() {
    return this.sequenceNo;
  }

  public CtpOrderField setSequenceNo(int sequenceNo) {
    this.sequenceNo = sequenceNo;
    setSequenceNoIsSet(true);
    return this;
  }

  public void unsetSequenceNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCENO_ISSET_ID);
  }

  /** Returns true if field sequenceNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceNo() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCENO_ISSET_ID);
  }

  public void setSequenceNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCENO_ISSET_ID, value);
  }

  public int getFrontID() {
    return this.frontID;
  }

  public CtpOrderField setFrontID(int frontID) {
    this.frontID = frontID;
    setFrontIDIsSet(true);
    return this;
  }

  public void unsetFrontID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRONTID_ISSET_ID);
  }

  /** Returns true if field frontID is set (has been assigned a value) and false otherwise */
  public boolean isSetFrontID() {
    return EncodingUtils.testBit(__isset_bitfield, __FRONTID_ISSET_ID);
  }

  public void setFrontIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRONTID_ISSET_ID, value);
  }

  public int getSessionID() {
    return this.sessionID;
  }

  public CtpOrderField setSessionID(int sessionID) {
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    return this;
  }

  public void unsetSessionID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionID() {
    return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public String getUserProductInfo() {
    return this.userProductInfo;
  }

  public CtpOrderField setUserProductInfo(String userProductInfo) {
    this.userProductInfo = userProductInfo;
    return this;
  }

  public void unsetUserProductInfo() {
    this.userProductInfo = null;
  }

  /** Returns true if field userProductInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetUserProductInfo() {
    return this.userProductInfo != null;
  }

  public void setUserProductInfoIsSet(boolean value) {
    if (!value) {
      this.userProductInfo = null;
    }
  }

  public String getStatusMsg() {
    return this.statusMsg;
  }

  public CtpOrderField setStatusMsg(String statusMsg) {
    this.statusMsg = statusMsg;
    return this;
  }

  public void unsetStatusMsg() {
    this.statusMsg = null;
  }

  /** Returns true if field statusMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusMsg() {
    return this.statusMsg != null;
  }

  public void setStatusMsgIsSet(boolean value) {
    if (!value) {
      this.statusMsg = null;
    }
  }

  public boolean isUserForceClose() {
    return this.userForceClose;
  }

  public CtpOrderField setUserForceClose(boolean userForceClose) {
    this.userForceClose = userForceClose;
    setUserForceCloseIsSet(true);
    return this;
  }

  public void unsetUserForceClose() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERFORCECLOSE_ISSET_ID);
  }

  /** Returns true if field userForceClose is set (has been assigned a value) and false otherwise */
  public boolean isSetUserForceClose() {
    return EncodingUtils.testBit(__isset_bitfield, __USERFORCECLOSE_ISSET_ID);
  }

  public void setUserForceCloseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERFORCECLOSE_ISSET_ID, value);
  }

  public String getActiveUserID() {
    return this.activeUserID;
  }

  public CtpOrderField setActiveUserID(String activeUserID) {
    this.activeUserID = activeUserID;
    return this;
  }

  public void unsetActiveUserID() {
    this.activeUserID = null;
  }

  /** Returns true if field activeUserID is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveUserID() {
    return this.activeUserID != null;
  }

  public void setActiveUserIDIsSet(boolean value) {
    if (!value) {
      this.activeUserID = null;
    }
  }

  public int getBrokerOrderSeq() {
    return this.brokerOrderSeq;
  }

  public CtpOrderField setBrokerOrderSeq(int brokerOrderSeq) {
    this.brokerOrderSeq = brokerOrderSeq;
    setBrokerOrderSeqIsSet(true);
    return this;
  }

  public void unsetBrokerOrderSeq() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BROKERORDERSEQ_ISSET_ID);
  }

  /** Returns true if field brokerOrderSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerOrderSeq() {
    return EncodingUtils.testBit(__isset_bitfield, __BROKERORDERSEQ_ISSET_ID);
  }

  public void setBrokerOrderSeqIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BROKERORDERSEQ_ISSET_ID, value);
  }

  public String getRelativeOrderSysID() {
    return this.relativeOrderSysID;
  }

  public CtpOrderField setRelativeOrderSysID(String relativeOrderSysID) {
    this.relativeOrderSysID = relativeOrderSysID;
    return this;
  }

  public void unsetRelativeOrderSysID() {
    this.relativeOrderSysID = null;
  }

  /** Returns true if field relativeOrderSysID is set (has been assigned a value) and false otherwise */
  public boolean isSetRelativeOrderSysID() {
    return this.relativeOrderSysID != null;
  }

  public void setRelativeOrderSysIDIsSet(boolean value) {
    if (!value) {
      this.relativeOrderSysID = null;
    }
  }

  public int getZCETotalTradedVolume() {
    return this.ZCETotalTradedVolume;
  }

  public CtpOrderField setZCETotalTradedVolume(int ZCETotalTradedVolume) {
    this.ZCETotalTradedVolume = ZCETotalTradedVolume;
    setZCETotalTradedVolumeIsSet(true);
    return this;
  }

  public void unsetZCETotalTradedVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ZCETOTALTRADEDVOLUME_ISSET_ID);
  }

  /** Returns true if field ZCETotalTradedVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetZCETotalTradedVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __ZCETOTALTRADEDVOLUME_ISSET_ID);
  }

  public void setZCETotalTradedVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ZCETOTALTRADEDVOLUME_ISSET_ID, value);
  }

  public boolean isIsSwapOrder() {
    return this.isSwapOrder;
  }

  public CtpOrderField setIsSwapOrder(boolean isSwapOrder) {
    this.isSwapOrder = isSwapOrder;
    setIsSwapOrderIsSet(true);
    return this;
  }

  public void unsetIsSwapOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSWAPORDER_ISSET_ID);
  }

  /** Returns true if field isSwapOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSwapOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSWAPORDER_ISSET_ID);
  }

  public void setIsSwapOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSWAPORDER_ISSET_ID, value);
  }

  public String getSledId() {
    return this.sledId;
  }

  public CtpOrderField setSledId(String sledId) {
    this.sledId = sledId;
    return this;
  }

  public void unsetSledId() {
    this.sledId = null;
  }

  /** Returns true if field sledId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledId() {
    return this.sledId != null;
  }

  public void setSledIdIsSet(boolean value) {
    if (!value) {
      this.sledId = null;
    }
  }

  public long getInsertDateTime() {
    return this.insertDateTime;
  }

  public CtpOrderField setInsertDateTime(long insertDateTime) {
    this.insertDateTime = insertDateTime;
    setInsertDateTimeIsSet(true);
    return this;
  }

  public void unsetInsertDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSERTDATETIME_ISSET_ID);
  }

  /** Returns true if field insertDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __INSERTDATETIME_ISSET_ID);
  }

  public void setInsertDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSERTDATETIME_ISSET_ID, value);
  }

  public long getUpdateDateTime() {
    return this.updateDateTime;
  }

  public CtpOrderField setUpdateDateTime(long updateDateTime) {
    this.updateDateTime = updateDateTime;
    setUpdateDateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEDATETIME_ISSET_ID);
  }

  /** Returns true if field updateDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEDATETIME_ISSET_ID);
  }

  public void setUpdateDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEDATETIME_ISSET_ID, value);
  }

  public long getCancelDateTime() {
    return this.cancelDateTime;
  }

  public CtpOrderField setCancelDateTime(long cancelDateTime) {
    this.cancelDateTime = cancelDateTime;
    setCancelDateTimeIsSet(true);
    return this;
  }

  public void unsetCancelDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANCELDATETIME_ISSET_ID);
  }

  /** Returns true if field cancelDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CANCELDATETIME_ISSET_ID);
  }

  public void setCancelDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANCELDATETIME_ISSET_ID, value);
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public CtpOrderField setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public CtpOrderField setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case ORDER_REF:
      if (value == null) {
        unsetOrderRef();
      } else {
        setOrderRef((String)value);
      }
      break;

    case ORDER_PRICE_TYPE:
      if (value == null) {
        unsetOrderPriceType();
      } else {
        setOrderPriceType((Byte)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((Byte)value);
      }
      break;

    case COMB_OFFSET_FLAG:
      if (value == null) {
        unsetCombOffsetFlag();
      } else {
        setCombOffsetFlag((String)value);
      }
      break;

    case COMB_HEDGE_FLAG:
      if (value == null) {
        unsetCombHedgeFlag();
      } else {
        setCombHedgeFlag((String)value);
      }
      break;

    case LIMIT_PRICE:
      if (value == null) {
        unsetLimitPrice();
      } else {
        setLimitPrice((Double)value);
      }
      break;

    case VOLUME_TOTAL_ORIGINAL:
      if (value == null) {
        unsetVolumeTotalOriginal();
      } else {
        setVolumeTotalOriginal((Integer)value);
      }
      break;

    case TIME_CONDITION:
      if (value == null) {
        unsetTimeCondition();
      } else {
        setTimeCondition((Byte)value);
      }
      break;

    case GTDDATE:
      if (value == null) {
        unsetGTDDate();
      } else {
        setGTDDate((String)value);
      }
      break;

    case VOLUME_CONDITION:
      if (value == null) {
        unsetVolumeCondition();
      } else {
        setVolumeCondition((Byte)value);
      }
      break;

    case MIN_VOLUME:
      if (value == null) {
        unsetMinVolume();
      } else {
        setMinVolume((Integer)value);
      }
      break;

    case CONTINGENT_CONDITION:
      if (value == null) {
        unsetContingentCondition();
      } else {
        setContingentCondition((Byte)value);
      }
      break;

    case STOP_PRICE:
      if (value == null) {
        unsetStopPrice();
      } else {
        setStopPrice((Double)value);
      }
      break;

    case FORCE_CLOSE_REASON:
      if (value == null) {
        unsetForceCloseReason();
      } else {
        setForceCloseReason((Byte)value);
      }
      break;

    case IS_AUTO_SUSPEND:
      if (value == null) {
        unsetIsAutoSuspend();
      } else {
        setIsAutoSuspend((Boolean)value);
      }
      break;

    case BUSINESS_UNIT:
      if (value == null) {
        unsetBusinessUnit();
      } else {
        setBusinessUnit((String)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestID();
      } else {
        setRequestID((Integer)value);
      }
      break;

    case ORDER_LOCAL_ID:
      if (value == null) {
        unsetOrderLocalID();
      } else {
        setOrderLocalID((String)value);
      }
      break;

    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case PARTICIPANT_ID:
      if (value == null) {
        unsetParticipantID();
      } else {
        setParticipantID((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientID();
      } else {
        setClientID((String)value);
      }
      break;

    case EXCHANGE_INST_ID:
      if (value == null) {
        unsetExchangeInstID();
      } else {
        setExchangeInstID((String)value);
      }
      break;

    case TRADER_ID:
      if (value == null) {
        unsetTraderID();
      } else {
        setTraderID((String)value);
      }
      break;

    case INSTALL_ID:
      if (value == null) {
        unsetInstallID();
      } else {
        setInstallID((Integer)value);
      }
      break;

    case ORDER_SUBMIT_STATUS:
      if (value == null) {
        unsetOrderSubmitStatus();
      } else {
        setOrderSubmitStatus((Byte)value);
      }
      break;

    case NOTIFY_SEQUENCE:
      if (value == null) {
        unsetNotifySequence();
      } else {
        setNotifySequence((Integer)value);
      }
      break;

    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case SETTLEMENT_ID:
      if (value == null) {
        unsetSettlementID();
      } else {
        setSettlementID((Integer)value);
      }
      break;

    case ORDER_SYS_ID:
      if (value == null) {
        unsetOrderSysID();
      } else {
        setOrderSysID((String)value);
      }
      break;

    case ORDER_SOURCE:
      if (value == null) {
        unsetOrderSource();
      } else {
        setOrderSource((Byte)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((Byte)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((Byte)value);
      }
      break;

    case VOLUME_TRADED:
      if (value == null) {
        unsetVolumeTraded();
      } else {
        setVolumeTraded((Integer)value);
      }
      break;

    case VOLUME_TOTAL:
      if (value == null) {
        unsetVolumeTotal();
      } else {
        setVolumeTotal((Integer)value);
      }
      break;

    case INSERT_DATE:
      if (value == null) {
        unsetInsertDate();
      } else {
        setInsertDate((String)value);
      }
      break;

    case INSERT_TIME:
      if (value == null) {
        unsetInsertTime();
      } else {
        setInsertTime((String)value);
      }
      break;

    case ACTIVE_TIME:
      if (value == null) {
        unsetActiveTime();
      } else {
        setActiveTime((String)value);
      }
      break;

    case SUSPEND_TIME:
      if (value == null) {
        unsetSuspendTime();
      } else {
        setSuspendTime((String)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case CANCEL_TIME:
      if (value == null) {
        unsetCancelTime();
      } else {
        setCancelTime((String)value);
      }
      break;

    case ACTIVE_TRADER_ID:
      if (value == null) {
        unsetActiveTraderID();
      } else {
        setActiveTraderID((String)value);
      }
      break;

    case CLEARING_PART_ID:
      if (value == null) {
        unsetClearingPartID();
      } else {
        setClearingPartID((String)value);
      }
      break;

    case SEQUENCE_NO:
      if (value == null) {
        unsetSequenceNo();
      } else {
        setSequenceNo((Integer)value);
      }
      break;

    case FRONT_ID:
      if (value == null) {
        unsetFrontID();
      } else {
        setFrontID((Integer)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionID();
      } else {
        setSessionID((Integer)value);
      }
      break;

    case USER_PRODUCT_INFO:
      if (value == null) {
        unsetUserProductInfo();
      } else {
        setUserProductInfo((String)value);
      }
      break;

    case STATUS_MSG:
      if (value == null) {
        unsetStatusMsg();
      } else {
        setStatusMsg((String)value);
      }
      break;

    case USER_FORCE_CLOSE:
      if (value == null) {
        unsetUserForceClose();
      } else {
        setUserForceClose((Boolean)value);
      }
      break;

    case ACTIVE_USER_ID:
      if (value == null) {
        unsetActiveUserID();
      } else {
        setActiveUserID((String)value);
      }
      break;

    case BROKER_ORDER_SEQ:
      if (value == null) {
        unsetBrokerOrderSeq();
      } else {
        setBrokerOrderSeq((Integer)value);
      }
      break;

    case RELATIVE_ORDER_SYS_ID:
      if (value == null) {
        unsetRelativeOrderSysID();
      } else {
        setRelativeOrderSysID((String)value);
      }
      break;

    case ZCETOTAL_TRADED_VOLUME:
      if (value == null) {
        unsetZCETotalTradedVolume();
      } else {
        setZCETotalTradedVolume((Integer)value);
      }
      break;

    case IS_SWAP_ORDER:
      if (value == null) {
        unsetIsSwapOrder();
      } else {
        setIsSwapOrder((Boolean)value);
      }
      break;

    case SLED_ID:
      if (value == null) {
        unsetSledId();
      } else {
        setSledId((String)value);
      }
      break;

    case INSERT_DATE_TIME:
      if (value == null) {
        unsetInsertDateTime();
      } else {
        setInsertDateTime((Long)value);
      }
      break;

    case UPDATE_DATE_TIME:
      if (value == null) {
        unsetUpdateDateTime();
      } else {
        setUpdateDateTime((Long)value);
      }
      break;

    case CANCEL_DATE_TIME:
      if (value == null) {
        unsetCancelDateTime();
      } else {
        setCancelDateTime((Long)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTRUMENT_ID:
      return getInstrumentID();

    case ORDER_REF:
      return getOrderRef();

    case ORDER_PRICE_TYPE:
      return Byte.valueOf(getOrderPriceType());

    case DIRECTION:
      return Byte.valueOf(getDirection());

    case COMB_OFFSET_FLAG:
      return getCombOffsetFlag();

    case COMB_HEDGE_FLAG:
      return getCombHedgeFlag();

    case LIMIT_PRICE:
      return Double.valueOf(getLimitPrice());

    case VOLUME_TOTAL_ORIGINAL:
      return Integer.valueOf(getVolumeTotalOriginal());

    case TIME_CONDITION:
      return Byte.valueOf(getTimeCondition());

    case GTDDATE:
      return getGTDDate();

    case VOLUME_CONDITION:
      return Byte.valueOf(getVolumeCondition());

    case MIN_VOLUME:
      return Integer.valueOf(getMinVolume());

    case CONTINGENT_CONDITION:
      return Byte.valueOf(getContingentCondition());

    case STOP_PRICE:
      return Double.valueOf(getStopPrice());

    case FORCE_CLOSE_REASON:
      return Byte.valueOf(getForceCloseReason());

    case IS_AUTO_SUSPEND:
      return Boolean.valueOf(isIsAutoSuspend());

    case BUSINESS_UNIT:
      return getBusinessUnit();

    case REQUEST_ID:
      return Integer.valueOf(getRequestID());

    case ORDER_LOCAL_ID:
      return getOrderLocalID();

    case EXCHANGE_ID:
      return getExchangeID();

    case PARTICIPANT_ID:
      return getParticipantID();

    case CLIENT_ID:
      return getClientID();

    case EXCHANGE_INST_ID:
      return getExchangeInstID();

    case TRADER_ID:
      return getTraderID();

    case INSTALL_ID:
      return Integer.valueOf(getInstallID());

    case ORDER_SUBMIT_STATUS:
      return Byte.valueOf(getOrderSubmitStatus());

    case NOTIFY_SEQUENCE:
      return Integer.valueOf(getNotifySequence());

    case TRADING_DAY:
      return getTradingDay();

    case SETTLEMENT_ID:
      return Integer.valueOf(getSettlementID());

    case ORDER_SYS_ID:
      return getOrderSysID();

    case ORDER_SOURCE:
      return Byte.valueOf(getOrderSource());

    case ORDER_STATUS:
      return Byte.valueOf(getOrderStatus());

    case ORDER_TYPE:
      return Byte.valueOf(getOrderType());

    case VOLUME_TRADED:
      return Integer.valueOf(getVolumeTraded());

    case VOLUME_TOTAL:
      return Integer.valueOf(getVolumeTotal());

    case INSERT_DATE:
      return getInsertDate();

    case INSERT_TIME:
      return getInsertTime();

    case ACTIVE_TIME:
      return getActiveTime();

    case SUSPEND_TIME:
      return getSuspendTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case CANCEL_TIME:
      return getCancelTime();

    case ACTIVE_TRADER_ID:
      return getActiveTraderID();

    case CLEARING_PART_ID:
      return getClearingPartID();

    case SEQUENCE_NO:
      return Integer.valueOf(getSequenceNo());

    case FRONT_ID:
      return Integer.valueOf(getFrontID());

    case SESSION_ID:
      return Integer.valueOf(getSessionID());

    case USER_PRODUCT_INFO:
      return getUserProductInfo();

    case STATUS_MSG:
      return getStatusMsg();

    case USER_FORCE_CLOSE:
      return Boolean.valueOf(isUserForceClose());

    case ACTIVE_USER_ID:
      return getActiveUserID();

    case BROKER_ORDER_SEQ:
      return Integer.valueOf(getBrokerOrderSeq());

    case RELATIVE_ORDER_SYS_ID:
      return getRelativeOrderSysID();

    case ZCETOTAL_TRADED_VOLUME:
      return Integer.valueOf(getZCETotalTradedVolume());

    case IS_SWAP_ORDER:
      return Boolean.valueOf(isIsSwapOrder());

    case SLED_ID:
      return getSledId();

    case INSERT_DATE_TIME:
      return Long.valueOf(getInsertDateTime());

    case UPDATE_DATE_TIME:
      return Long.valueOf(getUpdateDateTime());

    case CANCEL_DATE_TIME:
      return Long.valueOf(getCancelDateTime());

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case ORDER_REF:
      return isSetOrderRef();
    case ORDER_PRICE_TYPE:
      return isSetOrderPriceType();
    case DIRECTION:
      return isSetDirection();
    case COMB_OFFSET_FLAG:
      return isSetCombOffsetFlag();
    case COMB_HEDGE_FLAG:
      return isSetCombHedgeFlag();
    case LIMIT_PRICE:
      return isSetLimitPrice();
    case VOLUME_TOTAL_ORIGINAL:
      return isSetVolumeTotalOriginal();
    case TIME_CONDITION:
      return isSetTimeCondition();
    case GTDDATE:
      return isSetGTDDate();
    case VOLUME_CONDITION:
      return isSetVolumeCondition();
    case MIN_VOLUME:
      return isSetMinVolume();
    case CONTINGENT_CONDITION:
      return isSetContingentCondition();
    case STOP_PRICE:
      return isSetStopPrice();
    case FORCE_CLOSE_REASON:
      return isSetForceCloseReason();
    case IS_AUTO_SUSPEND:
      return isSetIsAutoSuspend();
    case BUSINESS_UNIT:
      return isSetBusinessUnit();
    case REQUEST_ID:
      return isSetRequestID();
    case ORDER_LOCAL_ID:
      return isSetOrderLocalID();
    case EXCHANGE_ID:
      return isSetExchangeID();
    case PARTICIPANT_ID:
      return isSetParticipantID();
    case CLIENT_ID:
      return isSetClientID();
    case EXCHANGE_INST_ID:
      return isSetExchangeInstID();
    case TRADER_ID:
      return isSetTraderID();
    case INSTALL_ID:
      return isSetInstallID();
    case ORDER_SUBMIT_STATUS:
      return isSetOrderSubmitStatus();
    case NOTIFY_SEQUENCE:
      return isSetNotifySequence();
    case TRADING_DAY:
      return isSetTradingDay();
    case SETTLEMENT_ID:
      return isSetSettlementID();
    case ORDER_SYS_ID:
      return isSetOrderSysID();
    case ORDER_SOURCE:
      return isSetOrderSource();
    case ORDER_STATUS:
      return isSetOrderStatus();
    case ORDER_TYPE:
      return isSetOrderType();
    case VOLUME_TRADED:
      return isSetVolumeTraded();
    case VOLUME_TOTAL:
      return isSetVolumeTotal();
    case INSERT_DATE:
      return isSetInsertDate();
    case INSERT_TIME:
      return isSetInsertTime();
    case ACTIVE_TIME:
      return isSetActiveTime();
    case SUSPEND_TIME:
      return isSetSuspendTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case CANCEL_TIME:
      return isSetCancelTime();
    case ACTIVE_TRADER_ID:
      return isSetActiveTraderID();
    case CLEARING_PART_ID:
      return isSetClearingPartID();
    case SEQUENCE_NO:
      return isSetSequenceNo();
    case FRONT_ID:
      return isSetFrontID();
    case SESSION_ID:
      return isSetSessionID();
    case USER_PRODUCT_INFO:
      return isSetUserProductInfo();
    case STATUS_MSG:
      return isSetStatusMsg();
    case USER_FORCE_CLOSE:
      return isSetUserForceClose();
    case ACTIVE_USER_ID:
      return isSetActiveUserID();
    case BROKER_ORDER_SEQ:
      return isSetBrokerOrderSeq();
    case RELATIVE_ORDER_SYS_ID:
      return isSetRelativeOrderSysID();
    case ZCETOTAL_TRADED_VOLUME:
      return isSetZCETotalTradedVolume();
    case IS_SWAP_ORDER:
      return isSetIsSwapOrder();
    case SLED_ID:
      return isSetSledId();
    case INSERT_DATE_TIME:
      return isSetInsertDateTime();
    case UPDATE_DATE_TIME:
      return isSetUpdateDateTime();
    case CANCEL_DATE_TIME:
      return isSetCancelDateTime();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    case USER_ID:
      return isSetUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CtpOrderField)
      return this.equals((CtpOrderField)that);
    return false;
  }

  public boolean equals(CtpOrderField that) {
    if (that == null)
      return false;

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_orderRef = true && this.isSetOrderRef();
    boolean that_present_orderRef = true && that.isSetOrderRef();
    if (this_present_orderRef || that_present_orderRef) {
      if (!(this_present_orderRef && that_present_orderRef))
        return false;
      if (!this.orderRef.equals(that.orderRef))
        return false;
    }

    boolean this_present_orderPriceType = true && this.isSetOrderPriceType();
    boolean that_present_orderPriceType = true && that.isSetOrderPriceType();
    if (this_present_orderPriceType || that_present_orderPriceType) {
      if (!(this_present_orderPriceType && that_present_orderPriceType))
        return false;
      if (this.orderPriceType != that.orderPriceType)
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (this.direction != that.direction)
        return false;
    }

    boolean this_present_combOffsetFlag = true && this.isSetCombOffsetFlag();
    boolean that_present_combOffsetFlag = true && that.isSetCombOffsetFlag();
    if (this_present_combOffsetFlag || that_present_combOffsetFlag) {
      if (!(this_present_combOffsetFlag && that_present_combOffsetFlag))
        return false;
      if (!this.combOffsetFlag.equals(that.combOffsetFlag))
        return false;
    }

    boolean this_present_combHedgeFlag = true && this.isSetCombHedgeFlag();
    boolean that_present_combHedgeFlag = true && that.isSetCombHedgeFlag();
    if (this_present_combHedgeFlag || that_present_combHedgeFlag) {
      if (!(this_present_combHedgeFlag && that_present_combHedgeFlag))
        return false;
      if (!this.combHedgeFlag.equals(that.combHedgeFlag))
        return false;
    }

    boolean this_present_limitPrice = true && this.isSetLimitPrice();
    boolean that_present_limitPrice = true && that.isSetLimitPrice();
    if (this_present_limitPrice || that_present_limitPrice) {
      if (!(this_present_limitPrice && that_present_limitPrice))
        return false;
      if (this.limitPrice != that.limitPrice)
        return false;
    }

    boolean this_present_volumeTotalOriginal = true && this.isSetVolumeTotalOriginal();
    boolean that_present_volumeTotalOriginal = true && that.isSetVolumeTotalOriginal();
    if (this_present_volumeTotalOriginal || that_present_volumeTotalOriginal) {
      if (!(this_present_volumeTotalOriginal && that_present_volumeTotalOriginal))
        return false;
      if (this.volumeTotalOriginal != that.volumeTotalOriginal)
        return false;
    }

    boolean this_present_timeCondition = true && this.isSetTimeCondition();
    boolean that_present_timeCondition = true && that.isSetTimeCondition();
    if (this_present_timeCondition || that_present_timeCondition) {
      if (!(this_present_timeCondition && that_present_timeCondition))
        return false;
      if (this.timeCondition != that.timeCondition)
        return false;
    }

    boolean this_present_GTDDate = true && this.isSetGTDDate();
    boolean that_present_GTDDate = true && that.isSetGTDDate();
    if (this_present_GTDDate || that_present_GTDDate) {
      if (!(this_present_GTDDate && that_present_GTDDate))
        return false;
      if (!this.GTDDate.equals(that.GTDDate))
        return false;
    }

    boolean this_present_volumeCondition = true && this.isSetVolumeCondition();
    boolean that_present_volumeCondition = true && that.isSetVolumeCondition();
    if (this_present_volumeCondition || that_present_volumeCondition) {
      if (!(this_present_volumeCondition && that_present_volumeCondition))
        return false;
      if (this.volumeCondition != that.volumeCondition)
        return false;
    }

    boolean this_present_minVolume = true && this.isSetMinVolume();
    boolean that_present_minVolume = true && that.isSetMinVolume();
    if (this_present_minVolume || that_present_minVolume) {
      if (!(this_present_minVolume && that_present_minVolume))
        return false;
      if (this.minVolume != that.minVolume)
        return false;
    }

    boolean this_present_contingentCondition = true && this.isSetContingentCondition();
    boolean that_present_contingentCondition = true && that.isSetContingentCondition();
    if (this_present_contingentCondition || that_present_contingentCondition) {
      if (!(this_present_contingentCondition && that_present_contingentCondition))
        return false;
      if (this.contingentCondition != that.contingentCondition)
        return false;
    }

    boolean this_present_stopPrice = true && this.isSetStopPrice();
    boolean that_present_stopPrice = true && that.isSetStopPrice();
    if (this_present_stopPrice || that_present_stopPrice) {
      if (!(this_present_stopPrice && that_present_stopPrice))
        return false;
      if (this.stopPrice != that.stopPrice)
        return false;
    }

    boolean this_present_forceCloseReason = true && this.isSetForceCloseReason();
    boolean that_present_forceCloseReason = true && that.isSetForceCloseReason();
    if (this_present_forceCloseReason || that_present_forceCloseReason) {
      if (!(this_present_forceCloseReason && that_present_forceCloseReason))
        return false;
      if (this.forceCloseReason != that.forceCloseReason)
        return false;
    }

    boolean this_present_isAutoSuspend = true && this.isSetIsAutoSuspend();
    boolean that_present_isAutoSuspend = true && that.isSetIsAutoSuspend();
    if (this_present_isAutoSuspend || that_present_isAutoSuspend) {
      if (!(this_present_isAutoSuspend && that_present_isAutoSuspend))
        return false;
      if (this.isAutoSuspend != that.isAutoSuspend)
        return false;
    }

    boolean this_present_businessUnit = true && this.isSetBusinessUnit();
    boolean that_present_businessUnit = true && that.isSetBusinessUnit();
    if (this_present_businessUnit || that_present_businessUnit) {
      if (!(this_present_businessUnit && that_present_businessUnit))
        return false;
      if (!this.businessUnit.equals(that.businessUnit))
        return false;
    }

    boolean this_present_requestID = true && this.isSetRequestID();
    boolean that_present_requestID = true && that.isSetRequestID();
    if (this_present_requestID || that_present_requestID) {
      if (!(this_present_requestID && that_present_requestID))
        return false;
      if (this.requestID != that.requestID)
        return false;
    }

    boolean this_present_orderLocalID = true && this.isSetOrderLocalID();
    boolean that_present_orderLocalID = true && that.isSetOrderLocalID();
    if (this_present_orderLocalID || that_present_orderLocalID) {
      if (!(this_present_orderLocalID && that_present_orderLocalID))
        return false;
      if (!this.orderLocalID.equals(that.orderLocalID))
        return false;
    }

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_participantID = true && this.isSetParticipantID();
    boolean that_present_participantID = true && that.isSetParticipantID();
    if (this_present_participantID || that_present_participantID) {
      if (!(this_present_participantID && that_present_participantID))
        return false;
      if (!this.participantID.equals(that.participantID))
        return false;
    }

    boolean this_present_clientID = true && this.isSetClientID();
    boolean that_present_clientID = true && that.isSetClientID();
    if (this_present_clientID || that_present_clientID) {
      if (!(this_present_clientID && that_present_clientID))
        return false;
      if (!this.clientID.equals(that.clientID))
        return false;
    }

    boolean this_present_exchangeInstID = true && this.isSetExchangeInstID();
    boolean that_present_exchangeInstID = true && that.isSetExchangeInstID();
    if (this_present_exchangeInstID || that_present_exchangeInstID) {
      if (!(this_present_exchangeInstID && that_present_exchangeInstID))
        return false;
      if (!this.exchangeInstID.equals(that.exchangeInstID))
        return false;
    }

    boolean this_present_traderID = true && this.isSetTraderID();
    boolean that_present_traderID = true && that.isSetTraderID();
    if (this_present_traderID || that_present_traderID) {
      if (!(this_present_traderID && that_present_traderID))
        return false;
      if (!this.traderID.equals(that.traderID))
        return false;
    }

    boolean this_present_installID = true && this.isSetInstallID();
    boolean that_present_installID = true && that.isSetInstallID();
    if (this_present_installID || that_present_installID) {
      if (!(this_present_installID && that_present_installID))
        return false;
      if (this.installID != that.installID)
        return false;
    }

    boolean this_present_orderSubmitStatus = true && this.isSetOrderSubmitStatus();
    boolean that_present_orderSubmitStatus = true && that.isSetOrderSubmitStatus();
    if (this_present_orderSubmitStatus || that_present_orderSubmitStatus) {
      if (!(this_present_orderSubmitStatus && that_present_orderSubmitStatus))
        return false;
      if (this.orderSubmitStatus != that.orderSubmitStatus)
        return false;
    }

    boolean this_present_notifySequence = true && this.isSetNotifySequence();
    boolean that_present_notifySequence = true && that.isSetNotifySequence();
    if (this_present_notifySequence || that_present_notifySequence) {
      if (!(this_present_notifySequence && that_present_notifySequence))
        return false;
      if (this.notifySequence != that.notifySequence)
        return false;
    }

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_settlementID = true && this.isSetSettlementID();
    boolean that_present_settlementID = true && that.isSetSettlementID();
    if (this_present_settlementID || that_present_settlementID) {
      if (!(this_present_settlementID && that_present_settlementID))
        return false;
      if (this.settlementID != that.settlementID)
        return false;
    }

    boolean this_present_orderSysID = true && this.isSetOrderSysID();
    boolean that_present_orderSysID = true && that.isSetOrderSysID();
    if (this_present_orderSysID || that_present_orderSysID) {
      if (!(this_present_orderSysID && that_present_orderSysID))
        return false;
      if (!this.orderSysID.equals(that.orderSysID))
        return false;
    }

    boolean this_present_orderSource = true && this.isSetOrderSource();
    boolean that_present_orderSource = true && that.isSetOrderSource();
    if (this_present_orderSource || that_present_orderSource) {
      if (!(this_present_orderSource && that_present_orderSource))
        return false;
      if (this.orderSource != that.orderSource)
        return false;
    }

    boolean this_present_orderStatus = true && this.isSetOrderStatus();
    boolean that_present_orderStatus = true && that.isSetOrderStatus();
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (this.orderStatus != that.orderStatus)
        return false;
    }

    boolean this_present_orderType = true && this.isSetOrderType();
    boolean that_present_orderType = true && that.isSetOrderType();
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (this.orderType != that.orderType)
        return false;
    }

    boolean this_present_volumeTraded = true && this.isSetVolumeTraded();
    boolean that_present_volumeTraded = true && that.isSetVolumeTraded();
    if (this_present_volumeTraded || that_present_volumeTraded) {
      if (!(this_present_volumeTraded && that_present_volumeTraded))
        return false;
      if (this.volumeTraded != that.volumeTraded)
        return false;
    }

    boolean this_present_volumeTotal = true && this.isSetVolumeTotal();
    boolean that_present_volumeTotal = true && that.isSetVolumeTotal();
    if (this_present_volumeTotal || that_present_volumeTotal) {
      if (!(this_present_volumeTotal && that_present_volumeTotal))
        return false;
      if (this.volumeTotal != that.volumeTotal)
        return false;
    }

    boolean this_present_insertDate = true && this.isSetInsertDate();
    boolean that_present_insertDate = true && that.isSetInsertDate();
    if (this_present_insertDate || that_present_insertDate) {
      if (!(this_present_insertDate && that_present_insertDate))
        return false;
      if (!this.insertDate.equals(that.insertDate))
        return false;
    }

    boolean this_present_insertTime = true && this.isSetInsertTime();
    boolean that_present_insertTime = true && that.isSetInsertTime();
    if (this_present_insertTime || that_present_insertTime) {
      if (!(this_present_insertTime && that_present_insertTime))
        return false;
      if (!this.insertTime.equals(that.insertTime))
        return false;
    }

    boolean this_present_activeTime = true && this.isSetActiveTime();
    boolean that_present_activeTime = true && that.isSetActiveTime();
    if (this_present_activeTime || that_present_activeTime) {
      if (!(this_present_activeTime && that_present_activeTime))
        return false;
      if (!this.activeTime.equals(that.activeTime))
        return false;
    }

    boolean this_present_suspendTime = true && this.isSetSuspendTime();
    boolean that_present_suspendTime = true && that.isSetSuspendTime();
    if (this_present_suspendTime || that_present_suspendTime) {
      if (!(this_present_suspendTime && that_present_suspendTime))
        return false;
      if (!this.suspendTime.equals(that.suspendTime))
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_cancelTime = true && this.isSetCancelTime();
    boolean that_present_cancelTime = true && that.isSetCancelTime();
    if (this_present_cancelTime || that_present_cancelTime) {
      if (!(this_present_cancelTime && that_present_cancelTime))
        return false;
      if (!this.cancelTime.equals(that.cancelTime))
        return false;
    }

    boolean this_present_activeTraderID = true && this.isSetActiveTraderID();
    boolean that_present_activeTraderID = true && that.isSetActiveTraderID();
    if (this_present_activeTraderID || that_present_activeTraderID) {
      if (!(this_present_activeTraderID && that_present_activeTraderID))
        return false;
      if (!this.activeTraderID.equals(that.activeTraderID))
        return false;
    }

    boolean this_present_clearingPartID = true && this.isSetClearingPartID();
    boolean that_present_clearingPartID = true && that.isSetClearingPartID();
    if (this_present_clearingPartID || that_present_clearingPartID) {
      if (!(this_present_clearingPartID && that_present_clearingPartID))
        return false;
      if (!this.clearingPartID.equals(that.clearingPartID))
        return false;
    }

    boolean this_present_sequenceNo = true && this.isSetSequenceNo();
    boolean that_present_sequenceNo = true && that.isSetSequenceNo();
    if (this_present_sequenceNo || that_present_sequenceNo) {
      if (!(this_present_sequenceNo && that_present_sequenceNo))
        return false;
      if (this.sequenceNo != that.sequenceNo)
        return false;
    }

    boolean this_present_frontID = true && this.isSetFrontID();
    boolean that_present_frontID = true && that.isSetFrontID();
    if (this_present_frontID || that_present_frontID) {
      if (!(this_present_frontID && that_present_frontID))
        return false;
      if (this.frontID != that.frontID)
        return false;
    }

    boolean this_present_sessionID = true && this.isSetSessionID();
    boolean that_present_sessionID = true && that.isSetSessionID();
    if (this_present_sessionID || that_present_sessionID) {
      if (!(this_present_sessionID && that_present_sessionID))
        return false;
      if (this.sessionID != that.sessionID)
        return false;
    }

    boolean this_present_userProductInfo = true && this.isSetUserProductInfo();
    boolean that_present_userProductInfo = true && that.isSetUserProductInfo();
    if (this_present_userProductInfo || that_present_userProductInfo) {
      if (!(this_present_userProductInfo && that_present_userProductInfo))
        return false;
      if (!this.userProductInfo.equals(that.userProductInfo))
        return false;
    }

    boolean this_present_statusMsg = true && this.isSetStatusMsg();
    boolean that_present_statusMsg = true && that.isSetStatusMsg();
    if (this_present_statusMsg || that_present_statusMsg) {
      if (!(this_present_statusMsg && that_present_statusMsg))
        return false;
      if (!this.statusMsg.equals(that.statusMsg))
        return false;
    }

    boolean this_present_userForceClose = true && this.isSetUserForceClose();
    boolean that_present_userForceClose = true && that.isSetUserForceClose();
    if (this_present_userForceClose || that_present_userForceClose) {
      if (!(this_present_userForceClose && that_present_userForceClose))
        return false;
      if (this.userForceClose != that.userForceClose)
        return false;
    }

    boolean this_present_activeUserID = true && this.isSetActiveUserID();
    boolean that_present_activeUserID = true && that.isSetActiveUserID();
    if (this_present_activeUserID || that_present_activeUserID) {
      if (!(this_present_activeUserID && that_present_activeUserID))
        return false;
      if (!this.activeUserID.equals(that.activeUserID))
        return false;
    }

    boolean this_present_brokerOrderSeq = true && this.isSetBrokerOrderSeq();
    boolean that_present_brokerOrderSeq = true && that.isSetBrokerOrderSeq();
    if (this_present_brokerOrderSeq || that_present_brokerOrderSeq) {
      if (!(this_present_brokerOrderSeq && that_present_brokerOrderSeq))
        return false;
      if (this.brokerOrderSeq != that.brokerOrderSeq)
        return false;
    }

    boolean this_present_relativeOrderSysID = true && this.isSetRelativeOrderSysID();
    boolean that_present_relativeOrderSysID = true && that.isSetRelativeOrderSysID();
    if (this_present_relativeOrderSysID || that_present_relativeOrderSysID) {
      if (!(this_present_relativeOrderSysID && that_present_relativeOrderSysID))
        return false;
      if (!this.relativeOrderSysID.equals(that.relativeOrderSysID))
        return false;
    }

    boolean this_present_ZCETotalTradedVolume = true && this.isSetZCETotalTradedVolume();
    boolean that_present_ZCETotalTradedVolume = true && that.isSetZCETotalTradedVolume();
    if (this_present_ZCETotalTradedVolume || that_present_ZCETotalTradedVolume) {
      if (!(this_present_ZCETotalTradedVolume && that_present_ZCETotalTradedVolume))
        return false;
      if (this.ZCETotalTradedVolume != that.ZCETotalTradedVolume)
        return false;
    }

    boolean this_present_isSwapOrder = true && this.isSetIsSwapOrder();
    boolean that_present_isSwapOrder = true && that.isSetIsSwapOrder();
    if (this_present_isSwapOrder || that_present_isSwapOrder) {
      if (!(this_present_isSwapOrder && that_present_isSwapOrder))
        return false;
      if (this.isSwapOrder != that.isSwapOrder)
        return false;
    }

    boolean this_present_sledId = true && this.isSetSledId();
    boolean that_present_sledId = true && that.isSetSledId();
    if (this_present_sledId || that_present_sledId) {
      if (!(this_present_sledId && that_present_sledId))
        return false;
      if (!this.sledId.equals(that.sledId))
        return false;
    }

    boolean this_present_insertDateTime = true && this.isSetInsertDateTime();
    boolean that_present_insertDateTime = true && that.isSetInsertDateTime();
    if (this_present_insertDateTime || that_present_insertDateTime) {
      if (!(this_present_insertDateTime && that_present_insertDateTime))
        return false;
      if (this.insertDateTime != that.insertDateTime)
        return false;
    }

    boolean this_present_updateDateTime = true && this.isSetUpdateDateTime();
    boolean that_present_updateDateTime = true && that.isSetUpdateDateTime();
    if (this_present_updateDateTime || that_present_updateDateTime) {
      if (!(this_present_updateDateTime && that_present_updateDateTime))
        return false;
      if (this.updateDateTime != that.updateDateTime)
        return false;
    }

    boolean this_present_cancelDateTime = true && this.isSetCancelDateTime();
    boolean that_present_cancelDateTime = true && that.isSetCancelDateTime();
    if (this_present_cancelDateTime || that_present_cancelDateTime) {
      if (!(this_present_cancelDateTime && that_present_cancelDateTime))
        return false;
      if (this.cancelDateTime != that.cancelDateTime)
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CtpOrderField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderRef()).compareTo(other.isSetOrderRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderRef, other.orderRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderPriceType()).compareTo(other.isSetOrderPriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderPriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderPriceType, other.orderPriceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombOffsetFlag()).compareTo(other.isSetCombOffsetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombOffsetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combOffsetFlag, other.combOffsetFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombHedgeFlag()).compareTo(other.isSetCombHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combHedgeFlag, other.combHedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitPrice()).compareTo(other.isSetLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitPrice, other.limitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeTotalOriginal()).compareTo(other.isSetVolumeTotalOriginal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeTotalOriginal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeTotalOriginal, other.volumeTotalOriginal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeCondition()).compareTo(other.isSetTimeCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeCondition, other.timeCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGTDDate()).compareTo(other.isSetGTDDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGTDDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GTDDate, other.GTDDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeCondition()).compareTo(other.isSetVolumeCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeCondition, other.volumeCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinVolume()).compareTo(other.isSetMinVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minVolume, other.minVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContingentCondition()).compareTo(other.isSetContingentCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContingentCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contingentCondition, other.contingentCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopPrice()).compareTo(other.isSetStopPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopPrice, other.stopPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForceCloseReason()).compareTo(other.isSetForceCloseReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForceCloseReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forceCloseReason, other.forceCloseReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAutoSuspend()).compareTo(other.isSetIsAutoSuspend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAutoSuspend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAutoSuspend, other.isAutoSuspend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessUnit()).compareTo(other.isSetBusinessUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessUnit, other.businessUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestID()).compareTo(other.isSetRequestID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderLocalID()).compareTo(other.isSetOrderLocalID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderLocalID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderLocalID, other.orderLocalID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParticipantID()).compareTo(other.isSetParticipantID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParticipantID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.participantID, other.participantID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientID()).compareTo(other.isSetClientID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientID, other.clientID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeInstID()).compareTo(other.isSetExchangeInstID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeInstID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeInstID, other.exchangeInstID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraderID()).compareTo(other.isSetTraderID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraderID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traderID, other.traderID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstallID()).compareTo(other.isSetInstallID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstallID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.installID, other.installID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderSubmitStatus()).compareTo(other.isSetOrderSubmitStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderSubmitStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderSubmitStatus, other.orderSubmitStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifySequence()).compareTo(other.isSetNotifySequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifySequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifySequence, other.notifySequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementID()).compareTo(other.isSetSettlementID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementID, other.settlementID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderSysID()).compareTo(other.isSetOrderSysID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderSysID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderSysID, other.orderSysID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderSource()).compareTo(other.isSetOrderSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderSource, other.orderSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeTraded()).compareTo(other.isSetVolumeTraded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeTraded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeTraded, other.volumeTraded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeTotal()).compareTo(other.isSetVolumeTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeTotal, other.volumeTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertDate()).compareTo(other.isSetInsertDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertDate, other.insertDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertTime()).compareTo(other.isSetInsertTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertTime, other.insertTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveTime()).compareTo(other.isSetActiveTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeTime, other.activeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuspendTime()).compareTo(other.isSetSuspendTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuspendTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suspendTime, other.suspendTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelTime()).compareTo(other.isSetCancelTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelTime, other.cancelTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveTraderID()).compareTo(other.isSetActiveTraderID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveTraderID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeTraderID, other.activeTraderID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClearingPartID()).compareTo(other.isSetClearingPartID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearingPartID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearingPartID, other.clearingPartID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequenceNo()).compareTo(other.isSetSequenceNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequenceNo, other.sequenceNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrontID()).compareTo(other.isSetFrontID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrontID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frontID, other.frontID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserProductInfo()).compareTo(other.isSetUserProductInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserProductInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProductInfo, other.userProductInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusMsg()).compareTo(other.isSetStatusMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusMsg, other.statusMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserForceClose()).compareTo(other.isSetUserForceClose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserForceClose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userForceClose, other.userForceClose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveUserID()).compareTo(other.isSetActiveUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeUserID, other.activeUserID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerOrderSeq()).compareTo(other.isSetBrokerOrderSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerOrderSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerOrderSeq, other.brokerOrderSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelativeOrderSysID()).compareTo(other.isSetRelativeOrderSysID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelativeOrderSysID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relativeOrderSysID, other.relativeOrderSysID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZCETotalTradedVolume()).compareTo(other.isSetZCETotalTradedVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZCETotalTradedVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ZCETotalTradedVolume, other.ZCETotalTradedVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSwapOrder()).compareTo(other.isSetIsSwapOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSwapOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSwapOrder, other.isSwapOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledId()).compareTo(other.isSetSledId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledId, other.sledId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertDateTime()).compareTo(other.isSetInsertDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertDateTime, other.insertDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDateTime()).compareTo(other.isSetUpdateDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDateTime, other.updateDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelDateTime()).compareTo(other.isSetCancelDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelDateTime, other.cancelDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CtpOrderField(");
    boolean first = true;

    if (isSetInstrumentID()) {
      sb.append("instrumentID:");
      if (this.instrumentID == null) {
        sb.append("null");
      } else {
        sb.append(this.instrumentID);
      }
      first = false;
    }
    if (isSetOrderRef()) {
      if (!first) sb.append(", ");
      sb.append("orderRef:");
      if (this.orderRef == null) {
        sb.append("null");
      } else {
        sb.append(this.orderRef);
      }
      first = false;
    }
    if (isSetOrderPriceType()) {
      if (!first) sb.append(", ");
      sb.append("orderPriceType:");
      sb.append(this.orderPriceType);
      first = false;
    }
    if (isSetDirection()) {
      if (!first) sb.append(", ");
      sb.append("direction:");
      sb.append(this.direction);
      first = false;
    }
    if (isSetCombOffsetFlag()) {
      if (!first) sb.append(", ");
      sb.append("combOffsetFlag:");
      if (this.combOffsetFlag == null) {
        sb.append("null");
      } else {
        sb.append(this.combOffsetFlag);
      }
      first = false;
    }
    if (isSetCombHedgeFlag()) {
      if (!first) sb.append(", ");
      sb.append("combHedgeFlag:");
      if (this.combHedgeFlag == null) {
        sb.append("null");
      } else {
        sb.append(this.combHedgeFlag);
      }
      first = false;
    }
    if (isSetLimitPrice()) {
      if (!first) sb.append(", ");
      sb.append("limitPrice:");
      sb.append(this.limitPrice);
      first = false;
    }
    if (isSetVolumeTotalOriginal()) {
      if (!first) sb.append(", ");
      sb.append("volumeTotalOriginal:");
      sb.append(this.volumeTotalOriginal);
      first = false;
    }
    if (isSetTimeCondition()) {
      if (!first) sb.append(", ");
      sb.append("timeCondition:");
      sb.append(this.timeCondition);
      first = false;
    }
    if (isSetGTDDate()) {
      if (!first) sb.append(", ");
      sb.append("GTDDate:");
      if (this.GTDDate == null) {
        sb.append("null");
      } else {
        sb.append(this.GTDDate);
      }
      first = false;
    }
    if (isSetVolumeCondition()) {
      if (!first) sb.append(", ");
      sb.append("volumeCondition:");
      sb.append(this.volumeCondition);
      first = false;
    }
    if (isSetMinVolume()) {
      if (!first) sb.append(", ");
      sb.append("minVolume:");
      sb.append(this.minVolume);
      first = false;
    }
    if (isSetContingentCondition()) {
      if (!first) sb.append(", ");
      sb.append("contingentCondition:");
      sb.append(this.contingentCondition);
      first = false;
    }
    if (isSetStopPrice()) {
      if (!first) sb.append(", ");
      sb.append("stopPrice:");
      sb.append(this.stopPrice);
      first = false;
    }
    if (isSetForceCloseReason()) {
      if (!first) sb.append(", ");
      sb.append("forceCloseReason:");
      sb.append(this.forceCloseReason);
      first = false;
    }
    if (isSetIsAutoSuspend()) {
      if (!first) sb.append(", ");
      sb.append("isAutoSuspend:");
      sb.append(this.isAutoSuspend);
      first = false;
    }
    if (isSetBusinessUnit()) {
      if (!first) sb.append(", ");
      sb.append("businessUnit:");
      if (this.businessUnit == null) {
        sb.append("null");
      } else {
        sb.append(this.businessUnit);
      }
      first = false;
    }
    if (isSetRequestID()) {
      if (!first) sb.append(", ");
      sb.append("requestID:");
      sb.append(this.requestID);
      first = false;
    }
    if (isSetOrderLocalID()) {
      if (!first) sb.append(", ");
      sb.append("orderLocalID:");
      if (this.orderLocalID == null) {
        sb.append("null");
      } else {
        sb.append(this.orderLocalID);
      }
      first = false;
    }
    if (isSetExchangeID()) {
      if (!first) sb.append(", ");
      sb.append("exchangeID:");
      if (this.exchangeID == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeID);
      }
      first = false;
    }
    if (isSetParticipantID()) {
      if (!first) sb.append(", ");
      sb.append("participantID:");
      if (this.participantID == null) {
        sb.append("null");
      } else {
        sb.append(this.participantID);
      }
      first = false;
    }
    if (isSetClientID()) {
      if (!first) sb.append(", ");
      sb.append("clientID:");
      if (this.clientID == null) {
        sb.append("null");
      } else {
        sb.append(this.clientID);
      }
      first = false;
    }
    if (isSetExchangeInstID()) {
      if (!first) sb.append(", ");
      sb.append("exchangeInstID:");
      if (this.exchangeInstID == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeInstID);
      }
      first = false;
    }
    if (isSetTraderID()) {
      if (!first) sb.append(", ");
      sb.append("traderID:");
      if (this.traderID == null) {
        sb.append("null");
      } else {
        sb.append(this.traderID);
      }
      first = false;
    }
    if (isSetInstallID()) {
      if (!first) sb.append(", ");
      sb.append("installID:");
      sb.append(this.installID);
      first = false;
    }
    if (isSetOrderSubmitStatus()) {
      if (!first) sb.append(", ");
      sb.append("orderSubmitStatus:");
      sb.append(this.orderSubmitStatus);
      first = false;
    }
    if (isSetNotifySequence()) {
      if (!first) sb.append(", ");
      sb.append("notifySequence:");
      sb.append(this.notifySequence);
      first = false;
    }
    if (isSetTradingDay()) {
      if (!first) sb.append(", ");
      sb.append("tradingDay:");
      if (this.tradingDay == null) {
        sb.append("null");
      } else {
        sb.append(this.tradingDay);
      }
      first = false;
    }
    if (isSetSettlementID()) {
      if (!first) sb.append(", ");
      sb.append("settlementID:");
      sb.append(this.settlementID);
      first = false;
    }
    if (isSetOrderSysID()) {
      if (!first) sb.append(", ");
      sb.append("orderSysID:");
      if (this.orderSysID == null) {
        sb.append("null");
      } else {
        sb.append(this.orderSysID);
      }
      first = false;
    }
    if (isSetOrderSource()) {
      if (!first) sb.append(", ");
      sb.append("orderSource:");
      sb.append(this.orderSource);
      first = false;
    }
    if (isSetOrderStatus()) {
      if (!first) sb.append(", ");
      sb.append("orderStatus:");
      sb.append(this.orderStatus);
      first = false;
    }
    if (isSetOrderType()) {
      if (!first) sb.append(", ");
      sb.append("orderType:");
      sb.append(this.orderType);
      first = false;
    }
    if (isSetVolumeTraded()) {
      if (!first) sb.append(", ");
      sb.append("volumeTraded:");
      sb.append(this.volumeTraded);
      first = false;
    }
    if (isSetVolumeTotal()) {
      if (!first) sb.append(", ");
      sb.append("volumeTotal:");
      sb.append(this.volumeTotal);
      first = false;
    }
    if (isSetInsertDate()) {
      if (!first) sb.append(", ");
      sb.append("insertDate:");
      if (this.insertDate == null) {
        sb.append("null");
      } else {
        sb.append(this.insertDate);
      }
      first = false;
    }
    if (isSetInsertTime()) {
      if (!first) sb.append(", ");
      sb.append("insertTime:");
      if (this.insertTime == null) {
        sb.append("null");
      } else {
        sb.append(this.insertTime);
      }
      first = false;
    }
    if (isSetActiveTime()) {
      if (!first) sb.append(", ");
      sb.append("activeTime:");
      if (this.activeTime == null) {
        sb.append("null");
      } else {
        sb.append(this.activeTime);
      }
      first = false;
    }
    if (isSetSuspendTime()) {
      if (!first) sb.append(", ");
      sb.append("suspendTime:");
      if (this.suspendTime == null) {
        sb.append("null");
      } else {
        sb.append(this.suspendTime);
      }
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      if (this.updateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.updateTime);
      }
      first = false;
    }
    if (isSetCancelTime()) {
      if (!first) sb.append(", ");
      sb.append("cancelTime:");
      if (this.cancelTime == null) {
        sb.append("null");
      } else {
        sb.append(this.cancelTime);
      }
      first = false;
    }
    if (isSetActiveTraderID()) {
      if (!first) sb.append(", ");
      sb.append("activeTraderID:");
      if (this.activeTraderID == null) {
        sb.append("null");
      } else {
        sb.append(this.activeTraderID);
      }
      first = false;
    }
    if (isSetClearingPartID()) {
      if (!first) sb.append(", ");
      sb.append("clearingPartID:");
      if (this.clearingPartID == null) {
        sb.append("null");
      } else {
        sb.append(this.clearingPartID);
      }
      first = false;
    }
    if (isSetSequenceNo()) {
      if (!first) sb.append(", ");
      sb.append("sequenceNo:");
      sb.append(this.sequenceNo);
      first = false;
    }
    if (isSetFrontID()) {
      if (!first) sb.append(", ");
      sb.append("frontID:");
      sb.append(this.frontID);
      first = false;
    }
    if (isSetSessionID()) {
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      sb.append(this.sessionID);
      first = false;
    }
    if (isSetUserProductInfo()) {
      if (!first) sb.append(", ");
      sb.append("userProductInfo:");
      if (this.userProductInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.userProductInfo);
      }
      first = false;
    }
    if (isSetStatusMsg()) {
      if (!first) sb.append(", ");
      sb.append("statusMsg:");
      if (this.statusMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.statusMsg);
      }
      first = false;
    }
    if (isSetUserForceClose()) {
      if (!first) sb.append(", ");
      sb.append("userForceClose:");
      sb.append(this.userForceClose);
      first = false;
    }
    if (isSetActiveUserID()) {
      if (!first) sb.append(", ");
      sb.append("activeUserID:");
      if (this.activeUserID == null) {
        sb.append("null");
      } else {
        sb.append(this.activeUserID);
      }
      first = false;
    }
    if (isSetBrokerOrderSeq()) {
      if (!first) sb.append(", ");
      sb.append("brokerOrderSeq:");
      sb.append(this.brokerOrderSeq);
      first = false;
    }
    if (isSetRelativeOrderSysID()) {
      if (!first) sb.append(", ");
      sb.append("relativeOrderSysID:");
      if (this.relativeOrderSysID == null) {
        sb.append("null");
      } else {
        sb.append(this.relativeOrderSysID);
      }
      first = false;
    }
    if (isSetZCETotalTradedVolume()) {
      if (!first) sb.append(", ");
      sb.append("ZCETotalTradedVolume:");
      sb.append(this.ZCETotalTradedVolume);
      first = false;
    }
    if (isSetIsSwapOrder()) {
      if (!first) sb.append(", ");
      sb.append("isSwapOrder:");
      sb.append(this.isSwapOrder);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sledId:");
    if (this.sledId == null) {
      sb.append("null");
    } else {
      sb.append(this.sledId);
    }
    first = false;
    if (isSetInsertDateTime()) {
      if (!first) sb.append(", ");
      sb.append("insertDateTime:");
      sb.append(this.insertDateTime);
      first = false;
    }
    if (isSetUpdateDateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateDateTime:");
      sb.append(this.updateDateTime);
      first = false;
    }
    if (isSetCancelDateTime()) {
      if (!first) sb.append(", ");
      sb.append("cancelDateTime:");
      sb.append(this.cancelDateTime);
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sledId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sledId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CtpOrderFieldStandardSchemeFactory implements SchemeFactory {
    public CtpOrderFieldStandardScheme getScheme() {
      return new CtpOrderFieldStandardScheme();
    }
  }

  private static class CtpOrderFieldStandardScheme extends StandardScheme<CtpOrderField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CtpOrderField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderRef = iprot.readString();
              struct.setOrderRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORDER_PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.orderPriceType = iprot.readByte();
              struct.setOrderPriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.direction = iprot.readByte();
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMB_OFFSET_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.combOffsetFlag = iprot.readString();
              struct.setCombOffsetFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMB_HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.combHedgeFlag = iprot.readString();
              struct.setCombHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.limitPrice = iprot.readDouble();
              struct.setLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VOLUME_TOTAL_ORIGINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volumeTotalOriginal = iprot.readI32();
              struct.setVolumeTotalOriginalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TIME_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.timeCondition = iprot.readByte();
              struct.setTimeConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GTDDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.GTDDate = iprot.readString();
              struct.setGTDDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VOLUME_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.volumeCondition = iprot.readByte();
              struct.setVolumeConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MIN_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minVolume = iprot.readI32();
              struct.setMinVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CONTINGENT_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.contingentCondition = iprot.readByte();
              struct.setContingentConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STOP_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.stopPrice = iprot.readDouble();
              struct.setStopPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FORCE_CLOSE_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.forceCloseReason = iprot.readByte();
              struct.setForceCloseReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // IS_AUTO_SUSPEND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAutoSuspend = iprot.readBool();
              struct.setIsAutoSuspendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BUSINESS_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessUnit = iprot.readString();
              struct.setBusinessUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestID = iprot.readI32();
              struct.setRequestIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ORDER_LOCAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderLocalID = iprot.readString();
              struct.setOrderLocalIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PARTICIPANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.participantID = iprot.readString();
              struct.setParticipantIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientID = iprot.readString();
              struct.setClientIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // EXCHANGE_INST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeInstID = iprot.readString();
              struct.setExchangeInstIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TRADER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traderID = iprot.readString();
              struct.setTraderIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // INSTALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.installID = iprot.readI32();
              struct.setInstallIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ORDER_SUBMIT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.orderSubmitStatus = iprot.readByte();
              struct.setOrderSubmitStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // NOTIFY_SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notifySequence = iprot.readI32();
              struct.setNotifySequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // SETTLEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.settlementID = iprot.readI32();
              struct.setSettlementIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ORDER_SYS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderSysID = iprot.readString();
              struct.setOrderSysIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // ORDER_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.orderSource = iprot.readByte();
              struct.setOrderSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.orderStatus = iprot.readByte();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.orderType = iprot.readByte();
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // VOLUME_TRADED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volumeTraded = iprot.readI32();
              struct.setVolumeTradedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // VOLUME_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volumeTotal = iprot.readI32();
              struct.setVolumeTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // INSERT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.insertDate = iprot.readString();
              struct.setInsertDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // INSERT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.insertTime = iprot.readString();
              struct.setInsertTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // ACTIVE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeTime = iprot.readString();
              struct.setActiveTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // SUSPEND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.suspendTime = iprot.readString();
              struct.setSuspendTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // CANCEL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelTime = iprot.readString();
              struct.setCancelTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // ACTIVE_TRADER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeTraderID = iprot.readString();
              struct.setActiveTraderIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // CLEARING_PART_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clearingPartID = iprot.readString();
              struct.setClearingPartIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // SEQUENCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequenceNo = iprot.readI32();
              struct.setSequenceNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // FRONT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frontID = iprot.readI32();
              struct.setFrontIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionID = iprot.readI32();
              struct.setSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // USER_PRODUCT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userProductInfo = iprot.readString();
              struct.setUserProductInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // STATUS_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusMsg = iprot.readString();
              struct.setStatusMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // USER_FORCE_CLOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.userForceClose = iprot.readBool();
              struct.setUserForceCloseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // ACTIVE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeUserID = iprot.readString();
              struct.setActiveUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // BROKER_ORDER_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brokerOrderSeq = iprot.readI32();
              struct.setBrokerOrderSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // RELATIVE_ORDER_SYS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relativeOrderSysID = iprot.readString();
              struct.setRelativeOrderSysIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // ZCETOTAL_TRADED_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ZCETotalTradedVolume = iprot.readI32();
              struct.setZCETotalTradedVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // IS_SWAP_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSwapOrder = iprot.readBool();
              struct.setIsSwapOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // SLED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledId = iprot.readString();
              struct.setSledIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // INSERT_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.insertDateTime = iprot.readI64();
              struct.setInsertDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // UPDATE_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateDateTime = iprot.readI64();
              struct.setUpdateDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // CANCEL_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cancelDateTime = iprot.readI64();
              struct.setCancelDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CtpOrderField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instrumentID != null) {
        if (struct.isSetInstrumentID()) {
          oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
          oprot.writeString(struct.instrumentID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderRef != null) {
        if (struct.isSetOrderRef()) {
          oprot.writeFieldBegin(ORDER_REF_FIELD_DESC);
          oprot.writeString(struct.orderRef);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderPriceType()) {
        oprot.writeFieldBegin(ORDER_PRICE_TYPE_FIELD_DESC);
        oprot.writeByte(struct.orderPriceType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDirection()) {
        oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
        oprot.writeByte(struct.direction);
        oprot.writeFieldEnd();
      }
      if (struct.combOffsetFlag != null) {
        if (struct.isSetCombOffsetFlag()) {
          oprot.writeFieldBegin(COMB_OFFSET_FLAG_FIELD_DESC);
          oprot.writeString(struct.combOffsetFlag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.combHedgeFlag != null) {
        if (struct.isSetCombHedgeFlag()) {
          oprot.writeFieldBegin(COMB_HEDGE_FLAG_FIELD_DESC);
          oprot.writeString(struct.combHedgeFlag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLimitPrice()) {
        oprot.writeFieldBegin(LIMIT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.limitPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVolumeTotalOriginal()) {
        oprot.writeFieldBegin(VOLUME_TOTAL_ORIGINAL_FIELD_DESC);
        oprot.writeI32(struct.volumeTotalOriginal);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeCondition()) {
        oprot.writeFieldBegin(TIME_CONDITION_FIELD_DESC);
        oprot.writeByte(struct.timeCondition);
        oprot.writeFieldEnd();
      }
      if (struct.GTDDate != null) {
        if (struct.isSetGTDDate()) {
          oprot.writeFieldBegin(GTDDATE_FIELD_DESC);
          oprot.writeString(struct.GTDDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVolumeCondition()) {
        oprot.writeFieldBegin(VOLUME_CONDITION_FIELD_DESC);
        oprot.writeByte(struct.volumeCondition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinVolume()) {
        oprot.writeFieldBegin(MIN_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.minVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetContingentCondition()) {
        oprot.writeFieldBegin(CONTINGENT_CONDITION_FIELD_DESC);
        oprot.writeByte(struct.contingentCondition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStopPrice()) {
        oprot.writeFieldBegin(STOP_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.stopPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetForceCloseReason()) {
        oprot.writeFieldBegin(FORCE_CLOSE_REASON_FIELD_DESC);
        oprot.writeByte(struct.forceCloseReason);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsAutoSuspend()) {
        oprot.writeFieldBegin(IS_AUTO_SUSPEND_FIELD_DESC);
        oprot.writeBool(struct.isAutoSuspend);
        oprot.writeFieldEnd();
      }
      if (struct.businessUnit != null) {
        if (struct.isSetBusinessUnit()) {
          oprot.writeFieldBegin(BUSINESS_UNIT_FIELD_DESC);
          oprot.writeString(struct.businessUnit);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRequestID()) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestID);
        oprot.writeFieldEnd();
      }
      if (struct.orderLocalID != null) {
        if (struct.isSetOrderLocalID()) {
          oprot.writeFieldBegin(ORDER_LOCAL_ID_FIELD_DESC);
          oprot.writeString(struct.orderLocalID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchangeID != null) {
        if (struct.isSetExchangeID()) {
          oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
          oprot.writeString(struct.exchangeID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.participantID != null) {
        if (struct.isSetParticipantID()) {
          oprot.writeFieldBegin(PARTICIPANT_ID_FIELD_DESC);
          oprot.writeString(struct.participantID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientID != null) {
        if (struct.isSetClientID()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchangeInstID != null) {
        if (struct.isSetExchangeInstID()) {
          oprot.writeFieldBegin(EXCHANGE_INST_ID_FIELD_DESC);
          oprot.writeString(struct.exchangeInstID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.traderID != null) {
        if (struct.isSetTraderID()) {
          oprot.writeFieldBegin(TRADER_ID_FIELD_DESC);
          oprot.writeString(struct.traderID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInstallID()) {
        oprot.writeFieldBegin(INSTALL_ID_FIELD_DESC);
        oprot.writeI32(struct.installID);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderSubmitStatus()) {
        oprot.writeFieldBegin(ORDER_SUBMIT_STATUS_FIELD_DESC);
        oprot.writeByte(struct.orderSubmitStatus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNotifySequence()) {
        oprot.writeFieldBegin(NOTIFY_SEQUENCE_FIELD_DESC);
        oprot.writeI32(struct.notifySequence);
        oprot.writeFieldEnd();
      }
      if (struct.tradingDay != null) {
        if (struct.isSetTradingDay()) {
          oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
          oprot.writeString(struct.tradingDay);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSettlementID()) {
        oprot.writeFieldBegin(SETTLEMENT_ID_FIELD_DESC);
        oprot.writeI32(struct.settlementID);
        oprot.writeFieldEnd();
      }
      if (struct.orderSysID != null) {
        if (struct.isSetOrderSysID()) {
          oprot.writeFieldBegin(ORDER_SYS_ID_FIELD_DESC);
          oprot.writeString(struct.orderSysID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderSource()) {
        oprot.writeFieldBegin(ORDER_SOURCE_FIELD_DESC);
        oprot.writeByte(struct.orderSource);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
        oprot.writeByte(struct.orderStatus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderType()) {
        oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
        oprot.writeByte(struct.orderType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVolumeTraded()) {
        oprot.writeFieldBegin(VOLUME_TRADED_FIELD_DESC);
        oprot.writeI32(struct.volumeTraded);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVolumeTotal()) {
        oprot.writeFieldBegin(VOLUME_TOTAL_FIELD_DESC);
        oprot.writeI32(struct.volumeTotal);
        oprot.writeFieldEnd();
      }
      if (struct.insertDate != null) {
        if (struct.isSetInsertDate()) {
          oprot.writeFieldBegin(INSERT_DATE_FIELD_DESC);
          oprot.writeString(struct.insertDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.insertTime != null) {
        if (struct.isSetInsertTime()) {
          oprot.writeFieldBegin(INSERT_TIME_FIELD_DESC);
          oprot.writeString(struct.insertTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.activeTime != null) {
        if (struct.isSetActiveTime()) {
          oprot.writeFieldBegin(ACTIVE_TIME_FIELD_DESC);
          oprot.writeString(struct.activeTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.suspendTime != null) {
        if (struct.isSetSuspendTime()) {
          oprot.writeFieldBegin(SUSPEND_TIME_FIELD_DESC);
          oprot.writeString(struct.suspendTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateTime != null) {
        if (struct.isSetUpdateTime()) {
          oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.updateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cancelTime != null) {
        if (struct.isSetCancelTime()) {
          oprot.writeFieldBegin(CANCEL_TIME_FIELD_DESC);
          oprot.writeString(struct.cancelTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.activeTraderID != null) {
        if (struct.isSetActiveTraderID()) {
          oprot.writeFieldBegin(ACTIVE_TRADER_ID_FIELD_DESC);
          oprot.writeString(struct.activeTraderID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clearingPartID != null) {
        if (struct.isSetClearingPartID()) {
          oprot.writeFieldBegin(CLEARING_PART_ID_FIELD_DESC);
          oprot.writeString(struct.clearingPartID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSequenceNo()) {
        oprot.writeFieldBegin(SEQUENCE_NO_FIELD_DESC);
        oprot.writeI32(struct.sequenceNo);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrontID()) {
        oprot.writeFieldBegin(FRONT_ID_FIELD_DESC);
        oprot.writeI32(struct.frontID);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSessionID()) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI32(struct.sessionID);
        oprot.writeFieldEnd();
      }
      if (struct.userProductInfo != null) {
        if (struct.isSetUserProductInfo()) {
          oprot.writeFieldBegin(USER_PRODUCT_INFO_FIELD_DESC);
          oprot.writeString(struct.userProductInfo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.statusMsg != null) {
        if (struct.isSetStatusMsg()) {
          oprot.writeFieldBegin(STATUS_MSG_FIELD_DESC);
          oprot.writeString(struct.statusMsg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUserForceClose()) {
        oprot.writeFieldBegin(USER_FORCE_CLOSE_FIELD_DESC);
        oprot.writeBool(struct.userForceClose);
        oprot.writeFieldEnd();
      }
      if (struct.activeUserID != null) {
        if (struct.isSetActiveUserID()) {
          oprot.writeFieldBegin(ACTIVE_USER_ID_FIELD_DESC);
          oprot.writeString(struct.activeUserID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBrokerOrderSeq()) {
        oprot.writeFieldBegin(BROKER_ORDER_SEQ_FIELD_DESC);
        oprot.writeI32(struct.brokerOrderSeq);
        oprot.writeFieldEnd();
      }
      if (struct.relativeOrderSysID != null) {
        if (struct.isSetRelativeOrderSysID()) {
          oprot.writeFieldBegin(RELATIVE_ORDER_SYS_ID_FIELD_DESC);
          oprot.writeString(struct.relativeOrderSysID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetZCETotalTradedVolume()) {
        oprot.writeFieldBegin(ZCETOTAL_TRADED_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.ZCETotalTradedVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsSwapOrder()) {
        oprot.writeFieldBegin(IS_SWAP_ORDER_FIELD_DESC);
        oprot.writeBool(struct.isSwapOrder);
        oprot.writeFieldEnd();
      }
      if (struct.sledId != null) {
        oprot.writeFieldBegin(SLED_ID_FIELD_DESC);
        oprot.writeString(struct.sledId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInsertDateTime()) {
        oprot.writeFieldBegin(INSERT_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.insertDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdateDateTime()) {
        oprot.writeFieldBegin(UPDATE_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.updateDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCancelDateTime()) {
        oprot.writeFieldBegin(CANCEL_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.cancelDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CtpOrderFieldTupleSchemeFactory implements SchemeFactory {
    public CtpOrderFieldTupleScheme getScheme() {
      return new CtpOrderFieldTupleScheme();
    }
  }

  private static class CtpOrderFieldTupleScheme extends TupleScheme<CtpOrderField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CtpOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sledId);
      BitSet optionals = new BitSet();
      if (struct.isSetInstrumentID()) {
        optionals.set(0);
      }
      if (struct.isSetOrderRef()) {
        optionals.set(1);
      }
      if (struct.isSetOrderPriceType()) {
        optionals.set(2);
      }
      if (struct.isSetDirection()) {
        optionals.set(3);
      }
      if (struct.isSetCombOffsetFlag()) {
        optionals.set(4);
      }
      if (struct.isSetCombHedgeFlag()) {
        optionals.set(5);
      }
      if (struct.isSetLimitPrice()) {
        optionals.set(6);
      }
      if (struct.isSetVolumeTotalOriginal()) {
        optionals.set(7);
      }
      if (struct.isSetTimeCondition()) {
        optionals.set(8);
      }
      if (struct.isSetGTDDate()) {
        optionals.set(9);
      }
      if (struct.isSetVolumeCondition()) {
        optionals.set(10);
      }
      if (struct.isSetMinVolume()) {
        optionals.set(11);
      }
      if (struct.isSetContingentCondition()) {
        optionals.set(12);
      }
      if (struct.isSetStopPrice()) {
        optionals.set(13);
      }
      if (struct.isSetForceCloseReason()) {
        optionals.set(14);
      }
      if (struct.isSetIsAutoSuspend()) {
        optionals.set(15);
      }
      if (struct.isSetBusinessUnit()) {
        optionals.set(16);
      }
      if (struct.isSetRequestID()) {
        optionals.set(17);
      }
      if (struct.isSetOrderLocalID()) {
        optionals.set(18);
      }
      if (struct.isSetExchangeID()) {
        optionals.set(19);
      }
      if (struct.isSetParticipantID()) {
        optionals.set(20);
      }
      if (struct.isSetClientID()) {
        optionals.set(21);
      }
      if (struct.isSetExchangeInstID()) {
        optionals.set(22);
      }
      if (struct.isSetTraderID()) {
        optionals.set(23);
      }
      if (struct.isSetInstallID()) {
        optionals.set(24);
      }
      if (struct.isSetOrderSubmitStatus()) {
        optionals.set(25);
      }
      if (struct.isSetNotifySequence()) {
        optionals.set(26);
      }
      if (struct.isSetTradingDay()) {
        optionals.set(27);
      }
      if (struct.isSetSettlementID()) {
        optionals.set(28);
      }
      if (struct.isSetOrderSysID()) {
        optionals.set(29);
      }
      if (struct.isSetOrderSource()) {
        optionals.set(30);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(31);
      }
      if (struct.isSetOrderType()) {
        optionals.set(32);
      }
      if (struct.isSetVolumeTraded()) {
        optionals.set(33);
      }
      if (struct.isSetVolumeTotal()) {
        optionals.set(34);
      }
      if (struct.isSetInsertDate()) {
        optionals.set(35);
      }
      if (struct.isSetInsertTime()) {
        optionals.set(36);
      }
      if (struct.isSetActiveTime()) {
        optionals.set(37);
      }
      if (struct.isSetSuspendTime()) {
        optionals.set(38);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(39);
      }
      if (struct.isSetCancelTime()) {
        optionals.set(40);
      }
      if (struct.isSetActiveTraderID()) {
        optionals.set(41);
      }
      if (struct.isSetClearingPartID()) {
        optionals.set(42);
      }
      if (struct.isSetSequenceNo()) {
        optionals.set(43);
      }
      if (struct.isSetFrontID()) {
        optionals.set(44);
      }
      if (struct.isSetSessionID()) {
        optionals.set(45);
      }
      if (struct.isSetUserProductInfo()) {
        optionals.set(46);
      }
      if (struct.isSetStatusMsg()) {
        optionals.set(47);
      }
      if (struct.isSetUserForceClose()) {
        optionals.set(48);
      }
      if (struct.isSetActiveUserID()) {
        optionals.set(49);
      }
      if (struct.isSetBrokerOrderSeq()) {
        optionals.set(50);
      }
      if (struct.isSetRelativeOrderSysID()) {
        optionals.set(51);
      }
      if (struct.isSetZCETotalTradedVolume()) {
        optionals.set(52);
      }
      if (struct.isSetIsSwapOrder()) {
        optionals.set(53);
      }
      if (struct.isSetInsertDateTime()) {
        optionals.set(54);
      }
      if (struct.isSetUpdateDateTime()) {
        optionals.set(55);
      }
      if (struct.isSetCancelDateTime()) {
        optionals.set(56);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(57);
      }
      if (struct.isSetUserId()) {
        optionals.set(58);
      }
      oprot.writeBitSet(optionals, 59);
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetOrderRef()) {
        oprot.writeString(struct.orderRef);
      }
      if (struct.isSetOrderPriceType()) {
        oprot.writeByte(struct.orderPriceType);
      }
      if (struct.isSetDirection()) {
        oprot.writeByte(struct.direction);
      }
      if (struct.isSetCombOffsetFlag()) {
        oprot.writeString(struct.combOffsetFlag);
      }
      if (struct.isSetCombHedgeFlag()) {
        oprot.writeString(struct.combHedgeFlag);
      }
      if (struct.isSetLimitPrice()) {
        oprot.writeDouble(struct.limitPrice);
      }
      if (struct.isSetVolumeTotalOriginal()) {
        oprot.writeI32(struct.volumeTotalOriginal);
      }
      if (struct.isSetTimeCondition()) {
        oprot.writeByte(struct.timeCondition);
      }
      if (struct.isSetGTDDate()) {
        oprot.writeString(struct.GTDDate);
      }
      if (struct.isSetVolumeCondition()) {
        oprot.writeByte(struct.volumeCondition);
      }
      if (struct.isSetMinVolume()) {
        oprot.writeI32(struct.minVolume);
      }
      if (struct.isSetContingentCondition()) {
        oprot.writeByte(struct.contingentCondition);
      }
      if (struct.isSetStopPrice()) {
        oprot.writeDouble(struct.stopPrice);
      }
      if (struct.isSetForceCloseReason()) {
        oprot.writeByte(struct.forceCloseReason);
      }
      if (struct.isSetIsAutoSuspend()) {
        oprot.writeBool(struct.isAutoSuspend);
      }
      if (struct.isSetBusinessUnit()) {
        oprot.writeString(struct.businessUnit);
      }
      if (struct.isSetRequestID()) {
        oprot.writeI32(struct.requestID);
      }
      if (struct.isSetOrderLocalID()) {
        oprot.writeString(struct.orderLocalID);
      }
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetParticipantID()) {
        oprot.writeString(struct.participantID);
      }
      if (struct.isSetClientID()) {
        oprot.writeString(struct.clientID);
      }
      if (struct.isSetExchangeInstID()) {
        oprot.writeString(struct.exchangeInstID);
      }
      if (struct.isSetTraderID()) {
        oprot.writeString(struct.traderID);
      }
      if (struct.isSetInstallID()) {
        oprot.writeI32(struct.installID);
      }
      if (struct.isSetOrderSubmitStatus()) {
        oprot.writeByte(struct.orderSubmitStatus);
      }
      if (struct.isSetNotifySequence()) {
        oprot.writeI32(struct.notifySequence);
      }
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetSettlementID()) {
        oprot.writeI32(struct.settlementID);
      }
      if (struct.isSetOrderSysID()) {
        oprot.writeString(struct.orderSysID);
      }
      if (struct.isSetOrderSource()) {
        oprot.writeByte(struct.orderSource);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeByte(struct.orderStatus);
      }
      if (struct.isSetOrderType()) {
        oprot.writeByte(struct.orderType);
      }
      if (struct.isSetVolumeTraded()) {
        oprot.writeI32(struct.volumeTraded);
      }
      if (struct.isSetVolumeTotal()) {
        oprot.writeI32(struct.volumeTotal);
      }
      if (struct.isSetInsertDate()) {
        oprot.writeString(struct.insertDate);
      }
      if (struct.isSetInsertTime()) {
        oprot.writeString(struct.insertTime);
      }
      if (struct.isSetActiveTime()) {
        oprot.writeString(struct.activeTime);
      }
      if (struct.isSetSuspendTime()) {
        oprot.writeString(struct.suspendTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetCancelTime()) {
        oprot.writeString(struct.cancelTime);
      }
      if (struct.isSetActiveTraderID()) {
        oprot.writeString(struct.activeTraderID);
      }
      if (struct.isSetClearingPartID()) {
        oprot.writeString(struct.clearingPartID);
      }
      if (struct.isSetSequenceNo()) {
        oprot.writeI32(struct.sequenceNo);
      }
      if (struct.isSetFrontID()) {
        oprot.writeI32(struct.frontID);
      }
      if (struct.isSetSessionID()) {
        oprot.writeI32(struct.sessionID);
      }
      if (struct.isSetUserProductInfo()) {
        oprot.writeString(struct.userProductInfo);
      }
      if (struct.isSetStatusMsg()) {
        oprot.writeString(struct.statusMsg);
      }
      if (struct.isSetUserForceClose()) {
        oprot.writeBool(struct.userForceClose);
      }
      if (struct.isSetActiveUserID()) {
        oprot.writeString(struct.activeUserID);
      }
      if (struct.isSetBrokerOrderSeq()) {
        oprot.writeI32(struct.brokerOrderSeq);
      }
      if (struct.isSetRelativeOrderSysID()) {
        oprot.writeString(struct.relativeOrderSysID);
      }
      if (struct.isSetZCETotalTradedVolume()) {
        oprot.writeI32(struct.ZCETotalTradedVolume);
      }
      if (struct.isSetIsSwapOrder()) {
        oprot.writeBool(struct.isSwapOrder);
      }
      if (struct.isSetInsertDateTime()) {
        oprot.writeI64(struct.insertDateTime);
      }
      if (struct.isSetUpdateDateTime()) {
        oprot.writeI64(struct.updateDateTime);
      }
      if (struct.isSetCancelDateTime()) {
        oprot.writeI64(struct.cancelDateTime);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CtpOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sledId = iprot.readString();
      struct.setSledIdIsSet(true);
      BitSet incoming = iprot.readBitSet(59);
      if (incoming.get(0)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderRef = iprot.readString();
        struct.setOrderRefIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orderPriceType = iprot.readByte();
        struct.setOrderPriceTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.direction = iprot.readByte();
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.combOffsetFlag = iprot.readString();
        struct.setCombOffsetFlagIsSet(true);
      }
      if (incoming.get(5)) {
        struct.combHedgeFlag = iprot.readString();
        struct.setCombHedgeFlagIsSet(true);
      }
      if (incoming.get(6)) {
        struct.limitPrice = iprot.readDouble();
        struct.setLimitPriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.volumeTotalOriginal = iprot.readI32();
        struct.setVolumeTotalOriginalIsSet(true);
      }
      if (incoming.get(8)) {
        struct.timeCondition = iprot.readByte();
        struct.setTimeConditionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.GTDDate = iprot.readString();
        struct.setGTDDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.volumeCondition = iprot.readByte();
        struct.setVolumeConditionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.minVolume = iprot.readI32();
        struct.setMinVolumeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.contingentCondition = iprot.readByte();
        struct.setContingentConditionIsSet(true);
      }
      if (incoming.get(13)) {
        struct.stopPrice = iprot.readDouble();
        struct.setStopPriceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.forceCloseReason = iprot.readByte();
        struct.setForceCloseReasonIsSet(true);
      }
      if (incoming.get(15)) {
        struct.isAutoSuspend = iprot.readBool();
        struct.setIsAutoSuspendIsSet(true);
      }
      if (incoming.get(16)) {
        struct.businessUnit = iprot.readString();
        struct.setBusinessUnitIsSet(true);
      }
      if (incoming.get(17)) {
        struct.requestID = iprot.readI32();
        struct.setRequestIDIsSet(true);
      }
      if (incoming.get(18)) {
        struct.orderLocalID = iprot.readString();
        struct.setOrderLocalIDIsSet(true);
      }
      if (incoming.get(19)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(20)) {
        struct.participantID = iprot.readString();
        struct.setParticipantIDIsSet(true);
      }
      if (incoming.get(21)) {
        struct.clientID = iprot.readString();
        struct.setClientIDIsSet(true);
      }
      if (incoming.get(22)) {
        struct.exchangeInstID = iprot.readString();
        struct.setExchangeInstIDIsSet(true);
      }
      if (incoming.get(23)) {
        struct.traderID = iprot.readString();
        struct.setTraderIDIsSet(true);
      }
      if (incoming.get(24)) {
        struct.installID = iprot.readI32();
        struct.setInstallIDIsSet(true);
      }
      if (incoming.get(25)) {
        struct.orderSubmitStatus = iprot.readByte();
        struct.setOrderSubmitStatusIsSet(true);
      }
      if (incoming.get(26)) {
        struct.notifySequence = iprot.readI32();
        struct.setNotifySequenceIsSet(true);
      }
      if (incoming.get(27)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(28)) {
        struct.settlementID = iprot.readI32();
        struct.setSettlementIDIsSet(true);
      }
      if (incoming.get(29)) {
        struct.orderSysID = iprot.readString();
        struct.setOrderSysIDIsSet(true);
      }
      if (incoming.get(30)) {
        struct.orderSource = iprot.readByte();
        struct.setOrderSourceIsSet(true);
      }
      if (incoming.get(31)) {
        struct.orderStatus = iprot.readByte();
        struct.setOrderStatusIsSet(true);
      }
      if (incoming.get(32)) {
        struct.orderType = iprot.readByte();
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(33)) {
        struct.volumeTraded = iprot.readI32();
        struct.setVolumeTradedIsSet(true);
      }
      if (incoming.get(34)) {
        struct.volumeTotal = iprot.readI32();
        struct.setVolumeTotalIsSet(true);
      }
      if (incoming.get(35)) {
        struct.insertDate = iprot.readString();
        struct.setInsertDateIsSet(true);
      }
      if (incoming.get(36)) {
        struct.insertTime = iprot.readString();
        struct.setInsertTimeIsSet(true);
      }
      if (incoming.get(37)) {
        struct.activeTime = iprot.readString();
        struct.setActiveTimeIsSet(true);
      }
      if (incoming.get(38)) {
        struct.suspendTime = iprot.readString();
        struct.setSuspendTimeIsSet(true);
      }
      if (incoming.get(39)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(40)) {
        struct.cancelTime = iprot.readString();
        struct.setCancelTimeIsSet(true);
      }
      if (incoming.get(41)) {
        struct.activeTraderID = iprot.readString();
        struct.setActiveTraderIDIsSet(true);
      }
      if (incoming.get(42)) {
        struct.clearingPartID = iprot.readString();
        struct.setClearingPartIDIsSet(true);
      }
      if (incoming.get(43)) {
        struct.sequenceNo = iprot.readI32();
        struct.setSequenceNoIsSet(true);
      }
      if (incoming.get(44)) {
        struct.frontID = iprot.readI32();
        struct.setFrontIDIsSet(true);
      }
      if (incoming.get(45)) {
        struct.sessionID = iprot.readI32();
        struct.setSessionIDIsSet(true);
      }
      if (incoming.get(46)) {
        struct.userProductInfo = iprot.readString();
        struct.setUserProductInfoIsSet(true);
      }
      if (incoming.get(47)) {
        struct.statusMsg = iprot.readString();
        struct.setStatusMsgIsSet(true);
      }
      if (incoming.get(48)) {
        struct.userForceClose = iprot.readBool();
        struct.setUserForceCloseIsSet(true);
      }
      if (incoming.get(49)) {
        struct.activeUserID = iprot.readString();
        struct.setActiveUserIDIsSet(true);
      }
      if (incoming.get(50)) {
        struct.brokerOrderSeq = iprot.readI32();
        struct.setBrokerOrderSeqIsSet(true);
      }
      if (incoming.get(51)) {
        struct.relativeOrderSysID = iprot.readString();
        struct.setRelativeOrderSysIDIsSet(true);
      }
      if (incoming.get(52)) {
        struct.ZCETotalTradedVolume = iprot.readI32();
        struct.setZCETotalTradedVolumeIsSet(true);
      }
      if (incoming.get(53)) {
        struct.isSwapOrder = iprot.readBool();
        struct.setIsSwapOrderIsSet(true);
      }
      if (incoming.get(54)) {
        struct.insertDateTime = iprot.readI64();
        struct.setInsertDateTimeIsSet(true);
      }
      if (incoming.get(55)) {
        struct.updateDateTime = iprot.readI64();
        struct.setUpdateDateTimeIsSet(true);
      }
      if (incoming.get(56)) {
        struct.cancelDateTime = iprot.readI64();
        struct.setCancelDateTimeIsSet(true);
      }
      if (incoming.get(57)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
      if (incoming.get(58)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
    }
  }

}

