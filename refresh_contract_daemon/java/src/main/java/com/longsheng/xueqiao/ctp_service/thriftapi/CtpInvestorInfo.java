/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.ctp_service.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CtpInvestorInfo implements org.apache.thrift.TBase<CtpInvestorInfo, CtpInvestorInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CtpInvestorInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CtpInvestorInfo");

  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INVESTOR_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorGroupID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INVESTOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("investorName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IDENTIFIED_CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("identifiedCardType", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField IDENTIFIED_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("identifiedCardNo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IS_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isActive", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("telephone", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OPEN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("openDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField COMM_MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commModelID", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MARGIN_MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("marginModelID", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CtpInvestorInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CtpInvestorInfoTupleSchemeFactory());
  }

  public String investorID; // optional
  public String brokerID; // optional
  public String investorGroupID; // optional
  public String investorName; // optional
  public byte identifiedCardType; // optional
  public String identifiedCardNo; // optional
  public boolean isActive; // optional
  public String telephone; // optional
  public String address; // optional
  public String openDate; // optional
  public String mobile; // optional
  public String commModelID; // optional
  public String marginModelID; // optional
  public int sledAccountId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INVESTOR_ID((short)1, "investorID"),
    BROKER_ID((short)2, "brokerID"),
    INVESTOR_GROUP_ID((short)3, "investorGroupID"),
    INVESTOR_NAME((short)4, "investorName"),
    IDENTIFIED_CARD_TYPE((short)5, "identifiedCardType"),
    IDENTIFIED_CARD_NO((short)6, "identifiedCardNo"),
    IS_ACTIVE((short)7, "isActive"),
    TELEPHONE((short)8, "telephone"),
    ADDRESS((short)9, "address"),
    OPEN_DATE((short)10, "openDate"),
    MOBILE((short)11, "mobile"),
    COMM_MODEL_ID((short)12, "commModelID"),
    MARGIN_MODEL_ID((short)13, "marginModelID"),
    SLED_ACCOUNT_ID((short)14, "sledAccountId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INVESTOR_ID
          return INVESTOR_ID;
        case 2: // BROKER_ID
          return BROKER_ID;
        case 3: // INVESTOR_GROUP_ID
          return INVESTOR_GROUP_ID;
        case 4: // INVESTOR_NAME
          return INVESTOR_NAME;
        case 5: // IDENTIFIED_CARD_TYPE
          return IDENTIFIED_CARD_TYPE;
        case 6: // IDENTIFIED_CARD_NO
          return IDENTIFIED_CARD_NO;
        case 7: // IS_ACTIVE
          return IS_ACTIVE;
        case 8: // TELEPHONE
          return TELEPHONE;
        case 9: // ADDRESS
          return ADDRESS;
        case 10: // OPEN_DATE
          return OPEN_DATE;
        case 11: // MOBILE
          return MOBILE;
        case 12: // COMM_MODEL_ID
          return COMM_MODEL_ID;
        case 13: // MARGIN_MODEL_ID
          return MARGIN_MODEL_ID;
        case 14: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IDENTIFIEDCARDTYPE_ISSET_ID = 0;
  private static final int __ISACTIVE_ISSET_ID = 1;
  private static final int __SLEDACCOUNTID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.INVESTOR_ID,_Fields.BROKER_ID,_Fields.INVESTOR_GROUP_ID,_Fields.INVESTOR_NAME,_Fields.IDENTIFIED_CARD_TYPE,_Fields.IDENTIFIED_CARD_NO,_Fields.IS_ACTIVE,_Fields.TELEPHONE,_Fields.ADDRESS,_Fields.OPEN_DATE,_Fields.MOBILE,_Fields.COMM_MODEL_ID,_Fields.MARGIN_MODEL_ID,_Fields.SLED_ACCOUNT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVESTOR_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("investorGroupID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVESTOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("investorName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTIFIED_CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("identifiedCardType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.IDENTIFIED_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("identifiedCardNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("isActive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("telephone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN_DATE, new org.apache.thrift.meta_data.FieldMetaData("openDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMM_MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("commModelID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MARGIN_MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("marginModelID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CtpInvestorInfo.class, metaDataMap);
  }

  public CtpInvestorInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CtpInvestorInfo(CtpInvestorInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorGroupID()) {
      this.investorGroupID = other.investorGroupID;
    }
    if (other.isSetInvestorName()) {
      this.investorName = other.investorName;
    }
    this.identifiedCardType = other.identifiedCardType;
    if (other.isSetIdentifiedCardNo()) {
      this.identifiedCardNo = other.identifiedCardNo;
    }
    this.isActive = other.isActive;
    if (other.isSetTelephone()) {
      this.telephone = other.telephone;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetOpenDate()) {
      this.openDate = other.openDate;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetCommModelID()) {
      this.commModelID = other.commModelID;
    }
    if (other.isSetMarginModelID()) {
      this.marginModelID = other.marginModelID;
    }
    this.sledAccountId = other.sledAccountId;
  }

  public CtpInvestorInfo deepCopy() {
    return new CtpInvestorInfo(this);
  }

  @Override
  public void clear() {
    this.investorID = null;
    this.brokerID = null;
    this.investorGroupID = null;
    this.investorName = null;
    setIdentifiedCardTypeIsSet(false);
    this.identifiedCardType = 0;
    this.identifiedCardNo = null;
    setIsActiveIsSet(false);
    this.isActive = false;
    this.telephone = null;
    this.address = null;
    this.openDate = null;
    this.mobile = null;
    this.commModelID = null;
    this.marginModelID = null;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CtpInvestorInfo setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CtpInvestorInfo setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorGroupID() {
    return this.investorGroupID;
  }

  public CtpInvestorInfo setInvestorGroupID(String investorGroupID) {
    this.investorGroupID = investorGroupID;
    return this;
  }

  public void unsetInvestorGroupID() {
    this.investorGroupID = null;
  }

  /** Returns true if field investorGroupID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorGroupID() {
    return this.investorGroupID != null;
  }

  public void setInvestorGroupIDIsSet(boolean value) {
    if (!value) {
      this.investorGroupID = null;
    }
  }

  public String getInvestorName() {
    return this.investorName;
  }

  public CtpInvestorInfo setInvestorName(String investorName) {
    this.investorName = investorName;
    return this;
  }

  public void unsetInvestorName() {
    this.investorName = null;
  }

  /** Returns true if field investorName is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorName() {
    return this.investorName != null;
  }

  public void setInvestorNameIsSet(boolean value) {
    if (!value) {
      this.investorName = null;
    }
  }

  public byte getIdentifiedCardType() {
    return this.identifiedCardType;
  }

  public CtpInvestorInfo setIdentifiedCardType(byte identifiedCardType) {
    this.identifiedCardType = identifiedCardType;
    setIdentifiedCardTypeIsSet(true);
    return this;
  }

  public void unsetIdentifiedCardType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDENTIFIEDCARDTYPE_ISSET_ID);
  }

  /** Returns true if field identifiedCardType is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifiedCardType() {
    return EncodingUtils.testBit(__isset_bitfield, __IDENTIFIEDCARDTYPE_ISSET_ID);
  }

  public void setIdentifiedCardTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDENTIFIEDCARDTYPE_ISSET_ID, value);
  }

  public String getIdentifiedCardNo() {
    return this.identifiedCardNo;
  }

  public CtpInvestorInfo setIdentifiedCardNo(String identifiedCardNo) {
    this.identifiedCardNo = identifiedCardNo;
    return this;
  }

  public void unsetIdentifiedCardNo() {
    this.identifiedCardNo = null;
  }

  /** Returns true if field identifiedCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifiedCardNo() {
    return this.identifiedCardNo != null;
  }

  public void setIdentifiedCardNoIsSet(boolean value) {
    if (!value) {
      this.identifiedCardNo = null;
    }
  }

  public boolean isIsActive() {
    return this.isActive;
  }

  public CtpInvestorInfo setIsActive(boolean isActive) {
    this.isActive = isActive;
    setIsActiveIsSet(true);
    return this;
  }

  public void unsetIsActive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
  }

  /** Returns true if field isActive is set (has been assigned a value) and false otherwise */
  public boolean isSetIsActive() {
    return EncodingUtils.testBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
  }

  public void setIsActiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISACTIVE_ISSET_ID, value);
  }

  public String getTelephone() {
    return this.telephone;
  }

  public CtpInvestorInfo setTelephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  public void unsetTelephone() {
    this.telephone = null;
  }

  /** Returns true if field telephone is set (has been assigned a value) and false otherwise */
  public boolean isSetTelephone() {
    return this.telephone != null;
  }

  public void setTelephoneIsSet(boolean value) {
    if (!value) {
      this.telephone = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public CtpInvestorInfo setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getOpenDate() {
    return this.openDate;
  }

  public CtpInvestorInfo setOpenDate(String openDate) {
    this.openDate = openDate;
    return this;
  }

  public void unsetOpenDate() {
    this.openDate = null;
  }

  /** Returns true if field openDate is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenDate() {
    return this.openDate != null;
  }

  public void setOpenDateIsSet(boolean value) {
    if (!value) {
      this.openDate = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public CtpInvestorInfo setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getCommModelID() {
    return this.commModelID;
  }

  public CtpInvestorInfo setCommModelID(String commModelID) {
    this.commModelID = commModelID;
    return this;
  }

  public void unsetCommModelID() {
    this.commModelID = null;
  }

  /** Returns true if field commModelID is set (has been assigned a value) and false otherwise */
  public boolean isSetCommModelID() {
    return this.commModelID != null;
  }

  public void setCommModelIDIsSet(boolean value) {
    if (!value) {
      this.commModelID = null;
    }
  }

  public String getMarginModelID() {
    return this.marginModelID;
  }

  public CtpInvestorInfo setMarginModelID(String marginModelID) {
    this.marginModelID = marginModelID;
    return this;
  }

  public void unsetMarginModelID() {
    this.marginModelID = null;
  }

  /** Returns true if field marginModelID is set (has been assigned a value) and false otherwise */
  public boolean isSetMarginModelID() {
    return this.marginModelID != null;
  }

  public void setMarginModelIDIsSet(boolean value) {
    if (!value) {
      this.marginModelID = null;
    }
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public CtpInvestorInfo setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_GROUP_ID:
      if (value == null) {
        unsetInvestorGroupID();
      } else {
        setInvestorGroupID((String)value);
      }
      break;

    case INVESTOR_NAME:
      if (value == null) {
        unsetInvestorName();
      } else {
        setInvestorName((String)value);
      }
      break;

    case IDENTIFIED_CARD_TYPE:
      if (value == null) {
        unsetIdentifiedCardType();
      } else {
        setIdentifiedCardType((Byte)value);
      }
      break;

    case IDENTIFIED_CARD_NO:
      if (value == null) {
        unsetIdentifiedCardNo();
      } else {
        setIdentifiedCardNo((String)value);
      }
      break;

    case IS_ACTIVE:
      if (value == null) {
        unsetIsActive();
      } else {
        setIsActive((Boolean)value);
      }
      break;

    case TELEPHONE:
      if (value == null) {
        unsetTelephone();
      } else {
        setTelephone((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case OPEN_DATE:
      if (value == null) {
        unsetOpenDate();
      } else {
        setOpenDate((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case COMM_MODEL_ID:
      if (value == null) {
        unsetCommModelID();
      } else {
        setCommModelID((String)value);
      }
      break;

    case MARGIN_MODEL_ID:
      if (value == null) {
        unsetMarginModelID();
      } else {
        setMarginModelID((String)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INVESTOR_ID:
      return getInvestorID();

    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_GROUP_ID:
      return getInvestorGroupID();

    case INVESTOR_NAME:
      return getInvestorName();

    case IDENTIFIED_CARD_TYPE:
      return Byte.valueOf(getIdentifiedCardType());

    case IDENTIFIED_CARD_NO:
      return getIdentifiedCardNo();

    case IS_ACTIVE:
      return Boolean.valueOf(isIsActive());

    case TELEPHONE:
      return getTelephone();

    case ADDRESS:
      return getAddress();

    case OPEN_DATE:
      return getOpenDate();

    case MOBILE:
      return getMobile();

    case COMM_MODEL_ID:
      return getCommModelID();

    case MARGIN_MODEL_ID:
      return getMarginModelID();

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INVESTOR_ID:
      return isSetInvestorID();
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_GROUP_ID:
      return isSetInvestorGroupID();
    case INVESTOR_NAME:
      return isSetInvestorName();
    case IDENTIFIED_CARD_TYPE:
      return isSetIdentifiedCardType();
    case IDENTIFIED_CARD_NO:
      return isSetIdentifiedCardNo();
    case IS_ACTIVE:
      return isSetIsActive();
    case TELEPHONE:
      return isSetTelephone();
    case ADDRESS:
      return isSetAddress();
    case OPEN_DATE:
      return isSetOpenDate();
    case MOBILE:
      return isSetMobile();
    case COMM_MODEL_ID:
      return isSetCommModelID();
    case MARGIN_MODEL_ID:
      return isSetMarginModelID();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CtpInvestorInfo)
      return this.equals((CtpInvestorInfo)that);
    return false;
  }

  public boolean equals(CtpInvestorInfo that) {
    if (that == null)
      return false;

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorGroupID = true && this.isSetInvestorGroupID();
    boolean that_present_investorGroupID = true && that.isSetInvestorGroupID();
    if (this_present_investorGroupID || that_present_investorGroupID) {
      if (!(this_present_investorGroupID && that_present_investorGroupID))
        return false;
      if (!this.investorGroupID.equals(that.investorGroupID))
        return false;
    }

    boolean this_present_investorName = true && this.isSetInvestorName();
    boolean that_present_investorName = true && that.isSetInvestorName();
    if (this_present_investorName || that_present_investorName) {
      if (!(this_present_investorName && that_present_investorName))
        return false;
      if (!this.investorName.equals(that.investorName))
        return false;
    }

    boolean this_present_identifiedCardType = true && this.isSetIdentifiedCardType();
    boolean that_present_identifiedCardType = true && that.isSetIdentifiedCardType();
    if (this_present_identifiedCardType || that_present_identifiedCardType) {
      if (!(this_present_identifiedCardType && that_present_identifiedCardType))
        return false;
      if (this.identifiedCardType != that.identifiedCardType)
        return false;
    }

    boolean this_present_identifiedCardNo = true && this.isSetIdentifiedCardNo();
    boolean that_present_identifiedCardNo = true && that.isSetIdentifiedCardNo();
    if (this_present_identifiedCardNo || that_present_identifiedCardNo) {
      if (!(this_present_identifiedCardNo && that_present_identifiedCardNo))
        return false;
      if (!this.identifiedCardNo.equals(that.identifiedCardNo))
        return false;
    }

    boolean this_present_isActive = true && this.isSetIsActive();
    boolean that_present_isActive = true && that.isSetIsActive();
    if (this_present_isActive || that_present_isActive) {
      if (!(this_present_isActive && that_present_isActive))
        return false;
      if (this.isActive != that.isActive)
        return false;
    }

    boolean this_present_telephone = true && this.isSetTelephone();
    boolean that_present_telephone = true && that.isSetTelephone();
    if (this_present_telephone || that_present_telephone) {
      if (!(this_present_telephone && that_present_telephone))
        return false;
      if (!this.telephone.equals(that.telephone))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_openDate = true && this.isSetOpenDate();
    boolean that_present_openDate = true && that.isSetOpenDate();
    if (this_present_openDate || that_present_openDate) {
      if (!(this_present_openDate && that_present_openDate))
        return false;
      if (!this.openDate.equals(that.openDate))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_commModelID = true && this.isSetCommModelID();
    boolean that_present_commModelID = true && that.isSetCommModelID();
    if (this_present_commModelID || that_present_commModelID) {
      if (!(this_present_commModelID && that_present_commModelID))
        return false;
      if (!this.commModelID.equals(that.commModelID))
        return false;
    }

    boolean this_present_marginModelID = true && this.isSetMarginModelID();
    boolean that_present_marginModelID = true && that.isSetMarginModelID();
    if (this_present_marginModelID || that_present_marginModelID) {
      if (!(this_present_marginModelID && that_present_marginModelID))
        return false;
      if (!this.marginModelID.equals(that.marginModelID))
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CtpInvestorInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorGroupID()).compareTo(other.isSetInvestorGroupID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorGroupID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorGroupID, other.investorGroupID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorName()).compareTo(other.isSetInvestorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorName, other.investorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentifiedCardType()).compareTo(other.isSetIdentifiedCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifiedCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifiedCardType, other.identifiedCardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentifiedCardNo()).compareTo(other.isSetIdentifiedCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifiedCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifiedCardNo, other.identifiedCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsActive()).compareTo(other.isSetIsActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isActive, other.isActive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelephone()).compareTo(other.isSetTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telephone, other.telephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenDate()).compareTo(other.isSetOpenDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openDate, other.openDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommModelID()).compareTo(other.isSetCommModelID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommModelID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commModelID, other.commModelID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarginModelID()).compareTo(other.isSetMarginModelID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarginModelID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marginModelID, other.marginModelID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CtpInvestorInfo(");
    boolean first = true;

    if (isSetInvestorID()) {
      sb.append("investorID:");
      if (this.investorID == null) {
        sb.append("null");
      } else {
        sb.append(this.investorID);
      }
      first = false;
    }
    if (isSetBrokerID()) {
      if (!first) sb.append(", ");
      sb.append("brokerID:");
      if (this.brokerID == null) {
        sb.append("null");
      } else {
        sb.append(this.brokerID);
      }
      first = false;
    }
    if (isSetInvestorGroupID()) {
      if (!first) sb.append(", ");
      sb.append("investorGroupID:");
      if (this.investorGroupID == null) {
        sb.append("null");
      } else {
        sb.append(this.investorGroupID);
      }
      first = false;
    }
    if (isSetInvestorName()) {
      if (!first) sb.append(", ");
      sb.append("investorName:");
      if (this.investorName == null) {
        sb.append("null");
      } else {
        sb.append(this.investorName);
      }
      first = false;
    }
    if (isSetIdentifiedCardType()) {
      if (!first) sb.append(", ");
      sb.append("identifiedCardType:");
      sb.append(this.identifiedCardType);
      first = false;
    }
    if (isSetIdentifiedCardNo()) {
      if (!first) sb.append(", ");
      sb.append("identifiedCardNo:");
      if (this.identifiedCardNo == null) {
        sb.append("null");
      } else {
        sb.append(this.identifiedCardNo);
      }
      first = false;
    }
    if (isSetIsActive()) {
      if (!first) sb.append(", ");
      sb.append("isActive:");
      sb.append(this.isActive);
      first = false;
    }
    if (isSetTelephone()) {
      if (!first) sb.append(", ");
      sb.append("telephone:");
      if (this.telephone == null) {
        sb.append("null");
      } else {
        sb.append(this.telephone);
      }
      first = false;
    }
    if (isSetAddress()) {
      if (!first) sb.append(", ");
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
    }
    if (isSetOpenDate()) {
      if (!first) sb.append(", ");
      sb.append("openDate:");
      if (this.openDate == null) {
        sb.append("null");
      } else {
        sb.append(this.openDate);
      }
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
    }
    if (isSetCommModelID()) {
      if (!first) sb.append(", ");
      sb.append("commModelID:");
      if (this.commModelID == null) {
        sb.append("null");
      } else {
        sb.append(this.commModelID);
      }
      first = false;
    }
    if (isSetMarginModelID()) {
      if (!first) sb.append(", ");
      sb.append("marginModelID:");
      if (this.marginModelID == null) {
        sb.append("null");
      } else {
        sb.append(this.marginModelID);
      }
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CtpInvestorInfoStandardSchemeFactory implements SchemeFactory {
    public CtpInvestorInfoStandardScheme getScheme() {
      return new CtpInvestorInfoStandardScheme();
    }
  }

  private static class CtpInvestorInfoStandardScheme extends StandardScheme<CtpInvestorInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CtpInvestorInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INVESTOR_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorGroupID = iprot.readString();
              struct.setInvestorGroupIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INVESTOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorName = iprot.readString();
              struct.setInvestorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IDENTIFIED_CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.identifiedCardType = iprot.readByte();
              struct.setIdentifiedCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IDENTIFIED_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifiedCardNo = iprot.readString();
              struct.setIdentifiedCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isActive = iprot.readBool();
              struct.setIsActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telephone = iprot.readString();
              struct.setTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OPEN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openDate = iprot.readString();
              struct.setOpenDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COMM_MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commModelID = iprot.readString();
              struct.setCommModelIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MARGIN_MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.marginModelID = iprot.readString();
              struct.setMarginModelIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CtpInvestorInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.investorID != null) {
        if (struct.isSetInvestorID()) {
          oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
          oprot.writeString(struct.investorID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.brokerID != null) {
        if (struct.isSetBrokerID()) {
          oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
          oprot.writeString(struct.brokerID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.investorGroupID != null) {
        if (struct.isSetInvestorGroupID()) {
          oprot.writeFieldBegin(INVESTOR_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.investorGroupID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.investorName != null) {
        if (struct.isSetInvestorName()) {
          oprot.writeFieldBegin(INVESTOR_NAME_FIELD_DESC);
          oprot.writeString(struct.investorName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIdentifiedCardType()) {
        oprot.writeFieldBegin(IDENTIFIED_CARD_TYPE_FIELD_DESC);
        oprot.writeByte(struct.identifiedCardType);
        oprot.writeFieldEnd();
      }
      if (struct.identifiedCardNo != null) {
        if (struct.isSetIdentifiedCardNo()) {
          oprot.writeFieldBegin(IDENTIFIED_CARD_NO_FIELD_DESC);
          oprot.writeString(struct.identifiedCardNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsActive()) {
        oprot.writeFieldBegin(IS_ACTIVE_FIELD_DESC);
        oprot.writeBool(struct.isActive);
        oprot.writeFieldEnd();
      }
      if (struct.telephone != null) {
        if (struct.isSetTelephone()) {
          oprot.writeFieldBegin(TELEPHONE_FIELD_DESC);
          oprot.writeString(struct.telephone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.address != null) {
        if (struct.isSetAddress()) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          oprot.writeString(struct.address);
          oprot.writeFieldEnd();
        }
      }
      if (struct.openDate != null) {
        if (struct.isSetOpenDate()) {
          oprot.writeFieldBegin(OPEN_DATE_FIELD_DESC);
          oprot.writeString(struct.openDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobile != null) {
        if (struct.isSetMobile()) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commModelID != null) {
        if (struct.isSetCommModelID()) {
          oprot.writeFieldBegin(COMM_MODEL_ID_FIELD_DESC);
          oprot.writeString(struct.commModelID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.marginModelID != null) {
        if (struct.isSetMarginModelID()) {
          oprot.writeFieldBegin(MARGIN_MODEL_ID_FIELD_DESC);
          oprot.writeString(struct.marginModelID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CtpInvestorInfoTupleSchemeFactory implements SchemeFactory {
    public CtpInvestorInfoTupleScheme getScheme() {
      return new CtpInvestorInfoTupleScheme();
    }
  }

  private static class CtpInvestorInfoTupleScheme extends TupleScheme<CtpInvestorInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CtpInvestorInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInvestorID()) {
        optionals.set(0);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(1);
      }
      if (struct.isSetInvestorGroupID()) {
        optionals.set(2);
      }
      if (struct.isSetInvestorName()) {
        optionals.set(3);
      }
      if (struct.isSetIdentifiedCardType()) {
        optionals.set(4);
      }
      if (struct.isSetIdentifiedCardNo()) {
        optionals.set(5);
      }
      if (struct.isSetIsActive()) {
        optionals.set(6);
      }
      if (struct.isSetTelephone()) {
        optionals.set(7);
      }
      if (struct.isSetAddress()) {
        optionals.set(8);
      }
      if (struct.isSetOpenDate()) {
        optionals.set(9);
      }
      if (struct.isSetMobile()) {
        optionals.set(10);
      }
      if (struct.isSetCommModelID()) {
        optionals.set(11);
      }
      if (struct.isSetMarginModelID()) {
        optionals.set(12);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorGroupID()) {
        oprot.writeString(struct.investorGroupID);
      }
      if (struct.isSetInvestorName()) {
        oprot.writeString(struct.investorName);
      }
      if (struct.isSetIdentifiedCardType()) {
        oprot.writeByte(struct.identifiedCardType);
      }
      if (struct.isSetIdentifiedCardNo()) {
        oprot.writeString(struct.identifiedCardNo);
      }
      if (struct.isSetIsActive()) {
        oprot.writeBool(struct.isActive);
      }
      if (struct.isSetTelephone()) {
        oprot.writeString(struct.telephone);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetOpenDate()) {
        oprot.writeString(struct.openDate);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetCommModelID()) {
        oprot.writeString(struct.commModelID);
      }
      if (struct.isSetMarginModelID()) {
        oprot.writeString(struct.marginModelID);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CtpInvestorInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.investorGroupID = iprot.readString();
        struct.setInvestorGroupIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.investorName = iprot.readString();
        struct.setInvestorNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.identifiedCardType = iprot.readByte();
        struct.setIdentifiedCardTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.identifiedCardNo = iprot.readString();
        struct.setIdentifiedCardNoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isActive = iprot.readBool();
        struct.setIsActiveIsSet(true);
      }
      if (incoming.get(7)) {
        struct.telephone = iprot.readString();
        struct.setTelephoneIsSet(true);
      }
      if (incoming.get(8)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(9)) {
        struct.openDate = iprot.readString();
        struct.setOpenDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(11)) {
        struct.commModelID = iprot.readString();
        struct.setCommModelIDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.marginModelID = iprot.readString();
        struct.setMarginModelIDIsSet(true);
      }
      if (incoming.get(13)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
    }
  }

}

