/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.ctp_service.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CtpTradingParams implements org.apache.thrift.TBase<CtpTradingParams, CtpTradingParams._Fields>, java.io.Serializable, Cloneable, Comparable<CtpTradingParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CtpTradingParams");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MARGIN_PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("marginPriceType", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField ALGORITHM_FIELD_DESC = new org.apache.thrift.protocol.TField("algorithm", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField AVAIL_INCLUDE_CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("availIncludeCloseProfit", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField CURRENCY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyID", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OPTION_ROYALTY_PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("optionRoyaltyPriceType", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CtpTradingParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CtpTradingParamsTupleSchemeFactory());
  }

  public String brokerID; // optional
  public String investorID; // optional
  public byte marginPriceType; // optional
  public byte algorithm; // optional
  public byte availIncludeCloseProfit; // optional
  public String currencyID; // optional
  public byte optionRoyaltyPriceType; // optional
  public int sledAccountId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    INVESTOR_ID((short)2, "investorID"),
    MARGIN_PRICE_TYPE((short)3, "marginPriceType"),
    ALGORITHM((short)4, "algorithm"),
    AVAIL_INCLUDE_CLOSE_PROFIT((short)5, "availIncludeCloseProfit"),
    CURRENCY_ID((short)6, "currencyID"),
    OPTION_ROYALTY_PRICE_TYPE((short)7, "optionRoyaltyPriceType"),
    SLED_ACCOUNT_ID((short)8, "sledAccountId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // INVESTOR_ID
          return INVESTOR_ID;
        case 3: // MARGIN_PRICE_TYPE
          return MARGIN_PRICE_TYPE;
        case 4: // ALGORITHM
          return ALGORITHM;
        case 5: // AVAIL_INCLUDE_CLOSE_PROFIT
          return AVAIL_INCLUDE_CLOSE_PROFIT;
        case 6: // CURRENCY_ID
          return CURRENCY_ID;
        case 7: // OPTION_ROYALTY_PRICE_TYPE
          return OPTION_ROYALTY_PRICE_TYPE;
        case 8: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MARGINPRICETYPE_ISSET_ID = 0;
  private static final int __ALGORITHM_ISSET_ID = 1;
  private static final int __AVAILINCLUDECLOSEPROFIT_ISSET_ID = 2;
  private static final int __OPTIONROYALTYPRICETYPE_ISSET_ID = 3;
  private static final int __SLEDACCOUNTID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.BROKER_ID,_Fields.INVESTOR_ID,_Fields.MARGIN_PRICE_TYPE,_Fields.ALGORITHM,_Fields.AVAIL_INCLUDE_CLOSE_PROFIT,_Fields.CURRENCY_ID,_Fields.OPTION_ROYALTY_PRICE_TYPE,_Fields.SLED_ACCOUNT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MARGIN_PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("marginPriceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ALGORITHM, new org.apache.thrift.meta_data.FieldMetaData("algorithm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.AVAIL_INCLUDE_CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("availIncludeCloseProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CURRENCY_ID, new org.apache.thrift.meta_data.FieldMetaData("currencyID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPTION_ROYALTY_PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("optionRoyaltyPriceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CtpTradingParams.class, metaDataMap);
  }

  public CtpTradingParams() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CtpTradingParams(CtpTradingParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    this.marginPriceType = other.marginPriceType;
    this.algorithm = other.algorithm;
    this.availIncludeCloseProfit = other.availIncludeCloseProfit;
    if (other.isSetCurrencyID()) {
      this.currencyID = other.currencyID;
    }
    this.optionRoyaltyPriceType = other.optionRoyaltyPriceType;
    this.sledAccountId = other.sledAccountId;
  }

  public CtpTradingParams deepCopy() {
    return new CtpTradingParams(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.investorID = null;
    setMarginPriceTypeIsSet(false);
    this.marginPriceType = 0;
    setAlgorithmIsSet(false);
    this.algorithm = 0;
    setAvailIncludeCloseProfitIsSet(false);
    this.availIncludeCloseProfit = 0;
    this.currencyID = null;
    setOptionRoyaltyPriceTypeIsSet(false);
    this.optionRoyaltyPriceType = 0;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CtpTradingParams setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CtpTradingParams setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public byte getMarginPriceType() {
    return this.marginPriceType;
  }

  public CtpTradingParams setMarginPriceType(byte marginPriceType) {
    this.marginPriceType = marginPriceType;
    setMarginPriceTypeIsSet(true);
    return this;
  }

  public void unsetMarginPriceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARGINPRICETYPE_ISSET_ID);
  }

  /** Returns true if field marginPriceType is set (has been assigned a value) and false otherwise */
  public boolean isSetMarginPriceType() {
    return EncodingUtils.testBit(__isset_bitfield, __MARGINPRICETYPE_ISSET_ID);
  }

  public void setMarginPriceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARGINPRICETYPE_ISSET_ID, value);
  }

  public byte getAlgorithm() {
    return this.algorithm;
  }

  public CtpTradingParams setAlgorithm(byte algorithm) {
    this.algorithm = algorithm;
    setAlgorithmIsSet(true);
    return this;
  }

  public void unsetAlgorithm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALGORITHM_ISSET_ID);
  }

  /** Returns true if field algorithm is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgorithm() {
    return EncodingUtils.testBit(__isset_bitfield, __ALGORITHM_ISSET_ID);
  }

  public void setAlgorithmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALGORITHM_ISSET_ID, value);
  }

  public byte getAvailIncludeCloseProfit() {
    return this.availIncludeCloseProfit;
  }

  public CtpTradingParams setAvailIncludeCloseProfit(byte availIncludeCloseProfit) {
    this.availIncludeCloseProfit = availIncludeCloseProfit;
    setAvailIncludeCloseProfitIsSet(true);
    return this;
  }

  public void unsetAvailIncludeCloseProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILINCLUDECLOSEPROFIT_ISSET_ID);
  }

  /** Returns true if field availIncludeCloseProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailIncludeCloseProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILINCLUDECLOSEPROFIT_ISSET_ID);
  }

  public void setAvailIncludeCloseProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILINCLUDECLOSEPROFIT_ISSET_ID, value);
  }

  public String getCurrencyID() {
    return this.currencyID;
  }

  public CtpTradingParams setCurrencyID(String currencyID) {
    this.currencyID = currencyID;
    return this;
  }

  public void unsetCurrencyID() {
    this.currencyID = null;
  }

  /** Returns true if field currencyID is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyID() {
    return this.currencyID != null;
  }

  public void setCurrencyIDIsSet(boolean value) {
    if (!value) {
      this.currencyID = null;
    }
  }

  public byte getOptionRoyaltyPriceType() {
    return this.optionRoyaltyPriceType;
  }

  public CtpTradingParams setOptionRoyaltyPriceType(byte optionRoyaltyPriceType) {
    this.optionRoyaltyPriceType = optionRoyaltyPriceType;
    setOptionRoyaltyPriceTypeIsSet(true);
    return this;
  }

  public void unsetOptionRoyaltyPriceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPTIONROYALTYPRICETYPE_ISSET_ID);
  }

  /** Returns true if field optionRoyaltyPriceType is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionRoyaltyPriceType() {
    return EncodingUtils.testBit(__isset_bitfield, __OPTIONROYALTYPRICETYPE_ISSET_ID);
  }

  public void setOptionRoyaltyPriceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPTIONROYALTYPRICETYPE_ISSET_ID, value);
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public CtpTradingParams setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case MARGIN_PRICE_TYPE:
      if (value == null) {
        unsetMarginPriceType();
      } else {
        setMarginPriceType((Byte)value);
      }
      break;

    case ALGORITHM:
      if (value == null) {
        unsetAlgorithm();
      } else {
        setAlgorithm((Byte)value);
      }
      break;

    case AVAIL_INCLUDE_CLOSE_PROFIT:
      if (value == null) {
        unsetAvailIncludeCloseProfit();
      } else {
        setAvailIncludeCloseProfit((Byte)value);
      }
      break;

    case CURRENCY_ID:
      if (value == null) {
        unsetCurrencyID();
      } else {
        setCurrencyID((String)value);
      }
      break;

    case OPTION_ROYALTY_PRICE_TYPE:
      if (value == null) {
        unsetOptionRoyaltyPriceType();
      } else {
        setOptionRoyaltyPriceType((Byte)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case MARGIN_PRICE_TYPE:
      return Byte.valueOf(getMarginPriceType());

    case ALGORITHM:
      return Byte.valueOf(getAlgorithm());

    case AVAIL_INCLUDE_CLOSE_PROFIT:
      return Byte.valueOf(getAvailIncludeCloseProfit());

    case CURRENCY_ID:
      return getCurrencyID();

    case OPTION_ROYALTY_PRICE_TYPE:
      return Byte.valueOf(getOptionRoyaltyPriceType());

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case MARGIN_PRICE_TYPE:
      return isSetMarginPriceType();
    case ALGORITHM:
      return isSetAlgorithm();
    case AVAIL_INCLUDE_CLOSE_PROFIT:
      return isSetAvailIncludeCloseProfit();
    case CURRENCY_ID:
      return isSetCurrencyID();
    case OPTION_ROYALTY_PRICE_TYPE:
      return isSetOptionRoyaltyPriceType();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CtpTradingParams)
      return this.equals((CtpTradingParams)that);
    return false;
  }

  public boolean equals(CtpTradingParams that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_marginPriceType = true && this.isSetMarginPriceType();
    boolean that_present_marginPriceType = true && that.isSetMarginPriceType();
    if (this_present_marginPriceType || that_present_marginPriceType) {
      if (!(this_present_marginPriceType && that_present_marginPriceType))
        return false;
      if (this.marginPriceType != that.marginPriceType)
        return false;
    }

    boolean this_present_algorithm = true && this.isSetAlgorithm();
    boolean that_present_algorithm = true && that.isSetAlgorithm();
    if (this_present_algorithm || that_present_algorithm) {
      if (!(this_present_algorithm && that_present_algorithm))
        return false;
      if (this.algorithm != that.algorithm)
        return false;
    }

    boolean this_present_availIncludeCloseProfit = true && this.isSetAvailIncludeCloseProfit();
    boolean that_present_availIncludeCloseProfit = true && that.isSetAvailIncludeCloseProfit();
    if (this_present_availIncludeCloseProfit || that_present_availIncludeCloseProfit) {
      if (!(this_present_availIncludeCloseProfit && that_present_availIncludeCloseProfit))
        return false;
      if (this.availIncludeCloseProfit != that.availIncludeCloseProfit)
        return false;
    }

    boolean this_present_currencyID = true && this.isSetCurrencyID();
    boolean that_present_currencyID = true && that.isSetCurrencyID();
    if (this_present_currencyID || that_present_currencyID) {
      if (!(this_present_currencyID && that_present_currencyID))
        return false;
      if (!this.currencyID.equals(that.currencyID))
        return false;
    }

    boolean this_present_optionRoyaltyPriceType = true && this.isSetOptionRoyaltyPriceType();
    boolean that_present_optionRoyaltyPriceType = true && that.isSetOptionRoyaltyPriceType();
    if (this_present_optionRoyaltyPriceType || that_present_optionRoyaltyPriceType) {
      if (!(this_present_optionRoyaltyPriceType && that_present_optionRoyaltyPriceType))
        return false;
      if (this.optionRoyaltyPriceType != that.optionRoyaltyPriceType)
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CtpTradingParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarginPriceType()).compareTo(other.isSetMarginPriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarginPriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marginPriceType, other.marginPriceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlgorithm()).compareTo(other.isSetAlgorithm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgorithm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algorithm, other.algorithm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailIncludeCloseProfit()).compareTo(other.isSetAvailIncludeCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailIncludeCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availIncludeCloseProfit, other.availIncludeCloseProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyID()).compareTo(other.isSetCurrencyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyID, other.currencyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptionRoyaltyPriceType()).compareTo(other.isSetOptionRoyaltyPriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionRoyaltyPriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionRoyaltyPriceType, other.optionRoyaltyPriceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CtpTradingParams(");
    boolean first = true;

    if (isSetBrokerID()) {
      sb.append("brokerID:");
      if (this.brokerID == null) {
        sb.append("null");
      } else {
        sb.append(this.brokerID);
      }
      first = false;
    }
    if (isSetInvestorID()) {
      if (!first) sb.append(", ");
      sb.append("investorID:");
      if (this.investorID == null) {
        sb.append("null");
      } else {
        sb.append(this.investorID);
      }
      first = false;
    }
    if (isSetMarginPriceType()) {
      if (!first) sb.append(", ");
      sb.append("marginPriceType:");
      sb.append(this.marginPriceType);
      first = false;
    }
    if (isSetAlgorithm()) {
      if (!first) sb.append(", ");
      sb.append("algorithm:");
      sb.append(this.algorithm);
      first = false;
    }
    if (isSetAvailIncludeCloseProfit()) {
      if (!first) sb.append(", ");
      sb.append("availIncludeCloseProfit:");
      sb.append(this.availIncludeCloseProfit);
      first = false;
    }
    if (isSetCurrencyID()) {
      if (!first) sb.append(", ");
      sb.append("currencyID:");
      if (this.currencyID == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyID);
      }
      first = false;
    }
    if (isSetOptionRoyaltyPriceType()) {
      if (!first) sb.append(", ");
      sb.append("optionRoyaltyPriceType:");
      sb.append(this.optionRoyaltyPriceType);
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CtpTradingParamsStandardSchemeFactory implements SchemeFactory {
    public CtpTradingParamsStandardScheme getScheme() {
      return new CtpTradingParamsStandardScheme();
    }
  }

  private static class CtpTradingParamsStandardScheme extends StandardScheme<CtpTradingParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CtpTradingParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MARGIN_PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.marginPriceType = iprot.readByte();
              struct.setMarginPriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALGORITHM
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.algorithm = iprot.readByte();
              struct.setAlgorithmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AVAIL_INCLUDE_CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.availIncludeCloseProfit = iprot.readByte();
              struct.setAvailIncludeCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURRENCY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyID = iprot.readString();
              struct.setCurrencyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPTION_ROYALTY_PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.optionRoyaltyPriceType = iprot.readByte();
              struct.setOptionRoyaltyPriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CtpTradingParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        if (struct.isSetBrokerID()) {
          oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
          oprot.writeString(struct.brokerID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.investorID != null) {
        if (struct.isSetInvestorID()) {
          oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
          oprot.writeString(struct.investorID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMarginPriceType()) {
        oprot.writeFieldBegin(MARGIN_PRICE_TYPE_FIELD_DESC);
        oprot.writeByte(struct.marginPriceType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAlgorithm()) {
        oprot.writeFieldBegin(ALGORITHM_FIELD_DESC);
        oprot.writeByte(struct.algorithm);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAvailIncludeCloseProfit()) {
        oprot.writeFieldBegin(AVAIL_INCLUDE_CLOSE_PROFIT_FIELD_DESC);
        oprot.writeByte(struct.availIncludeCloseProfit);
        oprot.writeFieldEnd();
      }
      if (struct.currencyID != null) {
        if (struct.isSetCurrencyID()) {
          oprot.writeFieldBegin(CURRENCY_ID_FIELD_DESC);
          oprot.writeString(struct.currencyID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOptionRoyaltyPriceType()) {
        oprot.writeFieldBegin(OPTION_ROYALTY_PRICE_TYPE_FIELD_DESC);
        oprot.writeByte(struct.optionRoyaltyPriceType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CtpTradingParamsTupleSchemeFactory implements SchemeFactory {
    public CtpTradingParamsTupleScheme getScheme() {
      return new CtpTradingParamsTupleScheme();
    }
  }

  private static class CtpTradingParamsTupleScheme extends TupleScheme<CtpTradingParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CtpTradingParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(1);
      }
      if (struct.isSetMarginPriceType()) {
        optionals.set(2);
      }
      if (struct.isSetAlgorithm()) {
        optionals.set(3);
      }
      if (struct.isSetAvailIncludeCloseProfit()) {
        optionals.set(4);
      }
      if (struct.isSetCurrencyID()) {
        optionals.set(5);
      }
      if (struct.isSetOptionRoyaltyPriceType()) {
        optionals.set(6);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetMarginPriceType()) {
        oprot.writeByte(struct.marginPriceType);
      }
      if (struct.isSetAlgorithm()) {
        oprot.writeByte(struct.algorithm);
      }
      if (struct.isSetAvailIncludeCloseProfit()) {
        oprot.writeByte(struct.availIncludeCloseProfit);
      }
      if (struct.isSetCurrencyID()) {
        oprot.writeString(struct.currencyID);
      }
      if (struct.isSetOptionRoyaltyPriceType()) {
        oprot.writeByte(struct.optionRoyaltyPriceType);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CtpTradingParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.marginPriceType = iprot.readByte();
        struct.setMarginPriceTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.algorithm = iprot.readByte();
        struct.setAlgorithmIsSet(true);
      }
      if (incoming.get(4)) {
        struct.availIncludeCloseProfit = iprot.readByte();
        struct.setAvailIncludeCloseProfitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.currencyID = iprot.readString();
        struct.setCurrencyIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.optionRoyaltyPriceType = iprot.readByte();
        struct.setOptionRoyaltyPriceTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
    }
  }

}

