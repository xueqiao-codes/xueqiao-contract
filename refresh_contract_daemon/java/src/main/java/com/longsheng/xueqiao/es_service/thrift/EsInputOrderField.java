/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.es_service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EsInputOrderField implements org.apache.thrift.TBase<EsInputOrderField, EsInputOrderField._Fields>, java.io.Serializable, Cloneable, Comparable<EsInputOrderField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EsInputOrderField");

  private static final org.apache.thrift.protocol.TField SLED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COMMODITY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONTRACT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractNo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("orderWay", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ORDER_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderMode", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField VALID_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("validDateTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField IS_RISK_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isRiskOrder", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField DIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("direct", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField HEDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("hedge", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ORDER_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField TRIGGER_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField ORDER_VOL_FIELD_DESC = new org.apache.thrift.protocol.TField("orderVol", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField MIN_MATCH_VOL_FIELD_DESC = new org.apache.thrift.protocol.TField("minMatchVol", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField RANDOMISE_FIELD_DESC = new org.apache.thrift.protocol.TField("randomise", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField MIN_CLIP_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("minClipSize", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField MAX_CLIP_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxClipSize", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField SAVE_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("saveInt", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField SAVE_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("saveDouble", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField SAVE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("saveString", org.apache.thrift.protocol.TType.STRING, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EsInputOrderFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EsInputOrderFieldTupleSchemeFactory());
  }

  public String sledId; // required
  public int sledAccountId; // optional
  public int userId; // optional
  public String commodityNo; // optional
  public String contractNo; // optional
  /**
   * 
   * @see EsOrderType
   */
  public EsOrderType orderType; // optional
  /**
   * 
   * @see EsOrderWayType
   */
  public EsOrderWayType orderWay; // optional
  /**
   * 
   * @see EsOrderModeType
   */
  public EsOrderModeType orderMode; // optional
  public long validDateTime; // optional
  public boolean isRiskOrder; // optional
  /**
   * 
   * @see EsDirectType
   */
  public EsDirectType direct; // optional
  /**
   * 
   * @see EsOffsetType
   */
  public EsOffsetType offset; // optional
  /**
   * 
   * @see EsHedgeType
   */
  public EsHedgeType hedge; // optional
  public double orderPrice; // optional
  public double triggerPrice; // optional
  public int orderVol; // optional
  public int minMatchVol; // optional
  public boolean randomise; // optional
  public int minClipSize; // optional
  public int maxClipSize; // optional
  public int saveInt; // optional
  public double saveDouble; // optional
  public String saveString; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_ID((short)1, "sledId"),
    SLED_ACCOUNT_ID((short)2, "sledAccountId"),
    USER_ID((short)3, "userId"),
    COMMODITY_NO((short)5, "commodityNo"),
    CONTRACT_NO((short)6, "contractNo"),
    /**
     * 
     * @see EsOrderType
     */
    ORDER_TYPE((short)7, "orderType"),
    /**
     * 
     * @see EsOrderWayType
     */
    ORDER_WAY((short)8, "orderWay"),
    /**
     * 
     * @see EsOrderModeType
     */
    ORDER_MODE((short)9, "orderMode"),
    VALID_DATE_TIME((short)10, "validDateTime"),
    IS_RISK_ORDER((short)11, "isRiskOrder"),
    /**
     * 
     * @see EsDirectType
     */
    DIRECT((short)12, "direct"),
    /**
     * 
     * @see EsOffsetType
     */
    OFFSET((short)13, "offset"),
    /**
     * 
     * @see EsHedgeType
     */
    HEDGE((short)14, "hedge"),
    ORDER_PRICE((short)15, "orderPrice"),
    TRIGGER_PRICE((short)16, "triggerPrice"),
    ORDER_VOL((short)17, "orderVol"),
    MIN_MATCH_VOL((short)18, "minMatchVol"),
    RANDOMISE((short)19, "randomise"),
    MIN_CLIP_SIZE((short)20, "minClipSize"),
    MAX_CLIP_SIZE((short)21, "maxClipSize"),
    SAVE_INT((short)22, "saveInt"),
    SAVE_DOUBLE((short)23, "saveDouble"),
    SAVE_STRING((short)24, "saveString");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_ID
          return SLED_ID;
        case 2: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        case 3: // USER_ID
          return USER_ID;
        case 5: // COMMODITY_NO
          return COMMODITY_NO;
        case 6: // CONTRACT_NO
          return CONTRACT_NO;
        case 7: // ORDER_TYPE
          return ORDER_TYPE;
        case 8: // ORDER_WAY
          return ORDER_WAY;
        case 9: // ORDER_MODE
          return ORDER_MODE;
        case 10: // VALID_DATE_TIME
          return VALID_DATE_TIME;
        case 11: // IS_RISK_ORDER
          return IS_RISK_ORDER;
        case 12: // DIRECT
          return DIRECT;
        case 13: // OFFSET
          return OFFSET;
        case 14: // HEDGE
          return HEDGE;
        case 15: // ORDER_PRICE
          return ORDER_PRICE;
        case 16: // TRIGGER_PRICE
          return TRIGGER_PRICE;
        case 17: // ORDER_VOL
          return ORDER_VOL;
        case 18: // MIN_MATCH_VOL
          return MIN_MATCH_VOL;
        case 19: // RANDOMISE
          return RANDOMISE;
        case 20: // MIN_CLIP_SIZE
          return MIN_CLIP_SIZE;
        case 21: // MAX_CLIP_SIZE
          return MAX_CLIP_SIZE;
        case 22: // SAVE_INT
          return SAVE_INT;
        case 23: // SAVE_DOUBLE
          return SAVE_DOUBLE;
        case 24: // SAVE_STRING
          return SAVE_STRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDACCOUNTID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __VALIDDATETIME_ISSET_ID = 2;
  private static final int __ISRISKORDER_ISSET_ID = 3;
  private static final int __ORDERPRICE_ISSET_ID = 4;
  private static final int __TRIGGERPRICE_ISSET_ID = 5;
  private static final int __ORDERVOL_ISSET_ID = 6;
  private static final int __MINMATCHVOL_ISSET_ID = 7;
  private static final int __RANDOMISE_ISSET_ID = 8;
  private static final int __MINCLIPSIZE_ISSET_ID = 9;
  private static final int __MAXCLIPSIZE_ISSET_ID = 10;
  private static final int __SAVEINT_ISSET_ID = 11;
  private static final int __SAVEDOUBLE_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_ACCOUNT_ID,_Fields.USER_ID,_Fields.COMMODITY_NO,_Fields.CONTRACT_NO,_Fields.ORDER_TYPE,_Fields.ORDER_WAY,_Fields.ORDER_MODE,_Fields.VALID_DATE_TIME,_Fields.IS_RISK_ORDER,_Fields.DIRECT,_Fields.OFFSET,_Fields.HEDGE,_Fields.ORDER_PRICE,_Fields.TRIGGER_PRICE,_Fields.ORDER_VOL,_Fields.MIN_MATCH_VOL,_Fields.RANDOMISE,_Fields.MIN_CLIP_SIZE,_Fields.MAX_CLIP_SIZE,_Fields.SAVE_INT,_Fields.SAVE_DOUBLE,_Fields.SAVE_STRING};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_ID, new org.apache.thrift.meta_data.FieldMetaData("sledId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMODITY_NO, new org.apache.thrift.meta_data.FieldMetaData("commodityNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_NO, new org.apache.thrift.meta_data.FieldMetaData("contractNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsOrderType.class)));
    tmpMap.put(_Fields.ORDER_WAY, new org.apache.thrift.meta_data.FieldMetaData("orderWay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsOrderWayType.class)));
    tmpMap.put(_Fields.ORDER_MODE, new org.apache.thrift.meta_data.FieldMetaData("orderMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsOrderModeType.class)));
    tmpMap.put(_Fields.VALID_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("validDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_RISK_ORDER, new org.apache.thrift.meta_data.FieldMetaData("isRiskOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DIRECT, new org.apache.thrift.meta_data.FieldMetaData("direct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsDirectType.class)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsOffsetType.class)));
    tmpMap.put(_Fields.HEDGE, new org.apache.thrift.meta_data.FieldMetaData("hedge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsHedgeType.class)));
    tmpMap.put(_Fields.ORDER_PRICE, new org.apache.thrift.meta_data.FieldMetaData("orderPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRIGGER_PRICE, new org.apache.thrift.meta_data.FieldMetaData("triggerPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORDER_VOL, new org.apache.thrift.meta_data.FieldMetaData("orderVol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_MATCH_VOL, new org.apache.thrift.meta_data.FieldMetaData("minMatchVol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RANDOMISE, new org.apache.thrift.meta_data.FieldMetaData("randomise", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MIN_CLIP_SIZE, new org.apache.thrift.meta_data.FieldMetaData("minClipSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_CLIP_SIZE, new org.apache.thrift.meta_data.FieldMetaData("maxClipSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SAVE_INT, new org.apache.thrift.meta_data.FieldMetaData("saveInt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SAVE_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("saveDouble", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SAVE_STRING, new org.apache.thrift.meta_data.FieldMetaData("saveString", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EsInputOrderField.class, metaDataMap);
  }

  public EsInputOrderField() {
  }

  public EsInputOrderField(
    String sledId)
  {
    this();
    this.sledId = sledId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EsInputOrderField(EsInputOrderField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSledId()) {
      this.sledId = other.sledId;
    }
    this.sledAccountId = other.sledAccountId;
    this.userId = other.userId;
    if (other.isSetCommodityNo()) {
      this.commodityNo = other.commodityNo;
    }
    if (other.isSetContractNo()) {
      this.contractNo = other.contractNo;
    }
    if (other.isSetOrderType()) {
      this.orderType = other.orderType;
    }
    if (other.isSetOrderWay()) {
      this.orderWay = other.orderWay;
    }
    if (other.isSetOrderMode()) {
      this.orderMode = other.orderMode;
    }
    this.validDateTime = other.validDateTime;
    this.isRiskOrder = other.isRiskOrder;
    if (other.isSetDirect()) {
      this.direct = other.direct;
    }
    if (other.isSetOffset()) {
      this.offset = other.offset;
    }
    if (other.isSetHedge()) {
      this.hedge = other.hedge;
    }
    this.orderPrice = other.orderPrice;
    this.triggerPrice = other.triggerPrice;
    this.orderVol = other.orderVol;
    this.minMatchVol = other.minMatchVol;
    this.randomise = other.randomise;
    this.minClipSize = other.minClipSize;
    this.maxClipSize = other.maxClipSize;
    this.saveInt = other.saveInt;
    this.saveDouble = other.saveDouble;
    if (other.isSetSaveString()) {
      this.saveString = other.saveString;
    }
  }

  public EsInputOrderField deepCopy() {
    return new EsInputOrderField(this);
  }

  @Override
  public void clear() {
    this.sledId = null;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.commodityNo = null;
    this.contractNo = null;
    this.orderType = null;
    this.orderWay = null;
    this.orderMode = null;
    setValidDateTimeIsSet(false);
    this.validDateTime = 0;
    setIsRiskOrderIsSet(false);
    this.isRiskOrder = false;
    this.direct = null;
    this.offset = null;
    this.hedge = null;
    setOrderPriceIsSet(false);
    this.orderPrice = 0.0;
    setTriggerPriceIsSet(false);
    this.triggerPrice = 0.0;
    setOrderVolIsSet(false);
    this.orderVol = 0;
    setMinMatchVolIsSet(false);
    this.minMatchVol = 0;
    setRandomiseIsSet(false);
    this.randomise = false;
    setMinClipSizeIsSet(false);
    this.minClipSize = 0;
    setMaxClipSizeIsSet(false);
    this.maxClipSize = 0;
    setSaveIntIsSet(false);
    this.saveInt = 0;
    setSaveDoubleIsSet(false);
    this.saveDouble = 0.0;
    this.saveString = null;
  }

  public String getSledId() {
    return this.sledId;
  }

  public EsInputOrderField setSledId(String sledId) {
    this.sledId = sledId;
    return this;
  }

  public void unsetSledId() {
    this.sledId = null;
  }

  /** Returns true if field sledId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledId() {
    return this.sledId != null;
  }

  public void setSledIdIsSet(boolean value) {
    if (!value) {
      this.sledId = null;
    }
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public EsInputOrderField setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public EsInputOrderField setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getCommodityNo() {
    return this.commodityNo;
  }

  public EsInputOrderField setCommodityNo(String commodityNo) {
    this.commodityNo = commodityNo;
    return this;
  }

  public void unsetCommodityNo() {
    this.commodityNo = null;
  }

  /** Returns true if field commodityNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityNo() {
    return this.commodityNo != null;
  }

  public void setCommodityNoIsSet(boolean value) {
    if (!value) {
      this.commodityNo = null;
    }
  }

  public String getContractNo() {
    return this.contractNo;
  }

  public EsInputOrderField setContractNo(String contractNo) {
    this.contractNo = contractNo;
    return this;
  }

  public void unsetContractNo() {
    this.contractNo = null;
  }

  /** Returns true if field contractNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContractNo() {
    return this.contractNo != null;
  }

  public void setContractNoIsSet(boolean value) {
    if (!value) {
      this.contractNo = null;
    }
  }

  /**
   * 
   * @see EsOrderType
   */
  public EsOrderType getOrderType() {
    return this.orderType;
  }

  /**
   * 
   * @see EsOrderType
   */
  public EsInputOrderField setOrderType(EsOrderType orderType) {
    this.orderType = orderType;
    return this;
  }

  public void unsetOrderType() {
    this.orderType = null;
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return this.orderType != null;
  }

  public void setOrderTypeIsSet(boolean value) {
    if (!value) {
      this.orderType = null;
    }
  }

  /**
   * 
   * @see EsOrderWayType
   */
  public EsOrderWayType getOrderWay() {
    return this.orderWay;
  }

  /**
   * 
   * @see EsOrderWayType
   */
  public EsInputOrderField setOrderWay(EsOrderWayType orderWay) {
    this.orderWay = orderWay;
    return this;
  }

  public void unsetOrderWay() {
    this.orderWay = null;
  }

  /** Returns true if field orderWay is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderWay() {
    return this.orderWay != null;
  }

  public void setOrderWayIsSet(boolean value) {
    if (!value) {
      this.orderWay = null;
    }
  }

  /**
   * 
   * @see EsOrderModeType
   */
  public EsOrderModeType getOrderMode() {
    return this.orderMode;
  }

  /**
   * 
   * @see EsOrderModeType
   */
  public EsInputOrderField setOrderMode(EsOrderModeType orderMode) {
    this.orderMode = orderMode;
    return this;
  }

  public void unsetOrderMode() {
    this.orderMode = null;
  }

  /** Returns true if field orderMode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderMode() {
    return this.orderMode != null;
  }

  public void setOrderModeIsSet(boolean value) {
    if (!value) {
      this.orderMode = null;
    }
  }

  public long getValidDateTime() {
    return this.validDateTime;
  }

  public EsInputOrderField setValidDateTime(long validDateTime) {
    this.validDateTime = validDateTime;
    setValidDateTimeIsSet(true);
    return this;
  }

  public void unsetValidDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDDATETIME_ISSET_ID);
  }

  /** Returns true if field validDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetValidDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDDATETIME_ISSET_ID);
  }

  public void setValidDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDDATETIME_ISSET_ID, value);
  }

  public boolean isIsRiskOrder() {
    return this.isRiskOrder;
  }

  public EsInputOrderField setIsRiskOrder(boolean isRiskOrder) {
    this.isRiskOrder = isRiskOrder;
    setIsRiskOrderIsSet(true);
    return this;
  }

  public void unsetIsRiskOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRISKORDER_ISSET_ID);
  }

  /** Returns true if field isRiskOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRiskOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRISKORDER_ISSET_ID);
  }

  public void setIsRiskOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRISKORDER_ISSET_ID, value);
  }

  /**
   * 
   * @see EsDirectType
   */
  public EsDirectType getDirect() {
    return this.direct;
  }

  /**
   * 
   * @see EsDirectType
   */
  public EsInputOrderField setDirect(EsDirectType direct) {
    this.direct = direct;
    return this;
  }

  public void unsetDirect() {
    this.direct = null;
  }

  /** Returns true if field direct is set (has been assigned a value) and false otherwise */
  public boolean isSetDirect() {
    return this.direct != null;
  }

  public void setDirectIsSet(boolean value) {
    if (!value) {
      this.direct = null;
    }
  }

  /**
   * 
   * @see EsOffsetType
   */
  public EsOffsetType getOffset() {
    return this.offset;
  }

  /**
   * 
   * @see EsOffsetType
   */
  public EsInputOrderField setOffset(EsOffsetType offset) {
    this.offset = offset;
    return this;
  }

  public void unsetOffset() {
    this.offset = null;
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return this.offset != null;
  }

  public void setOffsetIsSet(boolean value) {
    if (!value) {
      this.offset = null;
    }
  }

  /**
   * 
   * @see EsHedgeType
   */
  public EsHedgeType getHedge() {
    return this.hedge;
  }

  /**
   * 
   * @see EsHedgeType
   */
  public EsInputOrderField setHedge(EsHedgeType hedge) {
    this.hedge = hedge;
    return this;
  }

  public void unsetHedge() {
    this.hedge = null;
  }

  /** Returns true if field hedge is set (has been assigned a value) and false otherwise */
  public boolean isSetHedge() {
    return this.hedge != null;
  }

  public void setHedgeIsSet(boolean value) {
    if (!value) {
      this.hedge = null;
    }
  }

  public double getOrderPrice() {
    return this.orderPrice;
  }

  public EsInputOrderField setOrderPrice(double orderPrice) {
    this.orderPrice = orderPrice;
    setOrderPriceIsSet(true);
    return this;
  }

  public void unsetOrderPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERPRICE_ISSET_ID);
  }

  /** Returns true if field orderPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERPRICE_ISSET_ID);
  }

  public void setOrderPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERPRICE_ISSET_ID, value);
  }

  public double getTriggerPrice() {
    return this.triggerPrice;
  }

  public EsInputOrderField setTriggerPrice(double triggerPrice) {
    this.triggerPrice = triggerPrice;
    setTriggerPriceIsSet(true);
    return this;
  }

  public void unsetTriggerPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRIGGERPRICE_ISSET_ID);
  }

  /** Returns true if field triggerPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggerPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TRIGGERPRICE_ISSET_ID);
  }

  public void setTriggerPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRIGGERPRICE_ISSET_ID, value);
  }

  public int getOrderVol() {
    return this.orderVol;
  }

  public EsInputOrderField setOrderVol(int orderVol) {
    this.orderVol = orderVol;
    setOrderVolIsSet(true);
    return this;
  }

  public void unsetOrderVol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERVOL_ISSET_ID);
  }

  /** Returns true if field orderVol is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderVol() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERVOL_ISSET_ID);
  }

  public void setOrderVolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERVOL_ISSET_ID, value);
  }

  public int getMinMatchVol() {
    return this.minMatchVol;
  }

  public EsInputOrderField setMinMatchVol(int minMatchVol) {
    this.minMatchVol = minMatchVol;
    setMinMatchVolIsSet(true);
    return this;
  }

  public void unsetMinMatchVol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINMATCHVOL_ISSET_ID);
  }

  /** Returns true if field minMatchVol is set (has been assigned a value) and false otherwise */
  public boolean isSetMinMatchVol() {
    return EncodingUtils.testBit(__isset_bitfield, __MINMATCHVOL_ISSET_ID);
  }

  public void setMinMatchVolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINMATCHVOL_ISSET_ID, value);
  }

  public boolean isRandomise() {
    return this.randomise;
  }

  public EsInputOrderField setRandomise(boolean randomise) {
    this.randomise = randomise;
    setRandomiseIsSet(true);
    return this;
  }

  public void unsetRandomise() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANDOMISE_ISSET_ID);
  }

  /** Returns true if field randomise is set (has been assigned a value) and false otherwise */
  public boolean isSetRandomise() {
    return EncodingUtils.testBit(__isset_bitfield, __RANDOMISE_ISSET_ID);
  }

  public void setRandomiseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANDOMISE_ISSET_ID, value);
  }

  public int getMinClipSize() {
    return this.minClipSize;
  }

  public EsInputOrderField setMinClipSize(int minClipSize) {
    this.minClipSize = minClipSize;
    setMinClipSizeIsSet(true);
    return this;
  }

  public void unsetMinClipSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINCLIPSIZE_ISSET_ID);
  }

  /** Returns true if field minClipSize is set (has been assigned a value) and false otherwise */
  public boolean isSetMinClipSize() {
    return EncodingUtils.testBit(__isset_bitfield, __MINCLIPSIZE_ISSET_ID);
  }

  public void setMinClipSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINCLIPSIZE_ISSET_ID, value);
  }

  public int getMaxClipSize() {
    return this.maxClipSize;
  }

  public EsInputOrderField setMaxClipSize(int maxClipSize) {
    this.maxClipSize = maxClipSize;
    setMaxClipSizeIsSet(true);
    return this;
  }

  public void unsetMaxClipSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXCLIPSIZE_ISSET_ID);
  }

  /** Returns true if field maxClipSize is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxClipSize() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXCLIPSIZE_ISSET_ID);
  }

  public void setMaxClipSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXCLIPSIZE_ISSET_ID, value);
  }

  public int getSaveInt() {
    return this.saveInt;
  }

  public EsInputOrderField setSaveInt(int saveInt) {
    this.saveInt = saveInt;
    setSaveIntIsSet(true);
    return this;
  }

  public void unsetSaveInt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SAVEINT_ISSET_ID);
  }

  /** Returns true if field saveInt is set (has been assigned a value) and false otherwise */
  public boolean isSetSaveInt() {
    return EncodingUtils.testBit(__isset_bitfield, __SAVEINT_ISSET_ID);
  }

  public void setSaveIntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SAVEINT_ISSET_ID, value);
  }

  public double getSaveDouble() {
    return this.saveDouble;
  }

  public EsInputOrderField setSaveDouble(double saveDouble) {
    this.saveDouble = saveDouble;
    setSaveDoubleIsSet(true);
    return this;
  }

  public void unsetSaveDouble() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SAVEDOUBLE_ISSET_ID);
  }

  /** Returns true if field saveDouble is set (has been assigned a value) and false otherwise */
  public boolean isSetSaveDouble() {
    return EncodingUtils.testBit(__isset_bitfield, __SAVEDOUBLE_ISSET_ID);
  }

  public void setSaveDoubleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SAVEDOUBLE_ISSET_ID, value);
  }

  public String getSaveString() {
    return this.saveString;
  }

  public EsInputOrderField setSaveString(String saveString) {
    this.saveString = saveString;
    return this;
  }

  public void unsetSaveString() {
    this.saveString = null;
  }

  /** Returns true if field saveString is set (has been assigned a value) and false otherwise */
  public boolean isSetSaveString() {
    return this.saveString != null;
  }

  public void setSaveStringIsSet(boolean value) {
    if (!value) {
      this.saveString = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_ID:
      if (value == null) {
        unsetSledId();
      } else {
        setSledId((String)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case COMMODITY_NO:
      if (value == null) {
        unsetCommodityNo();
      } else {
        setCommodityNo((String)value);
      }
      break;

    case CONTRACT_NO:
      if (value == null) {
        unsetContractNo();
      } else {
        setContractNo((String)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((EsOrderType)value);
      }
      break;

    case ORDER_WAY:
      if (value == null) {
        unsetOrderWay();
      } else {
        setOrderWay((EsOrderWayType)value);
      }
      break;

    case ORDER_MODE:
      if (value == null) {
        unsetOrderMode();
      } else {
        setOrderMode((EsOrderModeType)value);
      }
      break;

    case VALID_DATE_TIME:
      if (value == null) {
        unsetValidDateTime();
      } else {
        setValidDateTime((Long)value);
      }
      break;

    case IS_RISK_ORDER:
      if (value == null) {
        unsetIsRiskOrder();
      } else {
        setIsRiskOrder((Boolean)value);
      }
      break;

    case DIRECT:
      if (value == null) {
        unsetDirect();
      } else {
        setDirect((EsDirectType)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((EsOffsetType)value);
      }
      break;

    case HEDGE:
      if (value == null) {
        unsetHedge();
      } else {
        setHedge((EsHedgeType)value);
      }
      break;

    case ORDER_PRICE:
      if (value == null) {
        unsetOrderPrice();
      } else {
        setOrderPrice((Double)value);
      }
      break;

    case TRIGGER_PRICE:
      if (value == null) {
        unsetTriggerPrice();
      } else {
        setTriggerPrice((Double)value);
      }
      break;

    case ORDER_VOL:
      if (value == null) {
        unsetOrderVol();
      } else {
        setOrderVol((Integer)value);
      }
      break;

    case MIN_MATCH_VOL:
      if (value == null) {
        unsetMinMatchVol();
      } else {
        setMinMatchVol((Integer)value);
      }
      break;

    case RANDOMISE:
      if (value == null) {
        unsetRandomise();
      } else {
        setRandomise((Boolean)value);
      }
      break;

    case MIN_CLIP_SIZE:
      if (value == null) {
        unsetMinClipSize();
      } else {
        setMinClipSize((Integer)value);
      }
      break;

    case MAX_CLIP_SIZE:
      if (value == null) {
        unsetMaxClipSize();
      } else {
        setMaxClipSize((Integer)value);
      }
      break;

    case SAVE_INT:
      if (value == null) {
        unsetSaveInt();
      } else {
        setSaveInt((Integer)value);
      }
      break;

    case SAVE_DOUBLE:
      if (value == null) {
        unsetSaveDouble();
      } else {
        setSaveDouble((Double)value);
      }
      break;

    case SAVE_STRING:
      if (value == null) {
        unsetSaveString();
      } else {
        setSaveString((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_ID:
      return getSledId();

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case COMMODITY_NO:
      return getCommodityNo();

    case CONTRACT_NO:
      return getContractNo();

    case ORDER_TYPE:
      return getOrderType();

    case ORDER_WAY:
      return getOrderWay();

    case ORDER_MODE:
      return getOrderMode();

    case VALID_DATE_TIME:
      return Long.valueOf(getValidDateTime());

    case IS_RISK_ORDER:
      return Boolean.valueOf(isIsRiskOrder());

    case DIRECT:
      return getDirect();

    case OFFSET:
      return getOffset();

    case HEDGE:
      return getHedge();

    case ORDER_PRICE:
      return Double.valueOf(getOrderPrice());

    case TRIGGER_PRICE:
      return Double.valueOf(getTriggerPrice());

    case ORDER_VOL:
      return Integer.valueOf(getOrderVol());

    case MIN_MATCH_VOL:
      return Integer.valueOf(getMinMatchVol());

    case RANDOMISE:
      return Boolean.valueOf(isRandomise());

    case MIN_CLIP_SIZE:
      return Integer.valueOf(getMinClipSize());

    case MAX_CLIP_SIZE:
      return Integer.valueOf(getMaxClipSize());

    case SAVE_INT:
      return Integer.valueOf(getSaveInt());

    case SAVE_DOUBLE:
      return Double.valueOf(getSaveDouble());

    case SAVE_STRING:
      return getSaveString();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_ID:
      return isSetSledId();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    case USER_ID:
      return isSetUserId();
    case COMMODITY_NO:
      return isSetCommodityNo();
    case CONTRACT_NO:
      return isSetContractNo();
    case ORDER_TYPE:
      return isSetOrderType();
    case ORDER_WAY:
      return isSetOrderWay();
    case ORDER_MODE:
      return isSetOrderMode();
    case VALID_DATE_TIME:
      return isSetValidDateTime();
    case IS_RISK_ORDER:
      return isSetIsRiskOrder();
    case DIRECT:
      return isSetDirect();
    case OFFSET:
      return isSetOffset();
    case HEDGE:
      return isSetHedge();
    case ORDER_PRICE:
      return isSetOrderPrice();
    case TRIGGER_PRICE:
      return isSetTriggerPrice();
    case ORDER_VOL:
      return isSetOrderVol();
    case MIN_MATCH_VOL:
      return isSetMinMatchVol();
    case RANDOMISE:
      return isSetRandomise();
    case MIN_CLIP_SIZE:
      return isSetMinClipSize();
    case MAX_CLIP_SIZE:
      return isSetMaxClipSize();
    case SAVE_INT:
      return isSetSaveInt();
    case SAVE_DOUBLE:
      return isSetSaveDouble();
    case SAVE_STRING:
      return isSetSaveString();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EsInputOrderField)
      return this.equals((EsInputOrderField)that);
    return false;
  }

  public boolean equals(EsInputOrderField that) {
    if (that == null)
      return false;

    boolean this_present_sledId = true && this.isSetSledId();
    boolean that_present_sledId = true && that.isSetSledId();
    if (this_present_sledId || that_present_sledId) {
      if (!(this_present_sledId && that_present_sledId))
        return false;
      if (!this.sledId.equals(that.sledId))
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_commodityNo = true && this.isSetCommodityNo();
    boolean that_present_commodityNo = true && that.isSetCommodityNo();
    if (this_present_commodityNo || that_present_commodityNo) {
      if (!(this_present_commodityNo && that_present_commodityNo))
        return false;
      if (!this.commodityNo.equals(that.commodityNo))
        return false;
    }

    boolean this_present_contractNo = true && this.isSetContractNo();
    boolean that_present_contractNo = true && that.isSetContractNo();
    if (this_present_contractNo || that_present_contractNo) {
      if (!(this_present_contractNo && that_present_contractNo))
        return false;
      if (!this.contractNo.equals(that.contractNo))
        return false;
    }

    boolean this_present_orderType = true && this.isSetOrderType();
    boolean that_present_orderType = true && that.isSetOrderType();
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (!this.orderType.equals(that.orderType))
        return false;
    }

    boolean this_present_orderWay = true && this.isSetOrderWay();
    boolean that_present_orderWay = true && that.isSetOrderWay();
    if (this_present_orderWay || that_present_orderWay) {
      if (!(this_present_orderWay && that_present_orderWay))
        return false;
      if (!this.orderWay.equals(that.orderWay))
        return false;
    }

    boolean this_present_orderMode = true && this.isSetOrderMode();
    boolean that_present_orderMode = true && that.isSetOrderMode();
    if (this_present_orderMode || that_present_orderMode) {
      if (!(this_present_orderMode && that_present_orderMode))
        return false;
      if (!this.orderMode.equals(that.orderMode))
        return false;
    }

    boolean this_present_validDateTime = true && this.isSetValidDateTime();
    boolean that_present_validDateTime = true && that.isSetValidDateTime();
    if (this_present_validDateTime || that_present_validDateTime) {
      if (!(this_present_validDateTime && that_present_validDateTime))
        return false;
      if (this.validDateTime != that.validDateTime)
        return false;
    }

    boolean this_present_isRiskOrder = true && this.isSetIsRiskOrder();
    boolean that_present_isRiskOrder = true && that.isSetIsRiskOrder();
    if (this_present_isRiskOrder || that_present_isRiskOrder) {
      if (!(this_present_isRiskOrder && that_present_isRiskOrder))
        return false;
      if (this.isRiskOrder != that.isRiskOrder)
        return false;
    }

    boolean this_present_direct = true && this.isSetDirect();
    boolean that_present_direct = true && that.isSetDirect();
    if (this_present_direct || that_present_direct) {
      if (!(this_present_direct && that_present_direct))
        return false;
      if (!this.direct.equals(that.direct))
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (!this.offset.equals(that.offset))
        return false;
    }

    boolean this_present_hedge = true && this.isSetHedge();
    boolean that_present_hedge = true && that.isSetHedge();
    if (this_present_hedge || that_present_hedge) {
      if (!(this_present_hedge && that_present_hedge))
        return false;
      if (!this.hedge.equals(that.hedge))
        return false;
    }

    boolean this_present_orderPrice = true && this.isSetOrderPrice();
    boolean that_present_orderPrice = true && that.isSetOrderPrice();
    if (this_present_orderPrice || that_present_orderPrice) {
      if (!(this_present_orderPrice && that_present_orderPrice))
        return false;
      if (this.orderPrice != that.orderPrice)
        return false;
    }

    boolean this_present_triggerPrice = true && this.isSetTriggerPrice();
    boolean that_present_triggerPrice = true && that.isSetTriggerPrice();
    if (this_present_triggerPrice || that_present_triggerPrice) {
      if (!(this_present_triggerPrice && that_present_triggerPrice))
        return false;
      if (this.triggerPrice != that.triggerPrice)
        return false;
    }

    boolean this_present_orderVol = true && this.isSetOrderVol();
    boolean that_present_orderVol = true && that.isSetOrderVol();
    if (this_present_orderVol || that_present_orderVol) {
      if (!(this_present_orderVol && that_present_orderVol))
        return false;
      if (this.orderVol != that.orderVol)
        return false;
    }

    boolean this_present_minMatchVol = true && this.isSetMinMatchVol();
    boolean that_present_minMatchVol = true && that.isSetMinMatchVol();
    if (this_present_minMatchVol || that_present_minMatchVol) {
      if (!(this_present_minMatchVol && that_present_minMatchVol))
        return false;
      if (this.minMatchVol != that.minMatchVol)
        return false;
    }

    boolean this_present_randomise = true && this.isSetRandomise();
    boolean that_present_randomise = true && that.isSetRandomise();
    if (this_present_randomise || that_present_randomise) {
      if (!(this_present_randomise && that_present_randomise))
        return false;
      if (this.randomise != that.randomise)
        return false;
    }

    boolean this_present_minClipSize = true && this.isSetMinClipSize();
    boolean that_present_minClipSize = true && that.isSetMinClipSize();
    if (this_present_minClipSize || that_present_minClipSize) {
      if (!(this_present_minClipSize && that_present_minClipSize))
        return false;
      if (this.minClipSize != that.minClipSize)
        return false;
    }

    boolean this_present_maxClipSize = true && this.isSetMaxClipSize();
    boolean that_present_maxClipSize = true && that.isSetMaxClipSize();
    if (this_present_maxClipSize || that_present_maxClipSize) {
      if (!(this_present_maxClipSize && that_present_maxClipSize))
        return false;
      if (this.maxClipSize != that.maxClipSize)
        return false;
    }

    boolean this_present_saveInt = true && this.isSetSaveInt();
    boolean that_present_saveInt = true && that.isSetSaveInt();
    if (this_present_saveInt || that_present_saveInt) {
      if (!(this_present_saveInt && that_present_saveInt))
        return false;
      if (this.saveInt != that.saveInt)
        return false;
    }

    boolean this_present_saveDouble = true && this.isSetSaveDouble();
    boolean that_present_saveDouble = true && that.isSetSaveDouble();
    if (this_present_saveDouble || that_present_saveDouble) {
      if (!(this_present_saveDouble && that_present_saveDouble))
        return false;
      if (this.saveDouble != that.saveDouble)
        return false;
    }

    boolean this_present_saveString = true && this.isSetSaveString();
    boolean that_present_saveString = true && that.isSetSaveString();
    if (this_present_saveString || that_present_saveString) {
      if (!(this_present_saveString && that_present_saveString))
        return false;
      if (!this.saveString.equals(that.saveString))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EsInputOrderField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledId()).compareTo(other.isSetSledId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledId, other.sledId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityNo()).compareTo(other.isSetCommodityNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityNo, other.commodityNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractNo()).compareTo(other.isSetContractNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractNo, other.contractNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderWay()).compareTo(other.isSetOrderWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderWay, other.orderWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderMode()).compareTo(other.isSetOrderMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderMode, other.orderMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidDateTime()).compareTo(other.isSetValidDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validDateTime, other.validDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRiskOrder()).compareTo(other.isSetIsRiskOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRiskOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRiskOrder, other.isRiskOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirect()).compareTo(other.isSetDirect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direct, other.direct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHedge()).compareTo(other.isSetHedge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHedge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hedge, other.hedge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderPrice()).compareTo(other.isSetOrderPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderPrice, other.orderPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggerPrice()).compareTo(other.isSetTriggerPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggerPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerPrice, other.triggerPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderVol()).compareTo(other.isSetOrderVol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderVol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderVol, other.orderVol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinMatchVol()).compareTo(other.isSetMinMatchVol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinMatchVol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minMatchVol, other.minMatchVol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRandomise()).compareTo(other.isSetRandomise());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRandomise()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.randomise, other.randomise);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinClipSize()).compareTo(other.isSetMinClipSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinClipSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minClipSize, other.minClipSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxClipSize()).compareTo(other.isSetMaxClipSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxClipSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxClipSize, other.maxClipSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaveInt()).compareTo(other.isSetSaveInt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaveInt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saveInt, other.saveInt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaveDouble()).compareTo(other.isSetSaveDouble());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaveDouble()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saveDouble, other.saveDouble);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaveString()).compareTo(other.isSetSaveString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaveString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saveString, other.saveString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EsInputOrderField(");
    boolean first = true;

    sb.append("sledId:");
    if (this.sledId == null) {
      sb.append("null");
    } else {
      sb.append(this.sledId);
    }
    first = false;
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetCommodityNo()) {
      if (!first) sb.append(", ");
      sb.append("commodityNo:");
      if (this.commodityNo == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityNo);
      }
      first = false;
    }
    if (isSetContractNo()) {
      if (!first) sb.append(", ");
      sb.append("contractNo:");
      if (this.contractNo == null) {
        sb.append("null");
      } else {
        sb.append(this.contractNo);
      }
      first = false;
    }
    if (isSetOrderType()) {
      if (!first) sb.append(", ");
      sb.append("orderType:");
      if (this.orderType == null) {
        sb.append("null");
      } else {
        sb.append(this.orderType);
      }
      first = false;
    }
    if (isSetOrderWay()) {
      if (!first) sb.append(", ");
      sb.append("orderWay:");
      if (this.orderWay == null) {
        sb.append("null");
      } else {
        sb.append(this.orderWay);
      }
      first = false;
    }
    if (isSetOrderMode()) {
      if (!first) sb.append(", ");
      sb.append("orderMode:");
      if (this.orderMode == null) {
        sb.append("null");
      } else {
        sb.append(this.orderMode);
      }
      first = false;
    }
    if (isSetValidDateTime()) {
      if (!first) sb.append(", ");
      sb.append("validDateTime:");
      sb.append(this.validDateTime);
      first = false;
    }
    if (isSetIsRiskOrder()) {
      if (!first) sb.append(", ");
      sb.append("isRiskOrder:");
      sb.append(this.isRiskOrder);
      first = false;
    }
    if (isSetDirect()) {
      if (!first) sb.append(", ");
      sb.append("direct:");
      if (this.direct == null) {
        sb.append("null");
      } else {
        sb.append(this.direct);
      }
      first = false;
    }
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      if (this.offset == null) {
        sb.append("null");
      } else {
        sb.append(this.offset);
      }
      first = false;
    }
    if (isSetHedge()) {
      if (!first) sb.append(", ");
      sb.append("hedge:");
      if (this.hedge == null) {
        sb.append("null");
      } else {
        sb.append(this.hedge);
      }
      first = false;
    }
    if (isSetOrderPrice()) {
      if (!first) sb.append(", ");
      sb.append("orderPrice:");
      sb.append(this.orderPrice);
      first = false;
    }
    if (isSetTriggerPrice()) {
      if (!first) sb.append(", ");
      sb.append("triggerPrice:");
      sb.append(this.triggerPrice);
      first = false;
    }
    if (isSetOrderVol()) {
      if (!first) sb.append(", ");
      sb.append("orderVol:");
      sb.append(this.orderVol);
      first = false;
    }
    if (isSetMinMatchVol()) {
      if (!first) sb.append(", ");
      sb.append("minMatchVol:");
      sb.append(this.minMatchVol);
      first = false;
    }
    if (isSetRandomise()) {
      if (!first) sb.append(", ");
      sb.append("randomise:");
      sb.append(this.randomise);
      first = false;
    }
    if (isSetMinClipSize()) {
      if (!first) sb.append(", ");
      sb.append("minClipSize:");
      sb.append(this.minClipSize);
      first = false;
    }
    if (isSetMaxClipSize()) {
      if (!first) sb.append(", ");
      sb.append("maxClipSize:");
      sb.append(this.maxClipSize);
      first = false;
    }
    if (isSetSaveInt()) {
      if (!first) sb.append(", ");
      sb.append("saveInt:");
      sb.append(this.saveInt);
      first = false;
    }
    if (isSetSaveDouble()) {
      if (!first) sb.append(", ");
      sb.append("saveDouble:");
      sb.append(this.saveDouble);
      first = false;
    }
    if (isSetSaveString()) {
      if (!first) sb.append(", ");
      sb.append("saveString:");
      if (this.saveString == null) {
        sb.append("null");
      } else {
        sb.append(this.saveString);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sledId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sledId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EsInputOrderFieldStandardSchemeFactory implements SchemeFactory {
    public EsInputOrderFieldStandardScheme getScheme() {
      return new EsInputOrderFieldStandardScheme();
    }
  }

  private static class EsInputOrderFieldStandardScheme extends StandardScheme<EsInputOrderField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EsInputOrderField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledId = iprot.readString();
              struct.setSledIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMODITY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityNo = iprot.readString();
              struct.setCommodityNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTRACT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractNo = iprot.readString();
              struct.setContractNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderType = EsOrderType.findByValue(iprot.readI32());
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderWay = EsOrderWayType.findByValue(iprot.readI32());
              struct.setOrderWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORDER_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderMode = EsOrderModeType.findByValue(iprot.readI32());
              struct.setOrderModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VALID_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.validDateTime = iprot.readI64();
              struct.setValidDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_RISK_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRiskOrder = iprot.readBool();
              struct.setIsRiskOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DIRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.direct = EsDirectType.findByValue(iprot.readI32());
              struct.setDirectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = EsOffsetType.findByValue(iprot.readI32());
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HEDGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hedge = EsHedgeType.findByValue(iprot.readI32());
              struct.setHedgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ORDER_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.orderPrice = iprot.readDouble();
              struct.setOrderPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TRIGGER_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.triggerPrice = iprot.readDouble();
              struct.setTriggerPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ORDER_VOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderVol = iprot.readI32();
              struct.setOrderVolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MIN_MATCH_VOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minMatchVol = iprot.readI32();
              struct.setMinMatchVolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // RANDOMISE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.randomise = iprot.readBool();
              struct.setRandomiseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MIN_CLIP_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minClipSize = iprot.readI32();
              struct.setMinClipSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MAX_CLIP_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxClipSize = iprot.readI32();
              struct.setMaxClipSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SAVE_INT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.saveInt = iprot.readI32();
              struct.setSaveIntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SAVE_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.saveDouble = iprot.readDouble();
              struct.setSaveDoubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SAVE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.saveString = iprot.readString();
              struct.setSaveStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EsInputOrderField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledId != null) {
        oprot.writeFieldBegin(SLED_ID_FIELD_DESC);
        oprot.writeString(struct.sledId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.commodityNo != null) {
        if (struct.isSetCommodityNo()) {
          oprot.writeFieldBegin(COMMODITY_NO_FIELD_DESC);
          oprot.writeString(struct.commodityNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractNo != null) {
        if (struct.isSetContractNo()) {
          oprot.writeFieldBegin(CONTRACT_NO_FIELD_DESC);
          oprot.writeString(struct.contractNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderType != null) {
        if (struct.isSetOrderType()) {
          oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.orderType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderWay != null) {
        if (struct.isSetOrderWay()) {
          oprot.writeFieldBegin(ORDER_WAY_FIELD_DESC);
          oprot.writeI32(struct.orderWay.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderMode != null) {
        if (struct.isSetOrderMode()) {
          oprot.writeFieldBegin(ORDER_MODE_FIELD_DESC);
          oprot.writeI32(struct.orderMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetValidDateTime()) {
        oprot.writeFieldBegin(VALID_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.validDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsRiskOrder()) {
        oprot.writeFieldBegin(IS_RISK_ORDER_FIELD_DESC);
        oprot.writeBool(struct.isRiskOrder);
        oprot.writeFieldEnd();
      }
      if (struct.direct != null) {
        if (struct.isSetDirect()) {
          oprot.writeFieldBegin(DIRECT_FIELD_DESC);
          oprot.writeI32(struct.direct.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.offset != null) {
        if (struct.isSetOffset()) {
          oprot.writeFieldBegin(OFFSET_FIELD_DESC);
          oprot.writeI32(struct.offset.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.hedge != null) {
        if (struct.isSetHedge()) {
          oprot.writeFieldBegin(HEDGE_FIELD_DESC);
          oprot.writeI32(struct.hedge.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderPrice()) {
        oprot.writeFieldBegin(ORDER_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.orderPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTriggerPrice()) {
        oprot.writeFieldBegin(TRIGGER_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.triggerPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderVol()) {
        oprot.writeFieldBegin(ORDER_VOL_FIELD_DESC);
        oprot.writeI32(struct.orderVol);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinMatchVol()) {
        oprot.writeFieldBegin(MIN_MATCH_VOL_FIELD_DESC);
        oprot.writeI32(struct.minMatchVol);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRandomise()) {
        oprot.writeFieldBegin(RANDOMISE_FIELD_DESC);
        oprot.writeBool(struct.randomise);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinClipSize()) {
        oprot.writeFieldBegin(MIN_CLIP_SIZE_FIELD_DESC);
        oprot.writeI32(struct.minClipSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxClipSize()) {
        oprot.writeFieldBegin(MAX_CLIP_SIZE_FIELD_DESC);
        oprot.writeI32(struct.maxClipSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSaveInt()) {
        oprot.writeFieldBegin(SAVE_INT_FIELD_DESC);
        oprot.writeI32(struct.saveInt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSaveDouble()) {
        oprot.writeFieldBegin(SAVE_DOUBLE_FIELD_DESC);
        oprot.writeDouble(struct.saveDouble);
        oprot.writeFieldEnd();
      }
      if (struct.saveString != null) {
        if (struct.isSetSaveString()) {
          oprot.writeFieldBegin(SAVE_STRING_FIELD_DESC);
          oprot.writeString(struct.saveString);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EsInputOrderFieldTupleSchemeFactory implements SchemeFactory {
    public EsInputOrderFieldTupleScheme getScheme() {
      return new EsInputOrderFieldTupleScheme();
    }
  }

  private static class EsInputOrderFieldTupleScheme extends TupleScheme<EsInputOrderField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EsInputOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sledId);
      BitSet optionals = new BitSet();
      if (struct.isSetSledAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetCommodityNo()) {
        optionals.set(2);
      }
      if (struct.isSetContractNo()) {
        optionals.set(3);
      }
      if (struct.isSetOrderType()) {
        optionals.set(4);
      }
      if (struct.isSetOrderWay()) {
        optionals.set(5);
      }
      if (struct.isSetOrderMode()) {
        optionals.set(6);
      }
      if (struct.isSetValidDateTime()) {
        optionals.set(7);
      }
      if (struct.isSetIsRiskOrder()) {
        optionals.set(8);
      }
      if (struct.isSetDirect()) {
        optionals.set(9);
      }
      if (struct.isSetOffset()) {
        optionals.set(10);
      }
      if (struct.isSetHedge()) {
        optionals.set(11);
      }
      if (struct.isSetOrderPrice()) {
        optionals.set(12);
      }
      if (struct.isSetTriggerPrice()) {
        optionals.set(13);
      }
      if (struct.isSetOrderVol()) {
        optionals.set(14);
      }
      if (struct.isSetMinMatchVol()) {
        optionals.set(15);
      }
      if (struct.isSetRandomise()) {
        optionals.set(16);
      }
      if (struct.isSetMinClipSize()) {
        optionals.set(17);
      }
      if (struct.isSetMaxClipSize()) {
        optionals.set(18);
      }
      if (struct.isSetSaveInt()) {
        optionals.set(19);
      }
      if (struct.isSetSaveDouble()) {
        optionals.set(20);
      }
      if (struct.isSetSaveString()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetCommodityNo()) {
        oprot.writeString(struct.commodityNo);
      }
      if (struct.isSetContractNo()) {
        oprot.writeString(struct.contractNo);
      }
      if (struct.isSetOrderType()) {
        oprot.writeI32(struct.orderType.getValue());
      }
      if (struct.isSetOrderWay()) {
        oprot.writeI32(struct.orderWay.getValue());
      }
      if (struct.isSetOrderMode()) {
        oprot.writeI32(struct.orderMode.getValue());
      }
      if (struct.isSetValidDateTime()) {
        oprot.writeI64(struct.validDateTime);
      }
      if (struct.isSetIsRiskOrder()) {
        oprot.writeBool(struct.isRiskOrder);
      }
      if (struct.isSetDirect()) {
        oprot.writeI32(struct.direct.getValue());
      }
      if (struct.isSetOffset()) {
        oprot.writeI32(struct.offset.getValue());
      }
      if (struct.isSetHedge()) {
        oprot.writeI32(struct.hedge.getValue());
      }
      if (struct.isSetOrderPrice()) {
        oprot.writeDouble(struct.orderPrice);
      }
      if (struct.isSetTriggerPrice()) {
        oprot.writeDouble(struct.triggerPrice);
      }
      if (struct.isSetOrderVol()) {
        oprot.writeI32(struct.orderVol);
      }
      if (struct.isSetMinMatchVol()) {
        oprot.writeI32(struct.minMatchVol);
      }
      if (struct.isSetRandomise()) {
        oprot.writeBool(struct.randomise);
      }
      if (struct.isSetMinClipSize()) {
        oprot.writeI32(struct.minClipSize);
      }
      if (struct.isSetMaxClipSize()) {
        oprot.writeI32(struct.maxClipSize);
      }
      if (struct.isSetSaveInt()) {
        oprot.writeI32(struct.saveInt);
      }
      if (struct.isSetSaveDouble()) {
        oprot.writeDouble(struct.saveDouble);
      }
      if (struct.isSetSaveString()) {
        oprot.writeString(struct.saveString);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EsInputOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sledId = iprot.readString();
      struct.setSledIdIsSet(true);
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commodityNo = iprot.readString();
        struct.setCommodityNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.contractNo = iprot.readString();
        struct.setContractNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orderType = EsOrderType.findByValue(iprot.readI32());
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orderWay = EsOrderWayType.findByValue(iprot.readI32());
        struct.setOrderWayIsSet(true);
      }
      if (incoming.get(6)) {
        struct.orderMode = EsOrderModeType.findByValue(iprot.readI32());
        struct.setOrderModeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.validDateTime = iprot.readI64();
        struct.setValidDateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isRiskOrder = iprot.readBool();
        struct.setIsRiskOrderIsSet(true);
      }
      if (incoming.get(9)) {
        struct.direct = EsDirectType.findByValue(iprot.readI32());
        struct.setDirectIsSet(true);
      }
      if (incoming.get(10)) {
        struct.offset = EsOffsetType.findByValue(iprot.readI32());
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(11)) {
        struct.hedge = EsHedgeType.findByValue(iprot.readI32());
        struct.setHedgeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.orderPrice = iprot.readDouble();
        struct.setOrderPriceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.triggerPrice = iprot.readDouble();
        struct.setTriggerPriceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.orderVol = iprot.readI32();
        struct.setOrderVolIsSet(true);
      }
      if (incoming.get(15)) {
        struct.minMatchVol = iprot.readI32();
        struct.setMinMatchVolIsSet(true);
      }
      if (incoming.get(16)) {
        struct.randomise = iprot.readBool();
        struct.setRandomiseIsSet(true);
      }
      if (incoming.get(17)) {
        struct.minClipSize = iprot.readI32();
        struct.setMinClipSizeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.maxClipSize = iprot.readI32();
        struct.setMaxClipSizeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.saveInt = iprot.readI32();
        struct.setSaveIntIsSet(true);
      }
      if (incoming.get(20)) {
        struct.saveDouble = iprot.readDouble();
        struct.setSaveDoubleIsSet(true);
      }
      if (incoming.get(21)) {
        struct.saveString = iprot.readString();
        struct.setSaveStringIsSet(true);
      }
    }
  }

}

