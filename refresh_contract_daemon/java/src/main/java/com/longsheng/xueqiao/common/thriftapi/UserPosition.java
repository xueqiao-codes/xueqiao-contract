/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.common.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserPosition implements org.apache.thrift.TBase<UserPosition, UserPosition._Fields>, java.io.Serializable, Cloneable, Comparable<UserPosition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserPosition");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("contract", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField YD_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("ydPosition", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TODAY_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("todayPosition", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TODAY_BUY_FIELD_DESC = new org.apache.thrift.protocol.TField("todayBuy", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TODAY_SELL_FIELD_DESC = new org.apache.thrift.protocol.TField("todaySell", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPosition", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField POSITION_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("positionProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("commission", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField FROZEN_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenCommission", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("margin", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField FROZEN_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField POSITION_AVERAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionAverage", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField POSITION_TOTAL_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("positionTotalCost", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I32, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserPositionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserPositionTupleSchemeFactory());
  }

  public int userId; // required
  public Contract contract; // optional
  public int ydPosition; // required
  public int todayPosition; // required
  public int todayBuy; // required
  public int todaySell; // required
  public int totalPosition; // required
  public double closeProfit; // required
  public double positionProfit; // required
  public double commission; // required
  public double frozenCommission; // required
  public double margin; // required
  public double frozenMargin; // required
  public double positionAverage; // required
  public double positionTotalCost; // required
  public int sledContractId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    CONTRACT((short)2, "contract"),
    YD_POSITION((short)3, "ydPosition"),
    TODAY_POSITION((short)4, "todayPosition"),
    TODAY_BUY((short)5, "todayBuy"),
    TODAY_SELL((short)6, "todaySell"),
    TOTAL_POSITION((short)7, "totalPosition"),
    CLOSE_PROFIT((short)8, "closeProfit"),
    POSITION_PROFIT((short)9, "positionProfit"),
    COMMISSION((short)10, "commission"),
    FROZEN_COMMISSION((short)11, "frozenCommission"),
    MARGIN((short)12, "margin"),
    FROZEN_MARGIN((short)13, "frozenMargin"),
    POSITION_AVERAGE((short)14, "positionAverage"),
    POSITION_TOTAL_COST((short)15, "positionTotalCost"),
    SLED_CONTRACT_ID((short)16, "sledContractId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // CONTRACT
          return CONTRACT;
        case 3: // YD_POSITION
          return YD_POSITION;
        case 4: // TODAY_POSITION
          return TODAY_POSITION;
        case 5: // TODAY_BUY
          return TODAY_BUY;
        case 6: // TODAY_SELL
          return TODAY_SELL;
        case 7: // TOTAL_POSITION
          return TOTAL_POSITION;
        case 8: // CLOSE_PROFIT
          return CLOSE_PROFIT;
        case 9: // POSITION_PROFIT
          return POSITION_PROFIT;
        case 10: // COMMISSION
          return COMMISSION;
        case 11: // FROZEN_COMMISSION
          return FROZEN_COMMISSION;
        case 12: // MARGIN
          return MARGIN;
        case 13: // FROZEN_MARGIN
          return FROZEN_MARGIN;
        case 14: // POSITION_AVERAGE
          return POSITION_AVERAGE;
        case 15: // POSITION_TOTAL_COST
          return POSITION_TOTAL_COST;
        case 16: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __YDPOSITION_ISSET_ID = 1;
  private static final int __TODAYPOSITION_ISSET_ID = 2;
  private static final int __TODAYBUY_ISSET_ID = 3;
  private static final int __TODAYSELL_ISSET_ID = 4;
  private static final int __TOTALPOSITION_ISSET_ID = 5;
  private static final int __CLOSEPROFIT_ISSET_ID = 6;
  private static final int __POSITIONPROFIT_ISSET_ID = 7;
  private static final int __COMMISSION_ISSET_ID = 8;
  private static final int __FROZENCOMMISSION_ISSET_ID = 9;
  private static final int __MARGIN_ISSET_ID = 10;
  private static final int __FROZENMARGIN_ISSET_ID = 11;
  private static final int __POSITIONAVERAGE_ISSET_ID = 12;
  private static final int __POSITIONTOTALCOST_ISSET_ID = 13;
  private static final int __SLEDCONTRACTID_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONTRACT,_Fields.SLED_CONTRACT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTRACT, new org.apache.thrift.meta_data.FieldMetaData("contract", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Contract.class)));
    tmpMap.put(_Fields.YD_POSITION, new org.apache.thrift.meta_data.FieldMetaData("ydPosition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TODAY_POSITION, new org.apache.thrift.meta_data.FieldMetaData("todayPosition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TODAY_BUY, new org.apache.thrift.meta_data.FieldMetaData("todayBuy", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TODAY_SELL, new org.apache.thrift.meta_data.FieldMetaData("todaySell", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_POSITION, new org.apache.thrift.meta_data.FieldMetaData("totalPosition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("closeProfit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("positionProfit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("commission", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("frozenCommission", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MARGIN, new org.apache.thrift.meta_data.FieldMetaData("margin", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("frozenMargin", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_AVERAGE, new org.apache.thrift.meta_data.FieldMetaData("positionAverage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_TOTAL_COST, new org.apache.thrift.meta_data.FieldMetaData("positionTotalCost", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserPosition.class, metaDataMap);
  }

  public UserPosition() {
  }

  public UserPosition(
    int userId,
    int ydPosition,
    int todayPosition,
    int todayBuy,
    int todaySell,
    int totalPosition,
    double closeProfit,
    double positionProfit,
    double commission,
    double frozenCommission,
    double margin,
    double frozenMargin,
    double positionAverage,
    double positionTotalCost)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.ydPosition = ydPosition;
    setYdPositionIsSet(true);
    this.todayPosition = todayPosition;
    setTodayPositionIsSet(true);
    this.todayBuy = todayBuy;
    setTodayBuyIsSet(true);
    this.todaySell = todaySell;
    setTodaySellIsSet(true);
    this.totalPosition = totalPosition;
    setTotalPositionIsSet(true);
    this.closeProfit = closeProfit;
    setCloseProfitIsSet(true);
    this.positionProfit = positionProfit;
    setPositionProfitIsSet(true);
    this.commission = commission;
    setCommissionIsSet(true);
    this.frozenCommission = frozenCommission;
    setFrozenCommissionIsSet(true);
    this.margin = margin;
    setMarginIsSet(true);
    this.frozenMargin = frozenMargin;
    setFrozenMarginIsSet(true);
    this.positionAverage = positionAverage;
    setPositionAverageIsSet(true);
    this.positionTotalCost = positionTotalCost;
    setPositionTotalCostIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserPosition(UserPosition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    if (other.isSetContract()) {
      this.contract = new Contract(other.contract);
    }
    this.ydPosition = other.ydPosition;
    this.todayPosition = other.todayPosition;
    this.todayBuy = other.todayBuy;
    this.todaySell = other.todaySell;
    this.totalPosition = other.totalPosition;
    this.closeProfit = other.closeProfit;
    this.positionProfit = other.positionProfit;
    this.commission = other.commission;
    this.frozenCommission = other.frozenCommission;
    this.margin = other.margin;
    this.frozenMargin = other.frozenMargin;
    this.positionAverage = other.positionAverage;
    this.positionTotalCost = other.positionTotalCost;
    this.sledContractId = other.sledContractId;
  }

  public UserPosition deepCopy() {
    return new UserPosition(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.contract = null;
    setYdPositionIsSet(false);
    this.ydPosition = 0;
    setTodayPositionIsSet(false);
    this.todayPosition = 0;
    setTodayBuyIsSet(false);
    this.todayBuy = 0;
    setTodaySellIsSet(false);
    this.todaySell = 0;
    setTotalPositionIsSet(false);
    this.totalPosition = 0;
    setCloseProfitIsSet(false);
    this.closeProfit = 0.0;
    setPositionProfitIsSet(false);
    this.positionProfit = 0.0;
    setCommissionIsSet(false);
    this.commission = 0.0;
    setFrozenCommissionIsSet(false);
    this.frozenCommission = 0.0;
    setMarginIsSet(false);
    this.margin = 0.0;
    setFrozenMarginIsSet(false);
    this.frozenMargin = 0.0;
    setPositionAverageIsSet(false);
    this.positionAverage = 0.0;
    setPositionTotalCostIsSet(false);
    this.positionTotalCost = 0.0;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
  }

  public int getUserId() {
    return this.userId;
  }

  public UserPosition setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public Contract getContract() {
    return this.contract;
  }

  public UserPosition setContract(Contract contract) {
    this.contract = contract;
    return this;
  }

  public void unsetContract() {
    this.contract = null;
  }

  /** Returns true if field contract is set (has been assigned a value) and false otherwise */
  public boolean isSetContract() {
    return this.contract != null;
  }

  public void setContractIsSet(boolean value) {
    if (!value) {
      this.contract = null;
    }
  }

  public int getYdPosition() {
    return this.ydPosition;
  }

  public UserPosition setYdPosition(int ydPosition) {
    this.ydPosition = ydPosition;
    setYdPositionIsSet(true);
    return this;
  }

  public void unsetYdPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YDPOSITION_ISSET_ID);
  }

  /** Returns true if field ydPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetYdPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __YDPOSITION_ISSET_ID);
  }

  public void setYdPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YDPOSITION_ISSET_ID, value);
  }

  public int getTodayPosition() {
    return this.todayPosition;
  }

  public UserPosition setTodayPosition(int todayPosition) {
    this.todayPosition = todayPosition;
    setTodayPositionIsSet(true);
    return this;
  }

  public void unsetTodayPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TODAYPOSITION_ISSET_ID);
  }

  /** Returns true if field todayPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetTodayPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __TODAYPOSITION_ISSET_ID);
  }

  public void setTodayPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TODAYPOSITION_ISSET_ID, value);
  }

  public int getTodayBuy() {
    return this.todayBuy;
  }

  public UserPosition setTodayBuy(int todayBuy) {
    this.todayBuy = todayBuy;
    setTodayBuyIsSet(true);
    return this;
  }

  public void unsetTodayBuy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TODAYBUY_ISSET_ID);
  }

  /** Returns true if field todayBuy is set (has been assigned a value) and false otherwise */
  public boolean isSetTodayBuy() {
    return EncodingUtils.testBit(__isset_bitfield, __TODAYBUY_ISSET_ID);
  }

  public void setTodayBuyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TODAYBUY_ISSET_ID, value);
  }

  public int getTodaySell() {
    return this.todaySell;
  }

  public UserPosition setTodaySell(int todaySell) {
    this.todaySell = todaySell;
    setTodaySellIsSet(true);
    return this;
  }

  public void unsetTodaySell() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TODAYSELL_ISSET_ID);
  }

  /** Returns true if field todaySell is set (has been assigned a value) and false otherwise */
  public boolean isSetTodaySell() {
    return EncodingUtils.testBit(__isset_bitfield, __TODAYSELL_ISSET_ID);
  }

  public void setTodaySellIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TODAYSELL_ISSET_ID, value);
  }

  public int getTotalPosition() {
    return this.totalPosition;
  }

  public UserPosition setTotalPosition(int totalPosition) {
    this.totalPosition = totalPosition;
    setTotalPositionIsSet(true);
    return this;
  }

  public void unsetTotalPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPOSITION_ISSET_ID);
  }

  /** Returns true if field totalPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPOSITION_ISSET_ID);
  }

  public void setTotalPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPOSITION_ISSET_ID, value);
  }

  public double getCloseProfit() {
    return this.closeProfit;
  }

  public UserPosition setCloseProfit(double closeProfit) {
    this.closeProfit = closeProfit;
    setCloseProfitIsSet(true);
    return this;
  }

  public void unsetCloseProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  /** Returns true if field closeProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  public void setCloseProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID, value);
  }

  public double getPositionProfit() {
    return this.positionProfit;
  }

  public UserPosition setPositionProfit(double positionProfit) {
    this.positionProfit = positionProfit;
    setPositionProfitIsSet(true);
    return this;
  }

  public void unsetPositionProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  /** Returns true if field positionProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  public void setPositionProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID, value);
  }

  public double getCommission() {
    return this.commission;
  }

  public UserPosition setCommission(double commission) {
    this.commission = commission;
    setCommissionIsSet(true);
    return this;
  }

  public void unsetCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  /** Returns true if field commission is set (has been assigned a value) and false otherwise */
  public boolean isSetCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  public void setCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMISSION_ISSET_ID, value);
  }

  public double getFrozenCommission() {
    return this.frozenCommission;
  }

  public UserPosition setFrozenCommission(double frozenCommission) {
    this.frozenCommission = frozenCommission;
    setFrozenCommissionIsSet(true);
    return this;
  }

  public void unsetFrozenCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID);
  }

  /** Returns true if field frozenCommission is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID);
  }

  public void setFrozenCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID, value);
  }

  public double getMargin() {
    return this.margin;
  }

  public UserPosition setMargin(double margin) {
    this.margin = margin;
    setMarginIsSet(true);
    return this;
  }

  public void unsetMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARGIN_ISSET_ID);
  }

  /** Returns true if field margin is set (has been assigned a value) and false otherwise */
  public boolean isSetMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __MARGIN_ISSET_ID);
  }

  public void setMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARGIN_ISSET_ID, value);
  }

  public double getFrozenMargin() {
    return this.frozenMargin;
  }

  public UserPosition setFrozenMargin(double frozenMargin) {
    this.frozenMargin = frozenMargin;
    setFrozenMarginIsSet(true);
    return this;
  }

  public void unsetFrozenMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  /** Returns true if field frozenMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  public void setFrozenMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID, value);
  }

  public double getPositionAverage() {
    return this.positionAverage;
  }

  public UserPosition setPositionAverage(double positionAverage) {
    this.positionAverage = positionAverage;
    setPositionAverageIsSet(true);
    return this;
  }

  public void unsetPositionAverage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONAVERAGE_ISSET_ID);
  }

  /** Returns true if field positionAverage is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionAverage() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONAVERAGE_ISSET_ID);
  }

  public void setPositionAverageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONAVERAGE_ISSET_ID, value);
  }

  public double getPositionTotalCost() {
    return this.positionTotalCost;
  }

  public UserPosition setPositionTotalCost(double positionTotalCost) {
    this.positionTotalCost = positionTotalCost;
    setPositionTotalCostIsSet(true);
    return this;
  }

  public void unsetPositionTotalCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONTOTALCOST_ISSET_ID);
  }

  /** Returns true if field positionTotalCost is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionTotalCost() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONTOTALCOST_ISSET_ID);
  }

  public void setPositionTotalCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONTOTALCOST_ISSET_ID, value);
  }

  public int getSledContractId() {
    return this.sledContractId;
  }

  public UserPosition setSledContractId(int sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case CONTRACT:
      if (value == null) {
        unsetContract();
      } else {
        setContract((Contract)value);
      }
      break;

    case YD_POSITION:
      if (value == null) {
        unsetYdPosition();
      } else {
        setYdPosition((Integer)value);
      }
      break;

    case TODAY_POSITION:
      if (value == null) {
        unsetTodayPosition();
      } else {
        setTodayPosition((Integer)value);
      }
      break;

    case TODAY_BUY:
      if (value == null) {
        unsetTodayBuy();
      } else {
        setTodayBuy((Integer)value);
      }
      break;

    case TODAY_SELL:
      if (value == null) {
        unsetTodaySell();
      } else {
        setTodaySell((Integer)value);
      }
      break;

    case TOTAL_POSITION:
      if (value == null) {
        unsetTotalPosition();
      } else {
        setTotalPosition((Integer)value);
      }
      break;

    case CLOSE_PROFIT:
      if (value == null) {
        unsetCloseProfit();
      } else {
        setCloseProfit((Double)value);
      }
      break;

    case POSITION_PROFIT:
      if (value == null) {
        unsetPositionProfit();
      } else {
        setPositionProfit((Double)value);
      }
      break;

    case COMMISSION:
      if (value == null) {
        unsetCommission();
      } else {
        setCommission((Double)value);
      }
      break;

    case FROZEN_COMMISSION:
      if (value == null) {
        unsetFrozenCommission();
      } else {
        setFrozenCommission((Double)value);
      }
      break;

    case MARGIN:
      if (value == null) {
        unsetMargin();
      } else {
        setMargin((Double)value);
      }
      break;

    case FROZEN_MARGIN:
      if (value == null) {
        unsetFrozenMargin();
      } else {
        setFrozenMargin((Double)value);
      }
      break;

    case POSITION_AVERAGE:
      if (value == null) {
        unsetPositionAverage();
      } else {
        setPositionAverage((Double)value);
      }
      break;

    case POSITION_TOTAL_COST:
      if (value == null) {
        unsetPositionTotalCost();
      } else {
        setPositionTotalCost((Double)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Integer.valueOf(getUserId());

    case CONTRACT:
      return getContract();

    case YD_POSITION:
      return Integer.valueOf(getYdPosition());

    case TODAY_POSITION:
      return Integer.valueOf(getTodayPosition());

    case TODAY_BUY:
      return Integer.valueOf(getTodayBuy());

    case TODAY_SELL:
      return Integer.valueOf(getTodaySell());

    case TOTAL_POSITION:
      return Integer.valueOf(getTotalPosition());

    case CLOSE_PROFIT:
      return Double.valueOf(getCloseProfit());

    case POSITION_PROFIT:
      return Double.valueOf(getPositionProfit());

    case COMMISSION:
      return Double.valueOf(getCommission());

    case FROZEN_COMMISSION:
      return Double.valueOf(getFrozenCommission());

    case MARGIN:
      return Double.valueOf(getMargin());

    case FROZEN_MARGIN:
      return Double.valueOf(getFrozenMargin());

    case POSITION_AVERAGE:
      return Double.valueOf(getPositionAverage());

    case POSITION_TOTAL_COST:
      return Double.valueOf(getPositionTotalCost());

    case SLED_CONTRACT_ID:
      return Integer.valueOf(getSledContractId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case CONTRACT:
      return isSetContract();
    case YD_POSITION:
      return isSetYdPosition();
    case TODAY_POSITION:
      return isSetTodayPosition();
    case TODAY_BUY:
      return isSetTodayBuy();
    case TODAY_SELL:
      return isSetTodaySell();
    case TOTAL_POSITION:
      return isSetTotalPosition();
    case CLOSE_PROFIT:
      return isSetCloseProfit();
    case POSITION_PROFIT:
      return isSetPositionProfit();
    case COMMISSION:
      return isSetCommission();
    case FROZEN_COMMISSION:
      return isSetFrozenCommission();
    case MARGIN:
      return isSetMargin();
    case FROZEN_MARGIN:
      return isSetFrozenMargin();
    case POSITION_AVERAGE:
      return isSetPositionAverage();
    case POSITION_TOTAL_COST:
      return isSetPositionTotalCost();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserPosition)
      return this.equals((UserPosition)that);
    return false;
  }

  public boolean equals(UserPosition that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_contract = true && this.isSetContract();
    boolean that_present_contract = true && that.isSetContract();
    if (this_present_contract || that_present_contract) {
      if (!(this_present_contract && that_present_contract))
        return false;
      if (!this.contract.equals(that.contract))
        return false;
    }

    boolean this_present_ydPosition = true;
    boolean that_present_ydPosition = true;
    if (this_present_ydPosition || that_present_ydPosition) {
      if (!(this_present_ydPosition && that_present_ydPosition))
        return false;
      if (this.ydPosition != that.ydPosition)
        return false;
    }

    boolean this_present_todayPosition = true;
    boolean that_present_todayPosition = true;
    if (this_present_todayPosition || that_present_todayPosition) {
      if (!(this_present_todayPosition && that_present_todayPosition))
        return false;
      if (this.todayPosition != that.todayPosition)
        return false;
    }

    boolean this_present_todayBuy = true;
    boolean that_present_todayBuy = true;
    if (this_present_todayBuy || that_present_todayBuy) {
      if (!(this_present_todayBuy && that_present_todayBuy))
        return false;
      if (this.todayBuy != that.todayBuy)
        return false;
    }

    boolean this_present_todaySell = true;
    boolean that_present_todaySell = true;
    if (this_present_todaySell || that_present_todaySell) {
      if (!(this_present_todaySell && that_present_todaySell))
        return false;
      if (this.todaySell != that.todaySell)
        return false;
    }

    boolean this_present_totalPosition = true;
    boolean that_present_totalPosition = true;
    if (this_present_totalPosition || that_present_totalPosition) {
      if (!(this_present_totalPosition && that_present_totalPosition))
        return false;
      if (this.totalPosition != that.totalPosition)
        return false;
    }

    boolean this_present_closeProfit = true;
    boolean that_present_closeProfit = true;
    if (this_present_closeProfit || that_present_closeProfit) {
      if (!(this_present_closeProfit && that_present_closeProfit))
        return false;
      if (this.closeProfit != that.closeProfit)
        return false;
    }

    boolean this_present_positionProfit = true;
    boolean that_present_positionProfit = true;
    if (this_present_positionProfit || that_present_positionProfit) {
      if (!(this_present_positionProfit && that_present_positionProfit))
        return false;
      if (this.positionProfit != that.positionProfit)
        return false;
    }

    boolean this_present_commission = true;
    boolean that_present_commission = true;
    if (this_present_commission || that_present_commission) {
      if (!(this_present_commission && that_present_commission))
        return false;
      if (this.commission != that.commission)
        return false;
    }

    boolean this_present_frozenCommission = true;
    boolean that_present_frozenCommission = true;
    if (this_present_frozenCommission || that_present_frozenCommission) {
      if (!(this_present_frozenCommission && that_present_frozenCommission))
        return false;
      if (this.frozenCommission != that.frozenCommission)
        return false;
    }

    boolean this_present_margin = true;
    boolean that_present_margin = true;
    if (this_present_margin || that_present_margin) {
      if (!(this_present_margin && that_present_margin))
        return false;
      if (this.margin != that.margin)
        return false;
    }

    boolean this_present_frozenMargin = true;
    boolean that_present_frozenMargin = true;
    if (this_present_frozenMargin || that_present_frozenMargin) {
      if (!(this_present_frozenMargin && that_present_frozenMargin))
        return false;
      if (this.frozenMargin != that.frozenMargin)
        return false;
    }

    boolean this_present_positionAverage = true;
    boolean that_present_positionAverage = true;
    if (this_present_positionAverage || that_present_positionAverage) {
      if (!(this_present_positionAverage && that_present_positionAverage))
        return false;
      if (this.positionAverage != that.positionAverage)
        return false;
    }

    boolean this_present_positionTotalCost = true;
    boolean that_present_positionTotalCost = true;
    if (this_present_positionTotalCost || that_present_positionTotalCost) {
      if (!(this_present_positionTotalCost && that_present_positionTotalCost))
        return false;
      if (this.positionTotalCost != that.positionTotalCost)
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserPosition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContract()).compareTo(other.isSetContract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contract, other.contract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYdPosition()).compareTo(other.isSetYdPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYdPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ydPosition, other.ydPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTodayPosition()).compareTo(other.isSetTodayPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTodayPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todayPosition, other.todayPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTodayBuy()).compareTo(other.isSetTodayBuy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTodayBuy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todayBuy, other.todayBuy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTodaySell()).compareTo(other.isSetTodaySell());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTodaySell()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todaySell, other.todaySell);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPosition()).compareTo(other.isSetTotalPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPosition, other.totalPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfit()).compareTo(other.isSetCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfit, other.closeProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionProfit()).compareTo(other.isSetPositionProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionProfit, other.positionProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommission()).compareTo(other.isSetCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commission, other.commission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenCommission()).compareTo(other.isSetFrozenCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenCommission, other.frozenCommission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMargin()).compareTo(other.isSetMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.margin, other.margin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenMargin()).compareTo(other.isSetFrozenMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenMargin, other.frozenMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionAverage()).compareTo(other.isSetPositionAverage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionAverage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionAverage, other.positionAverage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionTotalCost()).compareTo(other.isSetPositionTotalCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionTotalCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionTotalCost, other.positionTotalCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserPosition(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (isSetContract()) {
      if (!first) sb.append(", ");
      sb.append("contract:");
      if (this.contract == null) {
        sb.append("null");
      } else {
        sb.append(this.contract);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("ydPosition:");
    sb.append(this.ydPosition);
    first = false;
    if (!first) sb.append(", ");
    sb.append("todayPosition:");
    sb.append(this.todayPosition);
    first = false;
    if (!first) sb.append(", ");
    sb.append("todayBuy:");
    sb.append(this.todayBuy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("todaySell:");
    sb.append(this.todaySell);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPosition:");
    sb.append(this.totalPosition);
    first = false;
    if (!first) sb.append(", ");
    sb.append("closeProfit:");
    sb.append(this.closeProfit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionProfit:");
    sb.append(this.positionProfit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commission:");
    sb.append(this.commission);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frozenCommission:");
    sb.append(this.frozenCommission);
    first = false;
    if (!first) sb.append(", ");
    sb.append("margin:");
    sb.append(this.margin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frozenMargin:");
    sb.append(this.frozenMargin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionAverage:");
    sb.append(this.positionAverage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionTotalCost:");
    sb.append(this.positionTotalCost);
    first = false;
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ydPosition' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'todayPosition' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'todayBuy' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'todaySell' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalPosition' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'closeProfit' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'positionProfit' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'commission' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'frozenCommission' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'margin' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'frozenMargin' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'positionAverage' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'positionTotalCost' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (contract != null) {
      contract.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserPositionStandardSchemeFactory implements SchemeFactory {
    public UserPositionStandardScheme getScheme() {
      return new UserPositionStandardScheme();
    }
  }

  private static class UserPositionStandardScheme extends StandardScheme<UserPosition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserPosition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contract = new Contract();
              struct.contract.read(iprot);
              struct.setContractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // YD_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ydPosition = iprot.readI32();
              struct.setYdPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TODAY_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.todayPosition = iprot.readI32();
              struct.setTodayPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TODAY_BUY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.todayBuy = iprot.readI32();
              struct.setTodayBuyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TODAY_SELL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.todaySell = iprot.readI32();
              struct.setTodaySellIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalPosition = iprot.readI32();
              struct.setTotalPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfit = iprot.readDouble();
              struct.setCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POSITION_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionProfit = iprot.readDouble();
              struct.setPositionProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.commission = iprot.readDouble();
              struct.setCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FROZEN_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenCommission = iprot.readDouble();
              struct.setFrozenCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.margin = iprot.readDouble();
              struct.setMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FROZEN_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenMargin = iprot.readDouble();
              struct.setFrozenMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // POSITION_AVERAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionAverage = iprot.readDouble();
              struct.setPositionAverageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // POSITION_TOTAL_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionTotalCost = iprot.readDouble();
              struct.setPositionTotalCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledContractId = iprot.readI32();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetYdPosition()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ydPosition' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTodayPosition()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'todayPosition' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTodayBuy()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'todayBuy' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTodaySell()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'todaySell' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalPosition()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalPosition' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCloseProfit()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'closeProfit' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPositionProfit()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'positionProfit' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCommission()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'commission' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFrozenCommission()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'frozenCommission' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMargin()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'margin' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFrozenMargin()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'frozenMargin' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPositionAverage()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'positionAverage' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPositionTotalCost()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'positionTotalCost' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserPosition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.contract != null) {
        if (struct.isSetContract()) {
          oprot.writeFieldBegin(CONTRACT_FIELD_DESC);
          struct.contract.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(YD_POSITION_FIELD_DESC);
      oprot.writeI32(struct.ydPosition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TODAY_POSITION_FIELD_DESC);
      oprot.writeI32(struct.todayPosition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TODAY_BUY_FIELD_DESC);
      oprot.writeI32(struct.todayBuy);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TODAY_SELL_FIELD_DESC);
      oprot.writeI32(struct.todaySell);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_POSITION_FIELD_DESC);
      oprot.writeI32(struct.totalPosition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLOSE_PROFIT_FIELD_DESC);
      oprot.writeDouble(struct.closeProfit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_PROFIT_FIELD_DESC);
      oprot.writeDouble(struct.positionProfit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMISSION_FIELD_DESC);
      oprot.writeDouble(struct.commission);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROZEN_COMMISSION_FIELD_DESC);
      oprot.writeDouble(struct.frozenCommission);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.margin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FROZEN_MARGIN_FIELD_DESC);
      oprot.writeDouble(struct.frozenMargin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_AVERAGE_FIELD_DESC);
      oprot.writeDouble(struct.positionAverage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POSITION_TOTAL_COST_FIELD_DESC);
      oprot.writeDouble(struct.positionTotalCost);
      oprot.writeFieldEnd();
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserPositionTupleSchemeFactory implements SchemeFactory {
    public UserPositionTupleScheme getScheme() {
      return new UserPositionTupleScheme();
    }
  }

  private static class UserPositionTupleScheme extends TupleScheme<UserPosition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserPosition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.userId);
      oprot.writeI32(struct.ydPosition);
      oprot.writeI32(struct.todayPosition);
      oprot.writeI32(struct.todayBuy);
      oprot.writeI32(struct.todaySell);
      oprot.writeI32(struct.totalPosition);
      oprot.writeDouble(struct.closeProfit);
      oprot.writeDouble(struct.positionProfit);
      oprot.writeDouble(struct.commission);
      oprot.writeDouble(struct.frozenCommission);
      oprot.writeDouble(struct.margin);
      oprot.writeDouble(struct.frozenMargin);
      oprot.writeDouble(struct.positionAverage);
      oprot.writeDouble(struct.positionTotalCost);
      BitSet optionals = new BitSet();
      if (struct.isSetContract()) {
        optionals.set(0);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetContract()) {
        struct.contract.write(oprot);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI32(struct.sledContractId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserPosition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.userId = iprot.readI32();
      struct.setUserIdIsSet(true);
      struct.ydPosition = iprot.readI32();
      struct.setYdPositionIsSet(true);
      struct.todayPosition = iprot.readI32();
      struct.setTodayPositionIsSet(true);
      struct.todayBuy = iprot.readI32();
      struct.setTodayBuyIsSet(true);
      struct.todaySell = iprot.readI32();
      struct.setTodaySellIsSet(true);
      struct.totalPosition = iprot.readI32();
      struct.setTotalPositionIsSet(true);
      struct.closeProfit = iprot.readDouble();
      struct.setCloseProfitIsSet(true);
      struct.positionProfit = iprot.readDouble();
      struct.setPositionProfitIsSet(true);
      struct.commission = iprot.readDouble();
      struct.setCommissionIsSet(true);
      struct.frozenCommission = iprot.readDouble();
      struct.setFrozenCommissionIsSet(true);
      struct.margin = iprot.readDouble();
      struct.setMarginIsSet(true);
      struct.frozenMargin = iprot.readDouble();
      struct.setFrozenMarginIsSet(true);
      struct.positionAverage = iprot.readDouble();
      struct.setPositionAverageIsSet(true);
      struct.positionTotalCost = iprot.readDouble();
      struct.setPositionTotalCostIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.contract = new Contract();
        struct.contract.read(iprot);
        struct.setContractIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledContractId = iprot.readI32();
        struct.setSledContractIdIsSet(true);
      }
    }
  }

}

