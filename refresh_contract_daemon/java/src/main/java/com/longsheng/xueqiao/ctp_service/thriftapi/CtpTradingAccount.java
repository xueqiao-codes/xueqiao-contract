/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.ctp_service.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CtpTradingAccount implements org.apache.thrift.TBase<CtpTradingAccount, CtpTradingAccount._Fields>, java.io.Serializable, Cloneable, Comparable<CtpTradingAccount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CtpTradingAccount");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRE_MORTGAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("preMortgage", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField PRE_CREDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("preCredit", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PRE_DEPOSIT_FIELD_DESC = new org.apache.thrift.protocol.TField("preDeposit", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PRE_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("preBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField PRE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("preMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField INTEREST_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("interestBase", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("interest", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField DEPOSIT_FIELD_DESC = new org.apache.thrift.protocol.TField("deposit", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField WITHDRAW_FIELD_DESC = new org.apache.thrift.protocol.TField("withdraw", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField FROZEN_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField FROZEN_CASH_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenCash", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField FROZEN_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenCommission", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField CURR_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("currMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField CASH_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("cashIn", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("commission", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField POSITION_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("positionProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("available", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField WITHDRAW_QUOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawQuota", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField RESERVE_FIELD_DESC = new org.apache.thrift.protocol.TField("reserve", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementID", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField CREDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("credit", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField MORTGAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgage", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField EXCHANGE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField DELIVERY_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)29);
  private static final org.apache.thrift.protocol.TField EXCHANGE_DELIVERY_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeDeliveryMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField RESERVE_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("reserveBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField CURRENCY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyID", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField PRE_FUND_MORTGAGE_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("preFundMortgageIn", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField PRE_FUND_MORTGAGE_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("preFundMortgageOut", org.apache.thrift.protocol.TType.DOUBLE, (short)34);
  private static final org.apache.thrift.protocol.TField FUND_MORTGAGE_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("fundMortgageIn", org.apache.thrift.protocol.TType.DOUBLE, (short)35);
  private static final org.apache.thrift.protocol.TField FUND_MORTGAGE_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("fundMortgageOut", org.apache.thrift.protocol.TType.DOUBLE, (short)36);
  private static final org.apache.thrift.protocol.TField FUND_MORTGAGE_AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("fundMortgageAvailable", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField MORTGAGEABLE_FUND_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageableFund", org.apache.thrift.protocol.TType.DOUBLE, (short)38);
  private static final org.apache.thrift.protocol.TField SPEC_PRODUCT_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("specProductMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)39);
  private static final org.apache.thrift.protocol.TField SPEC_PRODUCT_FROZEN_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("specProductFrozenMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)40);
  private static final org.apache.thrift.protocol.TField SPEC_PRODUCT_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("specProductCommission", org.apache.thrift.protocol.TType.DOUBLE, (short)41);
  private static final org.apache.thrift.protocol.TField SPEC_PRODUCT_FROZEN_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("specProductFrozenCommission", org.apache.thrift.protocol.TType.DOUBLE, (short)42);
  private static final org.apache.thrift.protocol.TField SPEC_PRODUCT_POSITION_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("specProductPositionProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)43);
  private static final org.apache.thrift.protocol.TField SPEC_PRODUCT_CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("specProductCloseProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)44);
  private static final org.apache.thrift.protocol.TField SPEC_PRODUCT_POSITION_PROFIT_BY_ALG_FIELD_DESC = new org.apache.thrift.protocol.TField("specProductPositionProfitByAlg", org.apache.thrift.protocol.TType.DOUBLE, (short)45);
  private static final org.apache.thrift.protocol.TField SPEC_PRODUCT_EXCHANGE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("specProductExchangeMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)46);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)47);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CtpTradingAccountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CtpTradingAccountTupleSchemeFactory());
  }

  public String brokerID; // optional
  public String accountID; // optional
  public double preMortgage; // optional
  public double preCredit; // optional
  public double preDeposit; // optional
  public double preBalance; // optional
  public double preMargin; // optional
  public double interestBase; // optional
  public double interest; // optional
  public double deposit; // optional
  public double withdraw; // optional
  public double frozenMargin; // optional
  public double frozenCash; // optional
  public double frozenCommission; // optional
  public double currMargin; // optional
  public double cashIn; // optional
  public double commission; // optional
  public double closeProfit; // optional
  public double positionProfit; // optional
  public double balance; // optional
  public double available; // optional
  public double withdrawQuota; // optional
  public double reserve; // optional
  public String tradingDay; // optional
  public int settlementID; // optional
  public double credit; // optional
  public double mortgage; // optional
  public double exchangeMargin; // optional
  public double deliveryMargin; // optional
  public double exchangeDeliveryMargin; // optional
  public double reserveBalance; // optional
  public String currencyID; // optional
  public double preFundMortgageIn; // optional
  public double preFundMortgageOut; // optional
  public double fundMortgageIn; // optional
  public double fundMortgageOut; // optional
  public double fundMortgageAvailable; // optional
  public double mortgageableFund; // optional
  public double specProductMargin; // optional
  public double specProductFrozenMargin; // optional
  public double specProductCommission; // optional
  public double specProductFrozenCommission; // optional
  public double specProductPositionProfit; // optional
  public double specProductCloseProfit; // optional
  public double specProductPositionProfitByAlg; // optional
  public double specProductExchangeMargin; // optional
  public int sledAccountId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerID"),
    ACCOUNT_ID((short)2, "accountID"),
    PRE_MORTGAGE((short)3, "preMortgage"),
    PRE_CREDIT((short)4, "preCredit"),
    PRE_DEPOSIT((short)5, "preDeposit"),
    PRE_BALANCE((short)6, "preBalance"),
    PRE_MARGIN((short)7, "preMargin"),
    INTEREST_BASE((short)8, "interestBase"),
    INTEREST((short)9, "interest"),
    DEPOSIT((short)10, "deposit"),
    WITHDRAW((short)11, "withdraw"),
    FROZEN_MARGIN((short)12, "frozenMargin"),
    FROZEN_CASH((short)13, "frozenCash"),
    FROZEN_COMMISSION((short)14, "frozenCommission"),
    CURR_MARGIN((short)15, "currMargin"),
    CASH_IN((short)16, "cashIn"),
    COMMISSION((short)17, "commission"),
    CLOSE_PROFIT((short)18, "closeProfit"),
    POSITION_PROFIT((short)19, "positionProfit"),
    BALANCE((short)20, "balance"),
    AVAILABLE((short)21, "available"),
    WITHDRAW_QUOTA((short)22, "withdrawQuota"),
    RESERVE((short)23, "reserve"),
    TRADING_DAY((short)24, "tradingDay"),
    SETTLEMENT_ID((short)25, "settlementID"),
    CREDIT((short)26, "credit"),
    MORTGAGE((short)27, "mortgage"),
    EXCHANGE_MARGIN((short)28, "exchangeMargin"),
    DELIVERY_MARGIN((short)29, "deliveryMargin"),
    EXCHANGE_DELIVERY_MARGIN((short)30, "exchangeDeliveryMargin"),
    RESERVE_BALANCE((short)31, "reserveBalance"),
    CURRENCY_ID((short)32, "currencyID"),
    PRE_FUND_MORTGAGE_IN((short)33, "preFundMortgageIn"),
    PRE_FUND_MORTGAGE_OUT((short)34, "preFundMortgageOut"),
    FUND_MORTGAGE_IN((short)35, "fundMortgageIn"),
    FUND_MORTGAGE_OUT((short)36, "fundMortgageOut"),
    FUND_MORTGAGE_AVAILABLE((short)37, "fundMortgageAvailable"),
    MORTGAGEABLE_FUND((short)38, "mortgageableFund"),
    SPEC_PRODUCT_MARGIN((short)39, "specProductMargin"),
    SPEC_PRODUCT_FROZEN_MARGIN((short)40, "specProductFrozenMargin"),
    SPEC_PRODUCT_COMMISSION((short)41, "specProductCommission"),
    SPEC_PRODUCT_FROZEN_COMMISSION((short)42, "specProductFrozenCommission"),
    SPEC_PRODUCT_POSITION_PROFIT((short)43, "specProductPositionProfit"),
    SPEC_PRODUCT_CLOSE_PROFIT((short)44, "specProductCloseProfit"),
    SPEC_PRODUCT_POSITION_PROFIT_BY_ALG((short)45, "specProductPositionProfitByAlg"),
    SPEC_PRODUCT_EXCHANGE_MARGIN((short)46, "specProductExchangeMargin"),
    SLED_ACCOUNT_ID((short)47, "sledAccountId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 3: // PRE_MORTGAGE
          return PRE_MORTGAGE;
        case 4: // PRE_CREDIT
          return PRE_CREDIT;
        case 5: // PRE_DEPOSIT
          return PRE_DEPOSIT;
        case 6: // PRE_BALANCE
          return PRE_BALANCE;
        case 7: // PRE_MARGIN
          return PRE_MARGIN;
        case 8: // INTEREST_BASE
          return INTEREST_BASE;
        case 9: // INTEREST
          return INTEREST;
        case 10: // DEPOSIT
          return DEPOSIT;
        case 11: // WITHDRAW
          return WITHDRAW;
        case 12: // FROZEN_MARGIN
          return FROZEN_MARGIN;
        case 13: // FROZEN_CASH
          return FROZEN_CASH;
        case 14: // FROZEN_COMMISSION
          return FROZEN_COMMISSION;
        case 15: // CURR_MARGIN
          return CURR_MARGIN;
        case 16: // CASH_IN
          return CASH_IN;
        case 17: // COMMISSION
          return COMMISSION;
        case 18: // CLOSE_PROFIT
          return CLOSE_PROFIT;
        case 19: // POSITION_PROFIT
          return POSITION_PROFIT;
        case 20: // BALANCE
          return BALANCE;
        case 21: // AVAILABLE
          return AVAILABLE;
        case 22: // WITHDRAW_QUOTA
          return WITHDRAW_QUOTA;
        case 23: // RESERVE
          return RESERVE;
        case 24: // TRADING_DAY
          return TRADING_DAY;
        case 25: // SETTLEMENT_ID
          return SETTLEMENT_ID;
        case 26: // CREDIT
          return CREDIT;
        case 27: // MORTGAGE
          return MORTGAGE;
        case 28: // EXCHANGE_MARGIN
          return EXCHANGE_MARGIN;
        case 29: // DELIVERY_MARGIN
          return DELIVERY_MARGIN;
        case 30: // EXCHANGE_DELIVERY_MARGIN
          return EXCHANGE_DELIVERY_MARGIN;
        case 31: // RESERVE_BALANCE
          return RESERVE_BALANCE;
        case 32: // CURRENCY_ID
          return CURRENCY_ID;
        case 33: // PRE_FUND_MORTGAGE_IN
          return PRE_FUND_MORTGAGE_IN;
        case 34: // PRE_FUND_MORTGAGE_OUT
          return PRE_FUND_MORTGAGE_OUT;
        case 35: // FUND_MORTGAGE_IN
          return FUND_MORTGAGE_IN;
        case 36: // FUND_MORTGAGE_OUT
          return FUND_MORTGAGE_OUT;
        case 37: // FUND_MORTGAGE_AVAILABLE
          return FUND_MORTGAGE_AVAILABLE;
        case 38: // MORTGAGEABLE_FUND
          return MORTGAGEABLE_FUND;
        case 39: // SPEC_PRODUCT_MARGIN
          return SPEC_PRODUCT_MARGIN;
        case 40: // SPEC_PRODUCT_FROZEN_MARGIN
          return SPEC_PRODUCT_FROZEN_MARGIN;
        case 41: // SPEC_PRODUCT_COMMISSION
          return SPEC_PRODUCT_COMMISSION;
        case 42: // SPEC_PRODUCT_FROZEN_COMMISSION
          return SPEC_PRODUCT_FROZEN_COMMISSION;
        case 43: // SPEC_PRODUCT_POSITION_PROFIT
          return SPEC_PRODUCT_POSITION_PROFIT;
        case 44: // SPEC_PRODUCT_CLOSE_PROFIT
          return SPEC_PRODUCT_CLOSE_PROFIT;
        case 45: // SPEC_PRODUCT_POSITION_PROFIT_BY_ALG
          return SPEC_PRODUCT_POSITION_PROFIT_BY_ALG;
        case 46: // SPEC_PRODUCT_EXCHANGE_MARGIN
          return SPEC_PRODUCT_EXCHANGE_MARGIN;
        case 47: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PREMORTGAGE_ISSET_ID = 0;
  private static final int __PRECREDIT_ISSET_ID = 1;
  private static final int __PREDEPOSIT_ISSET_ID = 2;
  private static final int __PREBALANCE_ISSET_ID = 3;
  private static final int __PREMARGIN_ISSET_ID = 4;
  private static final int __INTERESTBASE_ISSET_ID = 5;
  private static final int __INTEREST_ISSET_ID = 6;
  private static final int __DEPOSIT_ISSET_ID = 7;
  private static final int __WITHDRAW_ISSET_ID = 8;
  private static final int __FROZENMARGIN_ISSET_ID = 9;
  private static final int __FROZENCASH_ISSET_ID = 10;
  private static final int __FROZENCOMMISSION_ISSET_ID = 11;
  private static final int __CURRMARGIN_ISSET_ID = 12;
  private static final int __CASHIN_ISSET_ID = 13;
  private static final int __COMMISSION_ISSET_ID = 14;
  private static final int __CLOSEPROFIT_ISSET_ID = 15;
  private static final int __POSITIONPROFIT_ISSET_ID = 16;
  private static final int __BALANCE_ISSET_ID = 17;
  private static final int __AVAILABLE_ISSET_ID = 18;
  private static final int __WITHDRAWQUOTA_ISSET_ID = 19;
  private static final int __RESERVE_ISSET_ID = 20;
  private static final int __SETTLEMENTID_ISSET_ID = 21;
  private static final int __CREDIT_ISSET_ID = 22;
  private static final int __MORTGAGE_ISSET_ID = 23;
  private static final int __EXCHANGEMARGIN_ISSET_ID = 24;
  private static final int __DELIVERYMARGIN_ISSET_ID = 25;
  private static final int __EXCHANGEDELIVERYMARGIN_ISSET_ID = 26;
  private static final int __RESERVEBALANCE_ISSET_ID = 27;
  private static final int __PREFUNDMORTGAGEIN_ISSET_ID = 28;
  private static final int __PREFUNDMORTGAGEOUT_ISSET_ID = 29;
  private static final int __FUNDMORTGAGEIN_ISSET_ID = 30;
  private static final int __FUNDMORTGAGEOUT_ISSET_ID = 31;
  private static final int __FUNDMORTGAGEAVAILABLE_ISSET_ID = 32;
  private static final int __MORTGAGEABLEFUND_ISSET_ID = 33;
  private static final int __SPECPRODUCTMARGIN_ISSET_ID = 34;
  private static final int __SPECPRODUCTFROZENMARGIN_ISSET_ID = 35;
  private static final int __SPECPRODUCTCOMMISSION_ISSET_ID = 36;
  private static final int __SPECPRODUCTFROZENCOMMISSION_ISSET_ID = 37;
  private static final int __SPECPRODUCTPOSITIONPROFIT_ISSET_ID = 38;
  private static final int __SPECPRODUCTCLOSEPROFIT_ISSET_ID = 39;
  private static final int __SPECPRODUCTPOSITIONPROFITBYALG_ISSET_ID = 40;
  private static final int __SPECPRODUCTEXCHANGEMARGIN_ISSET_ID = 41;
  private static final int __SLEDACCOUNTID_ISSET_ID = 42;
  private long __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.BROKER_ID,_Fields.ACCOUNT_ID,_Fields.PRE_MORTGAGE,_Fields.PRE_CREDIT,_Fields.PRE_DEPOSIT,_Fields.PRE_BALANCE,_Fields.PRE_MARGIN,_Fields.INTEREST_BASE,_Fields.INTEREST,_Fields.DEPOSIT,_Fields.WITHDRAW,_Fields.FROZEN_MARGIN,_Fields.FROZEN_CASH,_Fields.FROZEN_COMMISSION,_Fields.CURR_MARGIN,_Fields.CASH_IN,_Fields.COMMISSION,_Fields.CLOSE_PROFIT,_Fields.POSITION_PROFIT,_Fields.BALANCE,_Fields.AVAILABLE,_Fields.WITHDRAW_QUOTA,_Fields.RESERVE,_Fields.TRADING_DAY,_Fields.SETTLEMENT_ID,_Fields.CREDIT,_Fields.MORTGAGE,_Fields.EXCHANGE_MARGIN,_Fields.DELIVERY_MARGIN,_Fields.EXCHANGE_DELIVERY_MARGIN,_Fields.RESERVE_BALANCE,_Fields.CURRENCY_ID,_Fields.PRE_FUND_MORTGAGE_IN,_Fields.PRE_FUND_MORTGAGE_OUT,_Fields.FUND_MORTGAGE_IN,_Fields.FUND_MORTGAGE_OUT,_Fields.FUND_MORTGAGE_AVAILABLE,_Fields.MORTGAGEABLE_FUND,_Fields.SPEC_PRODUCT_MARGIN,_Fields.SPEC_PRODUCT_FROZEN_MARGIN,_Fields.SPEC_PRODUCT_COMMISSION,_Fields.SPEC_PRODUCT_FROZEN_COMMISSION,_Fields.SPEC_PRODUCT_POSITION_PROFIT,_Fields.SPEC_PRODUCT_CLOSE_PROFIT,_Fields.SPEC_PRODUCT_POSITION_PROFIT_BY_ALG,_Fields.SPEC_PRODUCT_EXCHANGE_MARGIN,_Fields.SLED_ACCOUNT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRE_MORTGAGE, new org.apache.thrift.meta_data.FieldMetaData("preMortgage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRE_CREDIT, new org.apache.thrift.meta_data.FieldMetaData("preCredit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRE_DEPOSIT, new org.apache.thrift.meta_data.FieldMetaData("preDeposit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRE_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("preBalance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("preMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTEREST_BASE, new org.apache.thrift.meta_data.FieldMetaData("interestBase", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTEREST, new org.apache.thrift.meta_data.FieldMetaData("interest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEPOSIT, new org.apache.thrift.meta_data.FieldMetaData("deposit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WITHDRAW, new org.apache.thrift.meta_data.FieldMetaData("withdraw", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("frozenMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_CASH, new org.apache.thrift.meta_data.FieldMetaData("frozenCash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("frozenCommission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURR_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("currMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASH_IN, new org.apache.thrift.meta_data.FieldMetaData("cashIn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("commission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("closeProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("positionProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("available", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WITHDRAW_QUOTA, new org.apache.thrift.meta_data.FieldMetaData("withdrawQuota", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESERVE, new org.apache.thrift.meta_data.FieldMetaData("reserve", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("settlementID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT, new org.apache.thrift.meta_data.FieldMetaData("credit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MORTGAGE, new org.apache.thrift.meta_data.FieldMetaData("mortgage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXCHANGE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("exchangeMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DELIVERY_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("deliveryMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXCHANGE_DELIVERY_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("exchangeDeliveryMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESERVE_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("reserveBalance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY_ID, new org.apache.thrift.meta_data.FieldMetaData("currencyID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRE_FUND_MORTGAGE_IN, new org.apache.thrift.meta_data.FieldMetaData("preFundMortgageIn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRE_FUND_MORTGAGE_OUT, new org.apache.thrift.meta_data.FieldMetaData("preFundMortgageOut", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FUND_MORTGAGE_IN, new org.apache.thrift.meta_data.FieldMetaData("fundMortgageIn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FUND_MORTGAGE_OUT, new org.apache.thrift.meta_data.FieldMetaData("fundMortgageOut", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FUND_MORTGAGE_AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("fundMortgageAvailable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MORTGAGEABLE_FUND, new org.apache.thrift.meta_data.FieldMetaData("mortgageableFund", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPEC_PRODUCT_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("specProductMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPEC_PRODUCT_FROZEN_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("specProductFrozenMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPEC_PRODUCT_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("specProductCommission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPEC_PRODUCT_FROZEN_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("specProductFrozenCommission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPEC_PRODUCT_POSITION_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("specProductPositionProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPEC_PRODUCT_CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("specProductCloseProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPEC_PRODUCT_POSITION_PROFIT_BY_ALG, new org.apache.thrift.meta_data.FieldMetaData("specProductPositionProfitByAlg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPEC_PRODUCT_EXCHANGE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("specProductExchangeMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CtpTradingAccount.class, metaDataMap);
  }

  public CtpTradingAccount() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CtpTradingAccount(CtpTradingAccount other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetAccountID()) {
      this.accountID = other.accountID;
    }
    this.preMortgage = other.preMortgage;
    this.preCredit = other.preCredit;
    this.preDeposit = other.preDeposit;
    this.preBalance = other.preBalance;
    this.preMargin = other.preMargin;
    this.interestBase = other.interestBase;
    this.interest = other.interest;
    this.deposit = other.deposit;
    this.withdraw = other.withdraw;
    this.frozenMargin = other.frozenMargin;
    this.frozenCash = other.frozenCash;
    this.frozenCommission = other.frozenCommission;
    this.currMargin = other.currMargin;
    this.cashIn = other.cashIn;
    this.commission = other.commission;
    this.closeProfit = other.closeProfit;
    this.positionProfit = other.positionProfit;
    this.balance = other.balance;
    this.available = other.available;
    this.withdrawQuota = other.withdrawQuota;
    this.reserve = other.reserve;
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    this.settlementID = other.settlementID;
    this.credit = other.credit;
    this.mortgage = other.mortgage;
    this.exchangeMargin = other.exchangeMargin;
    this.deliveryMargin = other.deliveryMargin;
    this.exchangeDeliveryMargin = other.exchangeDeliveryMargin;
    this.reserveBalance = other.reserveBalance;
    if (other.isSetCurrencyID()) {
      this.currencyID = other.currencyID;
    }
    this.preFundMortgageIn = other.preFundMortgageIn;
    this.preFundMortgageOut = other.preFundMortgageOut;
    this.fundMortgageIn = other.fundMortgageIn;
    this.fundMortgageOut = other.fundMortgageOut;
    this.fundMortgageAvailable = other.fundMortgageAvailable;
    this.mortgageableFund = other.mortgageableFund;
    this.specProductMargin = other.specProductMargin;
    this.specProductFrozenMargin = other.specProductFrozenMargin;
    this.specProductCommission = other.specProductCommission;
    this.specProductFrozenCommission = other.specProductFrozenCommission;
    this.specProductPositionProfit = other.specProductPositionProfit;
    this.specProductCloseProfit = other.specProductCloseProfit;
    this.specProductPositionProfitByAlg = other.specProductPositionProfitByAlg;
    this.specProductExchangeMargin = other.specProductExchangeMargin;
    this.sledAccountId = other.sledAccountId;
  }

  public CtpTradingAccount deepCopy() {
    return new CtpTradingAccount(this);
  }

  @Override
  public void clear() {
    this.brokerID = null;
    this.accountID = null;
    setPreMortgageIsSet(false);
    this.preMortgage = 0.0;
    setPreCreditIsSet(false);
    this.preCredit = 0.0;
    setPreDepositIsSet(false);
    this.preDeposit = 0.0;
    setPreBalanceIsSet(false);
    this.preBalance = 0.0;
    setPreMarginIsSet(false);
    this.preMargin = 0.0;
    setInterestBaseIsSet(false);
    this.interestBase = 0.0;
    setInterestIsSet(false);
    this.interest = 0.0;
    setDepositIsSet(false);
    this.deposit = 0.0;
    setWithdrawIsSet(false);
    this.withdraw = 0.0;
    setFrozenMarginIsSet(false);
    this.frozenMargin = 0.0;
    setFrozenCashIsSet(false);
    this.frozenCash = 0.0;
    setFrozenCommissionIsSet(false);
    this.frozenCommission = 0.0;
    setCurrMarginIsSet(false);
    this.currMargin = 0.0;
    setCashInIsSet(false);
    this.cashIn = 0.0;
    setCommissionIsSet(false);
    this.commission = 0.0;
    setCloseProfitIsSet(false);
    this.closeProfit = 0.0;
    setPositionProfitIsSet(false);
    this.positionProfit = 0.0;
    setBalanceIsSet(false);
    this.balance = 0.0;
    setAvailableIsSet(false);
    this.available = 0.0;
    setWithdrawQuotaIsSet(false);
    this.withdrawQuota = 0.0;
    setReserveIsSet(false);
    this.reserve = 0.0;
    this.tradingDay = null;
    setSettlementIDIsSet(false);
    this.settlementID = 0;
    setCreditIsSet(false);
    this.credit = 0.0;
    setMortgageIsSet(false);
    this.mortgage = 0.0;
    setExchangeMarginIsSet(false);
    this.exchangeMargin = 0.0;
    setDeliveryMarginIsSet(false);
    this.deliveryMargin = 0.0;
    setExchangeDeliveryMarginIsSet(false);
    this.exchangeDeliveryMargin = 0.0;
    setReserveBalanceIsSet(false);
    this.reserveBalance = 0.0;
    this.currencyID = null;
    setPreFundMortgageInIsSet(false);
    this.preFundMortgageIn = 0.0;
    setPreFundMortgageOutIsSet(false);
    this.preFundMortgageOut = 0.0;
    setFundMortgageInIsSet(false);
    this.fundMortgageIn = 0.0;
    setFundMortgageOutIsSet(false);
    this.fundMortgageOut = 0.0;
    setFundMortgageAvailableIsSet(false);
    this.fundMortgageAvailable = 0.0;
    setMortgageableFundIsSet(false);
    this.mortgageableFund = 0.0;
    setSpecProductMarginIsSet(false);
    this.specProductMargin = 0.0;
    setSpecProductFrozenMarginIsSet(false);
    this.specProductFrozenMargin = 0.0;
    setSpecProductCommissionIsSet(false);
    this.specProductCommission = 0.0;
    setSpecProductFrozenCommissionIsSet(false);
    this.specProductFrozenCommission = 0.0;
    setSpecProductPositionProfitIsSet(false);
    this.specProductPositionProfit = 0.0;
    setSpecProductCloseProfitIsSet(false);
    this.specProductCloseProfit = 0.0;
    setSpecProductPositionProfitByAlgIsSet(false);
    this.specProductPositionProfitByAlg = 0.0;
    setSpecProductExchangeMarginIsSet(false);
    this.specProductExchangeMargin = 0.0;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CtpTradingAccount setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getAccountID() {
    return this.accountID;
  }

  public CtpTradingAccount setAccountID(String accountID) {
    this.accountID = accountID;
    return this;
  }

  public void unsetAccountID() {
    this.accountID = null;
  }

  /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountID() {
    return this.accountID != null;
  }

  public void setAccountIDIsSet(boolean value) {
    if (!value) {
      this.accountID = null;
    }
  }

  public double getPreMortgage() {
    return this.preMortgage;
  }

  public CtpTradingAccount setPreMortgage(double preMortgage) {
    this.preMortgage = preMortgage;
    setPreMortgageIsSet(true);
    return this;
  }

  public void unsetPreMortgage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREMORTGAGE_ISSET_ID);
  }

  /** Returns true if field preMortgage is set (has been assigned a value) and false otherwise */
  public boolean isSetPreMortgage() {
    return EncodingUtils.testBit(__isset_bitfield, __PREMORTGAGE_ISSET_ID);
  }

  public void setPreMortgageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREMORTGAGE_ISSET_ID, value);
  }

  public double getPreCredit() {
    return this.preCredit;
  }

  public CtpTradingAccount setPreCredit(double preCredit) {
    this.preCredit = preCredit;
    setPreCreditIsSet(true);
    return this;
  }

  public void unsetPreCredit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRECREDIT_ISSET_ID);
  }

  /** Returns true if field preCredit is set (has been assigned a value) and false otherwise */
  public boolean isSetPreCredit() {
    return EncodingUtils.testBit(__isset_bitfield, __PRECREDIT_ISSET_ID);
  }

  public void setPreCreditIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRECREDIT_ISSET_ID, value);
  }

  public double getPreDeposit() {
    return this.preDeposit;
  }

  public CtpTradingAccount setPreDeposit(double preDeposit) {
    this.preDeposit = preDeposit;
    setPreDepositIsSet(true);
    return this;
  }

  public void unsetPreDeposit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREDEPOSIT_ISSET_ID);
  }

  /** Returns true if field preDeposit is set (has been assigned a value) and false otherwise */
  public boolean isSetPreDeposit() {
    return EncodingUtils.testBit(__isset_bitfield, __PREDEPOSIT_ISSET_ID);
  }

  public void setPreDepositIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREDEPOSIT_ISSET_ID, value);
  }

  public double getPreBalance() {
    return this.preBalance;
  }

  public CtpTradingAccount setPreBalance(double preBalance) {
    this.preBalance = preBalance;
    setPreBalanceIsSet(true);
    return this;
  }

  public void unsetPreBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREBALANCE_ISSET_ID);
  }

  /** Returns true if field preBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetPreBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __PREBALANCE_ISSET_ID);
  }

  public void setPreBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREBALANCE_ISSET_ID, value);
  }

  public double getPreMargin() {
    return this.preMargin;
  }

  public CtpTradingAccount setPreMargin(double preMargin) {
    this.preMargin = preMargin;
    setPreMarginIsSet(true);
    return this;
  }

  public void unsetPreMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREMARGIN_ISSET_ID);
  }

  /** Returns true if field preMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetPreMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __PREMARGIN_ISSET_ID);
  }

  public void setPreMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREMARGIN_ISSET_ID, value);
  }

  public double getInterestBase() {
    return this.interestBase;
  }

  public CtpTradingAccount setInterestBase(double interestBase) {
    this.interestBase = interestBase;
    setInterestBaseIsSet(true);
    return this;
  }

  public void unsetInterestBase() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERESTBASE_ISSET_ID);
  }

  /** Returns true if field interestBase is set (has been assigned a value) and false otherwise */
  public boolean isSetInterestBase() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERESTBASE_ISSET_ID);
  }

  public void setInterestBaseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERESTBASE_ISSET_ID, value);
  }

  public double getInterest() {
    return this.interest;
  }

  public CtpTradingAccount setInterest(double interest) {
    this.interest = interest;
    setInterestIsSet(true);
    return this;
  }

  public void unsetInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  /** Returns true if field interest is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  public void setInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEREST_ISSET_ID, value);
  }

  public double getDeposit() {
    return this.deposit;
  }

  public CtpTradingAccount setDeposit(double deposit) {
    this.deposit = deposit;
    setDepositIsSet(true);
    return this;
  }

  public void unsetDeposit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPOSIT_ISSET_ID);
  }

  /** Returns true if field deposit is set (has been assigned a value) and false otherwise */
  public boolean isSetDeposit() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPOSIT_ISSET_ID);
  }

  public void setDepositIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPOSIT_ISSET_ID, value);
  }

  public double getWithdraw() {
    return this.withdraw;
  }

  public CtpTradingAccount setWithdraw(double withdraw) {
    this.withdraw = withdraw;
    setWithdrawIsSet(true);
    return this;
  }

  public void unsetWithdraw() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHDRAW_ISSET_ID);
  }

  /** Returns true if field withdraw is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdraw() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHDRAW_ISSET_ID);
  }

  public void setWithdrawIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHDRAW_ISSET_ID, value);
  }

  public double getFrozenMargin() {
    return this.frozenMargin;
  }

  public CtpTradingAccount setFrozenMargin(double frozenMargin) {
    this.frozenMargin = frozenMargin;
    setFrozenMarginIsSet(true);
    return this;
  }

  public void unsetFrozenMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  /** Returns true if field frozenMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  public void setFrozenMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID, value);
  }

  public double getFrozenCash() {
    return this.frozenCash;
  }

  public CtpTradingAccount setFrozenCash(double frozenCash) {
    this.frozenCash = frozenCash;
    setFrozenCashIsSet(true);
    return this;
  }

  public void unsetFrozenCash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENCASH_ISSET_ID);
  }

  /** Returns true if field frozenCash is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenCash() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENCASH_ISSET_ID);
  }

  public void setFrozenCashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENCASH_ISSET_ID, value);
  }

  public double getFrozenCommission() {
    return this.frozenCommission;
  }

  public CtpTradingAccount setFrozenCommission(double frozenCommission) {
    this.frozenCommission = frozenCommission;
    setFrozenCommissionIsSet(true);
    return this;
  }

  public void unsetFrozenCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID);
  }

  /** Returns true if field frozenCommission is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID);
  }

  public void setFrozenCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID, value);
  }

  public double getCurrMargin() {
    return this.currMargin;
  }

  public CtpTradingAccount setCurrMargin(double currMargin) {
    this.currMargin = currMargin;
    setCurrMarginIsSet(true);
    return this;
  }

  public void unsetCurrMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRMARGIN_ISSET_ID);
  }

  /** Returns true if field currMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRMARGIN_ISSET_ID);
  }

  public void setCurrMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRMARGIN_ISSET_ID, value);
  }

  public double getCashIn() {
    return this.cashIn;
  }

  public CtpTradingAccount setCashIn(double cashIn) {
    this.cashIn = cashIn;
    setCashInIsSet(true);
    return this;
  }

  public void unsetCashIn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHIN_ISSET_ID);
  }

  /** Returns true if field cashIn is set (has been assigned a value) and false otherwise */
  public boolean isSetCashIn() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHIN_ISSET_ID);
  }

  public void setCashInIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHIN_ISSET_ID, value);
  }

  public double getCommission() {
    return this.commission;
  }

  public CtpTradingAccount setCommission(double commission) {
    this.commission = commission;
    setCommissionIsSet(true);
    return this;
  }

  public void unsetCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  /** Returns true if field commission is set (has been assigned a value) and false otherwise */
  public boolean isSetCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  public void setCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMISSION_ISSET_ID, value);
  }

  public double getCloseProfit() {
    return this.closeProfit;
  }

  public CtpTradingAccount setCloseProfit(double closeProfit) {
    this.closeProfit = closeProfit;
    setCloseProfitIsSet(true);
    return this;
  }

  public void unsetCloseProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  /** Returns true if field closeProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  public void setCloseProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID, value);
  }

  public double getPositionProfit() {
    return this.positionProfit;
  }

  public CtpTradingAccount setPositionProfit(double positionProfit) {
    this.positionProfit = positionProfit;
    setPositionProfitIsSet(true);
    return this;
  }

  public void unsetPositionProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  /** Returns true if field positionProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  public void setPositionProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID, value);
  }

  public double getBalance() {
    return this.balance;
  }

  public CtpTradingAccount setBalance(double balance) {
    this.balance = balance;
    setBalanceIsSet(true);
    return this;
  }

  public void unsetBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  public void setBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCE_ISSET_ID, value);
  }

  public double getAvailable() {
    return this.available;
  }

  public CtpTradingAccount setAvailable(double available) {
    this.available = available;
    setAvailableIsSet(true);
    return this;
  }

  public void unsetAvailable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLE_ISSET_ID);
  }

  /** Returns true if field available is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailable() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLE_ISSET_ID);
  }

  public void setAvailableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLE_ISSET_ID, value);
  }

  public double getWithdrawQuota() {
    return this.withdrawQuota;
  }

  public CtpTradingAccount setWithdrawQuota(double withdrawQuota) {
    this.withdrawQuota = withdrawQuota;
    setWithdrawQuotaIsSet(true);
    return this;
  }

  public void unsetWithdrawQuota() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHDRAWQUOTA_ISSET_ID);
  }

  /** Returns true if field withdrawQuota is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawQuota() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHDRAWQUOTA_ISSET_ID);
  }

  public void setWithdrawQuotaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHDRAWQUOTA_ISSET_ID, value);
  }

  public double getReserve() {
    return this.reserve;
  }

  public CtpTradingAccount setReserve(double reserve) {
    this.reserve = reserve;
    setReserveIsSet(true);
    return this;
  }

  public void unsetReserve() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESERVE_ISSET_ID);
  }

  /** Returns true if field reserve is set (has been assigned a value) and false otherwise */
  public boolean isSetReserve() {
    return EncodingUtils.testBit(__isset_bitfield, __RESERVE_ISSET_ID);
  }

  public void setReserveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESERVE_ISSET_ID, value);
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CtpTradingAccount setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public int getSettlementID() {
    return this.settlementID;
  }

  public CtpTradingAccount setSettlementID(int settlementID) {
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    return this;
  }

  public void unsetSettlementID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  /** Returns true if field settlementID is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementID() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  public void setSettlementIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID, value);
  }

  public double getCredit() {
    return this.credit;
  }

  public CtpTradingAccount setCredit(double credit) {
    this.credit = credit;
    setCreditIsSet(true);
    return this;
  }

  public void unsetCredit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDIT_ISSET_ID);
  }

  /** Returns true if field credit is set (has been assigned a value) and false otherwise */
  public boolean isSetCredit() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDIT_ISSET_ID);
  }

  public void setCreditIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDIT_ISSET_ID, value);
  }

  public double getMortgage() {
    return this.mortgage;
  }

  public CtpTradingAccount setMortgage(double mortgage) {
    this.mortgage = mortgage;
    setMortgageIsSet(true);
    return this;
  }

  public void unsetMortgage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORTGAGE_ISSET_ID);
  }

  /** Returns true if field mortgage is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgage() {
    return EncodingUtils.testBit(__isset_bitfield, __MORTGAGE_ISSET_ID);
  }

  public void setMortgageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORTGAGE_ISSET_ID, value);
  }

  public double getExchangeMargin() {
    return this.exchangeMargin;
  }

  public CtpTradingAccount setExchangeMargin(double exchangeMargin) {
    this.exchangeMargin = exchangeMargin;
    setExchangeMarginIsSet(true);
    return this;
  }

  public void unsetExchangeMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHANGEMARGIN_ISSET_ID);
  }

  /** Returns true if field exchangeMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHANGEMARGIN_ISSET_ID);
  }

  public void setExchangeMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHANGEMARGIN_ISSET_ID, value);
  }

  public double getDeliveryMargin() {
    return this.deliveryMargin;
  }

  public CtpTradingAccount setDeliveryMargin(double deliveryMargin) {
    this.deliveryMargin = deliveryMargin;
    setDeliveryMarginIsSet(true);
    return this;
  }

  public void unsetDeliveryMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYMARGIN_ISSET_ID);
  }

  /** Returns true if field deliveryMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __DELIVERYMARGIN_ISSET_ID);
  }

  public void setDeliveryMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYMARGIN_ISSET_ID, value);
  }

  public double getExchangeDeliveryMargin() {
    return this.exchangeDeliveryMargin;
  }

  public CtpTradingAccount setExchangeDeliveryMargin(double exchangeDeliveryMargin) {
    this.exchangeDeliveryMargin = exchangeDeliveryMargin;
    setExchangeDeliveryMarginIsSet(true);
    return this;
  }

  public void unsetExchangeDeliveryMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHANGEDELIVERYMARGIN_ISSET_ID);
  }

  /** Returns true if field exchangeDeliveryMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeDeliveryMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHANGEDELIVERYMARGIN_ISSET_ID);
  }

  public void setExchangeDeliveryMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHANGEDELIVERYMARGIN_ISSET_ID, value);
  }

  public double getReserveBalance() {
    return this.reserveBalance;
  }

  public CtpTradingAccount setReserveBalance(double reserveBalance) {
    this.reserveBalance = reserveBalance;
    setReserveBalanceIsSet(true);
    return this;
  }

  public void unsetReserveBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESERVEBALANCE_ISSET_ID);
  }

  /** Returns true if field reserveBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetReserveBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __RESERVEBALANCE_ISSET_ID);
  }

  public void setReserveBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESERVEBALANCE_ISSET_ID, value);
  }

  public String getCurrencyID() {
    return this.currencyID;
  }

  public CtpTradingAccount setCurrencyID(String currencyID) {
    this.currencyID = currencyID;
    return this;
  }

  public void unsetCurrencyID() {
    this.currencyID = null;
  }

  /** Returns true if field currencyID is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyID() {
    return this.currencyID != null;
  }

  public void setCurrencyIDIsSet(boolean value) {
    if (!value) {
      this.currencyID = null;
    }
  }

  public double getPreFundMortgageIn() {
    return this.preFundMortgageIn;
  }

  public CtpTradingAccount setPreFundMortgageIn(double preFundMortgageIn) {
    this.preFundMortgageIn = preFundMortgageIn;
    setPreFundMortgageInIsSet(true);
    return this;
  }

  public void unsetPreFundMortgageIn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREFUNDMORTGAGEIN_ISSET_ID);
  }

  /** Returns true if field preFundMortgageIn is set (has been assigned a value) and false otherwise */
  public boolean isSetPreFundMortgageIn() {
    return EncodingUtils.testBit(__isset_bitfield, __PREFUNDMORTGAGEIN_ISSET_ID);
  }

  public void setPreFundMortgageInIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREFUNDMORTGAGEIN_ISSET_ID, value);
  }

  public double getPreFundMortgageOut() {
    return this.preFundMortgageOut;
  }

  public CtpTradingAccount setPreFundMortgageOut(double preFundMortgageOut) {
    this.preFundMortgageOut = preFundMortgageOut;
    setPreFundMortgageOutIsSet(true);
    return this;
  }

  public void unsetPreFundMortgageOut() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREFUNDMORTGAGEOUT_ISSET_ID);
  }

  /** Returns true if field preFundMortgageOut is set (has been assigned a value) and false otherwise */
  public boolean isSetPreFundMortgageOut() {
    return EncodingUtils.testBit(__isset_bitfield, __PREFUNDMORTGAGEOUT_ISSET_ID);
  }

  public void setPreFundMortgageOutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREFUNDMORTGAGEOUT_ISSET_ID, value);
  }

  public double getFundMortgageIn() {
    return this.fundMortgageIn;
  }

  public CtpTradingAccount setFundMortgageIn(double fundMortgageIn) {
    this.fundMortgageIn = fundMortgageIn;
    setFundMortgageInIsSet(true);
    return this;
  }

  public void unsetFundMortgageIn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUNDMORTGAGEIN_ISSET_ID);
  }

  /** Returns true if field fundMortgageIn is set (has been assigned a value) and false otherwise */
  public boolean isSetFundMortgageIn() {
    return EncodingUtils.testBit(__isset_bitfield, __FUNDMORTGAGEIN_ISSET_ID);
  }

  public void setFundMortgageInIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUNDMORTGAGEIN_ISSET_ID, value);
  }

  public double getFundMortgageOut() {
    return this.fundMortgageOut;
  }

  public CtpTradingAccount setFundMortgageOut(double fundMortgageOut) {
    this.fundMortgageOut = fundMortgageOut;
    setFundMortgageOutIsSet(true);
    return this;
  }

  public void unsetFundMortgageOut() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUNDMORTGAGEOUT_ISSET_ID);
  }

  /** Returns true if field fundMortgageOut is set (has been assigned a value) and false otherwise */
  public boolean isSetFundMortgageOut() {
    return EncodingUtils.testBit(__isset_bitfield, __FUNDMORTGAGEOUT_ISSET_ID);
  }

  public void setFundMortgageOutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUNDMORTGAGEOUT_ISSET_ID, value);
  }

  public double getFundMortgageAvailable() {
    return this.fundMortgageAvailable;
  }

  public CtpTradingAccount setFundMortgageAvailable(double fundMortgageAvailable) {
    this.fundMortgageAvailable = fundMortgageAvailable;
    setFundMortgageAvailableIsSet(true);
    return this;
  }

  public void unsetFundMortgageAvailable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUNDMORTGAGEAVAILABLE_ISSET_ID);
  }

  /** Returns true if field fundMortgageAvailable is set (has been assigned a value) and false otherwise */
  public boolean isSetFundMortgageAvailable() {
    return EncodingUtils.testBit(__isset_bitfield, __FUNDMORTGAGEAVAILABLE_ISSET_ID);
  }

  public void setFundMortgageAvailableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUNDMORTGAGEAVAILABLE_ISSET_ID, value);
  }

  public double getMortgageableFund() {
    return this.mortgageableFund;
  }

  public CtpTradingAccount setMortgageableFund(double mortgageableFund) {
    this.mortgageableFund = mortgageableFund;
    setMortgageableFundIsSet(true);
    return this;
  }

  public void unsetMortgageableFund() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORTGAGEABLEFUND_ISSET_ID);
  }

  /** Returns true if field mortgageableFund is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageableFund() {
    return EncodingUtils.testBit(__isset_bitfield, __MORTGAGEABLEFUND_ISSET_ID);
  }

  public void setMortgageableFundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORTGAGEABLEFUND_ISSET_ID, value);
  }

  public double getSpecProductMargin() {
    return this.specProductMargin;
  }

  public CtpTradingAccount setSpecProductMargin(double specProductMargin) {
    this.specProductMargin = specProductMargin;
    setSpecProductMarginIsSet(true);
    return this;
  }

  public void unsetSpecProductMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECPRODUCTMARGIN_ISSET_ID);
  }

  /** Returns true if field specProductMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecProductMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECPRODUCTMARGIN_ISSET_ID);
  }

  public void setSpecProductMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECPRODUCTMARGIN_ISSET_ID, value);
  }

  public double getSpecProductFrozenMargin() {
    return this.specProductFrozenMargin;
  }

  public CtpTradingAccount setSpecProductFrozenMargin(double specProductFrozenMargin) {
    this.specProductFrozenMargin = specProductFrozenMargin;
    setSpecProductFrozenMarginIsSet(true);
    return this;
  }

  public void unsetSpecProductFrozenMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECPRODUCTFROZENMARGIN_ISSET_ID);
  }

  /** Returns true if field specProductFrozenMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecProductFrozenMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECPRODUCTFROZENMARGIN_ISSET_ID);
  }

  public void setSpecProductFrozenMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECPRODUCTFROZENMARGIN_ISSET_ID, value);
  }

  public double getSpecProductCommission() {
    return this.specProductCommission;
  }

  public CtpTradingAccount setSpecProductCommission(double specProductCommission) {
    this.specProductCommission = specProductCommission;
    setSpecProductCommissionIsSet(true);
    return this;
  }

  public void unsetSpecProductCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECPRODUCTCOMMISSION_ISSET_ID);
  }

  /** Returns true if field specProductCommission is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecProductCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECPRODUCTCOMMISSION_ISSET_ID);
  }

  public void setSpecProductCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECPRODUCTCOMMISSION_ISSET_ID, value);
  }

  public double getSpecProductFrozenCommission() {
    return this.specProductFrozenCommission;
  }

  public CtpTradingAccount setSpecProductFrozenCommission(double specProductFrozenCommission) {
    this.specProductFrozenCommission = specProductFrozenCommission;
    setSpecProductFrozenCommissionIsSet(true);
    return this;
  }

  public void unsetSpecProductFrozenCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECPRODUCTFROZENCOMMISSION_ISSET_ID);
  }

  /** Returns true if field specProductFrozenCommission is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecProductFrozenCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECPRODUCTFROZENCOMMISSION_ISSET_ID);
  }

  public void setSpecProductFrozenCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECPRODUCTFROZENCOMMISSION_ISSET_ID, value);
  }

  public double getSpecProductPositionProfit() {
    return this.specProductPositionProfit;
  }

  public CtpTradingAccount setSpecProductPositionProfit(double specProductPositionProfit) {
    this.specProductPositionProfit = specProductPositionProfit;
    setSpecProductPositionProfitIsSet(true);
    return this;
  }

  public void unsetSpecProductPositionProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECPRODUCTPOSITIONPROFIT_ISSET_ID);
  }

  /** Returns true if field specProductPositionProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecProductPositionProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECPRODUCTPOSITIONPROFIT_ISSET_ID);
  }

  public void setSpecProductPositionProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECPRODUCTPOSITIONPROFIT_ISSET_ID, value);
  }

  public double getSpecProductCloseProfit() {
    return this.specProductCloseProfit;
  }

  public CtpTradingAccount setSpecProductCloseProfit(double specProductCloseProfit) {
    this.specProductCloseProfit = specProductCloseProfit;
    setSpecProductCloseProfitIsSet(true);
    return this;
  }

  public void unsetSpecProductCloseProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECPRODUCTCLOSEPROFIT_ISSET_ID);
  }

  /** Returns true if field specProductCloseProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecProductCloseProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECPRODUCTCLOSEPROFIT_ISSET_ID);
  }

  public void setSpecProductCloseProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECPRODUCTCLOSEPROFIT_ISSET_ID, value);
  }

  public double getSpecProductPositionProfitByAlg() {
    return this.specProductPositionProfitByAlg;
  }

  public CtpTradingAccount setSpecProductPositionProfitByAlg(double specProductPositionProfitByAlg) {
    this.specProductPositionProfitByAlg = specProductPositionProfitByAlg;
    setSpecProductPositionProfitByAlgIsSet(true);
    return this;
  }

  public void unsetSpecProductPositionProfitByAlg() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECPRODUCTPOSITIONPROFITBYALG_ISSET_ID);
  }

  /** Returns true if field specProductPositionProfitByAlg is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecProductPositionProfitByAlg() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECPRODUCTPOSITIONPROFITBYALG_ISSET_ID);
  }

  public void setSpecProductPositionProfitByAlgIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECPRODUCTPOSITIONPROFITBYALG_ISSET_ID, value);
  }

  public double getSpecProductExchangeMargin() {
    return this.specProductExchangeMargin;
  }

  public CtpTradingAccount setSpecProductExchangeMargin(double specProductExchangeMargin) {
    this.specProductExchangeMargin = specProductExchangeMargin;
    setSpecProductExchangeMarginIsSet(true);
    return this;
  }

  public void unsetSpecProductExchangeMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECPRODUCTEXCHANGEMARGIN_ISSET_ID);
  }

  /** Returns true if field specProductExchangeMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecProductExchangeMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECPRODUCTEXCHANGEMARGIN_ISSET_ID);
  }

  public void setSpecProductExchangeMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECPRODUCTEXCHANGEMARGIN_ISSET_ID, value);
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public CtpTradingAccount setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountID();
      } else {
        setAccountID((String)value);
      }
      break;

    case PRE_MORTGAGE:
      if (value == null) {
        unsetPreMortgage();
      } else {
        setPreMortgage((Double)value);
      }
      break;

    case PRE_CREDIT:
      if (value == null) {
        unsetPreCredit();
      } else {
        setPreCredit((Double)value);
      }
      break;

    case PRE_DEPOSIT:
      if (value == null) {
        unsetPreDeposit();
      } else {
        setPreDeposit((Double)value);
      }
      break;

    case PRE_BALANCE:
      if (value == null) {
        unsetPreBalance();
      } else {
        setPreBalance((Double)value);
      }
      break;

    case PRE_MARGIN:
      if (value == null) {
        unsetPreMargin();
      } else {
        setPreMargin((Double)value);
      }
      break;

    case INTEREST_BASE:
      if (value == null) {
        unsetInterestBase();
      } else {
        setInterestBase((Double)value);
      }
      break;

    case INTEREST:
      if (value == null) {
        unsetInterest();
      } else {
        setInterest((Double)value);
      }
      break;

    case DEPOSIT:
      if (value == null) {
        unsetDeposit();
      } else {
        setDeposit((Double)value);
      }
      break;

    case WITHDRAW:
      if (value == null) {
        unsetWithdraw();
      } else {
        setWithdraw((Double)value);
      }
      break;

    case FROZEN_MARGIN:
      if (value == null) {
        unsetFrozenMargin();
      } else {
        setFrozenMargin((Double)value);
      }
      break;

    case FROZEN_CASH:
      if (value == null) {
        unsetFrozenCash();
      } else {
        setFrozenCash((Double)value);
      }
      break;

    case FROZEN_COMMISSION:
      if (value == null) {
        unsetFrozenCommission();
      } else {
        setFrozenCommission((Double)value);
      }
      break;

    case CURR_MARGIN:
      if (value == null) {
        unsetCurrMargin();
      } else {
        setCurrMargin((Double)value);
      }
      break;

    case CASH_IN:
      if (value == null) {
        unsetCashIn();
      } else {
        setCashIn((Double)value);
      }
      break;

    case COMMISSION:
      if (value == null) {
        unsetCommission();
      } else {
        setCommission((Double)value);
      }
      break;

    case CLOSE_PROFIT:
      if (value == null) {
        unsetCloseProfit();
      } else {
        setCloseProfit((Double)value);
      }
      break;

    case POSITION_PROFIT:
      if (value == null) {
        unsetPositionProfit();
      } else {
        setPositionProfit((Double)value);
      }
      break;

    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((Double)value);
      }
      break;

    case AVAILABLE:
      if (value == null) {
        unsetAvailable();
      } else {
        setAvailable((Double)value);
      }
      break;

    case WITHDRAW_QUOTA:
      if (value == null) {
        unsetWithdrawQuota();
      } else {
        setWithdrawQuota((Double)value);
      }
      break;

    case RESERVE:
      if (value == null) {
        unsetReserve();
      } else {
        setReserve((Double)value);
      }
      break;

    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case SETTLEMENT_ID:
      if (value == null) {
        unsetSettlementID();
      } else {
        setSettlementID((Integer)value);
      }
      break;

    case CREDIT:
      if (value == null) {
        unsetCredit();
      } else {
        setCredit((Double)value);
      }
      break;

    case MORTGAGE:
      if (value == null) {
        unsetMortgage();
      } else {
        setMortgage((Double)value);
      }
      break;

    case EXCHANGE_MARGIN:
      if (value == null) {
        unsetExchangeMargin();
      } else {
        setExchangeMargin((Double)value);
      }
      break;

    case DELIVERY_MARGIN:
      if (value == null) {
        unsetDeliveryMargin();
      } else {
        setDeliveryMargin((Double)value);
      }
      break;

    case EXCHANGE_DELIVERY_MARGIN:
      if (value == null) {
        unsetExchangeDeliveryMargin();
      } else {
        setExchangeDeliveryMargin((Double)value);
      }
      break;

    case RESERVE_BALANCE:
      if (value == null) {
        unsetReserveBalance();
      } else {
        setReserveBalance((Double)value);
      }
      break;

    case CURRENCY_ID:
      if (value == null) {
        unsetCurrencyID();
      } else {
        setCurrencyID((String)value);
      }
      break;

    case PRE_FUND_MORTGAGE_IN:
      if (value == null) {
        unsetPreFundMortgageIn();
      } else {
        setPreFundMortgageIn((Double)value);
      }
      break;

    case PRE_FUND_MORTGAGE_OUT:
      if (value == null) {
        unsetPreFundMortgageOut();
      } else {
        setPreFundMortgageOut((Double)value);
      }
      break;

    case FUND_MORTGAGE_IN:
      if (value == null) {
        unsetFundMortgageIn();
      } else {
        setFundMortgageIn((Double)value);
      }
      break;

    case FUND_MORTGAGE_OUT:
      if (value == null) {
        unsetFundMortgageOut();
      } else {
        setFundMortgageOut((Double)value);
      }
      break;

    case FUND_MORTGAGE_AVAILABLE:
      if (value == null) {
        unsetFundMortgageAvailable();
      } else {
        setFundMortgageAvailable((Double)value);
      }
      break;

    case MORTGAGEABLE_FUND:
      if (value == null) {
        unsetMortgageableFund();
      } else {
        setMortgageableFund((Double)value);
      }
      break;

    case SPEC_PRODUCT_MARGIN:
      if (value == null) {
        unsetSpecProductMargin();
      } else {
        setSpecProductMargin((Double)value);
      }
      break;

    case SPEC_PRODUCT_FROZEN_MARGIN:
      if (value == null) {
        unsetSpecProductFrozenMargin();
      } else {
        setSpecProductFrozenMargin((Double)value);
      }
      break;

    case SPEC_PRODUCT_COMMISSION:
      if (value == null) {
        unsetSpecProductCommission();
      } else {
        setSpecProductCommission((Double)value);
      }
      break;

    case SPEC_PRODUCT_FROZEN_COMMISSION:
      if (value == null) {
        unsetSpecProductFrozenCommission();
      } else {
        setSpecProductFrozenCommission((Double)value);
      }
      break;

    case SPEC_PRODUCT_POSITION_PROFIT:
      if (value == null) {
        unsetSpecProductPositionProfit();
      } else {
        setSpecProductPositionProfit((Double)value);
      }
      break;

    case SPEC_PRODUCT_CLOSE_PROFIT:
      if (value == null) {
        unsetSpecProductCloseProfit();
      } else {
        setSpecProductCloseProfit((Double)value);
      }
      break;

    case SPEC_PRODUCT_POSITION_PROFIT_BY_ALG:
      if (value == null) {
        unsetSpecProductPositionProfitByAlg();
      } else {
        setSpecProductPositionProfitByAlg((Double)value);
      }
      break;

    case SPEC_PRODUCT_EXCHANGE_MARGIN:
      if (value == null) {
        unsetSpecProductExchangeMargin();
      } else {
        setSpecProductExchangeMargin((Double)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return getBrokerID();

    case ACCOUNT_ID:
      return getAccountID();

    case PRE_MORTGAGE:
      return Double.valueOf(getPreMortgage());

    case PRE_CREDIT:
      return Double.valueOf(getPreCredit());

    case PRE_DEPOSIT:
      return Double.valueOf(getPreDeposit());

    case PRE_BALANCE:
      return Double.valueOf(getPreBalance());

    case PRE_MARGIN:
      return Double.valueOf(getPreMargin());

    case INTEREST_BASE:
      return Double.valueOf(getInterestBase());

    case INTEREST:
      return Double.valueOf(getInterest());

    case DEPOSIT:
      return Double.valueOf(getDeposit());

    case WITHDRAW:
      return Double.valueOf(getWithdraw());

    case FROZEN_MARGIN:
      return Double.valueOf(getFrozenMargin());

    case FROZEN_CASH:
      return Double.valueOf(getFrozenCash());

    case FROZEN_COMMISSION:
      return Double.valueOf(getFrozenCommission());

    case CURR_MARGIN:
      return Double.valueOf(getCurrMargin());

    case CASH_IN:
      return Double.valueOf(getCashIn());

    case COMMISSION:
      return Double.valueOf(getCommission());

    case CLOSE_PROFIT:
      return Double.valueOf(getCloseProfit());

    case POSITION_PROFIT:
      return Double.valueOf(getPositionProfit());

    case BALANCE:
      return Double.valueOf(getBalance());

    case AVAILABLE:
      return Double.valueOf(getAvailable());

    case WITHDRAW_QUOTA:
      return Double.valueOf(getWithdrawQuota());

    case RESERVE:
      return Double.valueOf(getReserve());

    case TRADING_DAY:
      return getTradingDay();

    case SETTLEMENT_ID:
      return Integer.valueOf(getSettlementID());

    case CREDIT:
      return Double.valueOf(getCredit());

    case MORTGAGE:
      return Double.valueOf(getMortgage());

    case EXCHANGE_MARGIN:
      return Double.valueOf(getExchangeMargin());

    case DELIVERY_MARGIN:
      return Double.valueOf(getDeliveryMargin());

    case EXCHANGE_DELIVERY_MARGIN:
      return Double.valueOf(getExchangeDeliveryMargin());

    case RESERVE_BALANCE:
      return Double.valueOf(getReserveBalance());

    case CURRENCY_ID:
      return getCurrencyID();

    case PRE_FUND_MORTGAGE_IN:
      return Double.valueOf(getPreFundMortgageIn());

    case PRE_FUND_MORTGAGE_OUT:
      return Double.valueOf(getPreFundMortgageOut());

    case FUND_MORTGAGE_IN:
      return Double.valueOf(getFundMortgageIn());

    case FUND_MORTGAGE_OUT:
      return Double.valueOf(getFundMortgageOut());

    case FUND_MORTGAGE_AVAILABLE:
      return Double.valueOf(getFundMortgageAvailable());

    case MORTGAGEABLE_FUND:
      return Double.valueOf(getMortgageableFund());

    case SPEC_PRODUCT_MARGIN:
      return Double.valueOf(getSpecProductMargin());

    case SPEC_PRODUCT_FROZEN_MARGIN:
      return Double.valueOf(getSpecProductFrozenMargin());

    case SPEC_PRODUCT_COMMISSION:
      return Double.valueOf(getSpecProductCommission());

    case SPEC_PRODUCT_FROZEN_COMMISSION:
      return Double.valueOf(getSpecProductFrozenCommission());

    case SPEC_PRODUCT_POSITION_PROFIT:
      return Double.valueOf(getSpecProductPositionProfit());

    case SPEC_PRODUCT_CLOSE_PROFIT:
      return Double.valueOf(getSpecProductCloseProfit());

    case SPEC_PRODUCT_POSITION_PROFIT_BY_ALG:
      return Double.valueOf(getSpecProductPositionProfitByAlg());

    case SPEC_PRODUCT_EXCHANGE_MARGIN:
      return Double.valueOf(getSpecProductExchangeMargin());

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerID();
    case ACCOUNT_ID:
      return isSetAccountID();
    case PRE_MORTGAGE:
      return isSetPreMortgage();
    case PRE_CREDIT:
      return isSetPreCredit();
    case PRE_DEPOSIT:
      return isSetPreDeposit();
    case PRE_BALANCE:
      return isSetPreBalance();
    case PRE_MARGIN:
      return isSetPreMargin();
    case INTEREST_BASE:
      return isSetInterestBase();
    case INTEREST:
      return isSetInterest();
    case DEPOSIT:
      return isSetDeposit();
    case WITHDRAW:
      return isSetWithdraw();
    case FROZEN_MARGIN:
      return isSetFrozenMargin();
    case FROZEN_CASH:
      return isSetFrozenCash();
    case FROZEN_COMMISSION:
      return isSetFrozenCommission();
    case CURR_MARGIN:
      return isSetCurrMargin();
    case CASH_IN:
      return isSetCashIn();
    case COMMISSION:
      return isSetCommission();
    case CLOSE_PROFIT:
      return isSetCloseProfit();
    case POSITION_PROFIT:
      return isSetPositionProfit();
    case BALANCE:
      return isSetBalance();
    case AVAILABLE:
      return isSetAvailable();
    case WITHDRAW_QUOTA:
      return isSetWithdrawQuota();
    case RESERVE:
      return isSetReserve();
    case TRADING_DAY:
      return isSetTradingDay();
    case SETTLEMENT_ID:
      return isSetSettlementID();
    case CREDIT:
      return isSetCredit();
    case MORTGAGE:
      return isSetMortgage();
    case EXCHANGE_MARGIN:
      return isSetExchangeMargin();
    case DELIVERY_MARGIN:
      return isSetDeliveryMargin();
    case EXCHANGE_DELIVERY_MARGIN:
      return isSetExchangeDeliveryMargin();
    case RESERVE_BALANCE:
      return isSetReserveBalance();
    case CURRENCY_ID:
      return isSetCurrencyID();
    case PRE_FUND_MORTGAGE_IN:
      return isSetPreFundMortgageIn();
    case PRE_FUND_MORTGAGE_OUT:
      return isSetPreFundMortgageOut();
    case FUND_MORTGAGE_IN:
      return isSetFundMortgageIn();
    case FUND_MORTGAGE_OUT:
      return isSetFundMortgageOut();
    case FUND_MORTGAGE_AVAILABLE:
      return isSetFundMortgageAvailable();
    case MORTGAGEABLE_FUND:
      return isSetMortgageableFund();
    case SPEC_PRODUCT_MARGIN:
      return isSetSpecProductMargin();
    case SPEC_PRODUCT_FROZEN_MARGIN:
      return isSetSpecProductFrozenMargin();
    case SPEC_PRODUCT_COMMISSION:
      return isSetSpecProductCommission();
    case SPEC_PRODUCT_FROZEN_COMMISSION:
      return isSetSpecProductFrozenCommission();
    case SPEC_PRODUCT_POSITION_PROFIT:
      return isSetSpecProductPositionProfit();
    case SPEC_PRODUCT_CLOSE_PROFIT:
      return isSetSpecProductCloseProfit();
    case SPEC_PRODUCT_POSITION_PROFIT_BY_ALG:
      return isSetSpecProductPositionProfitByAlg();
    case SPEC_PRODUCT_EXCHANGE_MARGIN:
      return isSetSpecProductExchangeMargin();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CtpTradingAccount)
      return this.equals((CtpTradingAccount)that);
    return false;
  }

  public boolean equals(CtpTradingAccount that) {
    if (that == null)
      return false;

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_accountID = true && this.isSetAccountID();
    boolean that_present_accountID = true && that.isSetAccountID();
    if (this_present_accountID || that_present_accountID) {
      if (!(this_present_accountID && that_present_accountID))
        return false;
      if (!this.accountID.equals(that.accountID))
        return false;
    }

    boolean this_present_preMortgage = true && this.isSetPreMortgage();
    boolean that_present_preMortgage = true && that.isSetPreMortgage();
    if (this_present_preMortgage || that_present_preMortgage) {
      if (!(this_present_preMortgage && that_present_preMortgage))
        return false;
      if (this.preMortgage != that.preMortgage)
        return false;
    }

    boolean this_present_preCredit = true && this.isSetPreCredit();
    boolean that_present_preCredit = true && that.isSetPreCredit();
    if (this_present_preCredit || that_present_preCredit) {
      if (!(this_present_preCredit && that_present_preCredit))
        return false;
      if (this.preCredit != that.preCredit)
        return false;
    }

    boolean this_present_preDeposit = true && this.isSetPreDeposit();
    boolean that_present_preDeposit = true && that.isSetPreDeposit();
    if (this_present_preDeposit || that_present_preDeposit) {
      if (!(this_present_preDeposit && that_present_preDeposit))
        return false;
      if (this.preDeposit != that.preDeposit)
        return false;
    }

    boolean this_present_preBalance = true && this.isSetPreBalance();
    boolean that_present_preBalance = true && that.isSetPreBalance();
    if (this_present_preBalance || that_present_preBalance) {
      if (!(this_present_preBalance && that_present_preBalance))
        return false;
      if (this.preBalance != that.preBalance)
        return false;
    }

    boolean this_present_preMargin = true && this.isSetPreMargin();
    boolean that_present_preMargin = true && that.isSetPreMargin();
    if (this_present_preMargin || that_present_preMargin) {
      if (!(this_present_preMargin && that_present_preMargin))
        return false;
      if (this.preMargin != that.preMargin)
        return false;
    }

    boolean this_present_interestBase = true && this.isSetInterestBase();
    boolean that_present_interestBase = true && that.isSetInterestBase();
    if (this_present_interestBase || that_present_interestBase) {
      if (!(this_present_interestBase && that_present_interestBase))
        return false;
      if (this.interestBase != that.interestBase)
        return false;
    }

    boolean this_present_interest = true && this.isSetInterest();
    boolean that_present_interest = true && that.isSetInterest();
    if (this_present_interest || that_present_interest) {
      if (!(this_present_interest && that_present_interest))
        return false;
      if (this.interest != that.interest)
        return false;
    }

    boolean this_present_deposit = true && this.isSetDeposit();
    boolean that_present_deposit = true && that.isSetDeposit();
    if (this_present_deposit || that_present_deposit) {
      if (!(this_present_deposit && that_present_deposit))
        return false;
      if (this.deposit != that.deposit)
        return false;
    }

    boolean this_present_withdraw = true && this.isSetWithdraw();
    boolean that_present_withdraw = true && that.isSetWithdraw();
    if (this_present_withdraw || that_present_withdraw) {
      if (!(this_present_withdraw && that_present_withdraw))
        return false;
      if (this.withdraw != that.withdraw)
        return false;
    }

    boolean this_present_frozenMargin = true && this.isSetFrozenMargin();
    boolean that_present_frozenMargin = true && that.isSetFrozenMargin();
    if (this_present_frozenMargin || that_present_frozenMargin) {
      if (!(this_present_frozenMargin && that_present_frozenMargin))
        return false;
      if (this.frozenMargin != that.frozenMargin)
        return false;
    }

    boolean this_present_frozenCash = true && this.isSetFrozenCash();
    boolean that_present_frozenCash = true && that.isSetFrozenCash();
    if (this_present_frozenCash || that_present_frozenCash) {
      if (!(this_present_frozenCash && that_present_frozenCash))
        return false;
      if (this.frozenCash != that.frozenCash)
        return false;
    }

    boolean this_present_frozenCommission = true && this.isSetFrozenCommission();
    boolean that_present_frozenCommission = true && that.isSetFrozenCommission();
    if (this_present_frozenCommission || that_present_frozenCommission) {
      if (!(this_present_frozenCommission && that_present_frozenCommission))
        return false;
      if (this.frozenCommission != that.frozenCommission)
        return false;
    }

    boolean this_present_currMargin = true && this.isSetCurrMargin();
    boolean that_present_currMargin = true && that.isSetCurrMargin();
    if (this_present_currMargin || that_present_currMargin) {
      if (!(this_present_currMargin && that_present_currMargin))
        return false;
      if (this.currMargin != that.currMargin)
        return false;
    }

    boolean this_present_cashIn = true && this.isSetCashIn();
    boolean that_present_cashIn = true && that.isSetCashIn();
    if (this_present_cashIn || that_present_cashIn) {
      if (!(this_present_cashIn && that_present_cashIn))
        return false;
      if (this.cashIn != that.cashIn)
        return false;
    }

    boolean this_present_commission = true && this.isSetCommission();
    boolean that_present_commission = true && that.isSetCommission();
    if (this_present_commission || that_present_commission) {
      if (!(this_present_commission && that_present_commission))
        return false;
      if (this.commission != that.commission)
        return false;
    }

    boolean this_present_closeProfit = true && this.isSetCloseProfit();
    boolean that_present_closeProfit = true && that.isSetCloseProfit();
    if (this_present_closeProfit || that_present_closeProfit) {
      if (!(this_present_closeProfit && that_present_closeProfit))
        return false;
      if (this.closeProfit != that.closeProfit)
        return false;
    }

    boolean this_present_positionProfit = true && this.isSetPositionProfit();
    boolean that_present_positionProfit = true && that.isSetPositionProfit();
    if (this_present_positionProfit || that_present_positionProfit) {
      if (!(this_present_positionProfit && that_present_positionProfit))
        return false;
      if (this.positionProfit != that.positionProfit)
        return false;
    }

    boolean this_present_balance = true && this.isSetBalance();
    boolean that_present_balance = true && that.isSetBalance();
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (this.balance != that.balance)
        return false;
    }

    boolean this_present_available = true && this.isSetAvailable();
    boolean that_present_available = true && that.isSetAvailable();
    if (this_present_available || that_present_available) {
      if (!(this_present_available && that_present_available))
        return false;
      if (this.available != that.available)
        return false;
    }

    boolean this_present_withdrawQuota = true && this.isSetWithdrawQuota();
    boolean that_present_withdrawQuota = true && that.isSetWithdrawQuota();
    if (this_present_withdrawQuota || that_present_withdrawQuota) {
      if (!(this_present_withdrawQuota && that_present_withdrawQuota))
        return false;
      if (this.withdrawQuota != that.withdrawQuota)
        return false;
    }

    boolean this_present_reserve = true && this.isSetReserve();
    boolean that_present_reserve = true && that.isSetReserve();
    if (this_present_reserve || that_present_reserve) {
      if (!(this_present_reserve && that_present_reserve))
        return false;
      if (this.reserve != that.reserve)
        return false;
    }

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_settlementID = true && this.isSetSettlementID();
    boolean that_present_settlementID = true && that.isSetSettlementID();
    if (this_present_settlementID || that_present_settlementID) {
      if (!(this_present_settlementID && that_present_settlementID))
        return false;
      if (this.settlementID != that.settlementID)
        return false;
    }

    boolean this_present_credit = true && this.isSetCredit();
    boolean that_present_credit = true && that.isSetCredit();
    if (this_present_credit || that_present_credit) {
      if (!(this_present_credit && that_present_credit))
        return false;
      if (this.credit != that.credit)
        return false;
    }

    boolean this_present_mortgage = true && this.isSetMortgage();
    boolean that_present_mortgage = true && that.isSetMortgage();
    if (this_present_mortgage || that_present_mortgage) {
      if (!(this_present_mortgage && that_present_mortgage))
        return false;
      if (this.mortgage != that.mortgage)
        return false;
    }

    boolean this_present_exchangeMargin = true && this.isSetExchangeMargin();
    boolean that_present_exchangeMargin = true && that.isSetExchangeMargin();
    if (this_present_exchangeMargin || that_present_exchangeMargin) {
      if (!(this_present_exchangeMargin && that_present_exchangeMargin))
        return false;
      if (this.exchangeMargin != that.exchangeMargin)
        return false;
    }

    boolean this_present_deliveryMargin = true && this.isSetDeliveryMargin();
    boolean that_present_deliveryMargin = true && that.isSetDeliveryMargin();
    if (this_present_deliveryMargin || that_present_deliveryMargin) {
      if (!(this_present_deliveryMargin && that_present_deliveryMargin))
        return false;
      if (this.deliveryMargin != that.deliveryMargin)
        return false;
    }

    boolean this_present_exchangeDeliveryMargin = true && this.isSetExchangeDeliveryMargin();
    boolean that_present_exchangeDeliveryMargin = true && that.isSetExchangeDeliveryMargin();
    if (this_present_exchangeDeliveryMargin || that_present_exchangeDeliveryMargin) {
      if (!(this_present_exchangeDeliveryMargin && that_present_exchangeDeliveryMargin))
        return false;
      if (this.exchangeDeliveryMargin != that.exchangeDeliveryMargin)
        return false;
    }

    boolean this_present_reserveBalance = true && this.isSetReserveBalance();
    boolean that_present_reserveBalance = true && that.isSetReserveBalance();
    if (this_present_reserveBalance || that_present_reserveBalance) {
      if (!(this_present_reserveBalance && that_present_reserveBalance))
        return false;
      if (this.reserveBalance != that.reserveBalance)
        return false;
    }

    boolean this_present_currencyID = true && this.isSetCurrencyID();
    boolean that_present_currencyID = true && that.isSetCurrencyID();
    if (this_present_currencyID || that_present_currencyID) {
      if (!(this_present_currencyID && that_present_currencyID))
        return false;
      if (!this.currencyID.equals(that.currencyID))
        return false;
    }

    boolean this_present_preFundMortgageIn = true && this.isSetPreFundMortgageIn();
    boolean that_present_preFundMortgageIn = true && that.isSetPreFundMortgageIn();
    if (this_present_preFundMortgageIn || that_present_preFundMortgageIn) {
      if (!(this_present_preFundMortgageIn && that_present_preFundMortgageIn))
        return false;
      if (this.preFundMortgageIn != that.preFundMortgageIn)
        return false;
    }

    boolean this_present_preFundMortgageOut = true && this.isSetPreFundMortgageOut();
    boolean that_present_preFundMortgageOut = true && that.isSetPreFundMortgageOut();
    if (this_present_preFundMortgageOut || that_present_preFundMortgageOut) {
      if (!(this_present_preFundMortgageOut && that_present_preFundMortgageOut))
        return false;
      if (this.preFundMortgageOut != that.preFundMortgageOut)
        return false;
    }

    boolean this_present_fundMortgageIn = true && this.isSetFundMortgageIn();
    boolean that_present_fundMortgageIn = true && that.isSetFundMortgageIn();
    if (this_present_fundMortgageIn || that_present_fundMortgageIn) {
      if (!(this_present_fundMortgageIn && that_present_fundMortgageIn))
        return false;
      if (this.fundMortgageIn != that.fundMortgageIn)
        return false;
    }

    boolean this_present_fundMortgageOut = true && this.isSetFundMortgageOut();
    boolean that_present_fundMortgageOut = true && that.isSetFundMortgageOut();
    if (this_present_fundMortgageOut || that_present_fundMortgageOut) {
      if (!(this_present_fundMortgageOut && that_present_fundMortgageOut))
        return false;
      if (this.fundMortgageOut != that.fundMortgageOut)
        return false;
    }

    boolean this_present_fundMortgageAvailable = true && this.isSetFundMortgageAvailable();
    boolean that_present_fundMortgageAvailable = true && that.isSetFundMortgageAvailable();
    if (this_present_fundMortgageAvailable || that_present_fundMortgageAvailable) {
      if (!(this_present_fundMortgageAvailable && that_present_fundMortgageAvailable))
        return false;
      if (this.fundMortgageAvailable != that.fundMortgageAvailable)
        return false;
    }

    boolean this_present_mortgageableFund = true && this.isSetMortgageableFund();
    boolean that_present_mortgageableFund = true && that.isSetMortgageableFund();
    if (this_present_mortgageableFund || that_present_mortgageableFund) {
      if (!(this_present_mortgageableFund && that_present_mortgageableFund))
        return false;
      if (this.mortgageableFund != that.mortgageableFund)
        return false;
    }

    boolean this_present_specProductMargin = true && this.isSetSpecProductMargin();
    boolean that_present_specProductMargin = true && that.isSetSpecProductMargin();
    if (this_present_specProductMargin || that_present_specProductMargin) {
      if (!(this_present_specProductMargin && that_present_specProductMargin))
        return false;
      if (this.specProductMargin != that.specProductMargin)
        return false;
    }

    boolean this_present_specProductFrozenMargin = true && this.isSetSpecProductFrozenMargin();
    boolean that_present_specProductFrozenMargin = true && that.isSetSpecProductFrozenMargin();
    if (this_present_specProductFrozenMargin || that_present_specProductFrozenMargin) {
      if (!(this_present_specProductFrozenMargin && that_present_specProductFrozenMargin))
        return false;
      if (this.specProductFrozenMargin != that.specProductFrozenMargin)
        return false;
    }

    boolean this_present_specProductCommission = true && this.isSetSpecProductCommission();
    boolean that_present_specProductCommission = true && that.isSetSpecProductCommission();
    if (this_present_specProductCommission || that_present_specProductCommission) {
      if (!(this_present_specProductCommission && that_present_specProductCommission))
        return false;
      if (this.specProductCommission != that.specProductCommission)
        return false;
    }

    boolean this_present_specProductFrozenCommission = true && this.isSetSpecProductFrozenCommission();
    boolean that_present_specProductFrozenCommission = true && that.isSetSpecProductFrozenCommission();
    if (this_present_specProductFrozenCommission || that_present_specProductFrozenCommission) {
      if (!(this_present_specProductFrozenCommission && that_present_specProductFrozenCommission))
        return false;
      if (this.specProductFrozenCommission != that.specProductFrozenCommission)
        return false;
    }

    boolean this_present_specProductPositionProfit = true && this.isSetSpecProductPositionProfit();
    boolean that_present_specProductPositionProfit = true && that.isSetSpecProductPositionProfit();
    if (this_present_specProductPositionProfit || that_present_specProductPositionProfit) {
      if (!(this_present_specProductPositionProfit && that_present_specProductPositionProfit))
        return false;
      if (this.specProductPositionProfit != that.specProductPositionProfit)
        return false;
    }

    boolean this_present_specProductCloseProfit = true && this.isSetSpecProductCloseProfit();
    boolean that_present_specProductCloseProfit = true && that.isSetSpecProductCloseProfit();
    if (this_present_specProductCloseProfit || that_present_specProductCloseProfit) {
      if (!(this_present_specProductCloseProfit && that_present_specProductCloseProfit))
        return false;
      if (this.specProductCloseProfit != that.specProductCloseProfit)
        return false;
    }

    boolean this_present_specProductPositionProfitByAlg = true && this.isSetSpecProductPositionProfitByAlg();
    boolean that_present_specProductPositionProfitByAlg = true && that.isSetSpecProductPositionProfitByAlg();
    if (this_present_specProductPositionProfitByAlg || that_present_specProductPositionProfitByAlg) {
      if (!(this_present_specProductPositionProfitByAlg && that_present_specProductPositionProfitByAlg))
        return false;
      if (this.specProductPositionProfitByAlg != that.specProductPositionProfitByAlg)
        return false;
    }

    boolean this_present_specProductExchangeMargin = true && this.isSetSpecProductExchangeMargin();
    boolean that_present_specProductExchangeMargin = true && that.isSetSpecProductExchangeMargin();
    if (this_present_specProductExchangeMargin || that_present_specProductExchangeMargin) {
      if (!(this_present_specProductExchangeMargin && that_present_specProductExchangeMargin))
        return false;
      if (this.specProductExchangeMargin != that.specProductExchangeMargin)
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CtpTradingAccount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreMortgage()).compareTo(other.isSetPreMortgage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreMortgage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preMortgage, other.preMortgage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreCredit()).compareTo(other.isSetPreCredit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreCredit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preCredit, other.preCredit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreDeposit()).compareTo(other.isSetPreDeposit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreDeposit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preDeposit, other.preDeposit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreBalance()).compareTo(other.isSetPreBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preBalance, other.preBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreMargin()).compareTo(other.isSetPreMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preMargin, other.preMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterestBase()).compareTo(other.isSetInterestBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterestBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interestBase, other.interestBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterest()).compareTo(other.isSetInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest, other.interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeposit()).compareTo(other.isSetDeposit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeposit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deposit, other.deposit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdraw()).compareTo(other.isSetWithdraw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdraw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdraw, other.withdraw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenMargin()).compareTo(other.isSetFrozenMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenMargin, other.frozenMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenCash()).compareTo(other.isSetFrozenCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenCash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenCash, other.frozenCash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenCommission()).compareTo(other.isSetFrozenCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenCommission, other.frozenCommission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrMargin()).compareTo(other.isSetCurrMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currMargin, other.currMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashIn()).compareTo(other.isSetCashIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashIn, other.cashIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommission()).compareTo(other.isSetCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commission, other.commission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfit()).compareTo(other.isSetCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfit, other.closeProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionProfit()).compareTo(other.isSetPositionProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionProfit, other.positionProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailable()).compareTo(other.isSetAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.available, other.available);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawQuota()).compareTo(other.isSetWithdrawQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawQuota()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawQuota, other.withdrawQuota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserve()).compareTo(other.isSetReserve());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserve()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserve, other.reserve);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementID()).compareTo(other.isSetSettlementID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementID, other.settlementID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCredit()).compareTo(other.isSetCredit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credit, other.credit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgage()).compareTo(other.isSetMortgage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgage, other.mortgage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeMargin()).compareTo(other.isSetExchangeMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeMargin, other.exchangeMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryMargin()).compareTo(other.isSetDeliveryMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryMargin, other.deliveryMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeDeliveryMargin()).compareTo(other.isSetExchangeDeliveryMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeDeliveryMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeDeliveryMargin, other.exchangeDeliveryMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserveBalance()).compareTo(other.isSetReserveBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserveBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserveBalance, other.reserveBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyID()).compareTo(other.isSetCurrencyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyID, other.currencyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreFundMortgageIn()).compareTo(other.isSetPreFundMortgageIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreFundMortgageIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preFundMortgageIn, other.preFundMortgageIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreFundMortgageOut()).compareTo(other.isSetPreFundMortgageOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreFundMortgageOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preFundMortgageOut, other.preFundMortgageOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFundMortgageIn()).compareTo(other.isSetFundMortgageIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFundMortgageIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fundMortgageIn, other.fundMortgageIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFundMortgageOut()).compareTo(other.isSetFundMortgageOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFundMortgageOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fundMortgageOut, other.fundMortgageOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFundMortgageAvailable()).compareTo(other.isSetFundMortgageAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFundMortgageAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fundMortgageAvailable, other.fundMortgageAvailable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageableFund()).compareTo(other.isSetMortgageableFund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageableFund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageableFund, other.mortgageableFund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecProductMargin()).compareTo(other.isSetSpecProductMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecProductMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specProductMargin, other.specProductMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecProductFrozenMargin()).compareTo(other.isSetSpecProductFrozenMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecProductFrozenMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specProductFrozenMargin, other.specProductFrozenMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecProductCommission()).compareTo(other.isSetSpecProductCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecProductCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specProductCommission, other.specProductCommission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecProductFrozenCommission()).compareTo(other.isSetSpecProductFrozenCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecProductFrozenCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specProductFrozenCommission, other.specProductFrozenCommission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecProductPositionProfit()).compareTo(other.isSetSpecProductPositionProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecProductPositionProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specProductPositionProfit, other.specProductPositionProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecProductCloseProfit()).compareTo(other.isSetSpecProductCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecProductCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specProductCloseProfit, other.specProductCloseProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecProductPositionProfitByAlg()).compareTo(other.isSetSpecProductPositionProfitByAlg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecProductPositionProfitByAlg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specProductPositionProfitByAlg, other.specProductPositionProfitByAlg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecProductExchangeMargin()).compareTo(other.isSetSpecProductExchangeMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecProductExchangeMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specProductExchangeMargin, other.specProductExchangeMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CtpTradingAccount(");
    boolean first = true;

    if (isSetBrokerID()) {
      sb.append("brokerID:");
      if (this.brokerID == null) {
        sb.append("null");
      } else {
        sb.append(this.brokerID);
      }
      first = false;
    }
    if (isSetAccountID()) {
      if (!first) sb.append(", ");
      sb.append("accountID:");
      if (this.accountID == null) {
        sb.append("null");
      } else {
        sb.append(this.accountID);
      }
      first = false;
    }
    if (isSetPreMortgage()) {
      if (!first) sb.append(", ");
      sb.append("preMortgage:");
      sb.append(this.preMortgage);
      first = false;
    }
    if (isSetPreCredit()) {
      if (!first) sb.append(", ");
      sb.append("preCredit:");
      sb.append(this.preCredit);
      first = false;
    }
    if (isSetPreDeposit()) {
      if (!first) sb.append(", ");
      sb.append("preDeposit:");
      sb.append(this.preDeposit);
      first = false;
    }
    if (isSetPreBalance()) {
      if (!first) sb.append(", ");
      sb.append("preBalance:");
      sb.append(this.preBalance);
      first = false;
    }
    if (isSetPreMargin()) {
      if (!first) sb.append(", ");
      sb.append("preMargin:");
      sb.append(this.preMargin);
      first = false;
    }
    if (isSetInterestBase()) {
      if (!first) sb.append(", ");
      sb.append("interestBase:");
      sb.append(this.interestBase);
      first = false;
    }
    if (isSetInterest()) {
      if (!first) sb.append(", ");
      sb.append("interest:");
      sb.append(this.interest);
      first = false;
    }
    if (isSetDeposit()) {
      if (!first) sb.append(", ");
      sb.append("deposit:");
      sb.append(this.deposit);
      first = false;
    }
    if (isSetWithdraw()) {
      if (!first) sb.append(", ");
      sb.append("withdraw:");
      sb.append(this.withdraw);
      first = false;
    }
    if (isSetFrozenMargin()) {
      if (!first) sb.append(", ");
      sb.append("frozenMargin:");
      sb.append(this.frozenMargin);
      first = false;
    }
    if (isSetFrozenCash()) {
      if (!first) sb.append(", ");
      sb.append("frozenCash:");
      sb.append(this.frozenCash);
      first = false;
    }
    if (isSetFrozenCommission()) {
      if (!first) sb.append(", ");
      sb.append("frozenCommission:");
      sb.append(this.frozenCommission);
      first = false;
    }
    if (isSetCurrMargin()) {
      if (!first) sb.append(", ");
      sb.append("currMargin:");
      sb.append(this.currMargin);
      first = false;
    }
    if (isSetCashIn()) {
      if (!first) sb.append(", ");
      sb.append("cashIn:");
      sb.append(this.cashIn);
      first = false;
    }
    if (isSetCommission()) {
      if (!first) sb.append(", ");
      sb.append("commission:");
      sb.append(this.commission);
      first = false;
    }
    if (isSetCloseProfit()) {
      if (!first) sb.append(", ");
      sb.append("closeProfit:");
      sb.append(this.closeProfit);
      first = false;
    }
    if (isSetPositionProfit()) {
      if (!first) sb.append(", ");
      sb.append("positionProfit:");
      sb.append(this.positionProfit);
      first = false;
    }
    if (isSetBalance()) {
      if (!first) sb.append(", ");
      sb.append("balance:");
      sb.append(this.balance);
      first = false;
    }
    if (isSetAvailable()) {
      if (!first) sb.append(", ");
      sb.append("available:");
      sb.append(this.available);
      first = false;
    }
    if (isSetWithdrawQuota()) {
      if (!first) sb.append(", ");
      sb.append("withdrawQuota:");
      sb.append(this.withdrawQuota);
      first = false;
    }
    if (isSetReserve()) {
      if (!first) sb.append(", ");
      sb.append("reserve:");
      sb.append(this.reserve);
      first = false;
    }
    if (isSetTradingDay()) {
      if (!first) sb.append(", ");
      sb.append("tradingDay:");
      if (this.tradingDay == null) {
        sb.append("null");
      } else {
        sb.append(this.tradingDay);
      }
      first = false;
    }
    if (isSetSettlementID()) {
      if (!first) sb.append(", ");
      sb.append("settlementID:");
      sb.append(this.settlementID);
      first = false;
    }
    if (isSetCredit()) {
      if (!first) sb.append(", ");
      sb.append("credit:");
      sb.append(this.credit);
      first = false;
    }
    if (isSetMortgage()) {
      if (!first) sb.append(", ");
      sb.append("mortgage:");
      sb.append(this.mortgage);
      first = false;
    }
    if (isSetExchangeMargin()) {
      if (!first) sb.append(", ");
      sb.append("exchangeMargin:");
      sb.append(this.exchangeMargin);
      first = false;
    }
    if (isSetDeliveryMargin()) {
      if (!first) sb.append(", ");
      sb.append("deliveryMargin:");
      sb.append(this.deliveryMargin);
      first = false;
    }
    if (isSetExchangeDeliveryMargin()) {
      if (!first) sb.append(", ");
      sb.append("exchangeDeliveryMargin:");
      sb.append(this.exchangeDeliveryMargin);
      first = false;
    }
    if (isSetReserveBalance()) {
      if (!first) sb.append(", ");
      sb.append("reserveBalance:");
      sb.append(this.reserveBalance);
      first = false;
    }
    if (isSetCurrencyID()) {
      if (!first) sb.append(", ");
      sb.append("currencyID:");
      if (this.currencyID == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyID);
      }
      first = false;
    }
    if (isSetPreFundMortgageIn()) {
      if (!first) sb.append(", ");
      sb.append("preFundMortgageIn:");
      sb.append(this.preFundMortgageIn);
      first = false;
    }
    if (isSetPreFundMortgageOut()) {
      if (!first) sb.append(", ");
      sb.append("preFundMortgageOut:");
      sb.append(this.preFundMortgageOut);
      first = false;
    }
    if (isSetFundMortgageIn()) {
      if (!first) sb.append(", ");
      sb.append("fundMortgageIn:");
      sb.append(this.fundMortgageIn);
      first = false;
    }
    if (isSetFundMortgageOut()) {
      if (!first) sb.append(", ");
      sb.append("fundMortgageOut:");
      sb.append(this.fundMortgageOut);
      first = false;
    }
    if (isSetFundMortgageAvailable()) {
      if (!first) sb.append(", ");
      sb.append("fundMortgageAvailable:");
      sb.append(this.fundMortgageAvailable);
      first = false;
    }
    if (isSetMortgageableFund()) {
      if (!first) sb.append(", ");
      sb.append("mortgageableFund:");
      sb.append(this.mortgageableFund);
      first = false;
    }
    if (isSetSpecProductMargin()) {
      if (!first) sb.append(", ");
      sb.append("specProductMargin:");
      sb.append(this.specProductMargin);
      first = false;
    }
    if (isSetSpecProductFrozenMargin()) {
      if (!first) sb.append(", ");
      sb.append("specProductFrozenMargin:");
      sb.append(this.specProductFrozenMargin);
      first = false;
    }
    if (isSetSpecProductCommission()) {
      if (!first) sb.append(", ");
      sb.append("specProductCommission:");
      sb.append(this.specProductCommission);
      first = false;
    }
    if (isSetSpecProductFrozenCommission()) {
      if (!first) sb.append(", ");
      sb.append("specProductFrozenCommission:");
      sb.append(this.specProductFrozenCommission);
      first = false;
    }
    if (isSetSpecProductPositionProfit()) {
      if (!first) sb.append(", ");
      sb.append("specProductPositionProfit:");
      sb.append(this.specProductPositionProfit);
      first = false;
    }
    if (isSetSpecProductCloseProfit()) {
      if (!first) sb.append(", ");
      sb.append("specProductCloseProfit:");
      sb.append(this.specProductCloseProfit);
      first = false;
    }
    if (isSetSpecProductPositionProfitByAlg()) {
      if (!first) sb.append(", ");
      sb.append("specProductPositionProfitByAlg:");
      sb.append(this.specProductPositionProfitByAlg);
      first = false;
    }
    if (isSetSpecProductExchangeMargin()) {
      if (!first) sb.append(", ");
      sb.append("specProductExchangeMargin:");
      sb.append(this.specProductExchangeMargin);
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CtpTradingAccountStandardSchemeFactory implements SchemeFactory {
    public CtpTradingAccountStandardScheme getScheme() {
      return new CtpTradingAccountStandardScheme();
    }
  }

  private static class CtpTradingAccountStandardScheme extends StandardScheme<CtpTradingAccount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CtpTradingAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountID = iprot.readString();
              struct.setAccountIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRE_MORTGAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preMortgage = iprot.readDouble();
              struct.setPreMortgageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRE_CREDIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preCredit = iprot.readDouble();
              struct.setPreCreditIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRE_DEPOSIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preDeposit = iprot.readDouble();
              struct.setPreDepositIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRE_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preBalance = iprot.readDouble();
              struct.setPreBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preMargin = iprot.readDouble();
              struct.setPreMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INTEREST_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interestBase = iprot.readDouble();
              struct.setInterestBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interest = iprot.readDouble();
              struct.setInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEPOSIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deposit = iprot.readDouble();
              struct.setDepositIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WITHDRAW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.withdraw = iprot.readDouble();
              struct.setWithdrawIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FROZEN_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenMargin = iprot.readDouble();
              struct.setFrozenMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FROZEN_CASH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenCash = iprot.readDouble();
              struct.setFrozenCashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FROZEN_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenCommission = iprot.readDouble();
              struct.setFrozenCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CURR_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currMargin = iprot.readDouble();
              struct.setCurrMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CASH_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashIn = iprot.readDouble();
              struct.setCashInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.commission = iprot.readDouble();
              struct.setCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfit = iprot.readDouble();
              struct.setCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // POSITION_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionProfit = iprot.readDouble();
              struct.setPositionProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.balance = iprot.readDouble();
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.available = iprot.readDouble();
              struct.setAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // WITHDRAW_QUOTA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.withdrawQuota = iprot.readDouble();
              struct.setWithdrawQuotaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // RESERVE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reserve = iprot.readDouble();
              struct.setReserveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SETTLEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.settlementID = iprot.readI32();
              struct.setSettlementIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // CREDIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.credit = iprot.readDouble();
              struct.setCreditIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MORTGAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mortgage = iprot.readDouble();
              struct.setMortgageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // EXCHANGE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchangeMargin = iprot.readDouble();
              struct.setExchangeMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // DELIVERY_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deliveryMargin = iprot.readDouble();
              struct.setDeliveryMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // EXCHANGE_DELIVERY_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchangeDeliveryMargin = iprot.readDouble();
              struct.setExchangeDeliveryMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // RESERVE_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reserveBalance = iprot.readDouble();
              struct.setReserveBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // CURRENCY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyID = iprot.readString();
              struct.setCurrencyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // PRE_FUND_MORTGAGE_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preFundMortgageIn = iprot.readDouble();
              struct.setPreFundMortgageInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // PRE_FUND_MORTGAGE_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preFundMortgageOut = iprot.readDouble();
              struct.setPreFundMortgageOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // FUND_MORTGAGE_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fundMortgageIn = iprot.readDouble();
              struct.setFundMortgageInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // FUND_MORTGAGE_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fundMortgageOut = iprot.readDouble();
              struct.setFundMortgageOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // FUND_MORTGAGE_AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fundMortgageAvailable = iprot.readDouble();
              struct.setFundMortgageAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // MORTGAGEABLE_FUND
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mortgageableFund = iprot.readDouble();
              struct.setMortgageableFundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // SPEC_PRODUCT_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.specProductMargin = iprot.readDouble();
              struct.setSpecProductMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // SPEC_PRODUCT_FROZEN_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.specProductFrozenMargin = iprot.readDouble();
              struct.setSpecProductFrozenMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // SPEC_PRODUCT_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.specProductCommission = iprot.readDouble();
              struct.setSpecProductCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // SPEC_PRODUCT_FROZEN_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.specProductFrozenCommission = iprot.readDouble();
              struct.setSpecProductFrozenCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // SPEC_PRODUCT_POSITION_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.specProductPositionProfit = iprot.readDouble();
              struct.setSpecProductPositionProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // SPEC_PRODUCT_CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.specProductCloseProfit = iprot.readDouble();
              struct.setSpecProductCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // SPEC_PRODUCT_POSITION_PROFIT_BY_ALG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.specProductPositionProfitByAlg = iprot.readDouble();
              struct.setSpecProductPositionProfitByAlgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // SPEC_PRODUCT_EXCHANGE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.specProductExchangeMargin = iprot.readDouble();
              struct.setSpecProductExchangeMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CtpTradingAccount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerID != null) {
        if (struct.isSetBrokerID()) {
          oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
          oprot.writeString(struct.brokerID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.accountID != null) {
        if (struct.isSetAccountID()) {
          oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
          oprot.writeString(struct.accountID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPreMortgage()) {
        oprot.writeFieldBegin(PRE_MORTGAGE_FIELD_DESC);
        oprot.writeDouble(struct.preMortgage);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreCredit()) {
        oprot.writeFieldBegin(PRE_CREDIT_FIELD_DESC);
        oprot.writeDouble(struct.preCredit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreDeposit()) {
        oprot.writeFieldBegin(PRE_DEPOSIT_FIELD_DESC);
        oprot.writeDouble(struct.preDeposit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreBalance()) {
        oprot.writeFieldBegin(PRE_BALANCE_FIELD_DESC);
        oprot.writeDouble(struct.preBalance);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreMargin()) {
        oprot.writeFieldBegin(PRE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.preMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInterestBase()) {
        oprot.writeFieldBegin(INTEREST_BASE_FIELD_DESC);
        oprot.writeDouble(struct.interestBase);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInterest()) {
        oprot.writeFieldBegin(INTEREST_FIELD_DESC);
        oprot.writeDouble(struct.interest);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeposit()) {
        oprot.writeFieldBegin(DEPOSIT_FIELD_DESC);
        oprot.writeDouble(struct.deposit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWithdraw()) {
        oprot.writeFieldBegin(WITHDRAW_FIELD_DESC);
        oprot.writeDouble(struct.withdraw);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeFieldBegin(FROZEN_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.frozenMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenCash()) {
        oprot.writeFieldBegin(FROZEN_CASH_FIELD_DESC);
        oprot.writeDouble(struct.frozenCash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenCommission()) {
        oprot.writeFieldBegin(FROZEN_COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.frozenCommission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCurrMargin()) {
        oprot.writeFieldBegin(CURR_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.currMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCashIn()) {
        oprot.writeFieldBegin(CASH_IN_FIELD_DESC);
        oprot.writeDouble(struct.cashIn);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommission()) {
        oprot.writeFieldBegin(COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.commission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeFieldBegin(CLOSE_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.closeProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeFieldBegin(POSITION_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.positionProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBalance()) {
        oprot.writeFieldBegin(BALANCE_FIELD_DESC);
        oprot.writeDouble(struct.balance);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAvailable()) {
        oprot.writeFieldBegin(AVAILABLE_FIELD_DESC);
        oprot.writeDouble(struct.available);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWithdrawQuota()) {
        oprot.writeFieldBegin(WITHDRAW_QUOTA_FIELD_DESC);
        oprot.writeDouble(struct.withdrawQuota);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReserve()) {
        oprot.writeFieldBegin(RESERVE_FIELD_DESC);
        oprot.writeDouble(struct.reserve);
        oprot.writeFieldEnd();
      }
      if (struct.tradingDay != null) {
        if (struct.isSetTradingDay()) {
          oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
          oprot.writeString(struct.tradingDay);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSettlementID()) {
        oprot.writeFieldBegin(SETTLEMENT_ID_FIELD_DESC);
        oprot.writeI32(struct.settlementID);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCredit()) {
        oprot.writeFieldBegin(CREDIT_FIELD_DESC);
        oprot.writeDouble(struct.credit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMortgage()) {
        oprot.writeFieldBegin(MORTGAGE_FIELD_DESC);
        oprot.writeDouble(struct.mortgage);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExchangeMargin()) {
        oprot.writeFieldBegin(EXCHANGE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.exchangeMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeliveryMargin()) {
        oprot.writeFieldBegin(DELIVERY_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.deliveryMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExchangeDeliveryMargin()) {
        oprot.writeFieldBegin(EXCHANGE_DELIVERY_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.exchangeDeliveryMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReserveBalance()) {
        oprot.writeFieldBegin(RESERVE_BALANCE_FIELD_DESC);
        oprot.writeDouble(struct.reserveBalance);
        oprot.writeFieldEnd();
      }
      if (struct.currencyID != null) {
        if (struct.isSetCurrencyID()) {
          oprot.writeFieldBegin(CURRENCY_ID_FIELD_DESC);
          oprot.writeString(struct.currencyID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPreFundMortgageIn()) {
        oprot.writeFieldBegin(PRE_FUND_MORTGAGE_IN_FIELD_DESC);
        oprot.writeDouble(struct.preFundMortgageIn);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreFundMortgageOut()) {
        oprot.writeFieldBegin(PRE_FUND_MORTGAGE_OUT_FIELD_DESC);
        oprot.writeDouble(struct.preFundMortgageOut);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFundMortgageIn()) {
        oprot.writeFieldBegin(FUND_MORTGAGE_IN_FIELD_DESC);
        oprot.writeDouble(struct.fundMortgageIn);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFundMortgageOut()) {
        oprot.writeFieldBegin(FUND_MORTGAGE_OUT_FIELD_DESC);
        oprot.writeDouble(struct.fundMortgageOut);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFundMortgageAvailable()) {
        oprot.writeFieldBegin(FUND_MORTGAGE_AVAILABLE_FIELD_DESC);
        oprot.writeDouble(struct.fundMortgageAvailable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMortgageableFund()) {
        oprot.writeFieldBegin(MORTGAGEABLE_FUND_FIELD_DESC);
        oprot.writeDouble(struct.mortgageableFund);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpecProductMargin()) {
        oprot.writeFieldBegin(SPEC_PRODUCT_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.specProductMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpecProductFrozenMargin()) {
        oprot.writeFieldBegin(SPEC_PRODUCT_FROZEN_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.specProductFrozenMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpecProductCommission()) {
        oprot.writeFieldBegin(SPEC_PRODUCT_COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.specProductCommission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpecProductFrozenCommission()) {
        oprot.writeFieldBegin(SPEC_PRODUCT_FROZEN_COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.specProductFrozenCommission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpecProductPositionProfit()) {
        oprot.writeFieldBegin(SPEC_PRODUCT_POSITION_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.specProductPositionProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpecProductCloseProfit()) {
        oprot.writeFieldBegin(SPEC_PRODUCT_CLOSE_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.specProductCloseProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpecProductPositionProfitByAlg()) {
        oprot.writeFieldBegin(SPEC_PRODUCT_POSITION_PROFIT_BY_ALG_FIELD_DESC);
        oprot.writeDouble(struct.specProductPositionProfitByAlg);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpecProductExchangeMargin()) {
        oprot.writeFieldBegin(SPEC_PRODUCT_EXCHANGE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.specProductExchangeMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CtpTradingAccountTupleSchemeFactory implements SchemeFactory {
    public CtpTradingAccountTupleScheme getScheme() {
      return new CtpTradingAccountTupleScheme();
    }
  }

  private static class CtpTradingAccountTupleScheme extends TupleScheme<CtpTradingAccount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CtpTradingAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerID()) {
        optionals.set(0);
      }
      if (struct.isSetAccountID()) {
        optionals.set(1);
      }
      if (struct.isSetPreMortgage()) {
        optionals.set(2);
      }
      if (struct.isSetPreCredit()) {
        optionals.set(3);
      }
      if (struct.isSetPreDeposit()) {
        optionals.set(4);
      }
      if (struct.isSetPreBalance()) {
        optionals.set(5);
      }
      if (struct.isSetPreMargin()) {
        optionals.set(6);
      }
      if (struct.isSetInterestBase()) {
        optionals.set(7);
      }
      if (struct.isSetInterest()) {
        optionals.set(8);
      }
      if (struct.isSetDeposit()) {
        optionals.set(9);
      }
      if (struct.isSetWithdraw()) {
        optionals.set(10);
      }
      if (struct.isSetFrozenMargin()) {
        optionals.set(11);
      }
      if (struct.isSetFrozenCash()) {
        optionals.set(12);
      }
      if (struct.isSetFrozenCommission()) {
        optionals.set(13);
      }
      if (struct.isSetCurrMargin()) {
        optionals.set(14);
      }
      if (struct.isSetCashIn()) {
        optionals.set(15);
      }
      if (struct.isSetCommission()) {
        optionals.set(16);
      }
      if (struct.isSetCloseProfit()) {
        optionals.set(17);
      }
      if (struct.isSetPositionProfit()) {
        optionals.set(18);
      }
      if (struct.isSetBalance()) {
        optionals.set(19);
      }
      if (struct.isSetAvailable()) {
        optionals.set(20);
      }
      if (struct.isSetWithdrawQuota()) {
        optionals.set(21);
      }
      if (struct.isSetReserve()) {
        optionals.set(22);
      }
      if (struct.isSetTradingDay()) {
        optionals.set(23);
      }
      if (struct.isSetSettlementID()) {
        optionals.set(24);
      }
      if (struct.isSetCredit()) {
        optionals.set(25);
      }
      if (struct.isSetMortgage()) {
        optionals.set(26);
      }
      if (struct.isSetExchangeMargin()) {
        optionals.set(27);
      }
      if (struct.isSetDeliveryMargin()) {
        optionals.set(28);
      }
      if (struct.isSetExchangeDeliveryMargin()) {
        optionals.set(29);
      }
      if (struct.isSetReserveBalance()) {
        optionals.set(30);
      }
      if (struct.isSetCurrencyID()) {
        optionals.set(31);
      }
      if (struct.isSetPreFundMortgageIn()) {
        optionals.set(32);
      }
      if (struct.isSetPreFundMortgageOut()) {
        optionals.set(33);
      }
      if (struct.isSetFundMortgageIn()) {
        optionals.set(34);
      }
      if (struct.isSetFundMortgageOut()) {
        optionals.set(35);
      }
      if (struct.isSetFundMortgageAvailable()) {
        optionals.set(36);
      }
      if (struct.isSetMortgageableFund()) {
        optionals.set(37);
      }
      if (struct.isSetSpecProductMargin()) {
        optionals.set(38);
      }
      if (struct.isSetSpecProductFrozenMargin()) {
        optionals.set(39);
      }
      if (struct.isSetSpecProductCommission()) {
        optionals.set(40);
      }
      if (struct.isSetSpecProductFrozenCommission()) {
        optionals.set(41);
      }
      if (struct.isSetSpecProductPositionProfit()) {
        optionals.set(42);
      }
      if (struct.isSetSpecProductCloseProfit()) {
        optionals.set(43);
      }
      if (struct.isSetSpecProductPositionProfitByAlg()) {
        optionals.set(44);
      }
      if (struct.isSetSpecProductExchangeMargin()) {
        optionals.set(45);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(46);
      }
      oprot.writeBitSet(optionals, 47);
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetAccountID()) {
        oprot.writeString(struct.accountID);
      }
      if (struct.isSetPreMortgage()) {
        oprot.writeDouble(struct.preMortgage);
      }
      if (struct.isSetPreCredit()) {
        oprot.writeDouble(struct.preCredit);
      }
      if (struct.isSetPreDeposit()) {
        oprot.writeDouble(struct.preDeposit);
      }
      if (struct.isSetPreBalance()) {
        oprot.writeDouble(struct.preBalance);
      }
      if (struct.isSetPreMargin()) {
        oprot.writeDouble(struct.preMargin);
      }
      if (struct.isSetInterestBase()) {
        oprot.writeDouble(struct.interestBase);
      }
      if (struct.isSetInterest()) {
        oprot.writeDouble(struct.interest);
      }
      if (struct.isSetDeposit()) {
        oprot.writeDouble(struct.deposit);
      }
      if (struct.isSetWithdraw()) {
        oprot.writeDouble(struct.withdraw);
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeDouble(struct.frozenMargin);
      }
      if (struct.isSetFrozenCash()) {
        oprot.writeDouble(struct.frozenCash);
      }
      if (struct.isSetFrozenCommission()) {
        oprot.writeDouble(struct.frozenCommission);
      }
      if (struct.isSetCurrMargin()) {
        oprot.writeDouble(struct.currMargin);
      }
      if (struct.isSetCashIn()) {
        oprot.writeDouble(struct.cashIn);
      }
      if (struct.isSetCommission()) {
        oprot.writeDouble(struct.commission);
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeDouble(struct.closeProfit);
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeDouble(struct.positionProfit);
      }
      if (struct.isSetBalance()) {
        oprot.writeDouble(struct.balance);
      }
      if (struct.isSetAvailable()) {
        oprot.writeDouble(struct.available);
      }
      if (struct.isSetWithdrawQuota()) {
        oprot.writeDouble(struct.withdrawQuota);
      }
      if (struct.isSetReserve()) {
        oprot.writeDouble(struct.reserve);
      }
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetSettlementID()) {
        oprot.writeI32(struct.settlementID);
      }
      if (struct.isSetCredit()) {
        oprot.writeDouble(struct.credit);
      }
      if (struct.isSetMortgage()) {
        oprot.writeDouble(struct.mortgage);
      }
      if (struct.isSetExchangeMargin()) {
        oprot.writeDouble(struct.exchangeMargin);
      }
      if (struct.isSetDeliveryMargin()) {
        oprot.writeDouble(struct.deliveryMargin);
      }
      if (struct.isSetExchangeDeliveryMargin()) {
        oprot.writeDouble(struct.exchangeDeliveryMargin);
      }
      if (struct.isSetReserveBalance()) {
        oprot.writeDouble(struct.reserveBalance);
      }
      if (struct.isSetCurrencyID()) {
        oprot.writeString(struct.currencyID);
      }
      if (struct.isSetPreFundMortgageIn()) {
        oprot.writeDouble(struct.preFundMortgageIn);
      }
      if (struct.isSetPreFundMortgageOut()) {
        oprot.writeDouble(struct.preFundMortgageOut);
      }
      if (struct.isSetFundMortgageIn()) {
        oprot.writeDouble(struct.fundMortgageIn);
      }
      if (struct.isSetFundMortgageOut()) {
        oprot.writeDouble(struct.fundMortgageOut);
      }
      if (struct.isSetFundMortgageAvailable()) {
        oprot.writeDouble(struct.fundMortgageAvailable);
      }
      if (struct.isSetMortgageableFund()) {
        oprot.writeDouble(struct.mortgageableFund);
      }
      if (struct.isSetSpecProductMargin()) {
        oprot.writeDouble(struct.specProductMargin);
      }
      if (struct.isSetSpecProductFrozenMargin()) {
        oprot.writeDouble(struct.specProductFrozenMargin);
      }
      if (struct.isSetSpecProductCommission()) {
        oprot.writeDouble(struct.specProductCommission);
      }
      if (struct.isSetSpecProductFrozenCommission()) {
        oprot.writeDouble(struct.specProductFrozenCommission);
      }
      if (struct.isSetSpecProductPositionProfit()) {
        oprot.writeDouble(struct.specProductPositionProfit);
      }
      if (struct.isSetSpecProductCloseProfit()) {
        oprot.writeDouble(struct.specProductCloseProfit);
      }
      if (struct.isSetSpecProductPositionProfitByAlg()) {
        oprot.writeDouble(struct.specProductPositionProfitByAlg);
      }
      if (struct.isSetSpecProductExchangeMargin()) {
        oprot.writeDouble(struct.specProductExchangeMargin);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CtpTradingAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(47);
      if (incoming.get(0)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.preMortgage = iprot.readDouble();
        struct.setPreMortgageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.preCredit = iprot.readDouble();
        struct.setPreCreditIsSet(true);
      }
      if (incoming.get(4)) {
        struct.preDeposit = iprot.readDouble();
        struct.setPreDepositIsSet(true);
      }
      if (incoming.get(5)) {
        struct.preBalance = iprot.readDouble();
        struct.setPreBalanceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.preMargin = iprot.readDouble();
        struct.setPreMarginIsSet(true);
      }
      if (incoming.get(7)) {
        struct.interestBase = iprot.readDouble();
        struct.setInterestBaseIsSet(true);
      }
      if (incoming.get(8)) {
        struct.interest = iprot.readDouble();
        struct.setInterestIsSet(true);
      }
      if (incoming.get(9)) {
        struct.deposit = iprot.readDouble();
        struct.setDepositIsSet(true);
      }
      if (incoming.get(10)) {
        struct.withdraw = iprot.readDouble();
        struct.setWithdrawIsSet(true);
      }
      if (incoming.get(11)) {
        struct.frozenMargin = iprot.readDouble();
        struct.setFrozenMarginIsSet(true);
      }
      if (incoming.get(12)) {
        struct.frozenCash = iprot.readDouble();
        struct.setFrozenCashIsSet(true);
      }
      if (incoming.get(13)) {
        struct.frozenCommission = iprot.readDouble();
        struct.setFrozenCommissionIsSet(true);
      }
      if (incoming.get(14)) {
        struct.currMargin = iprot.readDouble();
        struct.setCurrMarginIsSet(true);
      }
      if (incoming.get(15)) {
        struct.cashIn = iprot.readDouble();
        struct.setCashInIsSet(true);
      }
      if (incoming.get(16)) {
        struct.commission = iprot.readDouble();
        struct.setCommissionIsSet(true);
      }
      if (incoming.get(17)) {
        struct.closeProfit = iprot.readDouble();
        struct.setCloseProfitIsSet(true);
      }
      if (incoming.get(18)) {
        struct.positionProfit = iprot.readDouble();
        struct.setPositionProfitIsSet(true);
      }
      if (incoming.get(19)) {
        struct.balance = iprot.readDouble();
        struct.setBalanceIsSet(true);
      }
      if (incoming.get(20)) {
        struct.available = iprot.readDouble();
        struct.setAvailableIsSet(true);
      }
      if (incoming.get(21)) {
        struct.withdrawQuota = iprot.readDouble();
        struct.setWithdrawQuotaIsSet(true);
      }
      if (incoming.get(22)) {
        struct.reserve = iprot.readDouble();
        struct.setReserveIsSet(true);
      }
      if (incoming.get(23)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(24)) {
        struct.settlementID = iprot.readI32();
        struct.setSettlementIDIsSet(true);
      }
      if (incoming.get(25)) {
        struct.credit = iprot.readDouble();
        struct.setCreditIsSet(true);
      }
      if (incoming.get(26)) {
        struct.mortgage = iprot.readDouble();
        struct.setMortgageIsSet(true);
      }
      if (incoming.get(27)) {
        struct.exchangeMargin = iprot.readDouble();
        struct.setExchangeMarginIsSet(true);
      }
      if (incoming.get(28)) {
        struct.deliveryMargin = iprot.readDouble();
        struct.setDeliveryMarginIsSet(true);
      }
      if (incoming.get(29)) {
        struct.exchangeDeliveryMargin = iprot.readDouble();
        struct.setExchangeDeliveryMarginIsSet(true);
      }
      if (incoming.get(30)) {
        struct.reserveBalance = iprot.readDouble();
        struct.setReserveBalanceIsSet(true);
      }
      if (incoming.get(31)) {
        struct.currencyID = iprot.readString();
        struct.setCurrencyIDIsSet(true);
      }
      if (incoming.get(32)) {
        struct.preFundMortgageIn = iprot.readDouble();
        struct.setPreFundMortgageInIsSet(true);
      }
      if (incoming.get(33)) {
        struct.preFundMortgageOut = iprot.readDouble();
        struct.setPreFundMortgageOutIsSet(true);
      }
      if (incoming.get(34)) {
        struct.fundMortgageIn = iprot.readDouble();
        struct.setFundMortgageInIsSet(true);
      }
      if (incoming.get(35)) {
        struct.fundMortgageOut = iprot.readDouble();
        struct.setFundMortgageOutIsSet(true);
      }
      if (incoming.get(36)) {
        struct.fundMortgageAvailable = iprot.readDouble();
        struct.setFundMortgageAvailableIsSet(true);
      }
      if (incoming.get(37)) {
        struct.mortgageableFund = iprot.readDouble();
        struct.setMortgageableFundIsSet(true);
      }
      if (incoming.get(38)) {
        struct.specProductMargin = iprot.readDouble();
        struct.setSpecProductMarginIsSet(true);
      }
      if (incoming.get(39)) {
        struct.specProductFrozenMargin = iprot.readDouble();
        struct.setSpecProductFrozenMarginIsSet(true);
      }
      if (incoming.get(40)) {
        struct.specProductCommission = iprot.readDouble();
        struct.setSpecProductCommissionIsSet(true);
      }
      if (incoming.get(41)) {
        struct.specProductFrozenCommission = iprot.readDouble();
        struct.setSpecProductFrozenCommissionIsSet(true);
      }
      if (incoming.get(42)) {
        struct.specProductPositionProfit = iprot.readDouble();
        struct.setSpecProductPositionProfitIsSet(true);
      }
      if (incoming.get(43)) {
        struct.specProductCloseProfit = iprot.readDouble();
        struct.setSpecProductCloseProfitIsSet(true);
      }
      if (incoming.get(44)) {
        struct.specProductPositionProfitByAlg = iprot.readDouble();
        struct.setSpecProductPositionProfitByAlgIsSet(true);
      }
      if (incoming.get(45)) {
        struct.specProductExchangeMargin = iprot.readDouble();
        struct.setSpecProductExchangeMarginIsSet(true);
      }
      if (incoming.get(46)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
    }
  }

}

