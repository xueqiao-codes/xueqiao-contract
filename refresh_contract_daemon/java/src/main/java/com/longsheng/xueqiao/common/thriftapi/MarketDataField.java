/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.common.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MarketDataField implements org.apache.thrift.TBase<MarketDataField, MarketDataField._Fields>, java.io.Serializable, Cloneable, Comparable<MarketDataField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MarketDataField");

  private static final org.apache.thrift.protocol.TField CONTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("contract", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ASK_PRICE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("askPriceList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ASK_VOLUME_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("askVolumeList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField BID_PRICE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("bidPriceList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField BID_VOLUME_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("bidVolumeList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastVolume", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("open", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField HIGH_FIELD_DESC = new org.apache.thrift.protocol.TField("high", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField LOW_FIELD_DESC = new org.apache.thrift.protocol.TField("low", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField CLOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("close", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField YEST_SETTLE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("yestSettlePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField YEST_OPEN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("yestOpenInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField YEST_CLOSE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("yestClosePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField OPEN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("openInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField TOTAL_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("totalVolume", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField TURNOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("turnover", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField UPPER_LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("upperLimitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField LOWER_LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("lowerLimitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField TRADING_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingStatus", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField UNIQUE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("uniqueKey", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField AVERAGE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("averagePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I32, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MarketDataFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MarketDataFieldTupleSchemeFactory());
  }

  public Contract contract; // optional
  public List<Double> askPriceList; // required
  public List<Integer> askVolumeList; // required
  public List<Double> bidPriceList; // required
  public List<Integer> bidVolumeList; // required
  public double lastPrice; // optional
  public int lastVolume; // optional
  public double open; // optional
  public double high; // optional
  public double low; // optional
  public double close; // optional
  public double yestSettlePrice; // optional
  public double yestOpenInterest; // optional
  public double yestClosePrice; // optional
  public double openInterest; // optional
  public int totalVolume; // optional
  public double turnover; // optional
  public double upperLimitPrice; // optional
  public double lowerLimitPrice; // optional
  public int tradingStatus; // optional
  public long timestamp; // optional
  public String uniqueKey; // optional
  public double averagePrice; // optional
  public int sledContractId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTRACT((short)1, "contract"),
    ASK_PRICE_LIST((short)2, "askPriceList"),
    ASK_VOLUME_LIST((short)3, "askVolumeList"),
    BID_PRICE_LIST((short)4, "bidPriceList"),
    BID_VOLUME_LIST((short)5, "bidVolumeList"),
    LAST_PRICE((short)6, "lastPrice"),
    LAST_VOLUME((short)7, "lastVolume"),
    OPEN((short)8, "open"),
    HIGH((short)9, "high"),
    LOW((short)10, "low"),
    CLOSE((short)11, "close"),
    YEST_SETTLE_PRICE((short)12, "yestSettlePrice"),
    YEST_OPEN_INTEREST((short)13, "yestOpenInterest"),
    YEST_CLOSE_PRICE((short)14, "yestClosePrice"),
    OPEN_INTEREST((short)15, "openInterest"),
    TOTAL_VOLUME((short)16, "totalVolume"),
    TURNOVER((short)17, "turnover"),
    UPPER_LIMIT_PRICE((short)18, "upperLimitPrice"),
    LOWER_LIMIT_PRICE((short)19, "lowerLimitPrice"),
    TRADING_STATUS((short)20, "tradingStatus"),
    TIMESTAMP((short)21, "timestamp"),
    UNIQUE_KEY((short)22, "uniqueKey"),
    AVERAGE_PRICE((short)23, "averagePrice"),
    SLED_CONTRACT_ID((short)24, "sledContractId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTRACT
          return CONTRACT;
        case 2: // ASK_PRICE_LIST
          return ASK_PRICE_LIST;
        case 3: // ASK_VOLUME_LIST
          return ASK_VOLUME_LIST;
        case 4: // BID_PRICE_LIST
          return BID_PRICE_LIST;
        case 5: // BID_VOLUME_LIST
          return BID_VOLUME_LIST;
        case 6: // LAST_PRICE
          return LAST_PRICE;
        case 7: // LAST_VOLUME
          return LAST_VOLUME;
        case 8: // OPEN
          return OPEN;
        case 9: // HIGH
          return HIGH;
        case 10: // LOW
          return LOW;
        case 11: // CLOSE
          return CLOSE;
        case 12: // YEST_SETTLE_PRICE
          return YEST_SETTLE_PRICE;
        case 13: // YEST_OPEN_INTEREST
          return YEST_OPEN_INTEREST;
        case 14: // YEST_CLOSE_PRICE
          return YEST_CLOSE_PRICE;
        case 15: // OPEN_INTEREST
          return OPEN_INTEREST;
        case 16: // TOTAL_VOLUME
          return TOTAL_VOLUME;
        case 17: // TURNOVER
          return TURNOVER;
        case 18: // UPPER_LIMIT_PRICE
          return UPPER_LIMIT_PRICE;
        case 19: // LOWER_LIMIT_PRICE
          return LOWER_LIMIT_PRICE;
        case 20: // TRADING_STATUS
          return TRADING_STATUS;
        case 21: // TIMESTAMP
          return TIMESTAMP;
        case 22: // UNIQUE_KEY
          return UNIQUE_KEY;
        case 23: // AVERAGE_PRICE
          return AVERAGE_PRICE;
        case 24: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTPRICE_ISSET_ID = 0;
  private static final int __LASTVOLUME_ISSET_ID = 1;
  private static final int __OPEN_ISSET_ID = 2;
  private static final int __HIGH_ISSET_ID = 3;
  private static final int __LOW_ISSET_ID = 4;
  private static final int __CLOSE_ISSET_ID = 5;
  private static final int __YESTSETTLEPRICE_ISSET_ID = 6;
  private static final int __YESTOPENINTEREST_ISSET_ID = 7;
  private static final int __YESTCLOSEPRICE_ISSET_ID = 8;
  private static final int __OPENINTEREST_ISSET_ID = 9;
  private static final int __TOTALVOLUME_ISSET_ID = 10;
  private static final int __TURNOVER_ISSET_ID = 11;
  private static final int __UPPERLIMITPRICE_ISSET_ID = 12;
  private static final int __LOWERLIMITPRICE_ISSET_ID = 13;
  private static final int __TRADINGSTATUS_ISSET_ID = 14;
  private static final int __TIMESTAMP_ISSET_ID = 15;
  private static final int __AVERAGEPRICE_ISSET_ID = 16;
  private static final int __SLEDCONTRACTID_ISSET_ID = 17;
  private int __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONTRACT,_Fields.LAST_PRICE,_Fields.LAST_VOLUME,_Fields.OPEN,_Fields.HIGH,_Fields.LOW,_Fields.CLOSE,_Fields.YEST_SETTLE_PRICE,_Fields.YEST_OPEN_INTEREST,_Fields.YEST_CLOSE_PRICE,_Fields.OPEN_INTEREST,_Fields.TOTAL_VOLUME,_Fields.TURNOVER,_Fields.UPPER_LIMIT_PRICE,_Fields.LOWER_LIMIT_PRICE,_Fields.TRADING_STATUS,_Fields.TIMESTAMP,_Fields.UNIQUE_KEY,_Fields.AVERAGE_PRICE,_Fields.SLED_CONTRACT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTRACT, new org.apache.thrift.meta_data.FieldMetaData("contract", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Contract.class)));
    tmpMap.put(_Fields.ASK_PRICE_LIST, new org.apache.thrift.meta_data.FieldMetaData("askPriceList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ASK_VOLUME_LIST, new org.apache.thrift.meta_data.FieldMetaData("askVolumeList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BID_PRICE_LIST, new org.apache.thrift.meta_data.FieldMetaData("bidPriceList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.BID_VOLUME_LIST, new org.apache.thrift.meta_data.FieldMetaData("bidVolumeList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LAST_PRICE, new org.apache.thrift.meta_data.FieldMetaData("lastPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAST_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("lastVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN, new org.apache.thrift.meta_data.FieldMetaData("open", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HIGH, new org.apache.thrift.meta_data.FieldMetaData("high", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOW, new org.apache.thrift.meta_data.FieldMetaData("low", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE, new org.apache.thrift.meta_data.FieldMetaData("close", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YEST_SETTLE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("yestSettlePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YEST_OPEN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("yestOpenInterest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YEST_CLOSE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("yestClosePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPEN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("openInterest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("totalVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TURNOVER, new org.apache.thrift.meta_data.FieldMetaData("turnover", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPPER_LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("upperLimitPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOWER_LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("lowerLimitPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRADING_STATUS, new org.apache.thrift.meta_data.FieldMetaData("tradingStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UNIQUE_KEY, new org.apache.thrift.meta_data.FieldMetaData("uniqueKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVERAGE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("averagePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MarketDataField.class, metaDataMap);
  }

  public MarketDataField() {
  }

  public MarketDataField(
    List<Double> askPriceList,
    List<Integer> askVolumeList,
    List<Double> bidPriceList,
    List<Integer> bidVolumeList)
  {
    this();
    this.askPriceList = askPriceList;
    this.askVolumeList = askVolumeList;
    this.bidPriceList = bidPriceList;
    this.bidVolumeList = bidVolumeList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MarketDataField(MarketDataField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetContract()) {
      this.contract = new Contract(other.contract);
    }
    if (other.isSetAskPriceList()) {
      List<Double> __this__askPriceList = new ArrayList<Double>(other.askPriceList);
      this.askPriceList = __this__askPriceList;
    }
    if (other.isSetAskVolumeList()) {
      List<Integer> __this__askVolumeList = new ArrayList<Integer>(other.askVolumeList);
      this.askVolumeList = __this__askVolumeList;
    }
    if (other.isSetBidPriceList()) {
      List<Double> __this__bidPriceList = new ArrayList<Double>(other.bidPriceList);
      this.bidPriceList = __this__bidPriceList;
    }
    if (other.isSetBidVolumeList()) {
      List<Integer> __this__bidVolumeList = new ArrayList<Integer>(other.bidVolumeList);
      this.bidVolumeList = __this__bidVolumeList;
    }
    this.lastPrice = other.lastPrice;
    this.lastVolume = other.lastVolume;
    this.open = other.open;
    this.high = other.high;
    this.low = other.low;
    this.close = other.close;
    this.yestSettlePrice = other.yestSettlePrice;
    this.yestOpenInterest = other.yestOpenInterest;
    this.yestClosePrice = other.yestClosePrice;
    this.openInterest = other.openInterest;
    this.totalVolume = other.totalVolume;
    this.turnover = other.turnover;
    this.upperLimitPrice = other.upperLimitPrice;
    this.lowerLimitPrice = other.lowerLimitPrice;
    this.tradingStatus = other.tradingStatus;
    this.timestamp = other.timestamp;
    if (other.isSetUniqueKey()) {
      this.uniqueKey = other.uniqueKey;
    }
    this.averagePrice = other.averagePrice;
    this.sledContractId = other.sledContractId;
  }

  public MarketDataField deepCopy() {
    return new MarketDataField(this);
  }

  @Override
  public void clear() {
    this.contract = null;
    this.askPriceList = null;
    this.askVolumeList = null;
    this.bidPriceList = null;
    this.bidVolumeList = null;
    setLastPriceIsSet(false);
    this.lastPrice = 0.0;
    setLastVolumeIsSet(false);
    this.lastVolume = 0;
    setOpenIsSet(false);
    this.open = 0.0;
    setHighIsSet(false);
    this.high = 0.0;
    setLowIsSet(false);
    this.low = 0.0;
    setCloseIsSet(false);
    this.close = 0.0;
    setYestSettlePriceIsSet(false);
    this.yestSettlePrice = 0.0;
    setYestOpenInterestIsSet(false);
    this.yestOpenInterest = 0.0;
    setYestClosePriceIsSet(false);
    this.yestClosePrice = 0.0;
    setOpenInterestIsSet(false);
    this.openInterest = 0.0;
    setTotalVolumeIsSet(false);
    this.totalVolume = 0;
    setTurnoverIsSet(false);
    this.turnover = 0.0;
    setUpperLimitPriceIsSet(false);
    this.upperLimitPrice = 0.0;
    setLowerLimitPriceIsSet(false);
    this.lowerLimitPrice = 0.0;
    setTradingStatusIsSet(false);
    this.tradingStatus = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.uniqueKey = null;
    setAveragePriceIsSet(false);
    this.averagePrice = 0.0;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
  }

  public Contract getContract() {
    return this.contract;
  }

  public MarketDataField setContract(Contract contract) {
    this.contract = contract;
    return this;
  }

  public void unsetContract() {
    this.contract = null;
  }

  /** Returns true if field contract is set (has been assigned a value) and false otherwise */
  public boolean isSetContract() {
    return this.contract != null;
  }

  public void setContractIsSet(boolean value) {
    if (!value) {
      this.contract = null;
    }
  }

  public int getAskPriceListSize() {
    return (this.askPriceList == null) ? 0 : this.askPriceList.size();
  }

  public java.util.Iterator<Double> getAskPriceListIterator() {
    return (this.askPriceList == null) ? null : this.askPriceList.iterator();
  }

  public void addToAskPriceList(double elem) {
    if (this.askPriceList == null) {
      this.askPriceList = new ArrayList<Double>();
    }
    this.askPriceList.add(elem);
  }

  public List<Double> getAskPriceList() {
    return this.askPriceList;
  }

  public MarketDataField setAskPriceList(List<Double> askPriceList) {
    this.askPriceList = askPriceList;
    return this;
  }

  public void unsetAskPriceList() {
    this.askPriceList = null;
  }

  /** Returns true if field askPriceList is set (has been assigned a value) and false otherwise */
  public boolean isSetAskPriceList() {
    return this.askPriceList != null;
  }

  public void setAskPriceListIsSet(boolean value) {
    if (!value) {
      this.askPriceList = null;
    }
  }

  public int getAskVolumeListSize() {
    return (this.askVolumeList == null) ? 0 : this.askVolumeList.size();
  }

  public java.util.Iterator<Integer> getAskVolumeListIterator() {
    return (this.askVolumeList == null) ? null : this.askVolumeList.iterator();
  }

  public void addToAskVolumeList(int elem) {
    if (this.askVolumeList == null) {
      this.askVolumeList = new ArrayList<Integer>();
    }
    this.askVolumeList.add(elem);
  }

  public List<Integer> getAskVolumeList() {
    return this.askVolumeList;
  }

  public MarketDataField setAskVolumeList(List<Integer> askVolumeList) {
    this.askVolumeList = askVolumeList;
    return this;
  }

  public void unsetAskVolumeList() {
    this.askVolumeList = null;
  }

  /** Returns true if field askVolumeList is set (has been assigned a value) and false otherwise */
  public boolean isSetAskVolumeList() {
    return this.askVolumeList != null;
  }

  public void setAskVolumeListIsSet(boolean value) {
    if (!value) {
      this.askVolumeList = null;
    }
  }

  public int getBidPriceListSize() {
    return (this.bidPriceList == null) ? 0 : this.bidPriceList.size();
  }

  public java.util.Iterator<Double> getBidPriceListIterator() {
    return (this.bidPriceList == null) ? null : this.bidPriceList.iterator();
  }

  public void addToBidPriceList(double elem) {
    if (this.bidPriceList == null) {
      this.bidPriceList = new ArrayList<Double>();
    }
    this.bidPriceList.add(elem);
  }

  public List<Double> getBidPriceList() {
    return this.bidPriceList;
  }

  public MarketDataField setBidPriceList(List<Double> bidPriceList) {
    this.bidPriceList = bidPriceList;
    return this;
  }

  public void unsetBidPriceList() {
    this.bidPriceList = null;
  }

  /** Returns true if field bidPriceList is set (has been assigned a value) and false otherwise */
  public boolean isSetBidPriceList() {
    return this.bidPriceList != null;
  }

  public void setBidPriceListIsSet(boolean value) {
    if (!value) {
      this.bidPriceList = null;
    }
  }

  public int getBidVolumeListSize() {
    return (this.bidVolumeList == null) ? 0 : this.bidVolumeList.size();
  }

  public java.util.Iterator<Integer> getBidVolumeListIterator() {
    return (this.bidVolumeList == null) ? null : this.bidVolumeList.iterator();
  }

  public void addToBidVolumeList(int elem) {
    if (this.bidVolumeList == null) {
      this.bidVolumeList = new ArrayList<Integer>();
    }
    this.bidVolumeList.add(elem);
  }

  public List<Integer> getBidVolumeList() {
    return this.bidVolumeList;
  }

  public MarketDataField setBidVolumeList(List<Integer> bidVolumeList) {
    this.bidVolumeList = bidVolumeList;
    return this;
  }

  public void unsetBidVolumeList() {
    this.bidVolumeList = null;
  }

  /** Returns true if field bidVolumeList is set (has been assigned a value) and false otherwise */
  public boolean isSetBidVolumeList() {
    return this.bidVolumeList != null;
  }

  public void setBidVolumeListIsSet(boolean value) {
    if (!value) {
      this.bidVolumeList = null;
    }
  }

  public double getLastPrice() {
    return this.lastPrice;
  }

  public MarketDataField setLastPrice(double lastPrice) {
    this.lastPrice = lastPrice;
    setLastPriceIsSet(true);
    return this;
  }

  public void unsetLastPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPRICE_ISSET_ID);
  }

  /** Returns true if field lastPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPRICE_ISSET_ID);
  }

  public void setLastPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPRICE_ISSET_ID, value);
  }

  public int getLastVolume() {
    return this.lastVolume;
  }

  public MarketDataField setLastVolume(int lastVolume) {
    this.lastVolume = lastVolume;
    setLastVolumeIsSet(true);
    return this;
  }

  public void unsetLastVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTVOLUME_ISSET_ID);
  }

  /** Returns true if field lastVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetLastVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTVOLUME_ISSET_ID);
  }

  public void setLastVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTVOLUME_ISSET_ID, value);
  }

  public double getOpen() {
    return this.open;
  }

  public MarketDataField setOpen(double open) {
    this.open = open;
    setOpenIsSet(true);
    return this;
  }

  public void unsetOpen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  /** Returns true if field open is set (has been assigned a value) and false otherwise */
  public boolean isSetOpen() {
    return EncodingUtils.testBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  public void setOpenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPEN_ISSET_ID, value);
  }

  public double getHigh() {
    return this.high;
  }

  public MarketDataField setHigh(double high) {
    this.high = high;
    setHighIsSet(true);
    return this;
  }

  public void unsetHigh() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIGH_ISSET_ID);
  }

  /** Returns true if field high is set (has been assigned a value) and false otherwise */
  public boolean isSetHigh() {
    return EncodingUtils.testBit(__isset_bitfield, __HIGH_ISSET_ID);
  }

  public void setHighIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIGH_ISSET_ID, value);
  }

  public double getLow() {
    return this.low;
  }

  public MarketDataField setLow(double low) {
    this.low = low;
    setLowIsSet(true);
    return this;
  }

  public void unsetLow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOW_ISSET_ID);
  }

  /** Returns true if field low is set (has been assigned a value) and false otherwise */
  public boolean isSetLow() {
    return EncodingUtils.testBit(__isset_bitfield, __LOW_ISSET_ID);
  }

  public void setLowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOW_ISSET_ID, value);
  }

  public double getClose() {
    return this.close;
  }

  public MarketDataField setClose(double close) {
    this.close = close;
    setCloseIsSet(true);
    return this;
  }

  public void unsetClose() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSE_ISSET_ID);
  }

  /** Returns true if field close is set (has been assigned a value) and false otherwise */
  public boolean isSetClose() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSE_ISSET_ID);
  }

  public void setCloseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSE_ISSET_ID, value);
  }

  public double getYestSettlePrice() {
    return this.yestSettlePrice;
  }

  public MarketDataField setYestSettlePrice(double yestSettlePrice) {
    this.yestSettlePrice = yestSettlePrice;
    setYestSettlePriceIsSet(true);
    return this;
  }

  public void unsetYestSettlePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YESTSETTLEPRICE_ISSET_ID);
  }

  /** Returns true if field yestSettlePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetYestSettlePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __YESTSETTLEPRICE_ISSET_ID);
  }

  public void setYestSettlePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YESTSETTLEPRICE_ISSET_ID, value);
  }

  public double getYestOpenInterest() {
    return this.yestOpenInterest;
  }

  public MarketDataField setYestOpenInterest(double yestOpenInterest) {
    this.yestOpenInterest = yestOpenInterest;
    setYestOpenInterestIsSet(true);
    return this;
  }

  public void unsetYestOpenInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YESTOPENINTEREST_ISSET_ID);
  }

  /** Returns true if field yestOpenInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetYestOpenInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __YESTOPENINTEREST_ISSET_ID);
  }

  public void setYestOpenInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YESTOPENINTEREST_ISSET_ID, value);
  }

  public double getYestClosePrice() {
    return this.yestClosePrice;
  }

  public MarketDataField setYestClosePrice(double yestClosePrice) {
    this.yestClosePrice = yestClosePrice;
    setYestClosePriceIsSet(true);
    return this;
  }

  public void unsetYestClosePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YESTCLOSEPRICE_ISSET_ID);
  }

  /** Returns true if field yestClosePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetYestClosePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __YESTCLOSEPRICE_ISSET_ID);
  }

  public void setYestClosePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YESTCLOSEPRICE_ISSET_ID, value);
  }

  public double getOpenInterest() {
    return this.openInterest;
  }

  public MarketDataField setOpenInterest(double openInterest) {
    this.openInterest = openInterest;
    setOpenInterestIsSet(true);
    return this;
  }

  public void unsetOpenInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENINTEREST_ISSET_ID);
  }

  /** Returns true if field openInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENINTEREST_ISSET_ID);
  }

  public void setOpenInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENINTEREST_ISSET_ID, value);
  }

  public int getTotalVolume() {
    return this.totalVolume;
  }

  public MarketDataField setTotalVolume(int totalVolume) {
    this.totalVolume = totalVolume;
    setTotalVolumeIsSet(true);
    return this;
  }

  public void unsetTotalVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALVOLUME_ISSET_ID);
  }

  /** Returns true if field totalVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALVOLUME_ISSET_ID);
  }

  public void setTotalVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALVOLUME_ISSET_ID, value);
  }

  public double getTurnover() {
    return this.turnover;
  }

  public MarketDataField setTurnover(double turnover) {
    this.turnover = turnover;
    setTurnoverIsSet(true);
    return this;
  }

  public void unsetTurnover() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNOVER_ISSET_ID);
  }

  /** Returns true if field turnover is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnover() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNOVER_ISSET_ID);
  }

  public void setTurnoverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNOVER_ISSET_ID, value);
  }

  public double getUpperLimitPrice() {
    return this.upperLimitPrice;
  }

  public MarketDataField setUpperLimitPrice(double upperLimitPrice) {
    this.upperLimitPrice = upperLimitPrice;
    setUpperLimitPriceIsSet(true);
    return this;
  }

  public void unsetUpperLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPPERLIMITPRICE_ISSET_ID);
  }

  /** Returns true if field upperLimitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetUpperLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __UPPERLIMITPRICE_ISSET_ID);
  }

  public void setUpperLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPPERLIMITPRICE_ISSET_ID, value);
  }

  public double getLowerLimitPrice() {
    return this.lowerLimitPrice;
  }

  public MarketDataField setLowerLimitPrice(double lowerLimitPrice) {
    this.lowerLimitPrice = lowerLimitPrice;
    setLowerLimitPriceIsSet(true);
    return this;
  }

  public void unsetLowerLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOWERLIMITPRICE_ISSET_ID);
  }

  /** Returns true if field lowerLimitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLowerLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LOWERLIMITPRICE_ISSET_ID);
  }

  public void setLowerLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOWERLIMITPRICE_ISSET_ID, value);
  }

  public int getTradingStatus() {
    return this.tradingStatus;
  }

  public MarketDataField setTradingStatus(int tradingStatus) {
    this.tradingStatus = tradingStatus;
    setTradingStatusIsSet(true);
    return this;
  }

  public void unsetTradingStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADINGSTATUS_ISSET_ID);
  }

  /** Returns true if field tradingStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADINGSTATUS_ISSET_ID);
  }

  public void setTradingStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADINGSTATUS_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public MarketDataField setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public String getUniqueKey() {
    return this.uniqueKey;
  }

  public MarketDataField setUniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
    return this;
  }

  public void unsetUniqueKey() {
    this.uniqueKey = null;
  }

  /** Returns true if field uniqueKey is set (has been assigned a value) and false otherwise */
  public boolean isSetUniqueKey() {
    return this.uniqueKey != null;
  }

  public void setUniqueKeyIsSet(boolean value) {
    if (!value) {
      this.uniqueKey = null;
    }
  }

  public double getAveragePrice() {
    return this.averagePrice;
  }

  public MarketDataField setAveragePrice(double averagePrice) {
    this.averagePrice = averagePrice;
    setAveragePriceIsSet(true);
    return this;
  }

  public void unsetAveragePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGEPRICE_ISSET_ID);
  }

  /** Returns true if field averagePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetAveragePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __AVERAGEPRICE_ISSET_ID);
  }

  public void setAveragePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGEPRICE_ISSET_ID, value);
  }

  public int getSledContractId() {
    return this.sledContractId;
  }

  public MarketDataField setSledContractId(int sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTRACT:
      if (value == null) {
        unsetContract();
      } else {
        setContract((Contract)value);
      }
      break;

    case ASK_PRICE_LIST:
      if (value == null) {
        unsetAskPriceList();
      } else {
        setAskPriceList((List<Double>)value);
      }
      break;

    case ASK_VOLUME_LIST:
      if (value == null) {
        unsetAskVolumeList();
      } else {
        setAskVolumeList((List<Integer>)value);
      }
      break;

    case BID_PRICE_LIST:
      if (value == null) {
        unsetBidPriceList();
      } else {
        setBidPriceList((List<Double>)value);
      }
      break;

    case BID_VOLUME_LIST:
      if (value == null) {
        unsetBidVolumeList();
      } else {
        setBidVolumeList((List<Integer>)value);
      }
      break;

    case LAST_PRICE:
      if (value == null) {
        unsetLastPrice();
      } else {
        setLastPrice((Double)value);
      }
      break;

    case LAST_VOLUME:
      if (value == null) {
        unsetLastVolume();
      } else {
        setLastVolume((Integer)value);
      }
      break;

    case OPEN:
      if (value == null) {
        unsetOpen();
      } else {
        setOpen((Double)value);
      }
      break;

    case HIGH:
      if (value == null) {
        unsetHigh();
      } else {
        setHigh((Double)value);
      }
      break;

    case LOW:
      if (value == null) {
        unsetLow();
      } else {
        setLow((Double)value);
      }
      break;

    case CLOSE:
      if (value == null) {
        unsetClose();
      } else {
        setClose((Double)value);
      }
      break;

    case YEST_SETTLE_PRICE:
      if (value == null) {
        unsetYestSettlePrice();
      } else {
        setYestSettlePrice((Double)value);
      }
      break;

    case YEST_OPEN_INTEREST:
      if (value == null) {
        unsetYestOpenInterest();
      } else {
        setYestOpenInterest((Double)value);
      }
      break;

    case YEST_CLOSE_PRICE:
      if (value == null) {
        unsetYestClosePrice();
      } else {
        setYestClosePrice((Double)value);
      }
      break;

    case OPEN_INTEREST:
      if (value == null) {
        unsetOpenInterest();
      } else {
        setOpenInterest((Double)value);
      }
      break;

    case TOTAL_VOLUME:
      if (value == null) {
        unsetTotalVolume();
      } else {
        setTotalVolume((Integer)value);
      }
      break;

    case TURNOVER:
      if (value == null) {
        unsetTurnover();
      } else {
        setTurnover((Double)value);
      }
      break;

    case UPPER_LIMIT_PRICE:
      if (value == null) {
        unsetUpperLimitPrice();
      } else {
        setUpperLimitPrice((Double)value);
      }
      break;

    case LOWER_LIMIT_PRICE:
      if (value == null) {
        unsetLowerLimitPrice();
      } else {
        setLowerLimitPrice((Double)value);
      }
      break;

    case TRADING_STATUS:
      if (value == null) {
        unsetTradingStatus();
      } else {
        setTradingStatus((Integer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case UNIQUE_KEY:
      if (value == null) {
        unsetUniqueKey();
      } else {
        setUniqueKey((String)value);
      }
      break;

    case AVERAGE_PRICE:
      if (value == null) {
        unsetAveragePrice();
      } else {
        setAveragePrice((Double)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTRACT:
      return getContract();

    case ASK_PRICE_LIST:
      return getAskPriceList();

    case ASK_VOLUME_LIST:
      return getAskVolumeList();

    case BID_PRICE_LIST:
      return getBidPriceList();

    case BID_VOLUME_LIST:
      return getBidVolumeList();

    case LAST_PRICE:
      return Double.valueOf(getLastPrice());

    case LAST_VOLUME:
      return Integer.valueOf(getLastVolume());

    case OPEN:
      return Double.valueOf(getOpen());

    case HIGH:
      return Double.valueOf(getHigh());

    case LOW:
      return Double.valueOf(getLow());

    case CLOSE:
      return Double.valueOf(getClose());

    case YEST_SETTLE_PRICE:
      return Double.valueOf(getYestSettlePrice());

    case YEST_OPEN_INTEREST:
      return Double.valueOf(getYestOpenInterest());

    case YEST_CLOSE_PRICE:
      return Double.valueOf(getYestClosePrice());

    case OPEN_INTEREST:
      return Double.valueOf(getOpenInterest());

    case TOTAL_VOLUME:
      return Integer.valueOf(getTotalVolume());

    case TURNOVER:
      return Double.valueOf(getTurnover());

    case UPPER_LIMIT_PRICE:
      return Double.valueOf(getUpperLimitPrice());

    case LOWER_LIMIT_PRICE:
      return Double.valueOf(getLowerLimitPrice());

    case TRADING_STATUS:
      return Integer.valueOf(getTradingStatus());

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case UNIQUE_KEY:
      return getUniqueKey();

    case AVERAGE_PRICE:
      return Double.valueOf(getAveragePrice());

    case SLED_CONTRACT_ID:
      return Integer.valueOf(getSledContractId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTRACT:
      return isSetContract();
    case ASK_PRICE_LIST:
      return isSetAskPriceList();
    case ASK_VOLUME_LIST:
      return isSetAskVolumeList();
    case BID_PRICE_LIST:
      return isSetBidPriceList();
    case BID_VOLUME_LIST:
      return isSetBidVolumeList();
    case LAST_PRICE:
      return isSetLastPrice();
    case LAST_VOLUME:
      return isSetLastVolume();
    case OPEN:
      return isSetOpen();
    case HIGH:
      return isSetHigh();
    case LOW:
      return isSetLow();
    case CLOSE:
      return isSetClose();
    case YEST_SETTLE_PRICE:
      return isSetYestSettlePrice();
    case YEST_OPEN_INTEREST:
      return isSetYestOpenInterest();
    case YEST_CLOSE_PRICE:
      return isSetYestClosePrice();
    case OPEN_INTEREST:
      return isSetOpenInterest();
    case TOTAL_VOLUME:
      return isSetTotalVolume();
    case TURNOVER:
      return isSetTurnover();
    case UPPER_LIMIT_PRICE:
      return isSetUpperLimitPrice();
    case LOWER_LIMIT_PRICE:
      return isSetLowerLimitPrice();
    case TRADING_STATUS:
      return isSetTradingStatus();
    case TIMESTAMP:
      return isSetTimestamp();
    case UNIQUE_KEY:
      return isSetUniqueKey();
    case AVERAGE_PRICE:
      return isSetAveragePrice();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MarketDataField)
      return this.equals((MarketDataField)that);
    return false;
  }

  public boolean equals(MarketDataField that) {
    if (that == null)
      return false;

    boolean this_present_contract = true && this.isSetContract();
    boolean that_present_contract = true && that.isSetContract();
    if (this_present_contract || that_present_contract) {
      if (!(this_present_contract && that_present_contract))
        return false;
      if (!this.contract.equals(that.contract))
        return false;
    }

    boolean this_present_askPriceList = true && this.isSetAskPriceList();
    boolean that_present_askPriceList = true && that.isSetAskPriceList();
    if (this_present_askPriceList || that_present_askPriceList) {
      if (!(this_present_askPriceList && that_present_askPriceList))
        return false;
      if (!this.askPriceList.equals(that.askPriceList))
        return false;
    }

    boolean this_present_askVolumeList = true && this.isSetAskVolumeList();
    boolean that_present_askVolumeList = true && that.isSetAskVolumeList();
    if (this_present_askVolumeList || that_present_askVolumeList) {
      if (!(this_present_askVolumeList && that_present_askVolumeList))
        return false;
      if (!this.askVolumeList.equals(that.askVolumeList))
        return false;
    }

    boolean this_present_bidPriceList = true && this.isSetBidPriceList();
    boolean that_present_bidPriceList = true && that.isSetBidPriceList();
    if (this_present_bidPriceList || that_present_bidPriceList) {
      if (!(this_present_bidPriceList && that_present_bidPriceList))
        return false;
      if (!this.bidPriceList.equals(that.bidPriceList))
        return false;
    }

    boolean this_present_bidVolumeList = true && this.isSetBidVolumeList();
    boolean that_present_bidVolumeList = true && that.isSetBidVolumeList();
    if (this_present_bidVolumeList || that_present_bidVolumeList) {
      if (!(this_present_bidVolumeList && that_present_bidVolumeList))
        return false;
      if (!this.bidVolumeList.equals(that.bidVolumeList))
        return false;
    }

    boolean this_present_lastPrice = true && this.isSetLastPrice();
    boolean that_present_lastPrice = true && that.isSetLastPrice();
    if (this_present_lastPrice || that_present_lastPrice) {
      if (!(this_present_lastPrice && that_present_lastPrice))
        return false;
      if (this.lastPrice != that.lastPrice)
        return false;
    }

    boolean this_present_lastVolume = true && this.isSetLastVolume();
    boolean that_present_lastVolume = true && that.isSetLastVolume();
    if (this_present_lastVolume || that_present_lastVolume) {
      if (!(this_present_lastVolume && that_present_lastVolume))
        return false;
      if (this.lastVolume != that.lastVolume)
        return false;
    }

    boolean this_present_open = true && this.isSetOpen();
    boolean that_present_open = true && that.isSetOpen();
    if (this_present_open || that_present_open) {
      if (!(this_present_open && that_present_open))
        return false;
      if (this.open != that.open)
        return false;
    }

    boolean this_present_high = true && this.isSetHigh();
    boolean that_present_high = true && that.isSetHigh();
    if (this_present_high || that_present_high) {
      if (!(this_present_high && that_present_high))
        return false;
      if (this.high != that.high)
        return false;
    }

    boolean this_present_low = true && this.isSetLow();
    boolean that_present_low = true && that.isSetLow();
    if (this_present_low || that_present_low) {
      if (!(this_present_low && that_present_low))
        return false;
      if (this.low != that.low)
        return false;
    }

    boolean this_present_close = true && this.isSetClose();
    boolean that_present_close = true && that.isSetClose();
    if (this_present_close || that_present_close) {
      if (!(this_present_close && that_present_close))
        return false;
      if (this.close != that.close)
        return false;
    }

    boolean this_present_yestSettlePrice = true && this.isSetYestSettlePrice();
    boolean that_present_yestSettlePrice = true && that.isSetYestSettlePrice();
    if (this_present_yestSettlePrice || that_present_yestSettlePrice) {
      if (!(this_present_yestSettlePrice && that_present_yestSettlePrice))
        return false;
      if (this.yestSettlePrice != that.yestSettlePrice)
        return false;
    }

    boolean this_present_yestOpenInterest = true && this.isSetYestOpenInterest();
    boolean that_present_yestOpenInterest = true && that.isSetYestOpenInterest();
    if (this_present_yestOpenInterest || that_present_yestOpenInterest) {
      if (!(this_present_yestOpenInterest && that_present_yestOpenInterest))
        return false;
      if (this.yestOpenInterest != that.yestOpenInterest)
        return false;
    }

    boolean this_present_yestClosePrice = true && this.isSetYestClosePrice();
    boolean that_present_yestClosePrice = true && that.isSetYestClosePrice();
    if (this_present_yestClosePrice || that_present_yestClosePrice) {
      if (!(this_present_yestClosePrice && that_present_yestClosePrice))
        return false;
      if (this.yestClosePrice != that.yestClosePrice)
        return false;
    }

    boolean this_present_openInterest = true && this.isSetOpenInterest();
    boolean that_present_openInterest = true && that.isSetOpenInterest();
    if (this_present_openInterest || that_present_openInterest) {
      if (!(this_present_openInterest && that_present_openInterest))
        return false;
      if (this.openInterest != that.openInterest)
        return false;
    }

    boolean this_present_totalVolume = true && this.isSetTotalVolume();
    boolean that_present_totalVolume = true && that.isSetTotalVolume();
    if (this_present_totalVolume || that_present_totalVolume) {
      if (!(this_present_totalVolume && that_present_totalVolume))
        return false;
      if (this.totalVolume != that.totalVolume)
        return false;
    }

    boolean this_present_turnover = true && this.isSetTurnover();
    boolean that_present_turnover = true && that.isSetTurnover();
    if (this_present_turnover || that_present_turnover) {
      if (!(this_present_turnover && that_present_turnover))
        return false;
      if (this.turnover != that.turnover)
        return false;
    }

    boolean this_present_upperLimitPrice = true && this.isSetUpperLimitPrice();
    boolean that_present_upperLimitPrice = true && that.isSetUpperLimitPrice();
    if (this_present_upperLimitPrice || that_present_upperLimitPrice) {
      if (!(this_present_upperLimitPrice && that_present_upperLimitPrice))
        return false;
      if (this.upperLimitPrice != that.upperLimitPrice)
        return false;
    }

    boolean this_present_lowerLimitPrice = true && this.isSetLowerLimitPrice();
    boolean that_present_lowerLimitPrice = true && that.isSetLowerLimitPrice();
    if (this_present_lowerLimitPrice || that_present_lowerLimitPrice) {
      if (!(this_present_lowerLimitPrice && that_present_lowerLimitPrice))
        return false;
      if (this.lowerLimitPrice != that.lowerLimitPrice)
        return false;
    }

    boolean this_present_tradingStatus = true && this.isSetTradingStatus();
    boolean that_present_tradingStatus = true && that.isSetTradingStatus();
    if (this_present_tradingStatus || that_present_tradingStatus) {
      if (!(this_present_tradingStatus && that_present_tradingStatus))
        return false;
      if (this.tradingStatus != that.tradingStatus)
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_uniqueKey = true && this.isSetUniqueKey();
    boolean that_present_uniqueKey = true && that.isSetUniqueKey();
    if (this_present_uniqueKey || that_present_uniqueKey) {
      if (!(this_present_uniqueKey && that_present_uniqueKey))
        return false;
      if (!this.uniqueKey.equals(that.uniqueKey))
        return false;
    }

    boolean this_present_averagePrice = true && this.isSetAveragePrice();
    boolean that_present_averagePrice = true && that.isSetAveragePrice();
    if (this_present_averagePrice || that_present_averagePrice) {
      if (!(this_present_averagePrice && that_present_averagePrice))
        return false;
      if (this.averagePrice != that.averagePrice)
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MarketDataField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContract()).compareTo(other.isSetContract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contract, other.contract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskPriceList()).compareTo(other.isSetAskPriceList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskPriceList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askPriceList, other.askPriceList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskVolumeList()).compareTo(other.isSetAskVolumeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskVolumeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askVolumeList, other.askVolumeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidPriceList()).compareTo(other.isSetBidPriceList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidPriceList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidPriceList, other.bidPriceList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidVolumeList()).compareTo(other.isSetBidVolumeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidVolumeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidVolumeList, other.bidVolumeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPrice()).compareTo(other.isSetLastPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPrice, other.lastPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastVolume()).compareTo(other.isSetLastVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastVolume, other.lastVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpen()).compareTo(other.isSetOpen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.open, other.open);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHigh()).compareTo(other.isSetHigh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHigh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.high, other.high);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLow()).compareTo(other.isSetLow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.low, other.low);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClose()).compareTo(other.isSetClose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.close, other.close);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYestSettlePrice()).compareTo(other.isSetYestSettlePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYestSettlePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yestSettlePrice, other.yestSettlePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYestOpenInterest()).compareTo(other.isSetYestOpenInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYestOpenInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yestOpenInterest, other.yestOpenInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYestClosePrice()).compareTo(other.isSetYestClosePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYestClosePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yestClosePrice, other.yestClosePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenInterest()).compareTo(other.isSetOpenInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openInterest, other.openInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalVolume()).compareTo(other.isSetTotalVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalVolume, other.totalVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnover()).compareTo(other.isSetTurnover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnover, other.turnover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpperLimitPrice()).compareTo(other.isSetUpperLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpperLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upperLimitPrice, other.upperLimitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLowerLimitPrice()).compareTo(other.isSetLowerLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLowerLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lowerLimitPrice, other.lowerLimitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingStatus()).compareTo(other.isSetTradingStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingStatus, other.tradingStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUniqueKey()).compareTo(other.isSetUniqueKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUniqueKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniqueKey, other.uniqueKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAveragePrice()).compareTo(other.isSetAveragePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAveragePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averagePrice, other.averagePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MarketDataField(");
    boolean first = true;

    if (isSetContract()) {
      sb.append("contract:");
      if (this.contract == null) {
        sb.append("null");
      } else {
        sb.append(this.contract);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("askPriceList:");
    if (this.askPriceList == null) {
      sb.append("null");
    } else {
      sb.append(this.askPriceList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("askVolumeList:");
    if (this.askVolumeList == null) {
      sb.append("null");
    } else {
      sb.append(this.askVolumeList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidPriceList:");
    if (this.bidPriceList == null) {
      sb.append("null");
    } else {
      sb.append(this.bidPriceList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bidVolumeList:");
    if (this.bidVolumeList == null) {
      sb.append("null");
    } else {
      sb.append(this.bidVolumeList);
    }
    first = false;
    if (isSetLastPrice()) {
      if (!first) sb.append(", ");
      sb.append("lastPrice:");
      sb.append(this.lastPrice);
      first = false;
    }
    if (isSetLastVolume()) {
      if (!first) sb.append(", ");
      sb.append("lastVolume:");
      sb.append(this.lastVolume);
      first = false;
    }
    if (isSetOpen()) {
      if (!first) sb.append(", ");
      sb.append("open:");
      sb.append(this.open);
      first = false;
    }
    if (isSetHigh()) {
      if (!first) sb.append(", ");
      sb.append("high:");
      sb.append(this.high);
      first = false;
    }
    if (isSetLow()) {
      if (!first) sb.append(", ");
      sb.append("low:");
      sb.append(this.low);
      first = false;
    }
    if (isSetClose()) {
      if (!first) sb.append(", ");
      sb.append("close:");
      sb.append(this.close);
      first = false;
    }
    if (isSetYestSettlePrice()) {
      if (!first) sb.append(", ");
      sb.append("yestSettlePrice:");
      sb.append(this.yestSettlePrice);
      first = false;
    }
    if (isSetYestOpenInterest()) {
      if (!first) sb.append(", ");
      sb.append("yestOpenInterest:");
      sb.append(this.yestOpenInterest);
      first = false;
    }
    if (isSetYestClosePrice()) {
      if (!first) sb.append(", ");
      sb.append("yestClosePrice:");
      sb.append(this.yestClosePrice);
      first = false;
    }
    if (isSetOpenInterest()) {
      if (!first) sb.append(", ");
      sb.append("openInterest:");
      sb.append(this.openInterest);
      first = false;
    }
    if (isSetTotalVolume()) {
      if (!first) sb.append(", ");
      sb.append("totalVolume:");
      sb.append(this.totalVolume);
      first = false;
    }
    if (isSetTurnover()) {
      if (!first) sb.append(", ");
      sb.append("turnover:");
      sb.append(this.turnover);
      first = false;
    }
    if (isSetUpperLimitPrice()) {
      if (!first) sb.append(", ");
      sb.append("upperLimitPrice:");
      sb.append(this.upperLimitPrice);
      first = false;
    }
    if (isSetLowerLimitPrice()) {
      if (!first) sb.append(", ");
      sb.append("lowerLimitPrice:");
      sb.append(this.lowerLimitPrice);
      first = false;
    }
    if (isSetTradingStatus()) {
      if (!first) sb.append(", ");
      sb.append("tradingStatus:");
      sb.append(this.tradingStatus);
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetUniqueKey()) {
      if (!first) sb.append(", ");
      sb.append("uniqueKey:");
      if (this.uniqueKey == null) {
        sb.append("null");
      } else {
        sb.append(this.uniqueKey);
      }
      first = false;
    }
    if (isSetAveragePrice()) {
      if (!first) sb.append(", ");
      sb.append("averagePrice:");
      sb.append(this.averagePrice);
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (askPriceList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'askPriceList' was not present! Struct: " + toString());
    }
    if (askVolumeList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'askVolumeList' was not present! Struct: " + toString());
    }
    if (bidPriceList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bidPriceList' was not present! Struct: " + toString());
    }
    if (bidVolumeList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bidVolumeList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (contract != null) {
      contract.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MarketDataFieldStandardSchemeFactory implements SchemeFactory {
    public MarketDataFieldStandardScheme getScheme() {
      return new MarketDataFieldStandardScheme();
    }
  }

  private static class MarketDataFieldStandardScheme extends StandardScheme<MarketDataField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MarketDataField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contract = new Contract();
              struct.contract.read(iprot);
              struct.setContractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ASK_PRICE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.askPriceList = new ArrayList<Double>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  double _elem34;
                  _elem34 = iprot.readDouble();
                  struct.askPriceList.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setAskPriceListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ASK_VOLUME_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.askVolumeList = new ArrayList<Integer>(_list35.size);
                for (int _i36 = 0; _i36 < _list35.size; ++_i36)
                {
                  int _elem37;
                  _elem37 = iprot.readI32();
                  struct.askVolumeList.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setAskVolumeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BID_PRICE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.bidPriceList = new ArrayList<Double>(_list38.size);
                for (int _i39 = 0; _i39 < _list38.size; ++_i39)
                {
                  double _elem40;
                  _elem40 = iprot.readDouble();
                  struct.bidPriceList.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setBidPriceListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BID_VOLUME_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                struct.bidVolumeList = new ArrayList<Integer>(_list41.size);
                for (int _i42 = 0; _i42 < _list41.size; ++_i42)
                {
                  int _elem43;
                  _elem43 = iprot.readI32();
                  struct.bidVolumeList.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setBidVolumeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lastPrice = iprot.readDouble();
              struct.setLastPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastVolume = iprot.readI32();
              struct.setLastVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.open = iprot.readDouble();
              struct.setOpenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HIGH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.high = iprot.readDouble();
              struct.setHighIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.low = iprot.readDouble();
              struct.setLowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CLOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.close = iprot.readDouble();
              struct.setCloseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // YEST_SETTLE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yestSettlePrice = iprot.readDouble();
              struct.setYestSettlePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // YEST_OPEN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yestOpenInterest = iprot.readDouble();
              struct.setYestOpenInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // YEST_CLOSE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yestClosePrice = iprot.readDouble();
              struct.setYestClosePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OPEN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openInterest = iprot.readDouble();
              struct.setOpenInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TOTAL_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalVolume = iprot.readI32();
              struct.setTotalVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TURNOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.turnover = iprot.readDouble();
              struct.setTurnoverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // UPPER_LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.upperLimitPrice = iprot.readDouble();
              struct.setUpperLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LOWER_LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lowerLimitPrice = iprot.readDouble();
              struct.setLowerLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TRADING_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradingStatus = iprot.readI32();
              struct.setTradingStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // UNIQUE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uniqueKey = iprot.readString();
              struct.setUniqueKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // AVERAGE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.averagePrice = iprot.readDouble();
              struct.setAveragePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledContractId = iprot.readI32();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MarketDataField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contract != null) {
        if (struct.isSetContract()) {
          oprot.writeFieldBegin(CONTRACT_FIELD_DESC);
          struct.contract.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.askPriceList != null) {
        oprot.writeFieldBegin(ASK_PRICE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.askPriceList.size()));
          for (double _iter44 : struct.askPriceList)
          {
            oprot.writeDouble(_iter44);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.askVolumeList != null) {
        oprot.writeFieldBegin(ASK_VOLUME_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.askVolumeList.size()));
          for (int _iter45 : struct.askVolumeList)
          {
            oprot.writeI32(_iter45);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.bidPriceList != null) {
        oprot.writeFieldBegin(BID_PRICE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.bidPriceList.size()));
          for (double _iter46 : struct.bidPriceList)
          {
            oprot.writeDouble(_iter46);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.bidVolumeList != null) {
        oprot.writeFieldBegin(BID_VOLUME_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.bidVolumeList.size()));
          for (int _iter47 : struct.bidVolumeList)
          {
            oprot.writeI32(_iter47);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastPrice()) {
        oprot.writeFieldBegin(LAST_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.lastPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastVolume()) {
        oprot.writeFieldBegin(LAST_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.lastVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOpen()) {
        oprot.writeFieldBegin(OPEN_FIELD_DESC);
        oprot.writeDouble(struct.open);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHigh()) {
        oprot.writeFieldBegin(HIGH_FIELD_DESC);
        oprot.writeDouble(struct.high);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLow()) {
        oprot.writeFieldBegin(LOW_FIELD_DESC);
        oprot.writeDouble(struct.low);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClose()) {
        oprot.writeFieldBegin(CLOSE_FIELD_DESC);
        oprot.writeDouble(struct.close);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYestSettlePrice()) {
        oprot.writeFieldBegin(YEST_SETTLE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.yestSettlePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYestOpenInterest()) {
        oprot.writeFieldBegin(YEST_OPEN_INTEREST_FIELD_DESC);
        oprot.writeDouble(struct.yestOpenInterest);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYestClosePrice()) {
        oprot.writeFieldBegin(YEST_CLOSE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.yestClosePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOpenInterest()) {
        oprot.writeFieldBegin(OPEN_INTEREST_FIELD_DESC);
        oprot.writeDouble(struct.openInterest);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalVolume()) {
        oprot.writeFieldBegin(TOTAL_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.totalVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTurnover()) {
        oprot.writeFieldBegin(TURNOVER_FIELD_DESC);
        oprot.writeDouble(struct.turnover);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpperLimitPrice()) {
        oprot.writeFieldBegin(UPPER_LIMIT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.upperLimitPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLowerLimitPrice()) {
        oprot.writeFieldBegin(LOWER_LIMIT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.lowerLimitPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradingStatus()) {
        oprot.writeFieldBegin(TRADING_STATUS_FIELD_DESC);
        oprot.writeI32(struct.tradingStatus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.uniqueKey != null) {
        if (struct.isSetUniqueKey()) {
          oprot.writeFieldBegin(UNIQUE_KEY_FIELD_DESC);
          oprot.writeString(struct.uniqueKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAveragePrice()) {
        oprot.writeFieldBegin(AVERAGE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.averagePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MarketDataFieldTupleSchemeFactory implements SchemeFactory {
    public MarketDataFieldTupleScheme getScheme() {
      return new MarketDataFieldTupleScheme();
    }
  }

  private static class MarketDataFieldTupleScheme extends TupleScheme<MarketDataField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MarketDataField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.askPriceList.size());
        for (double _iter48 : struct.askPriceList)
        {
          oprot.writeDouble(_iter48);
        }
      }
      {
        oprot.writeI32(struct.askVolumeList.size());
        for (int _iter49 : struct.askVolumeList)
        {
          oprot.writeI32(_iter49);
        }
      }
      {
        oprot.writeI32(struct.bidPriceList.size());
        for (double _iter50 : struct.bidPriceList)
        {
          oprot.writeDouble(_iter50);
        }
      }
      {
        oprot.writeI32(struct.bidVolumeList.size());
        for (int _iter51 : struct.bidVolumeList)
        {
          oprot.writeI32(_iter51);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetContract()) {
        optionals.set(0);
      }
      if (struct.isSetLastPrice()) {
        optionals.set(1);
      }
      if (struct.isSetLastVolume()) {
        optionals.set(2);
      }
      if (struct.isSetOpen()) {
        optionals.set(3);
      }
      if (struct.isSetHigh()) {
        optionals.set(4);
      }
      if (struct.isSetLow()) {
        optionals.set(5);
      }
      if (struct.isSetClose()) {
        optionals.set(6);
      }
      if (struct.isSetYestSettlePrice()) {
        optionals.set(7);
      }
      if (struct.isSetYestOpenInterest()) {
        optionals.set(8);
      }
      if (struct.isSetYestClosePrice()) {
        optionals.set(9);
      }
      if (struct.isSetOpenInterest()) {
        optionals.set(10);
      }
      if (struct.isSetTotalVolume()) {
        optionals.set(11);
      }
      if (struct.isSetTurnover()) {
        optionals.set(12);
      }
      if (struct.isSetUpperLimitPrice()) {
        optionals.set(13);
      }
      if (struct.isSetLowerLimitPrice()) {
        optionals.set(14);
      }
      if (struct.isSetTradingStatus()) {
        optionals.set(15);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(16);
      }
      if (struct.isSetUniqueKey()) {
        optionals.set(17);
      }
      if (struct.isSetAveragePrice()) {
        optionals.set(18);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetContract()) {
        struct.contract.write(oprot);
      }
      if (struct.isSetLastPrice()) {
        oprot.writeDouble(struct.lastPrice);
      }
      if (struct.isSetLastVolume()) {
        oprot.writeI32(struct.lastVolume);
      }
      if (struct.isSetOpen()) {
        oprot.writeDouble(struct.open);
      }
      if (struct.isSetHigh()) {
        oprot.writeDouble(struct.high);
      }
      if (struct.isSetLow()) {
        oprot.writeDouble(struct.low);
      }
      if (struct.isSetClose()) {
        oprot.writeDouble(struct.close);
      }
      if (struct.isSetYestSettlePrice()) {
        oprot.writeDouble(struct.yestSettlePrice);
      }
      if (struct.isSetYestOpenInterest()) {
        oprot.writeDouble(struct.yestOpenInterest);
      }
      if (struct.isSetYestClosePrice()) {
        oprot.writeDouble(struct.yestClosePrice);
      }
      if (struct.isSetOpenInterest()) {
        oprot.writeDouble(struct.openInterest);
      }
      if (struct.isSetTotalVolume()) {
        oprot.writeI32(struct.totalVolume);
      }
      if (struct.isSetTurnover()) {
        oprot.writeDouble(struct.turnover);
      }
      if (struct.isSetUpperLimitPrice()) {
        oprot.writeDouble(struct.upperLimitPrice);
      }
      if (struct.isSetLowerLimitPrice()) {
        oprot.writeDouble(struct.lowerLimitPrice);
      }
      if (struct.isSetTradingStatus()) {
        oprot.writeI32(struct.tradingStatus);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetUniqueKey()) {
        oprot.writeString(struct.uniqueKey);
      }
      if (struct.isSetAveragePrice()) {
        oprot.writeDouble(struct.averagePrice);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI32(struct.sledContractId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MarketDataField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.askPriceList = new ArrayList<Double>(_list52.size);
        for (int _i53 = 0; _i53 < _list52.size; ++_i53)
        {
          double _elem54;
          _elem54 = iprot.readDouble();
          struct.askPriceList.add(_elem54);
        }
      }
      struct.setAskPriceListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.askVolumeList = new ArrayList<Integer>(_list55.size);
        for (int _i56 = 0; _i56 < _list55.size; ++_i56)
        {
          int _elem57;
          _elem57 = iprot.readI32();
          struct.askVolumeList.add(_elem57);
        }
      }
      struct.setAskVolumeListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.bidPriceList = new ArrayList<Double>(_list58.size);
        for (int _i59 = 0; _i59 < _list58.size; ++_i59)
        {
          double _elem60;
          _elem60 = iprot.readDouble();
          struct.bidPriceList.add(_elem60);
        }
      }
      struct.setBidPriceListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.bidVolumeList = new ArrayList<Integer>(_list61.size);
        for (int _i62 = 0; _i62 < _list61.size; ++_i62)
        {
          int _elem63;
          _elem63 = iprot.readI32();
          struct.bidVolumeList.add(_elem63);
        }
      }
      struct.setBidVolumeListIsSet(true);
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.contract = new Contract();
        struct.contract.read(iprot);
        struct.setContractIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lastPrice = iprot.readDouble();
        struct.setLastPriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastVolume = iprot.readI32();
        struct.setLastVolumeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.open = iprot.readDouble();
        struct.setOpenIsSet(true);
      }
      if (incoming.get(4)) {
        struct.high = iprot.readDouble();
        struct.setHighIsSet(true);
      }
      if (incoming.get(5)) {
        struct.low = iprot.readDouble();
        struct.setLowIsSet(true);
      }
      if (incoming.get(6)) {
        struct.close = iprot.readDouble();
        struct.setCloseIsSet(true);
      }
      if (incoming.get(7)) {
        struct.yestSettlePrice = iprot.readDouble();
        struct.setYestSettlePriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.yestOpenInterest = iprot.readDouble();
        struct.setYestOpenInterestIsSet(true);
      }
      if (incoming.get(9)) {
        struct.yestClosePrice = iprot.readDouble();
        struct.setYestClosePriceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.openInterest = iprot.readDouble();
        struct.setOpenInterestIsSet(true);
      }
      if (incoming.get(11)) {
        struct.totalVolume = iprot.readI32();
        struct.setTotalVolumeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.turnover = iprot.readDouble();
        struct.setTurnoverIsSet(true);
      }
      if (incoming.get(13)) {
        struct.upperLimitPrice = iprot.readDouble();
        struct.setUpperLimitPriceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.lowerLimitPrice = iprot.readDouble();
        struct.setLowerLimitPriceIsSet(true);
      }
      if (incoming.get(15)) {
        struct.tradingStatus = iprot.readI32();
        struct.setTradingStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(17)) {
        struct.uniqueKey = iprot.readString();
        struct.setUniqueKeyIsSet(true);
      }
      if (incoming.get(18)) {
        struct.averagePrice = iprot.readDouble();
        struct.setAveragePriceIsSet(true);
      }
      if (incoming.get(19)) {
        struct.sledContractId = iprot.readI32();
        struct.setSledContractIdIsSet(true);
      }
    }
  }

}

