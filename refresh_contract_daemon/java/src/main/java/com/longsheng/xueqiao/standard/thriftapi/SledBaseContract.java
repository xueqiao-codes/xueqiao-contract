/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.standard.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SledBaseContract implements org.apache.thrift.TBase<SledBaseContract, SledBaseContract._Fields>, java.io.Serializable, Cloneable, Comparable<SledBaseContract> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SledBaseContract");

  private static final org.apache.thrift.protocol.TField SLED_BASE_COMMODITY_FIELD_DESC = new org.apache.thrift.protocol.TField("sledBaseCommodity", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CALL_PUT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("callPutFlag", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STRIKE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("strikePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SledBaseContractStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SledBaseContractTupleSchemeFactory());
  }

  public SledBaseCommodity sledBaseCommodity; // optional
  public String sledContractCode; // optional
  /**
   * 
   * @see CallPutFlag
   */
  public CallPutFlag callPutFlag; // optional
  public double strikePrice; // optional
  public int sledContractId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_BASE_COMMODITY((short)1, "sledBaseCommodity"),
    SLED_CONTRACT_CODE((short)2, "sledContractCode"),
    /**
     * 
     * @see CallPutFlag
     */
    CALL_PUT_FLAG((short)3, "callPutFlag"),
    STRIKE_PRICE((short)4, "strikePrice"),
    SLED_CONTRACT_ID((short)5, "sledContractId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_BASE_COMMODITY
          return SLED_BASE_COMMODITY;
        case 2: // SLED_CONTRACT_CODE
          return SLED_CONTRACT_CODE;
        case 3: // CALL_PUT_FLAG
          return CALL_PUT_FLAG;
        case 4: // STRIKE_PRICE
          return STRIKE_PRICE;
        case 5: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STRIKEPRICE_ISSET_ID = 0;
  private static final int __SLEDCONTRACTID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_BASE_COMMODITY,_Fields.SLED_CONTRACT_CODE,_Fields.CALL_PUT_FLAG,_Fields.STRIKE_PRICE,_Fields.SLED_CONTRACT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_BASE_COMMODITY, new org.apache.thrift.meta_data.FieldMetaData("sledBaseCommodity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SledBaseCommodity.class)));
    tmpMap.put(_Fields.SLED_CONTRACT_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledContractCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALL_PUT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("callPutFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CallPutFlag.class)));
    tmpMap.put(_Fields.STRIKE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("strikePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SledBaseContract.class, metaDataMap);
  }

  public SledBaseContract() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SledBaseContract(SledBaseContract other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSledBaseCommodity()) {
      this.sledBaseCommodity = new SledBaseCommodity(other.sledBaseCommodity);
    }
    if (other.isSetSledContractCode()) {
      this.sledContractCode = other.sledContractCode;
    }
    if (other.isSetCallPutFlag()) {
      this.callPutFlag = other.callPutFlag;
    }
    this.strikePrice = other.strikePrice;
    this.sledContractId = other.sledContractId;
  }

  public SledBaseContract deepCopy() {
    return new SledBaseContract(this);
  }

  @Override
  public void clear() {
    this.sledBaseCommodity = null;
    this.sledContractCode = null;
    this.callPutFlag = null;
    setStrikePriceIsSet(false);
    this.strikePrice = 0.0;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
  }

  public SledBaseCommodity getSledBaseCommodity() {
    return this.sledBaseCommodity;
  }

  public SledBaseContract setSledBaseCommodity(SledBaseCommodity sledBaseCommodity) {
    this.sledBaseCommodity = sledBaseCommodity;
    return this;
  }

  public void unsetSledBaseCommodity() {
    this.sledBaseCommodity = null;
  }

  /** Returns true if field sledBaseCommodity is set (has been assigned a value) and false otherwise */
  public boolean isSetSledBaseCommodity() {
    return this.sledBaseCommodity != null;
  }

  public void setSledBaseCommodityIsSet(boolean value) {
    if (!value) {
      this.sledBaseCommodity = null;
    }
  }

  public String getSledContractCode() {
    return this.sledContractCode;
  }

  public SledBaseContract setSledContractCode(String sledContractCode) {
    this.sledContractCode = sledContractCode;
    return this;
  }

  public void unsetSledContractCode() {
    this.sledContractCode = null;
  }

  /** Returns true if field sledContractCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractCode() {
    return this.sledContractCode != null;
  }

  public void setSledContractCodeIsSet(boolean value) {
    if (!value) {
      this.sledContractCode = null;
    }
  }

  /**
   * 
   * @see CallPutFlag
   */
  public CallPutFlag getCallPutFlag() {
    return this.callPutFlag;
  }

  /**
   * 
   * @see CallPutFlag
   */
  public SledBaseContract setCallPutFlag(CallPutFlag callPutFlag) {
    this.callPutFlag = callPutFlag;
    return this;
  }

  public void unsetCallPutFlag() {
    this.callPutFlag = null;
  }

  /** Returns true if field callPutFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCallPutFlag() {
    return this.callPutFlag != null;
  }

  public void setCallPutFlagIsSet(boolean value) {
    if (!value) {
      this.callPutFlag = null;
    }
  }

  public double getStrikePrice() {
    return this.strikePrice;
  }

  public SledBaseContract setStrikePrice(double strikePrice) {
    this.strikePrice = strikePrice;
    setStrikePriceIsSet(true);
    return this;
  }

  public void unsetStrikePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRIKEPRICE_ISSET_ID);
  }

  /** Returns true if field strikePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetStrikePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __STRIKEPRICE_ISSET_ID);
  }

  public void setStrikePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRIKEPRICE_ISSET_ID, value);
  }

  public int getSledContractId() {
    return this.sledContractId;
  }

  public SledBaseContract setSledContractId(int sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_BASE_COMMODITY:
      if (value == null) {
        unsetSledBaseCommodity();
      } else {
        setSledBaseCommodity((SledBaseCommodity)value);
      }
      break;

    case SLED_CONTRACT_CODE:
      if (value == null) {
        unsetSledContractCode();
      } else {
        setSledContractCode((String)value);
      }
      break;

    case CALL_PUT_FLAG:
      if (value == null) {
        unsetCallPutFlag();
      } else {
        setCallPutFlag((CallPutFlag)value);
      }
      break;

    case STRIKE_PRICE:
      if (value == null) {
        unsetStrikePrice();
      } else {
        setStrikePrice((Double)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_BASE_COMMODITY:
      return getSledBaseCommodity();

    case SLED_CONTRACT_CODE:
      return getSledContractCode();

    case CALL_PUT_FLAG:
      return getCallPutFlag();

    case STRIKE_PRICE:
      return Double.valueOf(getStrikePrice());

    case SLED_CONTRACT_ID:
      return Integer.valueOf(getSledContractId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_BASE_COMMODITY:
      return isSetSledBaseCommodity();
    case SLED_CONTRACT_CODE:
      return isSetSledContractCode();
    case CALL_PUT_FLAG:
      return isSetCallPutFlag();
    case STRIKE_PRICE:
      return isSetStrikePrice();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SledBaseContract)
      return this.equals((SledBaseContract)that);
    return false;
  }

  public boolean equals(SledBaseContract that) {
    if (that == null)
      return false;

    boolean this_present_sledBaseCommodity = true && this.isSetSledBaseCommodity();
    boolean that_present_sledBaseCommodity = true && that.isSetSledBaseCommodity();
    if (this_present_sledBaseCommodity || that_present_sledBaseCommodity) {
      if (!(this_present_sledBaseCommodity && that_present_sledBaseCommodity))
        return false;
      if (!this.sledBaseCommodity.equals(that.sledBaseCommodity))
        return false;
    }

    boolean this_present_sledContractCode = true && this.isSetSledContractCode();
    boolean that_present_sledContractCode = true && that.isSetSledContractCode();
    if (this_present_sledContractCode || that_present_sledContractCode) {
      if (!(this_present_sledContractCode && that_present_sledContractCode))
        return false;
      if (!this.sledContractCode.equals(that.sledContractCode))
        return false;
    }

    boolean this_present_callPutFlag = true && this.isSetCallPutFlag();
    boolean that_present_callPutFlag = true && that.isSetCallPutFlag();
    if (this_present_callPutFlag || that_present_callPutFlag) {
      if (!(this_present_callPutFlag && that_present_callPutFlag))
        return false;
      if (!this.callPutFlag.equals(that.callPutFlag))
        return false;
    }

    boolean this_present_strikePrice = true && this.isSetStrikePrice();
    boolean that_present_strikePrice = true && that.isSetStrikePrice();
    if (this_present_strikePrice || that_present_strikePrice) {
      if (!(this_present_strikePrice && that_present_strikePrice))
        return false;
      if (this.strikePrice != that.strikePrice)
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SledBaseContract other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledBaseCommodity()).compareTo(other.isSetSledBaseCommodity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledBaseCommodity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledBaseCommodity, other.sledBaseCommodity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractCode()).compareTo(other.isSetSledContractCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractCode, other.sledContractCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallPutFlag()).compareTo(other.isSetCallPutFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallPutFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callPutFlag, other.callPutFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrikePrice()).compareTo(other.isSetStrikePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrikePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strikePrice, other.strikePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SledBaseContract(");
    boolean first = true;

    if (isSetSledBaseCommodity()) {
      sb.append("sledBaseCommodity:");
      if (this.sledBaseCommodity == null) {
        sb.append("null");
      } else {
        sb.append(this.sledBaseCommodity);
      }
      first = false;
    }
    if (isSetSledContractCode()) {
      if (!first) sb.append(", ");
      sb.append("sledContractCode:");
      if (this.sledContractCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledContractCode);
      }
      first = false;
    }
    if (isSetCallPutFlag()) {
      if (!first) sb.append(", ");
      sb.append("callPutFlag:");
      if (this.callPutFlag == null) {
        sb.append("null");
      } else {
        sb.append(this.callPutFlag);
      }
      first = false;
    }
    if (isSetStrikePrice()) {
      if (!first) sb.append(", ");
      sb.append("strikePrice:");
      sb.append(this.strikePrice);
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (sledBaseCommodity != null) {
      sledBaseCommodity.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SledBaseContractStandardSchemeFactory implements SchemeFactory {
    public SledBaseContractStandardScheme getScheme() {
      return new SledBaseContractStandardScheme();
    }
  }

  private static class SledBaseContractStandardScheme extends StandardScheme<SledBaseContract> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SledBaseContract struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_BASE_COMMODITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sledBaseCommodity = new SledBaseCommodity();
              struct.sledBaseCommodity.read(iprot);
              struct.setSledBaseCommodityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_CONTRACT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledContractCode = iprot.readString();
              struct.setSledContractCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CALL_PUT_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.callPutFlag = CallPutFlag.findByValue(iprot.readI32());
              struct.setCallPutFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STRIKE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.strikePrice = iprot.readDouble();
              struct.setStrikePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledContractId = iprot.readI32();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SledBaseContract struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledBaseCommodity != null) {
        if (struct.isSetSledBaseCommodity()) {
          oprot.writeFieldBegin(SLED_BASE_COMMODITY_FIELD_DESC);
          struct.sledBaseCommodity.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledContractCode != null) {
        if (struct.isSetSledContractCode()) {
          oprot.writeFieldBegin(SLED_CONTRACT_CODE_FIELD_DESC);
          oprot.writeString(struct.sledContractCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.callPutFlag != null) {
        if (struct.isSetCallPutFlag()) {
          oprot.writeFieldBegin(CALL_PUT_FLAG_FIELD_DESC);
          oprot.writeI32(struct.callPutFlag.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStrikePrice()) {
        oprot.writeFieldBegin(STRIKE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.strikePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SledBaseContractTupleSchemeFactory implements SchemeFactory {
    public SledBaseContractTupleScheme getScheme() {
      return new SledBaseContractTupleScheme();
    }
  }

  private static class SledBaseContractTupleScheme extends TupleScheme<SledBaseContract> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SledBaseContract struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledBaseCommodity()) {
        optionals.set(0);
      }
      if (struct.isSetSledContractCode()) {
        optionals.set(1);
      }
      if (struct.isSetCallPutFlag()) {
        optionals.set(2);
      }
      if (struct.isSetStrikePrice()) {
        optionals.set(3);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSledBaseCommodity()) {
        struct.sledBaseCommodity.write(oprot);
      }
      if (struct.isSetSledContractCode()) {
        oprot.writeString(struct.sledContractCode);
      }
      if (struct.isSetCallPutFlag()) {
        oprot.writeI32(struct.callPutFlag.getValue());
      }
      if (struct.isSetStrikePrice()) {
        oprot.writeDouble(struct.strikePrice);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI32(struct.sledContractId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SledBaseContract struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.sledBaseCommodity = new SledBaseCommodity();
        struct.sledBaseCommodity.read(iprot);
        struct.setSledBaseCommodityIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledContractCode = iprot.readString();
        struct.setSledContractCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.callPutFlag = CallPutFlag.findByValue(iprot.readI32());
        struct.setCallPutFlagIsSet(true);
      }
      if (incoming.get(3)) {
        struct.strikePrice = iprot.readDouble();
        struct.setStrikePriceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sledContractId = iprot.readI32();
        struct.setSledContractIdIsSet(true);
      }
    }
  }

}

