/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.es_service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EsInputOrderActionField implements org.apache.thrift.TBase<EsInputOrderActionField, EsInputOrderActionField._Fields>, java.io.Serializable, Cloneable, Comparable<EsInputOrderActionField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EsInputOrderActionField");

  private static final org.apache.thrift.protocol.TField SLED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ORDER_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TRIGGER_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField ORDER_VOL_FIELD_DESC = new org.apache.thrift.protocol.TField("orderVol", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EsInputOrderActionFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EsInputOrderActionFieldTupleSchemeFactory());
  }

  public String sledId; // required
  public int sledAccountId; // optional
  public int userId; // optional
  /**
   * 
   * @see EsOrderActionType
   */
  public EsOrderActionType action; // optional
  public double orderPrice; // optional
  public double triggerPrice; // optional
  public int orderVol; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_ID((short)1, "sledId"),
    SLED_ACCOUNT_ID((short)2, "sledAccountId"),
    USER_ID((short)3, "userId"),
    /**
     * 
     * @see EsOrderActionType
     */
    ACTION((short)4, "action"),
    ORDER_PRICE((short)5, "orderPrice"),
    TRIGGER_PRICE((short)6, "triggerPrice"),
    ORDER_VOL((short)7, "orderVol");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_ID
          return SLED_ID;
        case 2: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // ACTION
          return ACTION;
        case 5: // ORDER_PRICE
          return ORDER_PRICE;
        case 6: // TRIGGER_PRICE
          return TRIGGER_PRICE;
        case 7: // ORDER_VOL
          return ORDER_VOL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDACCOUNTID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __ORDERPRICE_ISSET_ID = 2;
  private static final int __TRIGGERPRICE_ISSET_ID = 3;
  private static final int __ORDERVOL_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_ACCOUNT_ID,_Fields.USER_ID,_Fields.ACTION,_Fields.ORDER_PRICE,_Fields.TRIGGER_PRICE,_Fields.ORDER_VOL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_ID, new org.apache.thrift.meta_data.FieldMetaData("sledId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsOrderActionType.class)));
    tmpMap.put(_Fields.ORDER_PRICE, new org.apache.thrift.meta_data.FieldMetaData("orderPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRIGGER_PRICE, new org.apache.thrift.meta_data.FieldMetaData("triggerPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORDER_VOL, new org.apache.thrift.meta_data.FieldMetaData("orderVol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EsInputOrderActionField.class, metaDataMap);
  }

  public EsInputOrderActionField() {
  }

  public EsInputOrderActionField(
    String sledId)
  {
    this();
    this.sledId = sledId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EsInputOrderActionField(EsInputOrderActionField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSledId()) {
      this.sledId = other.sledId;
    }
    this.sledAccountId = other.sledAccountId;
    this.userId = other.userId;
    if (other.isSetAction()) {
      this.action = other.action;
    }
    this.orderPrice = other.orderPrice;
    this.triggerPrice = other.triggerPrice;
    this.orderVol = other.orderVol;
  }

  public EsInputOrderActionField deepCopy() {
    return new EsInputOrderActionField(this);
  }

  @Override
  public void clear() {
    this.sledId = null;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.action = null;
    setOrderPriceIsSet(false);
    this.orderPrice = 0.0;
    setTriggerPriceIsSet(false);
    this.triggerPrice = 0.0;
    setOrderVolIsSet(false);
    this.orderVol = 0;
  }

  public String getSledId() {
    return this.sledId;
  }

  public EsInputOrderActionField setSledId(String sledId) {
    this.sledId = sledId;
    return this;
  }

  public void unsetSledId() {
    this.sledId = null;
  }

  /** Returns true if field sledId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledId() {
    return this.sledId != null;
  }

  public void setSledIdIsSet(boolean value) {
    if (!value) {
      this.sledId = null;
    }
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public EsInputOrderActionField setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public EsInputOrderActionField setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  /**
   * 
   * @see EsOrderActionType
   */
  public EsOrderActionType getAction() {
    return this.action;
  }

  /**
   * 
   * @see EsOrderActionType
   */
  public EsInputOrderActionField setAction(EsOrderActionType action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public double getOrderPrice() {
    return this.orderPrice;
  }

  public EsInputOrderActionField setOrderPrice(double orderPrice) {
    this.orderPrice = orderPrice;
    setOrderPriceIsSet(true);
    return this;
  }

  public void unsetOrderPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERPRICE_ISSET_ID);
  }

  /** Returns true if field orderPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERPRICE_ISSET_ID);
  }

  public void setOrderPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERPRICE_ISSET_ID, value);
  }

  public double getTriggerPrice() {
    return this.triggerPrice;
  }

  public EsInputOrderActionField setTriggerPrice(double triggerPrice) {
    this.triggerPrice = triggerPrice;
    setTriggerPriceIsSet(true);
    return this;
  }

  public void unsetTriggerPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRIGGERPRICE_ISSET_ID);
  }

  /** Returns true if field triggerPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggerPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TRIGGERPRICE_ISSET_ID);
  }

  public void setTriggerPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRIGGERPRICE_ISSET_ID, value);
  }

  public int getOrderVol() {
    return this.orderVol;
  }

  public EsInputOrderActionField setOrderVol(int orderVol) {
    this.orderVol = orderVol;
    setOrderVolIsSet(true);
    return this;
  }

  public void unsetOrderVol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERVOL_ISSET_ID);
  }

  /** Returns true if field orderVol is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderVol() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERVOL_ISSET_ID);
  }

  public void setOrderVolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERVOL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_ID:
      if (value == null) {
        unsetSledId();
      } else {
        setSledId((String)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((EsOrderActionType)value);
      }
      break;

    case ORDER_PRICE:
      if (value == null) {
        unsetOrderPrice();
      } else {
        setOrderPrice((Double)value);
      }
      break;

    case TRIGGER_PRICE:
      if (value == null) {
        unsetTriggerPrice();
      } else {
        setTriggerPrice((Double)value);
      }
      break;

    case ORDER_VOL:
      if (value == null) {
        unsetOrderVol();
      } else {
        setOrderVol((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_ID:
      return getSledId();

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case ACTION:
      return getAction();

    case ORDER_PRICE:
      return Double.valueOf(getOrderPrice());

    case TRIGGER_PRICE:
      return Double.valueOf(getTriggerPrice());

    case ORDER_VOL:
      return Integer.valueOf(getOrderVol());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_ID:
      return isSetSledId();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    case USER_ID:
      return isSetUserId();
    case ACTION:
      return isSetAction();
    case ORDER_PRICE:
      return isSetOrderPrice();
    case TRIGGER_PRICE:
      return isSetTriggerPrice();
    case ORDER_VOL:
      return isSetOrderVol();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EsInputOrderActionField)
      return this.equals((EsInputOrderActionField)that);
    return false;
  }

  public boolean equals(EsInputOrderActionField that) {
    if (that == null)
      return false;

    boolean this_present_sledId = true && this.isSetSledId();
    boolean that_present_sledId = true && that.isSetSledId();
    if (this_present_sledId || that_present_sledId) {
      if (!(this_present_sledId && that_present_sledId))
        return false;
      if (!this.sledId.equals(that.sledId))
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_orderPrice = true && this.isSetOrderPrice();
    boolean that_present_orderPrice = true && that.isSetOrderPrice();
    if (this_present_orderPrice || that_present_orderPrice) {
      if (!(this_present_orderPrice && that_present_orderPrice))
        return false;
      if (this.orderPrice != that.orderPrice)
        return false;
    }

    boolean this_present_triggerPrice = true && this.isSetTriggerPrice();
    boolean that_present_triggerPrice = true && that.isSetTriggerPrice();
    if (this_present_triggerPrice || that_present_triggerPrice) {
      if (!(this_present_triggerPrice && that_present_triggerPrice))
        return false;
      if (this.triggerPrice != that.triggerPrice)
        return false;
    }

    boolean this_present_orderVol = true && this.isSetOrderVol();
    boolean that_present_orderVol = true && that.isSetOrderVol();
    if (this_present_orderVol || that_present_orderVol) {
      if (!(this_present_orderVol && that_present_orderVol))
        return false;
      if (this.orderVol != that.orderVol)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EsInputOrderActionField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledId()).compareTo(other.isSetSledId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledId, other.sledId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderPrice()).compareTo(other.isSetOrderPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderPrice, other.orderPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggerPrice()).compareTo(other.isSetTriggerPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggerPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerPrice, other.triggerPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderVol()).compareTo(other.isSetOrderVol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderVol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderVol, other.orderVol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EsInputOrderActionField(");
    boolean first = true;

    sb.append("sledId:");
    if (this.sledId == null) {
      sb.append("null");
    } else {
      sb.append(this.sledId);
    }
    first = false;
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetAction()) {
      if (!first) sb.append(", ");
      sb.append("action:");
      if (this.action == null) {
        sb.append("null");
      } else {
        sb.append(this.action);
      }
      first = false;
    }
    if (isSetOrderPrice()) {
      if (!first) sb.append(", ");
      sb.append("orderPrice:");
      sb.append(this.orderPrice);
      first = false;
    }
    if (isSetTriggerPrice()) {
      if (!first) sb.append(", ");
      sb.append("triggerPrice:");
      sb.append(this.triggerPrice);
      first = false;
    }
    if (isSetOrderVol()) {
      if (!first) sb.append(", ");
      sb.append("orderVol:");
      sb.append(this.orderVol);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sledId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sledId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EsInputOrderActionFieldStandardSchemeFactory implements SchemeFactory {
    public EsInputOrderActionFieldStandardScheme getScheme() {
      return new EsInputOrderActionFieldStandardScheme();
    }
  }

  private static class EsInputOrderActionFieldStandardScheme extends StandardScheme<EsInputOrderActionField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EsInputOrderActionField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledId = iprot.readString();
              struct.setSledIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.action = EsOrderActionType.findByValue(iprot.readI32());
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDER_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.orderPrice = iprot.readDouble();
              struct.setOrderPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRIGGER_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.triggerPrice = iprot.readDouble();
              struct.setTriggerPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDER_VOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderVol = iprot.readI32();
              struct.setOrderVolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EsInputOrderActionField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledId != null) {
        oprot.writeFieldBegin(SLED_ID_FIELD_DESC);
        oprot.writeString(struct.sledId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.action != null) {
        if (struct.isSetAction()) {
          oprot.writeFieldBegin(ACTION_FIELD_DESC);
          oprot.writeI32(struct.action.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderPrice()) {
        oprot.writeFieldBegin(ORDER_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.orderPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTriggerPrice()) {
        oprot.writeFieldBegin(TRIGGER_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.triggerPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderVol()) {
        oprot.writeFieldBegin(ORDER_VOL_FIELD_DESC);
        oprot.writeI32(struct.orderVol);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EsInputOrderActionFieldTupleSchemeFactory implements SchemeFactory {
    public EsInputOrderActionFieldTupleScheme getScheme() {
      return new EsInputOrderActionFieldTupleScheme();
    }
  }

  private static class EsInputOrderActionFieldTupleScheme extends TupleScheme<EsInputOrderActionField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EsInputOrderActionField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sledId);
      BitSet optionals = new BitSet();
      if (struct.isSetSledAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetAction()) {
        optionals.set(2);
      }
      if (struct.isSetOrderPrice()) {
        optionals.set(3);
      }
      if (struct.isSetTriggerPrice()) {
        optionals.set(4);
      }
      if (struct.isSetOrderVol()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetAction()) {
        oprot.writeI32(struct.action.getValue());
      }
      if (struct.isSetOrderPrice()) {
        oprot.writeDouble(struct.orderPrice);
      }
      if (struct.isSetTriggerPrice()) {
        oprot.writeDouble(struct.triggerPrice);
      }
      if (struct.isSetOrderVol()) {
        oprot.writeI32(struct.orderVol);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EsInputOrderActionField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sledId = iprot.readString();
      struct.setSledIdIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.action = EsOrderActionType.findByValue(iprot.readI32());
        struct.setActionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderPrice = iprot.readDouble();
        struct.setOrderPriceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.triggerPrice = iprot.readDouble();
        struct.setTriggerPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orderVol = iprot.readI32();
        struct.setOrderVolIsSet(true);
      }
    }
  }

}

