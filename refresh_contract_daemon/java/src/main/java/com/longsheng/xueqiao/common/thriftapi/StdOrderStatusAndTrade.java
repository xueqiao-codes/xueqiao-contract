/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.common.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StdOrderStatusAndTrade implements org.apache.thrift.TBase<StdOrderStatusAndTrade, StdOrderStatusAndTrade._Fields>, java.io.Serializable, Cloneable, Comparable<StdOrderStatusAndTrade> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StdOrderStatusAndTrade");

  private static final org.apache.thrift.protocol.TField CONTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("contract", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORDER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("orderTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INSERT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("insertTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField TRADE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeList", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField IS_SELF_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("isSelfTrade", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField SELF_TRADE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("selfTradeInfo", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SERIAL_VERSION_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("serialVersionUID", org.apache.thrift.protocol.TType.I64, (short)101);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StdOrderStatusAndTradeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StdOrderStatusAndTradeTupleSchemeFactory());
  }

  public Contract contract; // optional
  public String sledId; // required
  public String orderTime; // optional
  public long insertTime; // optional
  public StdOrderStatusField status; // optional
  public List<StdTradeField> tradeList; // optional
  public boolean isSelfTrade; // optional
  public String selfTradeInfo; // optional
  public int sledAccountId; // optional
  public int userId; // optional
  public int sledContractId; // optional
  public long serialVersionUID; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTRACT((short)1, "contract"),
    SLED_ID((short)2, "sledId"),
    ORDER_TIME((short)3, "orderTime"),
    INSERT_TIME((short)4, "insertTime"),
    STATUS((short)5, "status"),
    TRADE_LIST((short)10, "tradeList"),
    IS_SELF_TRADE((short)11, "isSelfTrade"),
    SELF_TRADE_INFO((short)12, "selfTradeInfo"),
    SLED_ACCOUNT_ID((short)13, "sledAccountId"),
    USER_ID((short)14, "userId"),
    SLED_CONTRACT_ID((short)15, "sledContractId"),
    SERIAL_VERSION_UID((short)101, "serialVersionUID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTRACT
          return CONTRACT;
        case 2: // SLED_ID
          return SLED_ID;
        case 3: // ORDER_TIME
          return ORDER_TIME;
        case 4: // INSERT_TIME
          return INSERT_TIME;
        case 5: // STATUS
          return STATUS;
        case 10: // TRADE_LIST
          return TRADE_LIST;
        case 11: // IS_SELF_TRADE
          return IS_SELF_TRADE;
        case 12: // SELF_TRADE_INFO
          return SELF_TRADE_INFO;
        case 13: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        case 14: // USER_ID
          return USER_ID;
        case 15: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 101: // SERIAL_VERSION_UID
          return SERIAL_VERSION_UID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INSERTTIME_ISSET_ID = 0;
  private static final int __ISSELFTRADE_ISSET_ID = 1;
  private static final int __SLEDACCOUNTID_ISSET_ID = 2;
  private static final int __USERID_ISSET_ID = 3;
  private static final int __SLEDCONTRACTID_ISSET_ID = 4;
  private static final int __SERIALVERSIONUID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONTRACT,_Fields.ORDER_TIME,_Fields.INSERT_TIME,_Fields.STATUS,_Fields.TRADE_LIST,_Fields.IS_SELF_TRADE,_Fields.SELF_TRADE_INFO,_Fields.SLED_ACCOUNT_ID,_Fields.USER_ID,_Fields.SLED_CONTRACT_ID,_Fields.SERIAL_VERSION_UID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTRACT, new org.apache.thrift.meta_data.FieldMetaData("contract", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Contract.class)));
    tmpMap.put(_Fields.SLED_ID, new org.apache.thrift.meta_data.FieldMetaData("sledId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_TIME, new org.apache.thrift.meta_data.FieldMetaData("orderTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSERT_TIME, new org.apache.thrift.meta_data.FieldMetaData("insertTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StdOrderStatusField.class)));
    tmpMap.put(_Fields.TRADE_LIST, new org.apache.thrift.meta_data.FieldMetaData("tradeList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StdTradeField.class))));
    tmpMap.put(_Fields.IS_SELF_TRADE, new org.apache.thrift.meta_data.FieldMetaData("isSelfTrade", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SELF_TRADE_INFO, new org.apache.thrift.meta_data.FieldMetaData("selfTradeInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERIAL_VERSION_UID, new org.apache.thrift.meta_data.FieldMetaData("serialVersionUID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StdOrderStatusAndTrade.class, metaDataMap);
  }

  public StdOrderStatusAndTrade() {
  }

  public StdOrderStatusAndTrade(
    String sledId)
  {
    this();
    this.sledId = sledId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StdOrderStatusAndTrade(StdOrderStatusAndTrade other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetContract()) {
      this.contract = new Contract(other.contract);
    }
    if (other.isSetSledId()) {
      this.sledId = other.sledId;
    }
    if (other.isSetOrderTime()) {
      this.orderTime = other.orderTime;
    }
    this.insertTime = other.insertTime;
    if (other.isSetStatus()) {
      this.status = new StdOrderStatusField(other.status);
    }
    if (other.isSetTradeList()) {
      List<StdTradeField> __this__tradeList = new ArrayList<StdTradeField>(other.tradeList.size());
      for (StdTradeField other_element : other.tradeList) {
        __this__tradeList.add(new StdTradeField(other_element));
      }
      this.tradeList = __this__tradeList;
    }
    this.isSelfTrade = other.isSelfTrade;
    if (other.isSetSelfTradeInfo()) {
      this.selfTradeInfo = other.selfTradeInfo;
    }
    this.sledAccountId = other.sledAccountId;
    this.userId = other.userId;
    this.sledContractId = other.sledContractId;
    this.serialVersionUID = other.serialVersionUID;
  }

  public StdOrderStatusAndTrade deepCopy() {
    return new StdOrderStatusAndTrade(this);
  }

  @Override
  public void clear() {
    this.contract = null;
    this.sledId = null;
    this.orderTime = null;
    setInsertTimeIsSet(false);
    this.insertTime = 0;
    this.status = null;
    this.tradeList = null;
    setIsSelfTradeIsSet(false);
    this.isSelfTrade = false;
    this.selfTradeInfo = null;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    setSerialVersionUIDIsSet(false);
    this.serialVersionUID = 0;
  }

  public Contract getContract() {
    return this.contract;
  }

  public StdOrderStatusAndTrade setContract(Contract contract) {
    this.contract = contract;
    return this;
  }

  public void unsetContract() {
    this.contract = null;
  }

  /** Returns true if field contract is set (has been assigned a value) and false otherwise */
  public boolean isSetContract() {
    return this.contract != null;
  }

  public void setContractIsSet(boolean value) {
    if (!value) {
      this.contract = null;
    }
  }

  public String getSledId() {
    return this.sledId;
  }

  public StdOrderStatusAndTrade setSledId(String sledId) {
    this.sledId = sledId;
    return this;
  }

  public void unsetSledId() {
    this.sledId = null;
  }

  /** Returns true if field sledId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledId() {
    return this.sledId != null;
  }

  public void setSledIdIsSet(boolean value) {
    if (!value) {
      this.sledId = null;
    }
  }

  public String getOrderTime() {
    return this.orderTime;
  }

  public StdOrderStatusAndTrade setOrderTime(String orderTime) {
    this.orderTime = orderTime;
    return this;
  }

  public void unsetOrderTime() {
    this.orderTime = null;
  }

  /** Returns true if field orderTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderTime() {
    return this.orderTime != null;
  }

  public void setOrderTimeIsSet(boolean value) {
    if (!value) {
      this.orderTime = null;
    }
  }

  public long getInsertTime() {
    return this.insertTime;
  }

  public StdOrderStatusAndTrade setInsertTime(long insertTime) {
    this.insertTime = insertTime;
    setInsertTimeIsSet(true);
    return this;
  }

  public void unsetInsertTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSERTTIME_ISSET_ID);
  }

  /** Returns true if field insertTime is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertTime() {
    return EncodingUtils.testBit(__isset_bitfield, __INSERTTIME_ISSET_ID);
  }

  public void setInsertTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSERTTIME_ISSET_ID, value);
  }

  public StdOrderStatusField getStatus() {
    return this.status;
  }

  public StdOrderStatusAndTrade setStatus(StdOrderStatusField status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getTradeListSize() {
    return (this.tradeList == null) ? 0 : this.tradeList.size();
  }

  public java.util.Iterator<StdTradeField> getTradeListIterator() {
    return (this.tradeList == null) ? null : this.tradeList.iterator();
  }

  public void addToTradeList(StdTradeField elem) {
    if (this.tradeList == null) {
      this.tradeList = new ArrayList<StdTradeField>();
    }
    this.tradeList.add(elem);
  }

  public List<StdTradeField> getTradeList() {
    return this.tradeList;
  }

  public StdOrderStatusAndTrade setTradeList(List<StdTradeField> tradeList) {
    this.tradeList = tradeList;
    return this;
  }

  public void unsetTradeList() {
    this.tradeList = null;
  }

  /** Returns true if field tradeList is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeList() {
    return this.tradeList != null;
  }

  public void setTradeListIsSet(boolean value) {
    if (!value) {
      this.tradeList = null;
    }
  }

  public boolean isIsSelfTrade() {
    return this.isSelfTrade;
  }

  public StdOrderStatusAndTrade setIsSelfTrade(boolean isSelfTrade) {
    this.isSelfTrade = isSelfTrade;
    setIsSelfTradeIsSet(true);
    return this;
  }

  public void unsetIsSelfTrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSELFTRADE_ISSET_ID);
  }

  /** Returns true if field isSelfTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSelfTrade() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSELFTRADE_ISSET_ID);
  }

  public void setIsSelfTradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSELFTRADE_ISSET_ID, value);
  }

  public String getSelfTradeInfo() {
    return this.selfTradeInfo;
  }

  public StdOrderStatusAndTrade setSelfTradeInfo(String selfTradeInfo) {
    this.selfTradeInfo = selfTradeInfo;
    return this;
  }

  public void unsetSelfTradeInfo() {
    this.selfTradeInfo = null;
  }

  /** Returns true if field selfTradeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetSelfTradeInfo() {
    return this.selfTradeInfo != null;
  }

  public void setSelfTradeInfoIsSet(boolean value) {
    if (!value) {
      this.selfTradeInfo = null;
    }
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public StdOrderStatusAndTrade setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public StdOrderStatusAndTrade setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getSledContractId() {
    return this.sledContractId;
  }

  public StdOrderStatusAndTrade setSledContractId(int sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public long getSerialVersionUID() {
    return this.serialVersionUID;
  }

  public StdOrderStatusAndTrade setSerialVersionUID(long serialVersionUID) {
    this.serialVersionUID = serialVersionUID;
    setSerialVersionUIDIsSet(true);
    return this;
  }

  public void unsetSerialVersionUID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID);
  }

  /** Returns true if field serialVersionUID is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialVersionUID() {
    return EncodingUtils.testBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID);
  }

  public void setSerialVersionUIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTRACT:
      if (value == null) {
        unsetContract();
      } else {
        setContract((Contract)value);
      }
      break;

    case SLED_ID:
      if (value == null) {
        unsetSledId();
      } else {
        setSledId((String)value);
      }
      break;

    case ORDER_TIME:
      if (value == null) {
        unsetOrderTime();
      } else {
        setOrderTime((String)value);
      }
      break;

    case INSERT_TIME:
      if (value == null) {
        unsetInsertTime();
      } else {
        setInsertTime((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((StdOrderStatusField)value);
      }
      break;

    case TRADE_LIST:
      if (value == null) {
        unsetTradeList();
      } else {
        setTradeList((List<StdTradeField>)value);
      }
      break;

    case IS_SELF_TRADE:
      if (value == null) {
        unsetIsSelfTrade();
      } else {
        setIsSelfTrade((Boolean)value);
      }
      break;

    case SELF_TRADE_INFO:
      if (value == null) {
        unsetSelfTradeInfo();
      } else {
        setSelfTradeInfo((String)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Integer)value);
      }
      break;

    case SERIAL_VERSION_UID:
      if (value == null) {
        unsetSerialVersionUID();
      } else {
        setSerialVersionUID((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTRACT:
      return getContract();

    case SLED_ID:
      return getSledId();

    case ORDER_TIME:
      return getOrderTime();

    case INSERT_TIME:
      return Long.valueOf(getInsertTime());

    case STATUS:
      return getStatus();

    case TRADE_LIST:
      return getTradeList();

    case IS_SELF_TRADE:
      return Boolean.valueOf(isIsSelfTrade());

    case SELF_TRADE_INFO:
      return getSelfTradeInfo();

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case SLED_CONTRACT_ID:
      return Integer.valueOf(getSledContractId());

    case SERIAL_VERSION_UID:
      return Long.valueOf(getSerialVersionUID());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTRACT:
      return isSetContract();
    case SLED_ID:
      return isSetSledId();
    case ORDER_TIME:
      return isSetOrderTime();
    case INSERT_TIME:
      return isSetInsertTime();
    case STATUS:
      return isSetStatus();
    case TRADE_LIST:
      return isSetTradeList();
    case IS_SELF_TRADE:
      return isSetIsSelfTrade();
    case SELF_TRADE_INFO:
      return isSetSelfTradeInfo();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    case USER_ID:
      return isSetUserId();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case SERIAL_VERSION_UID:
      return isSetSerialVersionUID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StdOrderStatusAndTrade)
      return this.equals((StdOrderStatusAndTrade)that);
    return false;
  }

  public boolean equals(StdOrderStatusAndTrade that) {
    if (that == null)
      return false;

    boolean this_present_contract = true && this.isSetContract();
    boolean that_present_contract = true && that.isSetContract();
    if (this_present_contract || that_present_contract) {
      if (!(this_present_contract && that_present_contract))
        return false;
      if (!this.contract.equals(that.contract))
        return false;
    }

    boolean this_present_sledId = true && this.isSetSledId();
    boolean that_present_sledId = true && that.isSetSledId();
    if (this_present_sledId || that_present_sledId) {
      if (!(this_present_sledId && that_present_sledId))
        return false;
      if (!this.sledId.equals(that.sledId))
        return false;
    }

    boolean this_present_orderTime = true && this.isSetOrderTime();
    boolean that_present_orderTime = true && that.isSetOrderTime();
    if (this_present_orderTime || that_present_orderTime) {
      if (!(this_present_orderTime && that_present_orderTime))
        return false;
      if (!this.orderTime.equals(that.orderTime))
        return false;
    }

    boolean this_present_insertTime = true && this.isSetInsertTime();
    boolean that_present_insertTime = true && that.isSetInsertTime();
    if (this_present_insertTime || that_present_insertTime) {
      if (!(this_present_insertTime && that_present_insertTime))
        return false;
      if (this.insertTime != that.insertTime)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_tradeList = true && this.isSetTradeList();
    boolean that_present_tradeList = true && that.isSetTradeList();
    if (this_present_tradeList || that_present_tradeList) {
      if (!(this_present_tradeList && that_present_tradeList))
        return false;
      if (!this.tradeList.equals(that.tradeList))
        return false;
    }

    boolean this_present_isSelfTrade = true && this.isSetIsSelfTrade();
    boolean that_present_isSelfTrade = true && that.isSetIsSelfTrade();
    if (this_present_isSelfTrade || that_present_isSelfTrade) {
      if (!(this_present_isSelfTrade && that_present_isSelfTrade))
        return false;
      if (this.isSelfTrade != that.isSelfTrade)
        return false;
    }

    boolean this_present_selfTradeInfo = true && this.isSetSelfTradeInfo();
    boolean that_present_selfTradeInfo = true && that.isSetSelfTradeInfo();
    if (this_present_selfTradeInfo || that_present_selfTradeInfo) {
      if (!(this_present_selfTradeInfo && that_present_selfTradeInfo))
        return false;
      if (!this.selfTradeInfo.equals(that.selfTradeInfo))
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_serialVersionUID = true && this.isSetSerialVersionUID();
    boolean that_present_serialVersionUID = true && that.isSetSerialVersionUID();
    if (this_present_serialVersionUID || that_present_serialVersionUID) {
      if (!(this_present_serialVersionUID && that_present_serialVersionUID))
        return false;
      if (this.serialVersionUID != that.serialVersionUID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StdOrderStatusAndTrade other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContract()).compareTo(other.isSetContract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contract, other.contract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledId()).compareTo(other.isSetSledId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledId, other.sledId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderTime()).compareTo(other.isSetOrderTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderTime, other.orderTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertTime()).compareTo(other.isSetInsertTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertTime, other.insertTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeList()).compareTo(other.isSetTradeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeList, other.tradeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSelfTrade()).compareTo(other.isSetIsSelfTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSelfTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSelfTrade, other.isSelfTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelfTradeInfo()).compareTo(other.isSetSelfTradeInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelfTradeInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selfTradeInfo, other.selfTradeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialVersionUID()).compareTo(other.isSetSerialVersionUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialVersionUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialVersionUID, other.serialVersionUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StdOrderStatusAndTrade(");
    boolean first = true;

    if (isSetContract()) {
      sb.append("contract:");
      if (this.contract == null) {
        sb.append("null");
      } else {
        sb.append(this.contract);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sledId:");
    if (this.sledId == null) {
      sb.append("null");
    } else {
      sb.append(this.sledId);
    }
    first = false;
    if (isSetOrderTime()) {
      if (!first) sb.append(", ");
      sb.append("orderTime:");
      if (this.orderTime == null) {
        sb.append("null");
      } else {
        sb.append(this.orderTime);
      }
      first = false;
    }
    if (isSetInsertTime()) {
      if (!first) sb.append(", ");
      sb.append("insertTime:");
      sb.append(this.insertTime);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetTradeList()) {
      if (!first) sb.append(", ");
      sb.append("tradeList:");
      if (this.tradeList == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeList);
      }
      first = false;
    }
    if (isSetIsSelfTrade()) {
      if (!first) sb.append(", ");
      sb.append("isSelfTrade:");
      sb.append(this.isSelfTrade);
      first = false;
    }
    if (isSetSelfTradeInfo()) {
      if (!first) sb.append(", ");
      sb.append("selfTradeInfo:");
      if (this.selfTradeInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.selfTradeInfo);
      }
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetSerialVersionUID()) {
      if (!first) sb.append(", ");
      sb.append("serialVersionUID:");
      sb.append(this.serialVersionUID);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sledId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sledId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (contract != null) {
      contract.validate();
    }
    if (status != null) {
      status.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StdOrderStatusAndTradeStandardSchemeFactory implements SchemeFactory {
    public StdOrderStatusAndTradeStandardScheme getScheme() {
      return new StdOrderStatusAndTradeStandardScheme();
    }
  }

  private static class StdOrderStatusAndTradeStandardScheme extends StandardScheme<StdOrderStatusAndTrade> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StdOrderStatusAndTrade struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contract = new Contract();
              struct.contract.read(iprot);
              struct.setContractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledId = iprot.readString();
              struct.setSledIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORDER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderTime = iprot.readString();
              struct.setOrderTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INSERT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.insertTime = iprot.readI64();
              struct.setInsertTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new StdOrderStatusField();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TRADE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.tradeList = new ArrayList<StdTradeField>(_list72.size);
                for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                {
                  StdTradeField _elem74;
                  _elem74 = new StdTradeField();
                  _elem74.read(iprot);
                  struct.tradeList.add(_elem74);
                }
                iprot.readListEnd();
              }
              struct.setTradeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_SELF_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSelfTrade = iprot.readBool();
              struct.setIsSelfTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SELF_TRADE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.selfTradeInfo = iprot.readString();
              struct.setSelfTradeInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledContractId = iprot.readI32();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // SERIAL_VERSION_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serialVersionUID = iprot.readI64();
              struct.setSerialVersionUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StdOrderStatusAndTrade struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contract != null) {
        if (struct.isSetContract()) {
          oprot.writeFieldBegin(CONTRACT_FIELD_DESC);
          struct.contract.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledId != null) {
        oprot.writeFieldBegin(SLED_ID_FIELD_DESC);
        oprot.writeString(struct.sledId);
        oprot.writeFieldEnd();
      }
      if (struct.orderTime != null) {
        if (struct.isSetOrderTime()) {
          oprot.writeFieldBegin(ORDER_TIME_FIELD_DESC);
          oprot.writeString(struct.orderTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInsertTime()) {
        oprot.writeFieldBegin(INSERT_TIME_FIELD_DESC);
        oprot.writeI64(struct.insertTime);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          struct.status.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tradeList != null) {
        if (struct.isSetTradeList()) {
          oprot.writeFieldBegin(TRADE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tradeList.size()));
            for (StdTradeField _iter75 : struct.tradeList)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsSelfTrade()) {
        oprot.writeFieldBegin(IS_SELF_TRADE_FIELD_DESC);
        oprot.writeBool(struct.isSelfTrade);
        oprot.writeFieldEnd();
      }
      if (struct.selfTradeInfo != null) {
        if (struct.isSetSelfTradeInfo()) {
          oprot.writeFieldBegin(SELF_TRADE_INFO_FIELD_DESC);
          oprot.writeString(struct.selfTradeInfo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSerialVersionUID()) {
        oprot.writeFieldBegin(SERIAL_VERSION_UID_FIELD_DESC);
        oprot.writeI64(struct.serialVersionUID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StdOrderStatusAndTradeTupleSchemeFactory implements SchemeFactory {
    public StdOrderStatusAndTradeTupleScheme getScheme() {
      return new StdOrderStatusAndTradeTupleScheme();
    }
  }

  private static class StdOrderStatusAndTradeTupleScheme extends TupleScheme<StdOrderStatusAndTrade> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StdOrderStatusAndTrade struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sledId);
      BitSet optionals = new BitSet();
      if (struct.isSetContract()) {
        optionals.set(0);
      }
      if (struct.isSetOrderTime()) {
        optionals.set(1);
      }
      if (struct.isSetInsertTime()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetTradeList()) {
        optionals.set(4);
      }
      if (struct.isSetIsSelfTrade()) {
        optionals.set(5);
      }
      if (struct.isSetSelfTradeInfo()) {
        optionals.set(6);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(7);
      }
      if (struct.isSetUserId()) {
        optionals.set(8);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(9);
      }
      if (struct.isSetSerialVersionUID()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetContract()) {
        struct.contract.write(oprot);
      }
      if (struct.isSetOrderTime()) {
        oprot.writeString(struct.orderTime);
      }
      if (struct.isSetInsertTime()) {
        oprot.writeI64(struct.insertTime);
      }
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
      if (struct.isSetTradeList()) {
        {
          oprot.writeI32(struct.tradeList.size());
          for (StdTradeField _iter76 : struct.tradeList)
          {
            _iter76.write(oprot);
          }
        }
      }
      if (struct.isSetIsSelfTrade()) {
        oprot.writeBool(struct.isSelfTrade);
      }
      if (struct.isSetSelfTradeInfo()) {
        oprot.writeString(struct.selfTradeInfo);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI32(struct.sledContractId);
      }
      if (struct.isSetSerialVersionUID()) {
        oprot.writeI64(struct.serialVersionUID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StdOrderStatusAndTrade struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sledId = iprot.readString();
      struct.setSledIdIsSet(true);
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.contract = new Contract();
        struct.contract.read(iprot);
        struct.setContractIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderTime = iprot.readString();
        struct.setOrderTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.insertTime = iprot.readI64();
        struct.setInsertTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = new StdOrderStatusField();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tradeList = new ArrayList<StdTradeField>(_list77.size);
          for (int _i78 = 0; _i78 < _list77.size; ++_i78)
          {
            StdTradeField _elem79;
            _elem79 = new StdTradeField();
            _elem79.read(iprot);
            struct.tradeList.add(_elem79);
          }
        }
        struct.setTradeListIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isSelfTrade = iprot.readBool();
        struct.setIsSelfTradeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.selfTradeInfo = iprot.readString();
        struct.setSelfTradeInfoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sledContractId = iprot.readI32();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.serialVersionUID = iprot.readI64();
        struct.setSerialVersionUIDIsSet(true);
      }
    }
  }

}

