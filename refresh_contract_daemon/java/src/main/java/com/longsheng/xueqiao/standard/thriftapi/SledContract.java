/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.standard.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SledContract implements org.apache.thrift.TBase<SledContract, SledContract._Fields>, java.io.Serializable, Cloneable, Comparable<SledContract> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SledContract");

  private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_BASE_CONTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("sledBaseContract", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField EXTEND_CONTRACTS_FIELD_DESC = new org.apache.thrift.protocol.TField("extendContracts", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CONTRACT_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("contractTerm", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SETTLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("settleType", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField SLED_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("sledTag", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SledContractStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SledContractTupleSchemeFactory());
  }

  public int contractId; // optional
  public SledBaseContract sledBaseContract; // optional
  public List<SledBaseContract> extendContracts; // optional
  /**
   * 
   * @see ContractTerm
   */
  public ContractTerm contractTerm; // optional
  public SettleType settleType; // optional
  public String sledTag; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTRACT_ID((short)1, "contractId"),
    SLED_BASE_CONTRACT((short)2, "sledBaseContract"),
    EXTEND_CONTRACTS((short)3, "extendContracts"),
    /**
     * 
     * @see ContractTerm
     */
    CONTRACT_TERM((short)4, "contractTerm"),
    SETTLE_TYPE((short)5, "settleType"),
    SLED_TAG((short)6, "sledTag");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTRACT_ID
          return CONTRACT_ID;
        case 2: // SLED_BASE_CONTRACT
          return SLED_BASE_CONTRACT;
        case 3: // EXTEND_CONTRACTS
          return EXTEND_CONTRACTS;
        case 4: // CONTRACT_TERM
          return CONTRACT_TERM;
        case 5: // SETTLE_TYPE
          return SETTLE_TYPE;
        case 6: // SLED_TAG
          return SLED_TAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONTRACTID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONTRACT_ID,_Fields.SLED_BASE_CONTRACT,_Fields.EXTEND_CONTRACTS,_Fields.CONTRACT_TERM,_Fields.SETTLE_TYPE,_Fields.SLED_TAG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_BASE_CONTRACT, new org.apache.thrift.meta_data.FieldMetaData("sledBaseContract", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SledBaseContract.class)));
    tmpMap.put(_Fields.EXTEND_CONTRACTS, new org.apache.thrift.meta_data.FieldMetaData("extendContracts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SledBaseContract.class))));
    tmpMap.put(_Fields.CONTRACT_TERM, new org.apache.thrift.meta_data.FieldMetaData("contractTerm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ContractTerm.class)));
    tmpMap.put(_Fields.SETTLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("settleType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SettleType.class)));
    tmpMap.put(_Fields.SLED_TAG, new org.apache.thrift.meta_data.FieldMetaData("sledTag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SledContract.class, metaDataMap);
  }

  public SledContract() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SledContract(SledContract other) {
    __isset_bitfield = other.__isset_bitfield;
    this.contractId = other.contractId;
    if (other.isSetSledBaseContract()) {
      this.sledBaseContract = new SledBaseContract(other.sledBaseContract);
    }
    if (other.isSetExtendContracts()) {
      List<SledBaseContract> __this__extendContracts = new ArrayList<SledBaseContract>(other.extendContracts.size());
      for (SledBaseContract other_element : other.extendContracts) {
        __this__extendContracts.add(new SledBaseContract(other_element));
      }
      this.extendContracts = __this__extendContracts;
    }
    if (other.isSetContractTerm()) {
      this.contractTerm = other.contractTerm;
    }
    if (other.isSetSettleType()) {
      this.settleType = new SettleType(other.settleType);
    }
    if (other.isSetSledTag()) {
      this.sledTag = other.sledTag;
    }
  }

  public SledContract deepCopy() {
    return new SledContract(this);
  }

  @Override
  public void clear() {
    setContractIdIsSet(false);
    this.contractId = 0;
    this.sledBaseContract = null;
    this.extendContracts = null;
    this.contractTerm = null;
    this.settleType = null;
    this.sledTag = null;
  }

  public int getContractId() {
    return this.contractId;
  }

  public SledContract setContractId(int contractId) {
    this.contractId = contractId;
    setContractIdIsSet(true);
    return this;
  }

  public void unsetContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  /** Returns true if field contractId is set (has been assigned a value) and false otherwise */
  public boolean isSetContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  public void setContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTID_ISSET_ID, value);
  }

  public SledBaseContract getSledBaseContract() {
    return this.sledBaseContract;
  }

  public SledContract setSledBaseContract(SledBaseContract sledBaseContract) {
    this.sledBaseContract = sledBaseContract;
    return this;
  }

  public void unsetSledBaseContract() {
    this.sledBaseContract = null;
  }

  /** Returns true if field sledBaseContract is set (has been assigned a value) and false otherwise */
  public boolean isSetSledBaseContract() {
    return this.sledBaseContract != null;
  }

  public void setSledBaseContractIsSet(boolean value) {
    if (!value) {
      this.sledBaseContract = null;
    }
  }

  public int getExtendContractsSize() {
    return (this.extendContracts == null) ? 0 : this.extendContracts.size();
  }

  public java.util.Iterator<SledBaseContract> getExtendContractsIterator() {
    return (this.extendContracts == null) ? null : this.extendContracts.iterator();
  }

  public void addToExtendContracts(SledBaseContract elem) {
    if (this.extendContracts == null) {
      this.extendContracts = new ArrayList<SledBaseContract>();
    }
    this.extendContracts.add(elem);
  }

  public List<SledBaseContract> getExtendContracts() {
    return this.extendContracts;
  }

  public SledContract setExtendContracts(List<SledBaseContract> extendContracts) {
    this.extendContracts = extendContracts;
    return this;
  }

  public void unsetExtendContracts() {
    this.extendContracts = null;
  }

  /** Returns true if field extendContracts is set (has been assigned a value) and false otherwise */
  public boolean isSetExtendContracts() {
    return this.extendContracts != null;
  }

  public void setExtendContractsIsSet(boolean value) {
    if (!value) {
      this.extendContracts = null;
    }
  }

  /**
   * 
   * @see ContractTerm
   */
  public ContractTerm getContractTerm() {
    return this.contractTerm;
  }

  /**
   * 
   * @see ContractTerm
   */
  public SledContract setContractTerm(ContractTerm contractTerm) {
    this.contractTerm = contractTerm;
    return this;
  }

  public void unsetContractTerm() {
    this.contractTerm = null;
  }

  /** Returns true if field contractTerm is set (has been assigned a value) and false otherwise */
  public boolean isSetContractTerm() {
    return this.contractTerm != null;
  }

  public void setContractTermIsSet(boolean value) {
    if (!value) {
      this.contractTerm = null;
    }
  }

  public SettleType getSettleType() {
    return this.settleType;
  }

  public SledContract setSettleType(SettleType settleType) {
    this.settleType = settleType;
    return this;
  }

  public void unsetSettleType() {
    this.settleType = null;
  }

  /** Returns true if field settleType is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleType() {
    return this.settleType != null;
  }

  public void setSettleTypeIsSet(boolean value) {
    if (!value) {
      this.settleType = null;
    }
  }

  public String getSledTag() {
    return this.sledTag;
  }

  public SledContract setSledTag(String sledTag) {
    this.sledTag = sledTag;
    return this;
  }

  public void unsetSledTag() {
    this.sledTag = null;
  }

  /** Returns true if field sledTag is set (has been assigned a value) and false otherwise */
  public boolean isSetSledTag() {
    return this.sledTag != null;
  }

  public void setSledTagIsSet(boolean value) {
    if (!value) {
      this.sledTag = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTRACT_ID:
      if (value == null) {
        unsetContractId();
      } else {
        setContractId((Integer)value);
      }
      break;

    case SLED_BASE_CONTRACT:
      if (value == null) {
        unsetSledBaseContract();
      } else {
        setSledBaseContract((SledBaseContract)value);
      }
      break;

    case EXTEND_CONTRACTS:
      if (value == null) {
        unsetExtendContracts();
      } else {
        setExtendContracts((List<SledBaseContract>)value);
      }
      break;

    case CONTRACT_TERM:
      if (value == null) {
        unsetContractTerm();
      } else {
        setContractTerm((ContractTerm)value);
      }
      break;

    case SETTLE_TYPE:
      if (value == null) {
        unsetSettleType();
      } else {
        setSettleType((SettleType)value);
      }
      break;

    case SLED_TAG:
      if (value == null) {
        unsetSledTag();
      } else {
        setSledTag((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTRACT_ID:
      return Integer.valueOf(getContractId());

    case SLED_BASE_CONTRACT:
      return getSledBaseContract();

    case EXTEND_CONTRACTS:
      return getExtendContracts();

    case CONTRACT_TERM:
      return getContractTerm();

    case SETTLE_TYPE:
      return getSettleType();

    case SLED_TAG:
      return getSledTag();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTRACT_ID:
      return isSetContractId();
    case SLED_BASE_CONTRACT:
      return isSetSledBaseContract();
    case EXTEND_CONTRACTS:
      return isSetExtendContracts();
    case CONTRACT_TERM:
      return isSetContractTerm();
    case SETTLE_TYPE:
      return isSetSettleType();
    case SLED_TAG:
      return isSetSledTag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SledContract)
      return this.equals((SledContract)that);
    return false;
  }

  public boolean equals(SledContract that) {
    if (that == null)
      return false;

    boolean this_present_contractId = true && this.isSetContractId();
    boolean that_present_contractId = true && that.isSetContractId();
    if (this_present_contractId || that_present_contractId) {
      if (!(this_present_contractId && that_present_contractId))
        return false;
      if (this.contractId != that.contractId)
        return false;
    }

    boolean this_present_sledBaseContract = true && this.isSetSledBaseContract();
    boolean that_present_sledBaseContract = true && that.isSetSledBaseContract();
    if (this_present_sledBaseContract || that_present_sledBaseContract) {
      if (!(this_present_sledBaseContract && that_present_sledBaseContract))
        return false;
      if (!this.sledBaseContract.equals(that.sledBaseContract))
        return false;
    }

    boolean this_present_extendContracts = true && this.isSetExtendContracts();
    boolean that_present_extendContracts = true && that.isSetExtendContracts();
    if (this_present_extendContracts || that_present_extendContracts) {
      if (!(this_present_extendContracts && that_present_extendContracts))
        return false;
      if (!this.extendContracts.equals(that.extendContracts))
        return false;
    }

    boolean this_present_contractTerm = true && this.isSetContractTerm();
    boolean that_present_contractTerm = true && that.isSetContractTerm();
    if (this_present_contractTerm || that_present_contractTerm) {
      if (!(this_present_contractTerm && that_present_contractTerm))
        return false;
      if (!this.contractTerm.equals(that.contractTerm))
        return false;
    }

    boolean this_present_settleType = true && this.isSetSettleType();
    boolean that_present_settleType = true && that.isSetSettleType();
    if (this_present_settleType || that_present_settleType) {
      if (!(this_present_settleType && that_present_settleType))
        return false;
      if (!this.settleType.equals(that.settleType))
        return false;
    }

    boolean this_present_sledTag = true && this.isSetSledTag();
    boolean that_present_sledTag = true && that.isSetSledTag();
    if (this_present_sledTag || that_present_sledTag) {
      if (!(this_present_sledTag && that_present_sledTag))
        return false;
      if (!this.sledTag.equals(that.sledTag))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SledContract other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContractId()).compareTo(other.isSetContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractId, other.contractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledBaseContract()).compareTo(other.isSetSledBaseContract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledBaseContract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledBaseContract, other.sledBaseContract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtendContracts()).compareTo(other.isSetExtendContracts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtendContracts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extendContracts, other.extendContracts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractTerm()).compareTo(other.isSetContractTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractTerm, other.contractTerm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleType()).compareTo(other.isSetSettleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleType, other.settleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledTag()).compareTo(other.isSetSledTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledTag, other.sledTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SledContract(");
    boolean first = true;

    if (isSetContractId()) {
      sb.append("contractId:");
      sb.append(this.contractId);
      first = false;
    }
    if (isSetSledBaseContract()) {
      if (!first) sb.append(", ");
      sb.append("sledBaseContract:");
      if (this.sledBaseContract == null) {
        sb.append("null");
      } else {
        sb.append(this.sledBaseContract);
      }
      first = false;
    }
    if (isSetExtendContracts()) {
      if (!first) sb.append(", ");
      sb.append("extendContracts:");
      if (this.extendContracts == null) {
        sb.append("null");
      } else {
        sb.append(this.extendContracts);
      }
      first = false;
    }
    if (isSetContractTerm()) {
      if (!first) sb.append(", ");
      sb.append("contractTerm:");
      if (this.contractTerm == null) {
        sb.append("null");
      } else {
        sb.append(this.contractTerm);
      }
      first = false;
    }
    if (isSetSettleType()) {
      if (!first) sb.append(", ");
      sb.append("settleType:");
      if (this.settleType == null) {
        sb.append("null");
      } else {
        sb.append(this.settleType);
      }
      first = false;
    }
    if (isSetSledTag()) {
      if (!first) sb.append(", ");
      sb.append("sledTag:");
      if (this.sledTag == null) {
        sb.append("null");
      } else {
        sb.append(this.sledTag);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (sledBaseContract != null) {
      sledBaseContract.validate();
    }
    if (settleType != null) {
      settleType.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SledContractStandardSchemeFactory implements SchemeFactory {
    public SledContractStandardScheme getScheme() {
      return new SledContractStandardScheme();
    }
  }

  private static class SledContractStandardScheme extends StandardScheme<SledContract> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SledContract struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractId = iprot.readI32();
              struct.setContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_BASE_CONTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sledBaseContract = new SledBaseContract();
              struct.sledBaseContract.read(iprot);
              struct.setSledBaseContractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXTEND_CONTRACTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.extendContracts = new ArrayList<SledBaseContract>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  SledBaseContract _elem10;
                  _elem10 = new SledBaseContract();
                  _elem10.read(iprot);
                  struct.extendContracts.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setExtendContractsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTRACT_TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractTerm = ContractTerm.findByValue(iprot.readI32());
              struct.setContractTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SETTLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.settleType = new SettleType();
              struct.settleType.read(iprot);
              struct.setSettleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SLED_TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledTag = iprot.readString();
              struct.setSledTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SledContract struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetContractId()) {
        oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
        oprot.writeI32(struct.contractId);
        oprot.writeFieldEnd();
      }
      if (struct.sledBaseContract != null) {
        if (struct.isSetSledBaseContract()) {
          oprot.writeFieldBegin(SLED_BASE_CONTRACT_FIELD_DESC);
          struct.sledBaseContract.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extendContracts != null) {
        if (struct.isSetExtendContracts()) {
          oprot.writeFieldBegin(EXTEND_CONTRACTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.extendContracts.size()));
            for (SledBaseContract _iter11 : struct.extendContracts)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractTerm != null) {
        if (struct.isSetContractTerm()) {
          oprot.writeFieldBegin(CONTRACT_TERM_FIELD_DESC);
          oprot.writeI32(struct.contractTerm.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.settleType != null) {
        if (struct.isSetSettleType()) {
          oprot.writeFieldBegin(SETTLE_TYPE_FIELD_DESC);
          struct.settleType.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledTag != null) {
        if (struct.isSetSledTag()) {
          oprot.writeFieldBegin(SLED_TAG_FIELD_DESC);
          oprot.writeString(struct.sledTag);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SledContractTupleSchemeFactory implements SchemeFactory {
    public SledContractTupleScheme getScheme() {
      return new SledContractTupleScheme();
    }
  }

  private static class SledContractTupleScheme extends TupleScheme<SledContract> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SledContract struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContractId()) {
        optionals.set(0);
      }
      if (struct.isSetSledBaseContract()) {
        optionals.set(1);
      }
      if (struct.isSetExtendContracts()) {
        optionals.set(2);
      }
      if (struct.isSetContractTerm()) {
        optionals.set(3);
      }
      if (struct.isSetSettleType()) {
        optionals.set(4);
      }
      if (struct.isSetSledTag()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetContractId()) {
        oprot.writeI32(struct.contractId);
      }
      if (struct.isSetSledBaseContract()) {
        struct.sledBaseContract.write(oprot);
      }
      if (struct.isSetExtendContracts()) {
        {
          oprot.writeI32(struct.extendContracts.size());
          for (SledBaseContract _iter12 : struct.extendContracts)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetContractTerm()) {
        oprot.writeI32(struct.contractTerm.getValue());
      }
      if (struct.isSetSettleType()) {
        struct.settleType.write(oprot);
      }
      if (struct.isSetSledTag()) {
        oprot.writeString(struct.sledTag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SledContract struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.contractId = iprot.readI32();
        struct.setContractIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledBaseContract = new SledBaseContract();
        struct.sledBaseContract.read(iprot);
        struct.setSledBaseContractIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.extendContracts = new ArrayList<SledBaseContract>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            SledBaseContract _elem15;
            _elem15 = new SledBaseContract();
            _elem15.read(iprot);
            struct.extendContracts.add(_elem15);
          }
        }
        struct.setExtendContractsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.contractTerm = ContractTerm.findByValue(iprot.readI32());
        struct.setContractTermIsSet(true);
      }
      if (incoming.get(4)) {
        struct.settleType = new SettleType();
        struct.settleType.read(iprot);
        struct.setSettleTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sledTag = iprot.readString();
        struct.setSledTagIsSet(true);
      }
    }
  }

}

