/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.common.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TurkeyParam implements org.apache.thrift.TBase<TurkeyParam, TurkeyParam._Fields>, java.io.Serializable, Cloneable, Comparable<TurkeyParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TurkeyParam");

  private static final org.apache.thrift.protocol.TField MAX_PURSUE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("maxPursueNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_CANCEL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCancelNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PANKOU_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pankouRate", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField STOP_WIN_TICK_FIELD_DESC = new org.apache.thrift.protocol.TField("stopWinTick", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField STOP_LOSS_TICK_FIELD_DESC = new org.apache.thrift.protocol.TField("stopLossTick", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PLUS_TICK_FIELD_DESC = new org.apache.thrift.protocol.TField("plusTick", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField MAX_PLUS_TICK_FIELD_DESC = new org.apache.thrift.protocol.TField("maxPlusTick", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PRICE_CHANGED_MIN_TICK_FIELD_DESC = new org.apache.thrift.protocol.TField("priceChangedMinTick", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField WIN_THRESHOLD_TICK_FIELD_DESC = new org.apache.thrift.protocol.TField("winThresholdTick", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField HANG_BASE_PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("hangBasePriceType", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField USE_TIME_REGIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("useTimeRegions", org.apache.thrift.protocol.TType.BOOL, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TurkeyParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TurkeyParamTupleSchemeFactory());
  }

  public int maxPursueNum; // optional
  public int maxCancelNum; // optional
  public double pankouRate; // optional
  public int stopWinTick; // optional
  public int stopLossTick; // optional
  public int plusTick; // optional
  public int maxPlusTick; // optional
  public int priceChangedMinTick; // optional
  public int winThresholdTick; // optional
  /**
   * 
   * @see BasePriceType
   */
  public BasePriceType hangBasePriceType; // optional
  public boolean useTimeRegions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAX_PURSUE_NUM((short)1, "maxPursueNum"),
    MAX_CANCEL_NUM((short)3, "maxCancelNum"),
    PANKOU_RATE((short)5, "pankouRate"),
    STOP_WIN_TICK((short)7, "stopWinTick"),
    STOP_LOSS_TICK((short)9, "stopLossTick"),
    PLUS_TICK((short)11, "plusTick"),
    MAX_PLUS_TICK((short)13, "maxPlusTick"),
    PRICE_CHANGED_MIN_TICK((short)15, "priceChangedMinTick"),
    WIN_THRESHOLD_TICK((short)17, "winThresholdTick"),
    /**
     * 
     * @see BasePriceType
     */
    HANG_BASE_PRICE_TYPE((short)19, "hangBasePriceType"),
    USE_TIME_REGIONS((short)21, "useTimeRegions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAX_PURSUE_NUM
          return MAX_PURSUE_NUM;
        case 3: // MAX_CANCEL_NUM
          return MAX_CANCEL_NUM;
        case 5: // PANKOU_RATE
          return PANKOU_RATE;
        case 7: // STOP_WIN_TICK
          return STOP_WIN_TICK;
        case 9: // STOP_LOSS_TICK
          return STOP_LOSS_TICK;
        case 11: // PLUS_TICK
          return PLUS_TICK;
        case 13: // MAX_PLUS_TICK
          return MAX_PLUS_TICK;
        case 15: // PRICE_CHANGED_MIN_TICK
          return PRICE_CHANGED_MIN_TICK;
        case 17: // WIN_THRESHOLD_TICK
          return WIN_THRESHOLD_TICK;
        case 19: // HANG_BASE_PRICE_TYPE
          return HANG_BASE_PRICE_TYPE;
        case 21: // USE_TIME_REGIONS
          return USE_TIME_REGIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXPURSUENUM_ISSET_ID = 0;
  private static final int __MAXCANCELNUM_ISSET_ID = 1;
  private static final int __PANKOURATE_ISSET_ID = 2;
  private static final int __STOPWINTICK_ISSET_ID = 3;
  private static final int __STOPLOSSTICK_ISSET_ID = 4;
  private static final int __PLUSTICK_ISSET_ID = 5;
  private static final int __MAXPLUSTICK_ISSET_ID = 6;
  private static final int __PRICECHANGEDMINTICK_ISSET_ID = 7;
  private static final int __WINTHRESHOLDTICK_ISSET_ID = 8;
  private static final int __USETIMEREGIONS_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MAX_PURSUE_NUM,_Fields.MAX_CANCEL_NUM,_Fields.PANKOU_RATE,_Fields.STOP_WIN_TICK,_Fields.STOP_LOSS_TICK,_Fields.PLUS_TICK,_Fields.MAX_PLUS_TICK,_Fields.PRICE_CHANGED_MIN_TICK,_Fields.WIN_THRESHOLD_TICK,_Fields.HANG_BASE_PRICE_TYPE,_Fields.USE_TIME_REGIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAX_PURSUE_NUM, new org.apache.thrift.meta_data.FieldMetaData("maxPursueNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_CANCEL_NUM, new org.apache.thrift.meta_data.FieldMetaData("maxCancelNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PANKOU_RATE, new org.apache.thrift.meta_data.FieldMetaData("pankouRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STOP_WIN_TICK, new org.apache.thrift.meta_data.FieldMetaData("stopWinTick", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STOP_LOSS_TICK, new org.apache.thrift.meta_data.FieldMetaData("stopLossTick", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLUS_TICK, new org.apache.thrift.meta_data.FieldMetaData("plusTick", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_PLUS_TICK, new org.apache.thrift.meta_data.FieldMetaData("maxPlusTick", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRICE_CHANGED_MIN_TICK, new org.apache.thrift.meta_data.FieldMetaData("priceChangedMinTick", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WIN_THRESHOLD_TICK, new org.apache.thrift.meta_data.FieldMetaData("winThresholdTick", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANG_BASE_PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("hangBasePriceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, BasePriceType.class)));
    tmpMap.put(_Fields.USE_TIME_REGIONS, new org.apache.thrift.meta_data.FieldMetaData("useTimeRegions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TurkeyParam.class, metaDataMap);
  }

  public TurkeyParam() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TurkeyParam(TurkeyParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.maxPursueNum = other.maxPursueNum;
    this.maxCancelNum = other.maxCancelNum;
    this.pankouRate = other.pankouRate;
    this.stopWinTick = other.stopWinTick;
    this.stopLossTick = other.stopLossTick;
    this.plusTick = other.plusTick;
    this.maxPlusTick = other.maxPlusTick;
    this.priceChangedMinTick = other.priceChangedMinTick;
    this.winThresholdTick = other.winThresholdTick;
    if (other.isSetHangBasePriceType()) {
      this.hangBasePriceType = other.hangBasePriceType;
    }
    this.useTimeRegions = other.useTimeRegions;
  }

  public TurkeyParam deepCopy() {
    return new TurkeyParam(this);
  }

  @Override
  public void clear() {
    setMaxPursueNumIsSet(false);
    this.maxPursueNum = 0;
    setMaxCancelNumIsSet(false);
    this.maxCancelNum = 0;
    setPankouRateIsSet(false);
    this.pankouRate = 0.0;
    setStopWinTickIsSet(false);
    this.stopWinTick = 0;
    setStopLossTickIsSet(false);
    this.stopLossTick = 0;
    setPlusTickIsSet(false);
    this.plusTick = 0;
    setMaxPlusTickIsSet(false);
    this.maxPlusTick = 0;
    setPriceChangedMinTickIsSet(false);
    this.priceChangedMinTick = 0;
    setWinThresholdTickIsSet(false);
    this.winThresholdTick = 0;
    this.hangBasePriceType = null;
    setUseTimeRegionsIsSet(false);
    this.useTimeRegions = false;
  }

  public int getMaxPursueNum() {
    return this.maxPursueNum;
  }

  public TurkeyParam setMaxPursueNum(int maxPursueNum) {
    this.maxPursueNum = maxPursueNum;
    setMaxPursueNumIsSet(true);
    return this;
  }

  public void unsetMaxPursueNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXPURSUENUM_ISSET_ID);
  }

  /** Returns true if field maxPursueNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxPursueNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXPURSUENUM_ISSET_ID);
  }

  public void setMaxPursueNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXPURSUENUM_ISSET_ID, value);
  }

  public int getMaxCancelNum() {
    return this.maxCancelNum;
  }

  public TurkeyParam setMaxCancelNum(int maxCancelNum) {
    this.maxCancelNum = maxCancelNum;
    setMaxCancelNumIsSet(true);
    return this;
  }

  public void unsetMaxCancelNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXCANCELNUM_ISSET_ID);
  }

  /** Returns true if field maxCancelNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxCancelNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXCANCELNUM_ISSET_ID);
  }

  public void setMaxCancelNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXCANCELNUM_ISSET_ID, value);
  }

  public double getPankouRate() {
    return this.pankouRate;
  }

  public TurkeyParam setPankouRate(double pankouRate) {
    this.pankouRate = pankouRate;
    setPankouRateIsSet(true);
    return this;
  }

  public void unsetPankouRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PANKOURATE_ISSET_ID);
  }

  /** Returns true if field pankouRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPankouRate() {
    return EncodingUtils.testBit(__isset_bitfield, __PANKOURATE_ISSET_ID);
  }

  public void setPankouRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PANKOURATE_ISSET_ID, value);
  }

  public int getStopWinTick() {
    return this.stopWinTick;
  }

  public TurkeyParam setStopWinTick(int stopWinTick) {
    this.stopWinTick = stopWinTick;
    setStopWinTickIsSet(true);
    return this;
  }

  public void unsetStopWinTick() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPWINTICK_ISSET_ID);
  }

  /** Returns true if field stopWinTick is set (has been assigned a value) and false otherwise */
  public boolean isSetStopWinTick() {
    return EncodingUtils.testBit(__isset_bitfield, __STOPWINTICK_ISSET_ID);
  }

  public void setStopWinTickIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPWINTICK_ISSET_ID, value);
  }

  public int getStopLossTick() {
    return this.stopLossTick;
  }

  public TurkeyParam setStopLossTick(int stopLossTick) {
    this.stopLossTick = stopLossTick;
    setStopLossTickIsSet(true);
    return this;
  }

  public void unsetStopLossTick() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPLOSSTICK_ISSET_ID);
  }

  /** Returns true if field stopLossTick is set (has been assigned a value) and false otherwise */
  public boolean isSetStopLossTick() {
    return EncodingUtils.testBit(__isset_bitfield, __STOPLOSSTICK_ISSET_ID);
  }

  public void setStopLossTickIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPLOSSTICK_ISSET_ID, value);
  }

  public int getPlusTick() {
    return this.plusTick;
  }

  public TurkeyParam setPlusTick(int plusTick) {
    this.plusTick = plusTick;
    setPlusTickIsSet(true);
    return this;
  }

  public void unsetPlusTick() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLUSTICK_ISSET_ID);
  }

  /** Returns true if field plusTick is set (has been assigned a value) and false otherwise */
  public boolean isSetPlusTick() {
    return EncodingUtils.testBit(__isset_bitfield, __PLUSTICK_ISSET_ID);
  }

  public void setPlusTickIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLUSTICK_ISSET_ID, value);
  }

  public int getMaxPlusTick() {
    return this.maxPlusTick;
  }

  public TurkeyParam setMaxPlusTick(int maxPlusTick) {
    this.maxPlusTick = maxPlusTick;
    setMaxPlusTickIsSet(true);
    return this;
  }

  public void unsetMaxPlusTick() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXPLUSTICK_ISSET_ID);
  }

  /** Returns true if field maxPlusTick is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxPlusTick() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXPLUSTICK_ISSET_ID);
  }

  public void setMaxPlusTickIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXPLUSTICK_ISSET_ID, value);
  }

  public int getPriceChangedMinTick() {
    return this.priceChangedMinTick;
  }

  public TurkeyParam setPriceChangedMinTick(int priceChangedMinTick) {
    this.priceChangedMinTick = priceChangedMinTick;
    setPriceChangedMinTickIsSet(true);
    return this;
  }

  public void unsetPriceChangedMinTick() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICECHANGEDMINTICK_ISSET_ID);
  }

  /** Returns true if field priceChangedMinTick is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceChangedMinTick() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICECHANGEDMINTICK_ISSET_ID);
  }

  public void setPriceChangedMinTickIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICECHANGEDMINTICK_ISSET_ID, value);
  }

  public int getWinThresholdTick() {
    return this.winThresholdTick;
  }

  public TurkeyParam setWinThresholdTick(int winThresholdTick) {
    this.winThresholdTick = winThresholdTick;
    setWinThresholdTickIsSet(true);
    return this;
  }

  public void unsetWinThresholdTick() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINTHRESHOLDTICK_ISSET_ID);
  }

  /** Returns true if field winThresholdTick is set (has been assigned a value) and false otherwise */
  public boolean isSetWinThresholdTick() {
    return EncodingUtils.testBit(__isset_bitfield, __WINTHRESHOLDTICK_ISSET_ID);
  }

  public void setWinThresholdTickIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINTHRESHOLDTICK_ISSET_ID, value);
  }

  /**
   * 
   * @see BasePriceType
   */
  public BasePriceType getHangBasePriceType() {
    return this.hangBasePriceType;
  }

  /**
   * 
   * @see BasePriceType
   */
  public TurkeyParam setHangBasePriceType(BasePriceType hangBasePriceType) {
    this.hangBasePriceType = hangBasePriceType;
    return this;
  }

  public void unsetHangBasePriceType() {
    this.hangBasePriceType = null;
  }

  /** Returns true if field hangBasePriceType is set (has been assigned a value) and false otherwise */
  public boolean isSetHangBasePriceType() {
    return this.hangBasePriceType != null;
  }

  public void setHangBasePriceTypeIsSet(boolean value) {
    if (!value) {
      this.hangBasePriceType = null;
    }
  }

  public boolean isUseTimeRegions() {
    return this.useTimeRegions;
  }

  public TurkeyParam setUseTimeRegions(boolean useTimeRegions) {
    this.useTimeRegions = useTimeRegions;
    setUseTimeRegionsIsSet(true);
    return this;
  }

  public void unsetUseTimeRegions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USETIMEREGIONS_ISSET_ID);
  }

  /** Returns true if field useTimeRegions is set (has been assigned a value) and false otherwise */
  public boolean isSetUseTimeRegions() {
    return EncodingUtils.testBit(__isset_bitfield, __USETIMEREGIONS_ISSET_ID);
  }

  public void setUseTimeRegionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USETIMEREGIONS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAX_PURSUE_NUM:
      if (value == null) {
        unsetMaxPursueNum();
      } else {
        setMaxPursueNum((Integer)value);
      }
      break;

    case MAX_CANCEL_NUM:
      if (value == null) {
        unsetMaxCancelNum();
      } else {
        setMaxCancelNum((Integer)value);
      }
      break;

    case PANKOU_RATE:
      if (value == null) {
        unsetPankouRate();
      } else {
        setPankouRate((Double)value);
      }
      break;

    case STOP_WIN_TICK:
      if (value == null) {
        unsetStopWinTick();
      } else {
        setStopWinTick((Integer)value);
      }
      break;

    case STOP_LOSS_TICK:
      if (value == null) {
        unsetStopLossTick();
      } else {
        setStopLossTick((Integer)value);
      }
      break;

    case PLUS_TICK:
      if (value == null) {
        unsetPlusTick();
      } else {
        setPlusTick((Integer)value);
      }
      break;

    case MAX_PLUS_TICK:
      if (value == null) {
        unsetMaxPlusTick();
      } else {
        setMaxPlusTick((Integer)value);
      }
      break;

    case PRICE_CHANGED_MIN_TICK:
      if (value == null) {
        unsetPriceChangedMinTick();
      } else {
        setPriceChangedMinTick((Integer)value);
      }
      break;

    case WIN_THRESHOLD_TICK:
      if (value == null) {
        unsetWinThresholdTick();
      } else {
        setWinThresholdTick((Integer)value);
      }
      break;

    case HANG_BASE_PRICE_TYPE:
      if (value == null) {
        unsetHangBasePriceType();
      } else {
        setHangBasePriceType((BasePriceType)value);
      }
      break;

    case USE_TIME_REGIONS:
      if (value == null) {
        unsetUseTimeRegions();
      } else {
        setUseTimeRegions((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAX_PURSUE_NUM:
      return Integer.valueOf(getMaxPursueNum());

    case MAX_CANCEL_NUM:
      return Integer.valueOf(getMaxCancelNum());

    case PANKOU_RATE:
      return Double.valueOf(getPankouRate());

    case STOP_WIN_TICK:
      return Integer.valueOf(getStopWinTick());

    case STOP_LOSS_TICK:
      return Integer.valueOf(getStopLossTick());

    case PLUS_TICK:
      return Integer.valueOf(getPlusTick());

    case MAX_PLUS_TICK:
      return Integer.valueOf(getMaxPlusTick());

    case PRICE_CHANGED_MIN_TICK:
      return Integer.valueOf(getPriceChangedMinTick());

    case WIN_THRESHOLD_TICK:
      return Integer.valueOf(getWinThresholdTick());

    case HANG_BASE_PRICE_TYPE:
      return getHangBasePriceType();

    case USE_TIME_REGIONS:
      return Boolean.valueOf(isUseTimeRegions());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAX_PURSUE_NUM:
      return isSetMaxPursueNum();
    case MAX_CANCEL_NUM:
      return isSetMaxCancelNum();
    case PANKOU_RATE:
      return isSetPankouRate();
    case STOP_WIN_TICK:
      return isSetStopWinTick();
    case STOP_LOSS_TICK:
      return isSetStopLossTick();
    case PLUS_TICK:
      return isSetPlusTick();
    case MAX_PLUS_TICK:
      return isSetMaxPlusTick();
    case PRICE_CHANGED_MIN_TICK:
      return isSetPriceChangedMinTick();
    case WIN_THRESHOLD_TICK:
      return isSetWinThresholdTick();
    case HANG_BASE_PRICE_TYPE:
      return isSetHangBasePriceType();
    case USE_TIME_REGIONS:
      return isSetUseTimeRegions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TurkeyParam)
      return this.equals((TurkeyParam)that);
    return false;
  }

  public boolean equals(TurkeyParam that) {
    if (that == null)
      return false;

    boolean this_present_maxPursueNum = true && this.isSetMaxPursueNum();
    boolean that_present_maxPursueNum = true && that.isSetMaxPursueNum();
    if (this_present_maxPursueNum || that_present_maxPursueNum) {
      if (!(this_present_maxPursueNum && that_present_maxPursueNum))
        return false;
      if (this.maxPursueNum != that.maxPursueNum)
        return false;
    }

    boolean this_present_maxCancelNum = true && this.isSetMaxCancelNum();
    boolean that_present_maxCancelNum = true && that.isSetMaxCancelNum();
    if (this_present_maxCancelNum || that_present_maxCancelNum) {
      if (!(this_present_maxCancelNum && that_present_maxCancelNum))
        return false;
      if (this.maxCancelNum != that.maxCancelNum)
        return false;
    }

    boolean this_present_pankouRate = true && this.isSetPankouRate();
    boolean that_present_pankouRate = true && that.isSetPankouRate();
    if (this_present_pankouRate || that_present_pankouRate) {
      if (!(this_present_pankouRate && that_present_pankouRate))
        return false;
      if (this.pankouRate != that.pankouRate)
        return false;
    }

    boolean this_present_stopWinTick = true && this.isSetStopWinTick();
    boolean that_present_stopWinTick = true && that.isSetStopWinTick();
    if (this_present_stopWinTick || that_present_stopWinTick) {
      if (!(this_present_stopWinTick && that_present_stopWinTick))
        return false;
      if (this.stopWinTick != that.stopWinTick)
        return false;
    }

    boolean this_present_stopLossTick = true && this.isSetStopLossTick();
    boolean that_present_stopLossTick = true && that.isSetStopLossTick();
    if (this_present_stopLossTick || that_present_stopLossTick) {
      if (!(this_present_stopLossTick && that_present_stopLossTick))
        return false;
      if (this.stopLossTick != that.stopLossTick)
        return false;
    }

    boolean this_present_plusTick = true && this.isSetPlusTick();
    boolean that_present_plusTick = true && that.isSetPlusTick();
    if (this_present_plusTick || that_present_plusTick) {
      if (!(this_present_plusTick && that_present_plusTick))
        return false;
      if (this.plusTick != that.plusTick)
        return false;
    }

    boolean this_present_maxPlusTick = true && this.isSetMaxPlusTick();
    boolean that_present_maxPlusTick = true && that.isSetMaxPlusTick();
    if (this_present_maxPlusTick || that_present_maxPlusTick) {
      if (!(this_present_maxPlusTick && that_present_maxPlusTick))
        return false;
      if (this.maxPlusTick != that.maxPlusTick)
        return false;
    }

    boolean this_present_priceChangedMinTick = true && this.isSetPriceChangedMinTick();
    boolean that_present_priceChangedMinTick = true && that.isSetPriceChangedMinTick();
    if (this_present_priceChangedMinTick || that_present_priceChangedMinTick) {
      if (!(this_present_priceChangedMinTick && that_present_priceChangedMinTick))
        return false;
      if (this.priceChangedMinTick != that.priceChangedMinTick)
        return false;
    }

    boolean this_present_winThresholdTick = true && this.isSetWinThresholdTick();
    boolean that_present_winThresholdTick = true && that.isSetWinThresholdTick();
    if (this_present_winThresholdTick || that_present_winThresholdTick) {
      if (!(this_present_winThresholdTick && that_present_winThresholdTick))
        return false;
      if (this.winThresholdTick != that.winThresholdTick)
        return false;
    }

    boolean this_present_hangBasePriceType = true && this.isSetHangBasePriceType();
    boolean that_present_hangBasePriceType = true && that.isSetHangBasePriceType();
    if (this_present_hangBasePriceType || that_present_hangBasePriceType) {
      if (!(this_present_hangBasePriceType && that_present_hangBasePriceType))
        return false;
      if (!this.hangBasePriceType.equals(that.hangBasePriceType))
        return false;
    }

    boolean this_present_useTimeRegions = true && this.isSetUseTimeRegions();
    boolean that_present_useTimeRegions = true && that.isSetUseTimeRegions();
    if (this_present_useTimeRegions || that_present_useTimeRegions) {
      if (!(this_present_useTimeRegions && that_present_useTimeRegions))
        return false;
      if (this.useTimeRegions != that.useTimeRegions)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TurkeyParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMaxPursueNum()).compareTo(other.isSetMaxPursueNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxPursueNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxPursueNum, other.maxPursueNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxCancelNum()).compareTo(other.isSetMaxCancelNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxCancelNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCancelNum, other.maxCancelNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPankouRate()).compareTo(other.isSetPankouRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPankouRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pankouRate, other.pankouRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopWinTick()).compareTo(other.isSetStopWinTick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopWinTick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopWinTick, other.stopWinTick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopLossTick()).compareTo(other.isSetStopLossTick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopLossTick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopLossTick, other.stopLossTick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlusTick()).compareTo(other.isSetPlusTick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlusTick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plusTick, other.plusTick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxPlusTick()).compareTo(other.isSetMaxPlusTick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxPlusTick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxPlusTick, other.maxPlusTick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceChangedMinTick()).compareTo(other.isSetPriceChangedMinTick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceChangedMinTick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceChangedMinTick, other.priceChangedMinTick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWinThresholdTick()).compareTo(other.isSetWinThresholdTick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWinThresholdTick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winThresholdTick, other.winThresholdTick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHangBasePriceType()).compareTo(other.isSetHangBasePriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHangBasePriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hangBasePriceType, other.hangBasePriceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseTimeRegions()).compareTo(other.isSetUseTimeRegions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseTimeRegions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useTimeRegions, other.useTimeRegions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TurkeyParam(");
    boolean first = true;

    if (isSetMaxPursueNum()) {
      sb.append("maxPursueNum:");
      sb.append(this.maxPursueNum);
      first = false;
    }
    if (isSetMaxCancelNum()) {
      if (!first) sb.append(", ");
      sb.append("maxCancelNum:");
      sb.append(this.maxCancelNum);
      first = false;
    }
    if (isSetPankouRate()) {
      if (!first) sb.append(", ");
      sb.append("pankouRate:");
      sb.append(this.pankouRate);
      first = false;
    }
    if (isSetStopWinTick()) {
      if (!first) sb.append(", ");
      sb.append("stopWinTick:");
      sb.append(this.stopWinTick);
      first = false;
    }
    if (isSetStopLossTick()) {
      if (!first) sb.append(", ");
      sb.append("stopLossTick:");
      sb.append(this.stopLossTick);
      first = false;
    }
    if (isSetPlusTick()) {
      if (!first) sb.append(", ");
      sb.append("plusTick:");
      sb.append(this.plusTick);
      first = false;
    }
    if (isSetMaxPlusTick()) {
      if (!first) sb.append(", ");
      sb.append("maxPlusTick:");
      sb.append(this.maxPlusTick);
      first = false;
    }
    if (isSetPriceChangedMinTick()) {
      if (!first) sb.append(", ");
      sb.append("priceChangedMinTick:");
      sb.append(this.priceChangedMinTick);
      first = false;
    }
    if (isSetWinThresholdTick()) {
      if (!first) sb.append(", ");
      sb.append("winThresholdTick:");
      sb.append(this.winThresholdTick);
      first = false;
    }
    if (isSetHangBasePriceType()) {
      if (!first) sb.append(", ");
      sb.append("hangBasePriceType:");
      if (this.hangBasePriceType == null) {
        sb.append("null");
      } else {
        sb.append(this.hangBasePriceType);
      }
      first = false;
    }
    if (isSetUseTimeRegions()) {
      if (!first) sb.append(", ");
      sb.append("useTimeRegions:");
      sb.append(this.useTimeRegions);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TurkeyParamStandardSchemeFactory implements SchemeFactory {
    public TurkeyParamStandardScheme getScheme() {
      return new TurkeyParamStandardScheme();
    }
  }

  private static class TurkeyParamStandardScheme extends StandardScheme<TurkeyParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TurkeyParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAX_PURSUE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxPursueNum = iprot.readI32();
              struct.setMaxPursueNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_CANCEL_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxCancelNum = iprot.readI32();
              struct.setMaxCancelNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PANKOU_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pankouRate = iprot.readDouble();
              struct.setPankouRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STOP_WIN_TICK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stopWinTick = iprot.readI32();
              struct.setStopWinTickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STOP_LOSS_TICK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stopLossTick = iprot.readI32();
              struct.setStopLossTickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PLUS_TICK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.plusTick = iprot.readI32();
              struct.setPlusTickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MAX_PLUS_TICK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxPlusTick = iprot.readI32();
              struct.setMaxPlusTickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PRICE_CHANGED_MIN_TICK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priceChangedMinTick = iprot.readI32();
              struct.setPriceChangedMinTickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // WIN_THRESHOLD_TICK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.winThresholdTick = iprot.readI32();
              struct.setWinThresholdTickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // HANG_BASE_PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hangBasePriceType = BasePriceType.findByValue(iprot.readI32());
              struct.setHangBasePriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // USE_TIME_REGIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.useTimeRegions = iprot.readBool();
              struct.setUseTimeRegionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TurkeyParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMaxPursueNum()) {
        oprot.writeFieldBegin(MAX_PURSUE_NUM_FIELD_DESC);
        oprot.writeI32(struct.maxPursueNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxCancelNum()) {
        oprot.writeFieldBegin(MAX_CANCEL_NUM_FIELD_DESC);
        oprot.writeI32(struct.maxCancelNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPankouRate()) {
        oprot.writeFieldBegin(PANKOU_RATE_FIELD_DESC);
        oprot.writeDouble(struct.pankouRate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStopWinTick()) {
        oprot.writeFieldBegin(STOP_WIN_TICK_FIELD_DESC);
        oprot.writeI32(struct.stopWinTick);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStopLossTick()) {
        oprot.writeFieldBegin(STOP_LOSS_TICK_FIELD_DESC);
        oprot.writeI32(struct.stopLossTick);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPlusTick()) {
        oprot.writeFieldBegin(PLUS_TICK_FIELD_DESC);
        oprot.writeI32(struct.plusTick);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxPlusTick()) {
        oprot.writeFieldBegin(MAX_PLUS_TICK_FIELD_DESC);
        oprot.writeI32(struct.maxPlusTick);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPriceChangedMinTick()) {
        oprot.writeFieldBegin(PRICE_CHANGED_MIN_TICK_FIELD_DESC);
        oprot.writeI32(struct.priceChangedMinTick);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWinThresholdTick()) {
        oprot.writeFieldBegin(WIN_THRESHOLD_TICK_FIELD_DESC);
        oprot.writeI32(struct.winThresholdTick);
        oprot.writeFieldEnd();
      }
      if (struct.hangBasePriceType != null) {
        if (struct.isSetHangBasePriceType()) {
          oprot.writeFieldBegin(HANG_BASE_PRICE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.hangBasePriceType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUseTimeRegions()) {
        oprot.writeFieldBegin(USE_TIME_REGIONS_FIELD_DESC);
        oprot.writeBool(struct.useTimeRegions);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TurkeyParamTupleSchemeFactory implements SchemeFactory {
    public TurkeyParamTupleScheme getScheme() {
      return new TurkeyParamTupleScheme();
    }
  }

  private static class TurkeyParamTupleScheme extends TupleScheme<TurkeyParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TurkeyParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMaxPursueNum()) {
        optionals.set(0);
      }
      if (struct.isSetMaxCancelNum()) {
        optionals.set(1);
      }
      if (struct.isSetPankouRate()) {
        optionals.set(2);
      }
      if (struct.isSetStopWinTick()) {
        optionals.set(3);
      }
      if (struct.isSetStopLossTick()) {
        optionals.set(4);
      }
      if (struct.isSetPlusTick()) {
        optionals.set(5);
      }
      if (struct.isSetMaxPlusTick()) {
        optionals.set(6);
      }
      if (struct.isSetPriceChangedMinTick()) {
        optionals.set(7);
      }
      if (struct.isSetWinThresholdTick()) {
        optionals.set(8);
      }
      if (struct.isSetHangBasePriceType()) {
        optionals.set(9);
      }
      if (struct.isSetUseTimeRegions()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetMaxPursueNum()) {
        oprot.writeI32(struct.maxPursueNum);
      }
      if (struct.isSetMaxCancelNum()) {
        oprot.writeI32(struct.maxCancelNum);
      }
      if (struct.isSetPankouRate()) {
        oprot.writeDouble(struct.pankouRate);
      }
      if (struct.isSetStopWinTick()) {
        oprot.writeI32(struct.stopWinTick);
      }
      if (struct.isSetStopLossTick()) {
        oprot.writeI32(struct.stopLossTick);
      }
      if (struct.isSetPlusTick()) {
        oprot.writeI32(struct.plusTick);
      }
      if (struct.isSetMaxPlusTick()) {
        oprot.writeI32(struct.maxPlusTick);
      }
      if (struct.isSetPriceChangedMinTick()) {
        oprot.writeI32(struct.priceChangedMinTick);
      }
      if (struct.isSetWinThresholdTick()) {
        oprot.writeI32(struct.winThresholdTick);
      }
      if (struct.isSetHangBasePriceType()) {
        oprot.writeI32(struct.hangBasePriceType.getValue());
      }
      if (struct.isSetUseTimeRegions()) {
        oprot.writeBool(struct.useTimeRegions);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TurkeyParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.maxPursueNum = iprot.readI32();
        struct.setMaxPursueNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.maxCancelNum = iprot.readI32();
        struct.setMaxCancelNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pankouRate = iprot.readDouble();
        struct.setPankouRateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stopWinTick = iprot.readI32();
        struct.setStopWinTickIsSet(true);
      }
      if (incoming.get(4)) {
        struct.stopLossTick = iprot.readI32();
        struct.setStopLossTickIsSet(true);
      }
      if (incoming.get(5)) {
        struct.plusTick = iprot.readI32();
        struct.setPlusTickIsSet(true);
      }
      if (incoming.get(6)) {
        struct.maxPlusTick = iprot.readI32();
        struct.setMaxPlusTickIsSet(true);
      }
      if (incoming.get(7)) {
        struct.priceChangedMinTick = iprot.readI32();
        struct.setPriceChangedMinTickIsSet(true);
      }
      if (incoming.get(8)) {
        struct.winThresholdTick = iprot.readI32();
        struct.setWinThresholdTickIsSet(true);
      }
      if (incoming.get(9)) {
        struct.hangBasePriceType = BasePriceType.findByValue(iprot.readI32());
        struct.setHangBasePriceTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.useTimeRegions = iprot.readBool();
        struct.setUseTimeRegionsIsSet(true);
      }
    }
  }

}

