/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.common.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StdCompOrderStatusField implements org.apache.thrift.TBase<StdCompOrderStatusField, StdCompOrderStatusField._Fields>, java.io.Serializable, Cloneable, Comparable<StdCompOrderStatusField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StdCompOrderStatusField");

  private static final org.apache.thrift.protocol.TField COMPOSE_UKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("composeUkey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMP_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("compStatus", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COMP_LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("compLimitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField COMP_QTY_FIELD_DESC = new org.apache.thrift.protocol.TField("compQty", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField COMP_DIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("compDirect", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LEG_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("legList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastTimestamp", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("statusMsg", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField COMP_AVG_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("compAvgPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField ORDER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("orderTime", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField INSERT_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("insertTimestamp", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField SERIAL_VERSION_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("serialVersionUID", org.apache.thrift.protocol.TType.I64, (short)101);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StdCompOrderStatusFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StdCompOrderStatusFieldTupleSchemeFactory());
  }

  public String composeUkey; // required
  public String sledId; // required
  public int compStatus; // required
  public double compLimitPrice; // required
  public int compQty; // required
  public int compDirect; // required
  public List<StdCompOrderLegStatusField> legList; // required
  public long lastTimestamp; // optional
  public long timestamp; // optional
  public String statusMsg; // required
  public double compAvgPrice; // optional
  public String orderTime; // optional
  public long insertTimestamp; // optional
  public int sledAccountId; // optional
  public int userId; // optional
  public long serialVersionUID; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPOSE_UKEY((short)1, "composeUkey"),
    SLED_ID((short)2, "sledId"),
    COMP_STATUS((short)3, "compStatus"),
    COMP_LIMIT_PRICE((short)4, "compLimitPrice"),
    COMP_QTY((short)5, "compQty"),
    COMP_DIRECT((short)6, "compDirect"),
    LEG_LIST((short)7, "legList"),
    LAST_TIMESTAMP((short)9, "lastTimestamp"),
    TIMESTAMP((short)10, "timestamp"),
    STATUS_MSG((short)11, "statusMsg"),
    COMP_AVG_PRICE((short)12, "compAvgPrice"),
    ORDER_TIME((short)20, "orderTime"),
    INSERT_TIMESTAMP((short)21, "insertTimestamp"),
    SLED_ACCOUNT_ID((short)22, "sledAccountId"),
    USER_ID((short)23, "userId"),
    SERIAL_VERSION_UID((short)101, "serialVersionUID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPOSE_UKEY
          return COMPOSE_UKEY;
        case 2: // SLED_ID
          return SLED_ID;
        case 3: // COMP_STATUS
          return COMP_STATUS;
        case 4: // COMP_LIMIT_PRICE
          return COMP_LIMIT_PRICE;
        case 5: // COMP_QTY
          return COMP_QTY;
        case 6: // COMP_DIRECT
          return COMP_DIRECT;
        case 7: // LEG_LIST
          return LEG_LIST;
        case 9: // LAST_TIMESTAMP
          return LAST_TIMESTAMP;
        case 10: // TIMESTAMP
          return TIMESTAMP;
        case 11: // STATUS_MSG
          return STATUS_MSG;
        case 12: // COMP_AVG_PRICE
          return COMP_AVG_PRICE;
        case 20: // ORDER_TIME
          return ORDER_TIME;
        case 21: // INSERT_TIMESTAMP
          return INSERT_TIMESTAMP;
        case 22: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        case 23: // USER_ID
          return USER_ID;
        case 101: // SERIAL_VERSION_UID
          return SERIAL_VERSION_UID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPSTATUS_ISSET_ID = 0;
  private static final int __COMPLIMITPRICE_ISSET_ID = 1;
  private static final int __COMPQTY_ISSET_ID = 2;
  private static final int __COMPDIRECT_ISSET_ID = 3;
  private static final int __LASTTIMESTAMP_ISSET_ID = 4;
  private static final int __TIMESTAMP_ISSET_ID = 5;
  private static final int __COMPAVGPRICE_ISSET_ID = 6;
  private static final int __INSERTTIMESTAMP_ISSET_ID = 7;
  private static final int __SLEDACCOUNTID_ISSET_ID = 8;
  private static final int __USERID_ISSET_ID = 9;
  private static final int __SERIALVERSIONUID_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LAST_TIMESTAMP,_Fields.TIMESTAMP,_Fields.COMP_AVG_PRICE,_Fields.ORDER_TIME,_Fields.INSERT_TIMESTAMP,_Fields.SLED_ACCOUNT_ID,_Fields.USER_ID,_Fields.SERIAL_VERSION_UID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPOSE_UKEY, new org.apache.thrift.meta_data.FieldMetaData("composeUkey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_ID, new org.apache.thrift.meta_data.FieldMetaData("sledId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMP_STATUS, new org.apache.thrift.meta_data.FieldMetaData("compStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMP_LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("compLimitPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMP_QTY, new org.apache.thrift.meta_data.FieldMetaData("compQty", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMP_DIRECT, new org.apache.thrift.meta_data.FieldMetaData("compDirect", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEG_LIST, new org.apache.thrift.meta_data.FieldMetaData("legList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StdCompOrderLegStatusField.class))));
    tmpMap.put(_Fields.LAST_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS_MSG, new org.apache.thrift.meta_data.FieldMetaData("statusMsg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMP_AVG_PRICE, new org.apache.thrift.meta_data.FieldMetaData("compAvgPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORDER_TIME, new org.apache.thrift.meta_data.FieldMetaData("orderTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSERT_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("insertTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERIAL_VERSION_UID, new org.apache.thrift.meta_data.FieldMetaData("serialVersionUID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StdCompOrderStatusField.class, metaDataMap);
  }

  public StdCompOrderStatusField() {
  }

  public StdCompOrderStatusField(
    String composeUkey,
    String sledId,
    int compStatus,
    double compLimitPrice,
    int compQty,
    int compDirect,
    List<StdCompOrderLegStatusField> legList,
    String statusMsg)
  {
    this();
    this.composeUkey = composeUkey;
    this.sledId = sledId;
    this.compStatus = compStatus;
    setCompStatusIsSet(true);
    this.compLimitPrice = compLimitPrice;
    setCompLimitPriceIsSet(true);
    this.compQty = compQty;
    setCompQtyIsSet(true);
    this.compDirect = compDirect;
    setCompDirectIsSet(true);
    this.legList = legList;
    this.statusMsg = statusMsg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StdCompOrderStatusField(StdCompOrderStatusField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetComposeUkey()) {
      this.composeUkey = other.composeUkey;
    }
    if (other.isSetSledId()) {
      this.sledId = other.sledId;
    }
    this.compStatus = other.compStatus;
    this.compLimitPrice = other.compLimitPrice;
    this.compQty = other.compQty;
    this.compDirect = other.compDirect;
    if (other.isSetLegList()) {
      List<StdCompOrderLegStatusField> __this__legList = new ArrayList<StdCompOrderLegStatusField>(other.legList.size());
      for (StdCompOrderLegStatusField other_element : other.legList) {
        __this__legList.add(new StdCompOrderLegStatusField(other_element));
      }
      this.legList = __this__legList;
    }
    this.lastTimestamp = other.lastTimestamp;
    this.timestamp = other.timestamp;
    if (other.isSetStatusMsg()) {
      this.statusMsg = other.statusMsg;
    }
    this.compAvgPrice = other.compAvgPrice;
    if (other.isSetOrderTime()) {
      this.orderTime = other.orderTime;
    }
    this.insertTimestamp = other.insertTimestamp;
    this.sledAccountId = other.sledAccountId;
    this.userId = other.userId;
    this.serialVersionUID = other.serialVersionUID;
  }

  public StdCompOrderStatusField deepCopy() {
    return new StdCompOrderStatusField(this);
  }

  @Override
  public void clear() {
    this.composeUkey = null;
    this.sledId = null;
    setCompStatusIsSet(false);
    this.compStatus = 0;
    setCompLimitPriceIsSet(false);
    this.compLimitPrice = 0.0;
    setCompQtyIsSet(false);
    this.compQty = 0;
    setCompDirectIsSet(false);
    this.compDirect = 0;
    this.legList = null;
    setLastTimestampIsSet(false);
    this.lastTimestamp = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.statusMsg = null;
    setCompAvgPriceIsSet(false);
    this.compAvgPrice = 0.0;
    this.orderTime = null;
    setInsertTimestampIsSet(false);
    this.insertTimestamp = 0;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setSerialVersionUIDIsSet(false);
    this.serialVersionUID = 0;
  }

  public String getComposeUkey() {
    return this.composeUkey;
  }

  public StdCompOrderStatusField setComposeUkey(String composeUkey) {
    this.composeUkey = composeUkey;
    return this;
  }

  public void unsetComposeUkey() {
    this.composeUkey = null;
  }

  /** Returns true if field composeUkey is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeUkey() {
    return this.composeUkey != null;
  }

  public void setComposeUkeyIsSet(boolean value) {
    if (!value) {
      this.composeUkey = null;
    }
  }

  public String getSledId() {
    return this.sledId;
  }

  public StdCompOrderStatusField setSledId(String sledId) {
    this.sledId = sledId;
    return this;
  }

  public void unsetSledId() {
    this.sledId = null;
  }

  /** Returns true if field sledId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledId() {
    return this.sledId != null;
  }

  public void setSledIdIsSet(boolean value) {
    if (!value) {
      this.sledId = null;
    }
  }

  public int getCompStatus() {
    return this.compStatus;
  }

  public StdCompOrderStatusField setCompStatus(int compStatus) {
    this.compStatus = compStatus;
    setCompStatusIsSet(true);
    return this;
  }

  public void unsetCompStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPSTATUS_ISSET_ID);
  }

  /** Returns true if field compStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCompStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPSTATUS_ISSET_ID);
  }

  public void setCompStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPSTATUS_ISSET_ID, value);
  }

  public double getCompLimitPrice() {
    return this.compLimitPrice;
  }

  public StdCompOrderStatusField setCompLimitPrice(double compLimitPrice) {
    this.compLimitPrice = compLimitPrice;
    setCompLimitPriceIsSet(true);
    return this;
  }

  public void unsetCompLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLIMITPRICE_ISSET_ID);
  }

  /** Returns true if field compLimitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetCompLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLIMITPRICE_ISSET_ID);
  }

  public void setCompLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLIMITPRICE_ISSET_ID, value);
  }

  public int getCompQty() {
    return this.compQty;
  }

  public StdCompOrderStatusField setCompQty(int compQty) {
    this.compQty = compQty;
    setCompQtyIsSet(true);
    return this;
  }

  public void unsetCompQty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPQTY_ISSET_ID);
  }

  /** Returns true if field compQty is set (has been assigned a value) and false otherwise */
  public boolean isSetCompQty() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPQTY_ISSET_ID);
  }

  public void setCompQtyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPQTY_ISSET_ID, value);
  }

  public int getCompDirect() {
    return this.compDirect;
  }

  public StdCompOrderStatusField setCompDirect(int compDirect) {
    this.compDirect = compDirect;
    setCompDirectIsSet(true);
    return this;
  }

  public void unsetCompDirect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPDIRECT_ISSET_ID);
  }

  /** Returns true if field compDirect is set (has been assigned a value) and false otherwise */
  public boolean isSetCompDirect() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPDIRECT_ISSET_ID);
  }

  public void setCompDirectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPDIRECT_ISSET_ID, value);
  }

  public int getLegListSize() {
    return (this.legList == null) ? 0 : this.legList.size();
  }

  public java.util.Iterator<StdCompOrderLegStatusField> getLegListIterator() {
    return (this.legList == null) ? null : this.legList.iterator();
  }

  public void addToLegList(StdCompOrderLegStatusField elem) {
    if (this.legList == null) {
      this.legList = new ArrayList<StdCompOrderLegStatusField>();
    }
    this.legList.add(elem);
  }

  public List<StdCompOrderLegStatusField> getLegList() {
    return this.legList;
  }

  public StdCompOrderStatusField setLegList(List<StdCompOrderLegStatusField> legList) {
    this.legList = legList;
    return this;
  }

  public void unsetLegList() {
    this.legList = null;
  }

  /** Returns true if field legList is set (has been assigned a value) and false otherwise */
  public boolean isSetLegList() {
    return this.legList != null;
  }

  public void setLegListIsSet(boolean value) {
    if (!value) {
      this.legList = null;
    }
  }

  public long getLastTimestamp() {
    return this.lastTimestamp;
  }

  public StdCompOrderStatusField setLastTimestamp(long lastTimestamp) {
    this.lastTimestamp = lastTimestamp;
    setLastTimestampIsSet(true);
    return this;
  }

  public void unsetLastTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTTIMESTAMP_ISSET_ID);
  }

  public void setLastTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTTIMESTAMP_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public StdCompOrderStatusField setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public String getStatusMsg() {
    return this.statusMsg;
  }

  public StdCompOrderStatusField setStatusMsg(String statusMsg) {
    this.statusMsg = statusMsg;
    return this;
  }

  public void unsetStatusMsg() {
    this.statusMsg = null;
  }

  /** Returns true if field statusMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusMsg() {
    return this.statusMsg != null;
  }

  public void setStatusMsgIsSet(boolean value) {
    if (!value) {
      this.statusMsg = null;
    }
  }

  public double getCompAvgPrice() {
    return this.compAvgPrice;
  }

  public StdCompOrderStatusField setCompAvgPrice(double compAvgPrice) {
    this.compAvgPrice = compAvgPrice;
    setCompAvgPriceIsSet(true);
    return this;
  }

  public void unsetCompAvgPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPAVGPRICE_ISSET_ID);
  }

  /** Returns true if field compAvgPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetCompAvgPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPAVGPRICE_ISSET_ID);
  }

  public void setCompAvgPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPAVGPRICE_ISSET_ID, value);
  }

  public String getOrderTime() {
    return this.orderTime;
  }

  public StdCompOrderStatusField setOrderTime(String orderTime) {
    this.orderTime = orderTime;
    return this;
  }

  public void unsetOrderTime() {
    this.orderTime = null;
  }

  /** Returns true if field orderTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderTime() {
    return this.orderTime != null;
  }

  public void setOrderTimeIsSet(boolean value) {
    if (!value) {
      this.orderTime = null;
    }
  }

  public long getInsertTimestamp() {
    return this.insertTimestamp;
  }

  public StdCompOrderStatusField setInsertTimestamp(long insertTimestamp) {
    this.insertTimestamp = insertTimestamp;
    setInsertTimestampIsSet(true);
    return this;
  }

  public void unsetInsertTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSERTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field insertTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __INSERTTIMESTAMP_ISSET_ID);
  }

  public void setInsertTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSERTTIMESTAMP_ISSET_ID, value);
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public StdCompOrderStatusField setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public StdCompOrderStatusField setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public long getSerialVersionUID() {
    return this.serialVersionUID;
  }

  public StdCompOrderStatusField setSerialVersionUID(long serialVersionUID) {
    this.serialVersionUID = serialVersionUID;
    setSerialVersionUIDIsSet(true);
    return this;
  }

  public void unsetSerialVersionUID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID);
  }

  /** Returns true if field serialVersionUID is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialVersionUID() {
    return EncodingUtils.testBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID);
  }

  public void setSerialVersionUIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPOSE_UKEY:
      if (value == null) {
        unsetComposeUkey();
      } else {
        setComposeUkey((String)value);
      }
      break;

    case SLED_ID:
      if (value == null) {
        unsetSledId();
      } else {
        setSledId((String)value);
      }
      break;

    case COMP_STATUS:
      if (value == null) {
        unsetCompStatus();
      } else {
        setCompStatus((Integer)value);
      }
      break;

    case COMP_LIMIT_PRICE:
      if (value == null) {
        unsetCompLimitPrice();
      } else {
        setCompLimitPrice((Double)value);
      }
      break;

    case COMP_QTY:
      if (value == null) {
        unsetCompQty();
      } else {
        setCompQty((Integer)value);
      }
      break;

    case COMP_DIRECT:
      if (value == null) {
        unsetCompDirect();
      } else {
        setCompDirect((Integer)value);
      }
      break;

    case LEG_LIST:
      if (value == null) {
        unsetLegList();
      } else {
        setLegList((List<StdCompOrderLegStatusField>)value);
      }
      break;

    case LAST_TIMESTAMP:
      if (value == null) {
        unsetLastTimestamp();
      } else {
        setLastTimestamp((Long)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case STATUS_MSG:
      if (value == null) {
        unsetStatusMsg();
      } else {
        setStatusMsg((String)value);
      }
      break;

    case COMP_AVG_PRICE:
      if (value == null) {
        unsetCompAvgPrice();
      } else {
        setCompAvgPrice((Double)value);
      }
      break;

    case ORDER_TIME:
      if (value == null) {
        unsetOrderTime();
      } else {
        setOrderTime((String)value);
      }
      break;

    case INSERT_TIMESTAMP:
      if (value == null) {
        unsetInsertTimestamp();
      } else {
        setInsertTimestamp((Long)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case SERIAL_VERSION_UID:
      if (value == null) {
        unsetSerialVersionUID();
      } else {
        setSerialVersionUID((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPOSE_UKEY:
      return getComposeUkey();

    case SLED_ID:
      return getSledId();

    case COMP_STATUS:
      return Integer.valueOf(getCompStatus());

    case COMP_LIMIT_PRICE:
      return Double.valueOf(getCompLimitPrice());

    case COMP_QTY:
      return Integer.valueOf(getCompQty());

    case COMP_DIRECT:
      return Integer.valueOf(getCompDirect());

    case LEG_LIST:
      return getLegList();

    case LAST_TIMESTAMP:
      return Long.valueOf(getLastTimestamp());

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case STATUS_MSG:
      return getStatusMsg();

    case COMP_AVG_PRICE:
      return Double.valueOf(getCompAvgPrice());

    case ORDER_TIME:
      return getOrderTime();

    case INSERT_TIMESTAMP:
      return Long.valueOf(getInsertTimestamp());

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case SERIAL_VERSION_UID:
      return Long.valueOf(getSerialVersionUID());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPOSE_UKEY:
      return isSetComposeUkey();
    case SLED_ID:
      return isSetSledId();
    case COMP_STATUS:
      return isSetCompStatus();
    case COMP_LIMIT_PRICE:
      return isSetCompLimitPrice();
    case COMP_QTY:
      return isSetCompQty();
    case COMP_DIRECT:
      return isSetCompDirect();
    case LEG_LIST:
      return isSetLegList();
    case LAST_TIMESTAMP:
      return isSetLastTimestamp();
    case TIMESTAMP:
      return isSetTimestamp();
    case STATUS_MSG:
      return isSetStatusMsg();
    case COMP_AVG_PRICE:
      return isSetCompAvgPrice();
    case ORDER_TIME:
      return isSetOrderTime();
    case INSERT_TIMESTAMP:
      return isSetInsertTimestamp();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    case USER_ID:
      return isSetUserId();
    case SERIAL_VERSION_UID:
      return isSetSerialVersionUID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StdCompOrderStatusField)
      return this.equals((StdCompOrderStatusField)that);
    return false;
  }

  public boolean equals(StdCompOrderStatusField that) {
    if (that == null)
      return false;

    boolean this_present_composeUkey = true && this.isSetComposeUkey();
    boolean that_present_composeUkey = true && that.isSetComposeUkey();
    if (this_present_composeUkey || that_present_composeUkey) {
      if (!(this_present_composeUkey && that_present_composeUkey))
        return false;
      if (!this.composeUkey.equals(that.composeUkey))
        return false;
    }

    boolean this_present_sledId = true && this.isSetSledId();
    boolean that_present_sledId = true && that.isSetSledId();
    if (this_present_sledId || that_present_sledId) {
      if (!(this_present_sledId && that_present_sledId))
        return false;
      if (!this.sledId.equals(that.sledId))
        return false;
    }

    boolean this_present_compStatus = true;
    boolean that_present_compStatus = true;
    if (this_present_compStatus || that_present_compStatus) {
      if (!(this_present_compStatus && that_present_compStatus))
        return false;
      if (this.compStatus != that.compStatus)
        return false;
    }

    boolean this_present_compLimitPrice = true;
    boolean that_present_compLimitPrice = true;
    if (this_present_compLimitPrice || that_present_compLimitPrice) {
      if (!(this_present_compLimitPrice && that_present_compLimitPrice))
        return false;
      if (this.compLimitPrice != that.compLimitPrice)
        return false;
    }

    boolean this_present_compQty = true;
    boolean that_present_compQty = true;
    if (this_present_compQty || that_present_compQty) {
      if (!(this_present_compQty && that_present_compQty))
        return false;
      if (this.compQty != that.compQty)
        return false;
    }

    boolean this_present_compDirect = true;
    boolean that_present_compDirect = true;
    if (this_present_compDirect || that_present_compDirect) {
      if (!(this_present_compDirect && that_present_compDirect))
        return false;
      if (this.compDirect != that.compDirect)
        return false;
    }

    boolean this_present_legList = true && this.isSetLegList();
    boolean that_present_legList = true && that.isSetLegList();
    if (this_present_legList || that_present_legList) {
      if (!(this_present_legList && that_present_legList))
        return false;
      if (!this.legList.equals(that.legList))
        return false;
    }

    boolean this_present_lastTimestamp = true && this.isSetLastTimestamp();
    boolean that_present_lastTimestamp = true && that.isSetLastTimestamp();
    if (this_present_lastTimestamp || that_present_lastTimestamp) {
      if (!(this_present_lastTimestamp && that_present_lastTimestamp))
        return false;
      if (this.lastTimestamp != that.lastTimestamp)
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_statusMsg = true && this.isSetStatusMsg();
    boolean that_present_statusMsg = true && that.isSetStatusMsg();
    if (this_present_statusMsg || that_present_statusMsg) {
      if (!(this_present_statusMsg && that_present_statusMsg))
        return false;
      if (!this.statusMsg.equals(that.statusMsg))
        return false;
    }

    boolean this_present_compAvgPrice = true && this.isSetCompAvgPrice();
    boolean that_present_compAvgPrice = true && that.isSetCompAvgPrice();
    if (this_present_compAvgPrice || that_present_compAvgPrice) {
      if (!(this_present_compAvgPrice && that_present_compAvgPrice))
        return false;
      if (this.compAvgPrice != that.compAvgPrice)
        return false;
    }

    boolean this_present_orderTime = true && this.isSetOrderTime();
    boolean that_present_orderTime = true && that.isSetOrderTime();
    if (this_present_orderTime || that_present_orderTime) {
      if (!(this_present_orderTime && that_present_orderTime))
        return false;
      if (!this.orderTime.equals(that.orderTime))
        return false;
    }

    boolean this_present_insertTimestamp = true && this.isSetInsertTimestamp();
    boolean that_present_insertTimestamp = true && that.isSetInsertTimestamp();
    if (this_present_insertTimestamp || that_present_insertTimestamp) {
      if (!(this_present_insertTimestamp && that_present_insertTimestamp))
        return false;
      if (this.insertTimestamp != that.insertTimestamp)
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_serialVersionUID = true && this.isSetSerialVersionUID();
    boolean that_present_serialVersionUID = true && that.isSetSerialVersionUID();
    if (this_present_serialVersionUID || that_present_serialVersionUID) {
      if (!(this_present_serialVersionUID && that_present_serialVersionUID))
        return false;
      if (this.serialVersionUID != that.serialVersionUID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StdCompOrderStatusField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetComposeUkey()).compareTo(other.isSetComposeUkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeUkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeUkey, other.composeUkey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledId()).compareTo(other.isSetSledId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledId, other.sledId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompStatus()).compareTo(other.isSetCompStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compStatus, other.compStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompLimitPrice()).compareTo(other.isSetCompLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compLimitPrice, other.compLimitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompQty()).compareTo(other.isSetCompQty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompQty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compQty, other.compQty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompDirect()).compareTo(other.isSetCompDirect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompDirect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compDirect, other.compDirect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegList()).compareTo(other.isSetLegList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legList, other.legList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastTimestamp()).compareTo(other.isSetLastTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastTimestamp, other.lastTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusMsg()).compareTo(other.isSetStatusMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusMsg, other.statusMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompAvgPrice()).compareTo(other.isSetCompAvgPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompAvgPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compAvgPrice, other.compAvgPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderTime()).compareTo(other.isSetOrderTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderTime, other.orderTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertTimestamp()).compareTo(other.isSetInsertTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertTimestamp, other.insertTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialVersionUID()).compareTo(other.isSetSerialVersionUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialVersionUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialVersionUID, other.serialVersionUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StdCompOrderStatusField(");
    boolean first = true;

    sb.append("composeUkey:");
    if (this.composeUkey == null) {
      sb.append("null");
    } else {
      sb.append(this.composeUkey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sledId:");
    if (this.sledId == null) {
      sb.append("null");
    } else {
      sb.append(this.sledId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compStatus:");
    sb.append(this.compStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compLimitPrice:");
    sb.append(this.compLimitPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compQty:");
    sb.append(this.compQty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compDirect:");
    sb.append(this.compDirect);
    first = false;
    if (!first) sb.append(", ");
    sb.append("legList:");
    if (this.legList == null) {
      sb.append("null");
    } else {
      sb.append(this.legList);
    }
    first = false;
    if (isSetLastTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastTimestamp:");
      sb.append(this.lastTimestamp);
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("statusMsg:");
    if (this.statusMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.statusMsg);
    }
    first = false;
    if (isSetCompAvgPrice()) {
      if (!first) sb.append(", ");
      sb.append("compAvgPrice:");
      sb.append(this.compAvgPrice);
      first = false;
    }
    if (isSetOrderTime()) {
      if (!first) sb.append(", ");
      sb.append("orderTime:");
      if (this.orderTime == null) {
        sb.append("null");
      } else {
        sb.append(this.orderTime);
      }
      first = false;
    }
    if (isSetInsertTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("insertTimestamp:");
      sb.append(this.insertTimestamp);
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetSerialVersionUID()) {
      if (!first) sb.append(", ");
      sb.append("serialVersionUID:");
      sb.append(this.serialVersionUID);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (composeUkey == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'composeUkey' was not present! Struct: " + toString());
    }
    if (sledId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sledId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'compStatus' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'compLimitPrice' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'compQty' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'compDirect' because it's a primitive and you chose the non-beans generator.
    if (legList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'legList' was not present! Struct: " + toString());
    }
    if (statusMsg == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'statusMsg' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StdCompOrderStatusFieldStandardSchemeFactory implements SchemeFactory {
    public StdCompOrderStatusFieldStandardScheme getScheme() {
      return new StdCompOrderStatusFieldStandardScheme();
    }
  }

  private static class StdCompOrderStatusFieldStandardScheme extends StandardScheme<StdCompOrderStatusField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StdCompOrderStatusField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPOSE_UKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.composeUkey = iprot.readString();
              struct.setComposeUkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledId = iprot.readString();
              struct.setSledIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMP_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compStatus = iprot.readI32();
              struct.setCompStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMP_LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.compLimitPrice = iprot.readDouble();
              struct.setCompLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMP_QTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compQty = iprot.readI32();
              struct.setCompQtyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMP_DIRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compDirect = iprot.readI32();
              struct.setCompDirectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LEG_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                struct.legList = new ArrayList<StdCompOrderLegStatusField>(_list152.size);
                for (int _i153 = 0; _i153 < _list152.size; ++_i153)
                {
                  StdCompOrderLegStatusField _elem154;
                  _elem154 = new StdCompOrderLegStatusField();
                  _elem154.read(iprot);
                  struct.legList.add(_elem154);
                }
                iprot.readListEnd();
              }
              struct.setLegListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastTimestamp = iprot.readI64();
              struct.setLastTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusMsg = iprot.readString();
              struct.setStatusMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COMP_AVG_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.compAvgPrice = iprot.readDouble();
              struct.setCompAvgPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ORDER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderTime = iprot.readString();
              struct.setOrderTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // INSERT_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.insertTimestamp = iprot.readI64();
              struct.setInsertTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // SERIAL_VERSION_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serialVersionUID = iprot.readI64();
              struct.setSerialVersionUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCompStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'compStatus' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCompLimitPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'compLimitPrice' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCompQty()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'compQty' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCompDirect()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'compDirect' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StdCompOrderStatusField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.composeUkey != null) {
        oprot.writeFieldBegin(COMPOSE_UKEY_FIELD_DESC);
        oprot.writeString(struct.composeUkey);
        oprot.writeFieldEnd();
      }
      if (struct.sledId != null) {
        oprot.writeFieldBegin(SLED_ID_FIELD_DESC);
        oprot.writeString(struct.sledId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMP_STATUS_FIELD_DESC);
      oprot.writeI32(struct.compStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMP_LIMIT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.compLimitPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMP_QTY_FIELD_DESC);
      oprot.writeI32(struct.compQty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMP_DIRECT_FIELD_DESC);
      oprot.writeI32(struct.compDirect);
      oprot.writeFieldEnd();
      if (struct.legList != null) {
        oprot.writeFieldBegin(LEG_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.legList.size()));
          for (StdCompOrderLegStatusField _iter155 : struct.legList)
          {
            _iter155.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastTimestamp()) {
        oprot.writeFieldBegin(LAST_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.statusMsg != null) {
        oprot.writeFieldBegin(STATUS_MSG_FIELD_DESC);
        oprot.writeString(struct.statusMsg);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompAvgPrice()) {
        oprot.writeFieldBegin(COMP_AVG_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.compAvgPrice);
        oprot.writeFieldEnd();
      }
      if (struct.orderTime != null) {
        if (struct.isSetOrderTime()) {
          oprot.writeFieldBegin(ORDER_TIME_FIELD_DESC);
          oprot.writeString(struct.orderTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInsertTimestamp()) {
        oprot.writeFieldBegin(INSERT_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.insertTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSerialVersionUID()) {
        oprot.writeFieldBegin(SERIAL_VERSION_UID_FIELD_DESC);
        oprot.writeI64(struct.serialVersionUID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StdCompOrderStatusFieldTupleSchemeFactory implements SchemeFactory {
    public StdCompOrderStatusFieldTupleScheme getScheme() {
      return new StdCompOrderStatusFieldTupleScheme();
    }
  }

  private static class StdCompOrderStatusFieldTupleScheme extends TupleScheme<StdCompOrderStatusField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StdCompOrderStatusField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.composeUkey);
      oprot.writeString(struct.sledId);
      oprot.writeI32(struct.compStatus);
      oprot.writeDouble(struct.compLimitPrice);
      oprot.writeI32(struct.compQty);
      oprot.writeI32(struct.compDirect);
      {
        oprot.writeI32(struct.legList.size());
        for (StdCompOrderLegStatusField _iter156 : struct.legList)
        {
          _iter156.write(oprot);
        }
      }
      oprot.writeString(struct.statusMsg);
      BitSet optionals = new BitSet();
      if (struct.isSetLastTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(1);
      }
      if (struct.isSetCompAvgPrice()) {
        optionals.set(2);
      }
      if (struct.isSetOrderTime()) {
        optionals.set(3);
      }
      if (struct.isSetInsertTimestamp()) {
        optionals.set(4);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(5);
      }
      if (struct.isSetUserId()) {
        optionals.set(6);
      }
      if (struct.isSetSerialVersionUID()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetLastTimestamp()) {
        oprot.writeI64(struct.lastTimestamp);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetCompAvgPrice()) {
        oprot.writeDouble(struct.compAvgPrice);
      }
      if (struct.isSetOrderTime()) {
        oprot.writeString(struct.orderTime);
      }
      if (struct.isSetInsertTimestamp()) {
        oprot.writeI64(struct.insertTimestamp);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetSerialVersionUID()) {
        oprot.writeI64(struct.serialVersionUID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StdCompOrderStatusField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.composeUkey = iprot.readString();
      struct.setComposeUkeyIsSet(true);
      struct.sledId = iprot.readString();
      struct.setSledIdIsSet(true);
      struct.compStatus = iprot.readI32();
      struct.setCompStatusIsSet(true);
      struct.compLimitPrice = iprot.readDouble();
      struct.setCompLimitPriceIsSet(true);
      struct.compQty = iprot.readI32();
      struct.setCompQtyIsSet(true);
      struct.compDirect = iprot.readI32();
      struct.setCompDirectIsSet(true);
      {
        org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.legList = new ArrayList<StdCompOrderLegStatusField>(_list157.size);
        for (int _i158 = 0; _i158 < _list157.size; ++_i158)
        {
          StdCompOrderLegStatusField _elem159;
          _elem159 = new StdCompOrderLegStatusField();
          _elem159.read(iprot);
          struct.legList.add(_elem159);
        }
      }
      struct.setLegListIsSet(true);
      struct.statusMsg = iprot.readString();
      struct.setStatusMsgIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.lastTimestamp = iprot.readI64();
        struct.setLastTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.compAvgPrice = iprot.readDouble();
        struct.setCompAvgPriceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderTime = iprot.readString();
        struct.setOrderTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.insertTimestamp = iprot.readI64();
        struct.setInsertTimestampIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.serialVersionUID = iprot.readI64();
        struct.setSerialVersionUIDIsSet(true);
      }
    }
  }

}

