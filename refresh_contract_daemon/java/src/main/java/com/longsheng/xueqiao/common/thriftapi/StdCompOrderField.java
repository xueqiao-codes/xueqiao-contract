/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.common.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StdCompOrderField implements org.apache.thrift.TBase<StdCompOrderField, StdCompOrderField._Fields>, java.io.Serializable, Cloneable, Comparable<StdCompOrderField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StdCompOrderField");

  private static final org.apache.thrift.protocol.TField COMPOSE_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("composeField", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMP_LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("compLimitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField COMP_QTY_FIELD_DESC = new org.apache.thrift.protocol.TField("compQty", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COMP_DIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("compDirect", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SERIAL_VERSION_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("serialVersionUID", org.apache.thrift.protocol.TType.I64, (short)101);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StdCompOrderFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StdCompOrderFieldTupleSchemeFactory());
  }

  public StdComposeField composeField; // required
  public String sledId; // required
  public double compLimitPrice; // required
  public int compQty; // required
  public int compDirect; // required
  public long timestamp; // required
  public int sledAccountId; // optional
  public int userId; // optional
  public long serialVersionUID; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPOSE_FIELD((short)1, "composeField"),
    SLED_ID((short)2, "sledId"),
    COMP_LIMIT_PRICE((short)3, "compLimitPrice"),
    COMP_QTY((short)4, "compQty"),
    COMP_DIRECT((short)5, "compDirect"),
    TIMESTAMP((short)6, "timestamp"),
    SLED_ACCOUNT_ID((short)7, "sledAccountId"),
    USER_ID((short)8, "userId"),
    SERIAL_VERSION_UID((short)101, "serialVersionUID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPOSE_FIELD
          return COMPOSE_FIELD;
        case 2: // SLED_ID
          return SLED_ID;
        case 3: // COMP_LIMIT_PRICE
          return COMP_LIMIT_PRICE;
        case 4: // COMP_QTY
          return COMP_QTY;
        case 5: // COMP_DIRECT
          return COMP_DIRECT;
        case 6: // TIMESTAMP
          return TIMESTAMP;
        case 7: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        case 8: // USER_ID
          return USER_ID;
        case 101: // SERIAL_VERSION_UID
          return SERIAL_VERSION_UID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPLIMITPRICE_ISSET_ID = 0;
  private static final int __COMPQTY_ISSET_ID = 1;
  private static final int __COMPDIRECT_ISSET_ID = 2;
  private static final int __TIMESTAMP_ISSET_ID = 3;
  private static final int __SLEDACCOUNTID_ISSET_ID = 4;
  private static final int __USERID_ISSET_ID = 5;
  private static final int __SERIALVERSIONUID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_ACCOUNT_ID,_Fields.USER_ID,_Fields.SERIAL_VERSION_UID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPOSE_FIELD, new org.apache.thrift.meta_data.FieldMetaData("composeField", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StdComposeField.class)));
    tmpMap.put(_Fields.SLED_ID, new org.apache.thrift.meta_data.FieldMetaData("sledId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMP_LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("compLimitPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMP_QTY, new org.apache.thrift.meta_data.FieldMetaData("compQty", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMP_DIRECT, new org.apache.thrift.meta_data.FieldMetaData("compDirect", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERIAL_VERSION_UID, new org.apache.thrift.meta_data.FieldMetaData("serialVersionUID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StdCompOrderField.class, metaDataMap);
  }

  public StdCompOrderField() {
  }

  public StdCompOrderField(
    StdComposeField composeField,
    String sledId,
    double compLimitPrice,
    int compQty,
    int compDirect,
    long timestamp)
  {
    this();
    this.composeField = composeField;
    this.sledId = sledId;
    this.compLimitPrice = compLimitPrice;
    setCompLimitPriceIsSet(true);
    this.compQty = compQty;
    setCompQtyIsSet(true);
    this.compDirect = compDirect;
    setCompDirectIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StdCompOrderField(StdCompOrderField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetComposeField()) {
      this.composeField = new StdComposeField(other.composeField);
    }
    if (other.isSetSledId()) {
      this.sledId = other.sledId;
    }
    this.compLimitPrice = other.compLimitPrice;
    this.compQty = other.compQty;
    this.compDirect = other.compDirect;
    this.timestamp = other.timestamp;
    this.sledAccountId = other.sledAccountId;
    this.userId = other.userId;
    this.serialVersionUID = other.serialVersionUID;
  }

  public StdCompOrderField deepCopy() {
    return new StdCompOrderField(this);
  }

  @Override
  public void clear() {
    this.composeField = null;
    this.sledId = null;
    setCompLimitPriceIsSet(false);
    this.compLimitPrice = 0.0;
    setCompQtyIsSet(false);
    this.compQty = 0;
    setCompDirectIsSet(false);
    this.compDirect = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setSerialVersionUIDIsSet(false);
    this.serialVersionUID = 0;
  }

  public StdComposeField getComposeField() {
    return this.composeField;
  }

  public StdCompOrderField setComposeField(StdComposeField composeField) {
    this.composeField = composeField;
    return this;
  }

  public void unsetComposeField() {
    this.composeField = null;
  }

  /** Returns true if field composeField is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeField() {
    return this.composeField != null;
  }

  public void setComposeFieldIsSet(boolean value) {
    if (!value) {
      this.composeField = null;
    }
  }

  public String getSledId() {
    return this.sledId;
  }

  public StdCompOrderField setSledId(String sledId) {
    this.sledId = sledId;
    return this;
  }

  public void unsetSledId() {
    this.sledId = null;
  }

  /** Returns true if field sledId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledId() {
    return this.sledId != null;
  }

  public void setSledIdIsSet(boolean value) {
    if (!value) {
      this.sledId = null;
    }
  }

  public double getCompLimitPrice() {
    return this.compLimitPrice;
  }

  public StdCompOrderField setCompLimitPrice(double compLimitPrice) {
    this.compLimitPrice = compLimitPrice;
    setCompLimitPriceIsSet(true);
    return this;
  }

  public void unsetCompLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLIMITPRICE_ISSET_ID);
  }

  /** Returns true if field compLimitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetCompLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLIMITPRICE_ISSET_ID);
  }

  public void setCompLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLIMITPRICE_ISSET_ID, value);
  }

  public int getCompQty() {
    return this.compQty;
  }

  public StdCompOrderField setCompQty(int compQty) {
    this.compQty = compQty;
    setCompQtyIsSet(true);
    return this;
  }

  public void unsetCompQty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPQTY_ISSET_ID);
  }

  /** Returns true if field compQty is set (has been assigned a value) and false otherwise */
  public boolean isSetCompQty() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPQTY_ISSET_ID);
  }

  public void setCompQtyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPQTY_ISSET_ID, value);
  }

  public int getCompDirect() {
    return this.compDirect;
  }

  public StdCompOrderField setCompDirect(int compDirect) {
    this.compDirect = compDirect;
    setCompDirectIsSet(true);
    return this;
  }

  public void unsetCompDirect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPDIRECT_ISSET_ID);
  }

  /** Returns true if field compDirect is set (has been assigned a value) and false otherwise */
  public boolean isSetCompDirect() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPDIRECT_ISSET_ID);
  }

  public void setCompDirectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPDIRECT_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public StdCompOrderField setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public StdCompOrderField setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public StdCompOrderField setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public long getSerialVersionUID() {
    return this.serialVersionUID;
  }

  public StdCompOrderField setSerialVersionUID(long serialVersionUID) {
    this.serialVersionUID = serialVersionUID;
    setSerialVersionUIDIsSet(true);
    return this;
  }

  public void unsetSerialVersionUID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID);
  }

  /** Returns true if field serialVersionUID is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialVersionUID() {
    return EncodingUtils.testBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID);
  }

  public void setSerialVersionUIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPOSE_FIELD:
      if (value == null) {
        unsetComposeField();
      } else {
        setComposeField((StdComposeField)value);
      }
      break;

    case SLED_ID:
      if (value == null) {
        unsetSledId();
      } else {
        setSledId((String)value);
      }
      break;

    case COMP_LIMIT_PRICE:
      if (value == null) {
        unsetCompLimitPrice();
      } else {
        setCompLimitPrice((Double)value);
      }
      break;

    case COMP_QTY:
      if (value == null) {
        unsetCompQty();
      } else {
        setCompQty((Integer)value);
      }
      break;

    case COMP_DIRECT:
      if (value == null) {
        unsetCompDirect();
      } else {
        setCompDirect((Integer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case SERIAL_VERSION_UID:
      if (value == null) {
        unsetSerialVersionUID();
      } else {
        setSerialVersionUID((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPOSE_FIELD:
      return getComposeField();

    case SLED_ID:
      return getSledId();

    case COMP_LIMIT_PRICE:
      return Double.valueOf(getCompLimitPrice());

    case COMP_QTY:
      return Integer.valueOf(getCompQty());

    case COMP_DIRECT:
      return Integer.valueOf(getCompDirect());

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case SERIAL_VERSION_UID:
      return Long.valueOf(getSerialVersionUID());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPOSE_FIELD:
      return isSetComposeField();
    case SLED_ID:
      return isSetSledId();
    case COMP_LIMIT_PRICE:
      return isSetCompLimitPrice();
    case COMP_QTY:
      return isSetCompQty();
    case COMP_DIRECT:
      return isSetCompDirect();
    case TIMESTAMP:
      return isSetTimestamp();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    case USER_ID:
      return isSetUserId();
    case SERIAL_VERSION_UID:
      return isSetSerialVersionUID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StdCompOrderField)
      return this.equals((StdCompOrderField)that);
    return false;
  }

  public boolean equals(StdCompOrderField that) {
    if (that == null)
      return false;

    boolean this_present_composeField = true && this.isSetComposeField();
    boolean that_present_composeField = true && that.isSetComposeField();
    if (this_present_composeField || that_present_composeField) {
      if (!(this_present_composeField && that_present_composeField))
        return false;
      if (!this.composeField.equals(that.composeField))
        return false;
    }

    boolean this_present_sledId = true && this.isSetSledId();
    boolean that_present_sledId = true && that.isSetSledId();
    if (this_present_sledId || that_present_sledId) {
      if (!(this_present_sledId && that_present_sledId))
        return false;
      if (!this.sledId.equals(that.sledId))
        return false;
    }

    boolean this_present_compLimitPrice = true;
    boolean that_present_compLimitPrice = true;
    if (this_present_compLimitPrice || that_present_compLimitPrice) {
      if (!(this_present_compLimitPrice && that_present_compLimitPrice))
        return false;
      if (this.compLimitPrice != that.compLimitPrice)
        return false;
    }

    boolean this_present_compQty = true;
    boolean that_present_compQty = true;
    if (this_present_compQty || that_present_compQty) {
      if (!(this_present_compQty && that_present_compQty))
        return false;
      if (this.compQty != that.compQty)
        return false;
    }

    boolean this_present_compDirect = true;
    boolean that_present_compDirect = true;
    if (this_present_compDirect || that_present_compDirect) {
      if (!(this_present_compDirect && that_present_compDirect))
        return false;
      if (this.compDirect != that.compDirect)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_serialVersionUID = true && this.isSetSerialVersionUID();
    boolean that_present_serialVersionUID = true && that.isSetSerialVersionUID();
    if (this_present_serialVersionUID || that_present_serialVersionUID) {
      if (!(this_present_serialVersionUID && that_present_serialVersionUID))
        return false;
      if (this.serialVersionUID != that.serialVersionUID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StdCompOrderField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetComposeField()).compareTo(other.isSetComposeField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeField, other.composeField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledId()).compareTo(other.isSetSledId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledId, other.sledId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompLimitPrice()).compareTo(other.isSetCompLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compLimitPrice, other.compLimitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompQty()).compareTo(other.isSetCompQty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompQty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compQty, other.compQty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompDirect()).compareTo(other.isSetCompDirect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompDirect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compDirect, other.compDirect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialVersionUID()).compareTo(other.isSetSerialVersionUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialVersionUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialVersionUID, other.serialVersionUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StdCompOrderField(");
    boolean first = true;

    sb.append("composeField:");
    if (this.composeField == null) {
      sb.append("null");
    } else {
      sb.append(this.composeField);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sledId:");
    if (this.sledId == null) {
      sb.append("null");
    } else {
      sb.append(this.sledId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compLimitPrice:");
    sb.append(this.compLimitPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compQty:");
    sb.append(this.compQty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compDirect:");
    sb.append(this.compDirect);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetSerialVersionUID()) {
      if (!first) sb.append(", ");
      sb.append("serialVersionUID:");
      sb.append(this.serialVersionUID);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (composeField == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'composeField' was not present! Struct: " + toString());
    }
    if (sledId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sledId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'compLimitPrice' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'compQty' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'compDirect' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (composeField != null) {
      composeField.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StdCompOrderFieldStandardSchemeFactory implements SchemeFactory {
    public StdCompOrderFieldStandardScheme getScheme() {
      return new StdCompOrderFieldStandardScheme();
    }
  }

  private static class StdCompOrderFieldStandardScheme extends StandardScheme<StdCompOrderField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StdCompOrderField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPOSE_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.composeField = new StdComposeField();
              struct.composeField.read(iprot);
              struct.setComposeFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledId = iprot.readString();
              struct.setSledIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMP_LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.compLimitPrice = iprot.readDouble();
              struct.setCompLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMP_QTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compQty = iprot.readI32();
              struct.setCompQtyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMP_DIRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compDirect = iprot.readI32();
              struct.setCompDirectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // SERIAL_VERSION_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serialVersionUID = iprot.readI64();
              struct.setSerialVersionUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCompLimitPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'compLimitPrice' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCompQty()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'compQty' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCompDirect()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'compDirect' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StdCompOrderField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.composeField != null) {
        oprot.writeFieldBegin(COMPOSE_FIELD_FIELD_DESC);
        struct.composeField.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.sledId != null) {
        oprot.writeFieldBegin(SLED_ID_FIELD_DESC);
        oprot.writeString(struct.sledId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMP_LIMIT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.compLimitPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMP_QTY_FIELD_DESC);
      oprot.writeI32(struct.compQty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMP_DIRECT_FIELD_DESC);
      oprot.writeI32(struct.compDirect);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSerialVersionUID()) {
        oprot.writeFieldBegin(SERIAL_VERSION_UID_FIELD_DESC);
        oprot.writeI64(struct.serialVersionUID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StdCompOrderFieldTupleSchemeFactory implements SchemeFactory {
    public StdCompOrderFieldTupleScheme getScheme() {
      return new StdCompOrderFieldTupleScheme();
    }
  }

  private static class StdCompOrderFieldTupleScheme extends TupleScheme<StdCompOrderField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StdCompOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.composeField.write(oprot);
      oprot.writeString(struct.sledId);
      oprot.writeDouble(struct.compLimitPrice);
      oprot.writeI32(struct.compQty);
      oprot.writeI32(struct.compDirect);
      oprot.writeI64(struct.timestamp);
      BitSet optionals = new BitSet();
      if (struct.isSetSledAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetSerialVersionUID()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetSerialVersionUID()) {
        oprot.writeI64(struct.serialVersionUID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StdCompOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.composeField = new StdComposeField();
      struct.composeField.read(iprot);
      struct.setComposeFieldIsSet(true);
      struct.sledId = iprot.readString();
      struct.setSledIdIsSet(true);
      struct.compLimitPrice = iprot.readDouble();
      struct.setCompLimitPriceIsSet(true);
      struct.compQty = iprot.readI32();
      struct.setCompQtyIsSet(true);
      struct.compDirect = iprot.readI32();
      struct.setCompDirectIsSet(true);
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serialVersionUID = iprot.readI64();
        struct.setSerialVersionUIDIsSet(true);
      }
    }
  }

}

