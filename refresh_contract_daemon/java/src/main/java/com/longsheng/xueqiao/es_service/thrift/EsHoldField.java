/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.es_service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EsHoldField implements org.apache.thrift.TBase<EsHoldField, EsHoldField._Fields>, java.io.Serializable, Cloneable, Comparable<EsHoldField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EsHoldField");

  private static final org.apache.thrift.protocol.TField HOLD_KEY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("holdKeyId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMMODITY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTRACT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("direct", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField HEDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("hedge", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TRADE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField TRADE_VOL_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeVol", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField Y_SETTLE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("ySettlePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField T_NEW_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("tNewPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField MATCH_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("matchDateTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField MATCH_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("matchNo", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DEPOSIT_FIELD_DESC = new org.apache.thrift.protocol.TField("deposit", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField KEEP_DEPOSIT_FIELD_DESC = new org.apache.thrift.protocol.TField("keepDeposit", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField CLIENT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientNo", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentId", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EsHoldFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EsHoldFieldTupleSchemeFactory());
  }

  public int holdKeyId; // optional
  public String commodityNo; // optional
  public String contractNo; // optional
  /**
   * 
   * @see EsDirectType
   */
  public EsDirectType direct; // optional
  /**
   * 
   * @see EsHedgeType
   */
  public EsHedgeType hedge; // optional
  public double tradePrice; // optional
  public int tradeVol; // optional
  public double ySettlePrice; // optional
  public double tNewPrice; // optional
  public long matchDateTime; // optional
  public String matchNo; // optional
  public double deposit; // optional
  public double keepDeposit; // optional
  public int sledAccountId; // optional
  public String clientNo; // optional
  public String instrumentId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOLD_KEY_ID((short)1, "holdKeyId"),
    COMMODITY_NO((short)2, "commodityNo"),
    CONTRACT_NO((short)3, "contractNo"),
    /**
     * 
     * @see EsDirectType
     */
    DIRECT((short)4, "direct"),
    /**
     * 
     * @see EsHedgeType
     */
    HEDGE((short)5, "hedge"),
    TRADE_PRICE((short)6, "tradePrice"),
    TRADE_VOL((short)7, "tradeVol"),
    Y_SETTLE_PRICE((short)8, "ySettlePrice"),
    T_NEW_PRICE((short)9, "tNewPrice"),
    MATCH_DATE_TIME((short)10, "matchDateTime"),
    MATCH_NO((short)11, "matchNo"),
    DEPOSIT((short)12, "deposit"),
    KEEP_DEPOSIT((short)13, "keepDeposit"),
    SLED_ACCOUNT_ID((short)14, "sledAccountId"),
    CLIENT_NO((short)15, "clientNo"),
    INSTRUMENT_ID((short)16, "instrumentId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOLD_KEY_ID
          return HOLD_KEY_ID;
        case 2: // COMMODITY_NO
          return COMMODITY_NO;
        case 3: // CONTRACT_NO
          return CONTRACT_NO;
        case 4: // DIRECT
          return DIRECT;
        case 5: // HEDGE
          return HEDGE;
        case 6: // TRADE_PRICE
          return TRADE_PRICE;
        case 7: // TRADE_VOL
          return TRADE_VOL;
        case 8: // Y_SETTLE_PRICE
          return Y_SETTLE_PRICE;
        case 9: // T_NEW_PRICE
          return T_NEW_PRICE;
        case 10: // MATCH_DATE_TIME
          return MATCH_DATE_TIME;
        case 11: // MATCH_NO
          return MATCH_NO;
        case 12: // DEPOSIT
          return DEPOSIT;
        case 13: // KEEP_DEPOSIT
          return KEEP_DEPOSIT;
        case 14: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        case 15: // CLIENT_NO
          return CLIENT_NO;
        case 16: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HOLDKEYID_ISSET_ID = 0;
  private static final int __TRADEPRICE_ISSET_ID = 1;
  private static final int __TRADEVOL_ISSET_ID = 2;
  private static final int __YSETTLEPRICE_ISSET_ID = 3;
  private static final int __TNEWPRICE_ISSET_ID = 4;
  private static final int __MATCHDATETIME_ISSET_ID = 5;
  private static final int __DEPOSIT_ISSET_ID = 6;
  private static final int __KEEPDEPOSIT_ISSET_ID = 7;
  private static final int __SLEDACCOUNTID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.HOLD_KEY_ID,_Fields.COMMODITY_NO,_Fields.CONTRACT_NO,_Fields.DIRECT,_Fields.HEDGE,_Fields.TRADE_PRICE,_Fields.TRADE_VOL,_Fields.Y_SETTLE_PRICE,_Fields.T_NEW_PRICE,_Fields.MATCH_DATE_TIME,_Fields.MATCH_NO,_Fields.DEPOSIT,_Fields.KEEP_DEPOSIT,_Fields.SLED_ACCOUNT_ID,_Fields.CLIENT_NO,_Fields.INSTRUMENT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOLD_KEY_ID, new org.apache.thrift.meta_data.FieldMetaData("holdKeyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMODITY_NO, new org.apache.thrift.meta_data.FieldMetaData("commodityNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_NO, new org.apache.thrift.meta_data.FieldMetaData("contractNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIRECT, new org.apache.thrift.meta_data.FieldMetaData("direct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsDirectType.class)));
    tmpMap.put(_Fields.HEDGE, new org.apache.thrift.meta_data.FieldMetaData("hedge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsHedgeType.class)));
    tmpMap.put(_Fields.TRADE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("tradePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRADE_VOL, new org.apache.thrift.meta_data.FieldMetaData("tradeVol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.Y_SETTLE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("ySettlePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.T_NEW_PRICE, new org.apache.thrift.meta_data.FieldMetaData("tNewPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MATCH_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("matchDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MATCH_NO, new org.apache.thrift.meta_data.FieldMetaData("matchNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPOSIT, new org.apache.thrift.meta_data.FieldMetaData("deposit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.KEEP_DEPOSIT, new org.apache.thrift.meta_data.FieldMetaData("keepDeposit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLIENT_NO, new org.apache.thrift.meta_data.FieldMetaData("clientNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EsHoldField.class, metaDataMap);
  }

  public EsHoldField() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EsHoldField(EsHoldField other) {
    __isset_bitfield = other.__isset_bitfield;
    this.holdKeyId = other.holdKeyId;
    if (other.isSetCommodityNo()) {
      this.commodityNo = other.commodityNo;
    }
    if (other.isSetContractNo()) {
      this.contractNo = other.contractNo;
    }
    if (other.isSetDirect()) {
      this.direct = other.direct;
    }
    if (other.isSetHedge()) {
      this.hedge = other.hedge;
    }
    this.tradePrice = other.tradePrice;
    this.tradeVol = other.tradeVol;
    this.ySettlePrice = other.ySettlePrice;
    this.tNewPrice = other.tNewPrice;
    this.matchDateTime = other.matchDateTime;
    if (other.isSetMatchNo()) {
      this.matchNo = other.matchNo;
    }
    this.deposit = other.deposit;
    this.keepDeposit = other.keepDeposit;
    this.sledAccountId = other.sledAccountId;
    if (other.isSetClientNo()) {
      this.clientNo = other.clientNo;
    }
    if (other.isSetInstrumentId()) {
      this.instrumentId = other.instrumentId;
    }
  }

  public EsHoldField deepCopy() {
    return new EsHoldField(this);
  }

  @Override
  public void clear() {
    setHoldKeyIdIsSet(false);
    this.holdKeyId = 0;
    this.commodityNo = null;
    this.contractNo = null;
    this.direct = null;
    this.hedge = null;
    setTradePriceIsSet(false);
    this.tradePrice = 0.0;
    setTradeVolIsSet(false);
    this.tradeVol = 0;
    setYSettlePriceIsSet(false);
    this.ySettlePrice = 0.0;
    setTNewPriceIsSet(false);
    this.tNewPrice = 0.0;
    setMatchDateTimeIsSet(false);
    this.matchDateTime = 0;
    this.matchNo = null;
    setDepositIsSet(false);
    this.deposit = 0.0;
    setKeepDepositIsSet(false);
    this.keepDeposit = 0.0;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
    this.clientNo = null;
    this.instrumentId = null;
  }

  public int getHoldKeyId() {
    return this.holdKeyId;
  }

  public EsHoldField setHoldKeyId(int holdKeyId) {
    this.holdKeyId = holdKeyId;
    setHoldKeyIdIsSet(true);
    return this;
  }

  public void unsetHoldKeyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOLDKEYID_ISSET_ID);
  }

  /** Returns true if field holdKeyId is set (has been assigned a value) and false otherwise */
  public boolean isSetHoldKeyId() {
    return EncodingUtils.testBit(__isset_bitfield, __HOLDKEYID_ISSET_ID);
  }

  public void setHoldKeyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOLDKEYID_ISSET_ID, value);
  }

  public String getCommodityNo() {
    return this.commodityNo;
  }

  public EsHoldField setCommodityNo(String commodityNo) {
    this.commodityNo = commodityNo;
    return this;
  }

  public void unsetCommodityNo() {
    this.commodityNo = null;
  }

  /** Returns true if field commodityNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityNo() {
    return this.commodityNo != null;
  }

  public void setCommodityNoIsSet(boolean value) {
    if (!value) {
      this.commodityNo = null;
    }
  }

  public String getContractNo() {
    return this.contractNo;
  }

  public EsHoldField setContractNo(String contractNo) {
    this.contractNo = contractNo;
    return this;
  }

  public void unsetContractNo() {
    this.contractNo = null;
  }

  /** Returns true if field contractNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContractNo() {
    return this.contractNo != null;
  }

  public void setContractNoIsSet(boolean value) {
    if (!value) {
      this.contractNo = null;
    }
  }

  /**
   * 
   * @see EsDirectType
   */
  public EsDirectType getDirect() {
    return this.direct;
  }

  /**
   * 
   * @see EsDirectType
   */
  public EsHoldField setDirect(EsDirectType direct) {
    this.direct = direct;
    return this;
  }

  public void unsetDirect() {
    this.direct = null;
  }

  /** Returns true if field direct is set (has been assigned a value) and false otherwise */
  public boolean isSetDirect() {
    return this.direct != null;
  }

  public void setDirectIsSet(boolean value) {
    if (!value) {
      this.direct = null;
    }
  }

  /**
   * 
   * @see EsHedgeType
   */
  public EsHedgeType getHedge() {
    return this.hedge;
  }

  /**
   * 
   * @see EsHedgeType
   */
  public EsHoldField setHedge(EsHedgeType hedge) {
    this.hedge = hedge;
    return this;
  }

  public void unsetHedge() {
    this.hedge = null;
  }

  /** Returns true if field hedge is set (has been assigned a value) and false otherwise */
  public boolean isSetHedge() {
    return this.hedge != null;
  }

  public void setHedgeIsSet(boolean value) {
    if (!value) {
      this.hedge = null;
    }
  }

  public double getTradePrice() {
    return this.tradePrice;
  }

  public EsHoldField setTradePrice(double tradePrice) {
    this.tradePrice = tradePrice;
    setTradePriceIsSet(true);
    return this;
  }

  public void unsetTradePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEPRICE_ISSET_ID);
  }

  /** Returns true if field tradePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTradePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEPRICE_ISSET_ID);
  }

  public void setTradePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEPRICE_ISSET_ID, value);
  }

  public int getTradeVol() {
    return this.tradeVol;
  }

  public EsHoldField setTradeVol(int tradeVol) {
    this.tradeVol = tradeVol;
    setTradeVolIsSet(true);
    return this;
  }

  public void unsetTradeVol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEVOL_ISSET_ID);
  }

  /** Returns true if field tradeVol is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeVol() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEVOL_ISSET_ID);
  }

  public void setTradeVolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEVOL_ISSET_ID, value);
  }

  public double getYSettlePrice() {
    return this.ySettlePrice;
  }

  public EsHoldField setYSettlePrice(double ySettlePrice) {
    this.ySettlePrice = ySettlePrice;
    setYSettlePriceIsSet(true);
    return this;
  }

  public void unsetYSettlePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YSETTLEPRICE_ISSET_ID);
  }

  /** Returns true if field ySettlePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetYSettlePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __YSETTLEPRICE_ISSET_ID);
  }

  public void setYSettlePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YSETTLEPRICE_ISSET_ID, value);
  }

  public double getTNewPrice() {
    return this.tNewPrice;
  }

  public EsHoldField setTNewPrice(double tNewPrice) {
    this.tNewPrice = tNewPrice;
    setTNewPriceIsSet(true);
    return this;
  }

  public void unsetTNewPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TNEWPRICE_ISSET_ID);
  }

  /** Returns true if field tNewPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTNewPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TNEWPRICE_ISSET_ID);
  }

  public void setTNewPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TNEWPRICE_ISSET_ID, value);
  }

  public long getMatchDateTime() {
    return this.matchDateTime;
  }

  public EsHoldField setMatchDateTime(long matchDateTime) {
    this.matchDateTime = matchDateTime;
    setMatchDateTimeIsSet(true);
    return this;
  }

  public void unsetMatchDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHDATETIME_ISSET_ID);
  }

  /** Returns true if field matchDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHDATETIME_ISSET_ID);
  }

  public void setMatchDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHDATETIME_ISSET_ID, value);
  }

  public String getMatchNo() {
    return this.matchNo;
  }

  public EsHoldField setMatchNo(String matchNo) {
    this.matchNo = matchNo;
    return this;
  }

  public void unsetMatchNo() {
    this.matchNo = null;
  }

  /** Returns true if field matchNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchNo() {
    return this.matchNo != null;
  }

  public void setMatchNoIsSet(boolean value) {
    if (!value) {
      this.matchNo = null;
    }
  }

  public double getDeposit() {
    return this.deposit;
  }

  public EsHoldField setDeposit(double deposit) {
    this.deposit = deposit;
    setDepositIsSet(true);
    return this;
  }

  public void unsetDeposit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPOSIT_ISSET_ID);
  }

  /** Returns true if field deposit is set (has been assigned a value) and false otherwise */
  public boolean isSetDeposit() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPOSIT_ISSET_ID);
  }

  public void setDepositIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPOSIT_ISSET_ID, value);
  }

  public double getKeepDeposit() {
    return this.keepDeposit;
  }

  public EsHoldField setKeepDeposit(double keepDeposit) {
    this.keepDeposit = keepDeposit;
    setKeepDepositIsSet(true);
    return this;
  }

  public void unsetKeepDeposit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEEPDEPOSIT_ISSET_ID);
  }

  /** Returns true if field keepDeposit is set (has been assigned a value) and false otherwise */
  public boolean isSetKeepDeposit() {
    return EncodingUtils.testBit(__isset_bitfield, __KEEPDEPOSIT_ISSET_ID);
  }

  public void setKeepDepositIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEEPDEPOSIT_ISSET_ID, value);
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public EsHoldField setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public String getClientNo() {
    return this.clientNo;
  }

  public EsHoldField setClientNo(String clientNo) {
    this.clientNo = clientNo;
    return this;
  }

  public void unsetClientNo() {
    this.clientNo = null;
  }

  /** Returns true if field clientNo is set (has been assigned a value) and false otherwise */
  public boolean isSetClientNo() {
    return this.clientNo != null;
  }

  public void setClientNoIsSet(boolean value) {
    if (!value) {
      this.clientNo = null;
    }
  }

  public String getInstrumentId() {
    return this.instrumentId;
  }

  public EsHoldField setInstrumentId(String instrumentId) {
    this.instrumentId = instrumentId;
    return this;
  }

  public void unsetInstrumentId() {
    this.instrumentId = null;
  }

  /** Returns true if field instrumentId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentId() {
    return this.instrumentId != null;
  }

  public void setInstrumentIdIsSet(boolean value) {
    if (!value) {
      this.instrumentId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOLD_KEY_ID:
      if (value == null) {
        unsetHoldKeyId();
      } else {
        setHoldKeyId((Integer)value);
      }
      break;

    case COMMODITY_NO:
      if (value == null) {
        unsetCommodityNo();
      } else {
        setCommodityNo((String)value);
      }
      break;

    case CONTRACT_NO:
      if (value == null) {
        unsetContractNo();
      } else {
        setContractNo((String)value);
      }
      break;

    case DIRECT:
      if (value == null) {
        unsetDirect();
      } else {
        setDirect((EsDirectType)value);
      }
      break;

    case HEDGE:
      if (value == null) {
        unsetHedge();
      } else {
        setHedge((EsHedgeType)value);
      }
      break;

    case TRADE_PRICE:
      if (value == null) {
        unsetTradePrice();
      } else {
        setTradePrice((Double)value);
      }
      break;

    case TRADE_VOL:
      if (value == null) {
        unsetTradeVol();
      } else {
        setTradeVol((Integer)value);
      }
      break;

    case Y_SETTLE_PRICE:
      if (value == null) {
        unsetYSettlePrice();
      } else {
        setYSettlePrice((Double)value);
      }
      break;

    case T_NEW_PRICE:
      if (value == null) {
        unsetTNewPrice();
      } else {
        setTNewPrice((Double)value);
      }
      break;

    case MATCH_DATE_TIME:
      if (value == null) {
        unsetMatchDateTime();
      } else {
        setMatchDateTime((Long)value);
      }
      break;

    case MATCH_NO:
      if (value == null) {
        unsetMatchNo();
      } else {
        setMatchNo((String)value);
      }
      break;

    case DEPOSIT:
      if (value == null) {
        unsetDeposit();
      } else {
        setDeposit((Double)value);
      }
      break;

    case KEEP_DEPOSIT:
      if (value == null) {
        unsetKeepDeposit();
      } else {
        setKeepDeposit((Double)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    case CLIENT_NO:
      if (value == null) {
        unsetClientNo();
      } else {
        setClientNo((String)value);
      }
      break;

    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentId();
      } else {
        setInstrumentId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOLD_KEY_ID:
      return Integer.valueOf(getHoldKeyId());

    case COMMODITY_NO:
      return getCommodityNo();

    case CONTRACT_NO:
      return getContractNo();

    case DIRECT:
      return getDirect();

    case HEDGE:
      return getHedge();

    case TRADE_PRICE:
      return Double.valueOf(getTradePrice());

    case TRADE_VOL:
      return Integer.valueOf(getTradeVol());

    case Y_SETTLE_PRICE:
      return Double.valueOf(getYSettlePrice());

    case T_NEW_PRICE:
      return Double.valueOf(getTNewPrice());

    case MATCH_DATE_TIME:
      return Long.valueOf(getMatchDateTime());

    case MATCH_NO:
      return getMatchNo();

    case DEPOSIT:
      return Double.valueOf(getDeposit());

    case KEEP_DEPOSIT:
      return Double.valueOf(getKeepDeposit());

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    case CLIENT_NO:
      return getClientNo();

    case INSTRUMENT_ID:
      return getInstrumentId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOLD_KEY_ID:
      return isSetHoldKeyId();
    case COMMODITY_NO:
      return isSetCommodityNo();
    case CONTRACT_NO:
      return isSetContractNo();
    case DIRECT:
      return isSetDirect();
    case HEDGE:
      return isSetHedge();
    case TRADE_PRICE:
      return isSetTradePrice();
    case TRADE_VOL:
      return isSetTradeVol();
    case Y_SETTLE_PRICE:
      return isSetYSettlePrice();
    case T_NEW_PRICE:
      return isSetTNewPrice();
    case MATCH_DATE_TIME:
      return isSetMatchDateTime();
    case MATCH_NO:
      return isSetMatchNo();
    case DEPOSIT:
      return isSetDeposit();
    case KEEP_DEPOSIT:
      return isSetKeepDeposit();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    case CLIENT_NO:
      return isSetClientNo();
    case INSTRUMENT_ID:
      return isSetInstrumentId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EsHoldField)
      return this.equals((EsHoldField)that);
    return false;
  }

  public boolean equals(EsHoldField that) {
    if (that == null)
      return false;

    boolean this_present_holdKeyId = true && this.isSetHoldKeyId();
    boolean that_present_holdKeyId = true && that.isSetHoldKeyId();
    if (this_present_holdKeyId || that_present_holdKeyId) {
      if (!(this_present_holdKeyId && that_present_holdKeyId))
        return false;
      if (this.holdKeyId != that.holdKeyId)
        return false;
    }

    boolean this_present_commodityNo = true && this.isSetCommodityNo();
    boolean that_present_commodityNo = true && that.isSetCommodityNo();
    if (this_present_commodityNo || that_present_commodityNo) {
      if (!(this_present_commodityNo && that_present_commodityNo))
        return false;
      if (!this.commodityNo.equals(that.commodityNo))
        return false;
    }

    boolean this_present_contractNo = true && this.isSetContractNo();
    boolean that_present_contractNo = true && that.isSetContractNo();
    if (this_present_contractNo || that_present_contractNo) {
      if (!(this_present_contractNo && that_present_contractNo))
        return false;
      if (!this.contractNo.equals(that.contractNo))
        return false;
    }

    boolean this_present_direct = true && this.isSetDirect();
    boolean that_present_direct = true && that.isSetDirect();
    if (this_present_direct || that_present_direct) {
      if (!(this_present_direct && that_present_direct))
        return false;
      if (!this.direct.equals(that.direct))
        return false;
    }

    boolean this_present_hedge = true && this.isSetHedge();
    boolean that_present_hedge = true && that.isSetHedge();
    if (this_present_hedge || that_present_hedge) {
      if (!(this_present_hedge && that_present_hedge))
        return false;
      if (!this.hedge.equals(that.hedge))
        return false;
    }

    boolean this_present_tradePrice = true && this.isSetTradePrice();
    boolean that_present_tradePrice = true && that.isSetTradePrice();
    if (this_present_tradePrice || that_present_tradePrice) {
      if (!(this_present_tradePrice && that_present_tradePrice))
        return false;
      if (this.tradePrice != that.tradePrice)
        return false;
    }

    boolean this_present_tradeVol = true && this.isSetTradeVol();
    boolean that_present_tradeVol = true && that.isSetTradeVol();
    if (this_present_tradeVol || that_present_tradeVol) {
      if (!(this_present_tradeVol && that_present_tradeVol))
        return false;
      if (this.tradeVol != that.tradeVol)
        return false;
    }

    boolean this_present_ySettlePrice = true && this.isSetYSettlePrice();
    boolean that_present_ySettlePrice = true && that.isSetYSettlePrice();
    if (this_present_ySettlePrice || that_present_ySettlePrice) {
      if (!(this_present_ySettlePrice && that_present_ySettlePrice))
        return false;
      if (this.ySettlePrice != that.ySettlePrice)
        return false;
    }

    boolean this_present_tNewPrice = true && this.isSetTNewPrice();
    boolean that_present_tNewPrice = true && that.isSetTNewPrice();
    if (this_present_tNewPrice || that_present_tNewPrice) {
      if (!(this_present_tNewPrice && that_present_tNewPrice))
        return false;
      if (this.tNewPrice != that.tNewPrice)
        return false;
    }

    boolean this_present_matchDateTime = true && this.isSetMatchDateTime();
    boolean that_present_matchDateTime = true && that.isSetMatchDateTime();
    if (this_present_matchDateTime || that_present_matchDateTime) {
      if (!(this_present_matchDateTime && that_present_matchDateTime))
        return false;
      if (this.matchDateTime != that.matchDateTime)
        return false;
    }

    boolean this_present_matchNo = true && this.isSetMatchNo();
    boolean that_present_matchNo = true && that.isSetMatchNo();
    if (this_present_matchNo || that_present_matchNo) {
      if (!(this_present_matchNo && that_present_matchNo))
        return false;
      if (!this.matchNo.equals(that.matchNo))
        return false;
    }

    boolean this_present_deposit = true && this.isSetDeposit();
    boolean that_present_deposit = true && that.isSetDeposit();
    if (this_present_deposit || that_present_deposit) {
      if (!(this_present_deposit && that_present_deposit))
        return false;
      if (this.deposit != that.deposit)
        return false;
    }

    boolean this_present_keepDeposit = true && this.isSetKeepDeposit();
    boolean that_present_keepDeposit = true && that.isSetKeepDeposit();
    if (this_present_keepDeposit || that_present_keepDeposit) {
      if (!(this_present_keepDeposit && that_present_keepDeposit))
        return false;
      if (this.keepDeposit != that.keepDeposit)
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    boolean this_present_clientNo = true && this.isSetClientNo();
    boolean that_present_clientNo = true && that.isSetClientNo();
    if (this_present_clientNo || that_present_clientNo) {
      if (!(this_present_clientNo && that_present_clientNo))
        return false;
      if (!this.clientNo.equals(that.clientNo))
        return false;
    }

    boolean this_present_instrumentId = true && this.isSetInstrumentId();
    boolean that_present_instrumentId = true && that.isSetInstrumentId();
    if (this_present_instrumentId || that_present_instrumentId) {
      if (!(this_present_instrumentId && that_present_instrumentId))
        return false;
      if (!this.instrumentId.equals(that.instrumentId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EsHoldField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHoldKeyId()).compareTo(other.isSetHoldKeyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHoldKeyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.holdKeyId, other.holdKeyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityNo()).compareTo(other.isSetCommodityNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityNo, other.commodityNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractNo()).compareTo(other.isSetContractNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractNo, other.contractNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirect()).compareTo(other.isSetDirect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direct, other.direct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHedge()).compareTo(other.isSetHedge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHedge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hedge, other.hedge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradePrice()).compareTo(other.isSetTradePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradePrice, other.tradePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeVol()).compareTo(other.isSetTradeVol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeVol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeVol, other.tradeVol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYSettlePrice()).compareTo(other.isSetYSettlePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYSettlePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ySettlePrice, other.ySettlePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTNewPrice()).compareTo(other.isSetTNewPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTNewPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tNewPrice, other.tNewPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchDateTime()).compareTo(other.isSetMatchDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchDateTime, other.matchDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchNo()).compareTo(other.isSetMatchNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchNo, other.matchNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeposit()).compareTo(other.isSetDeposit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeposit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deposit, other.deposit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeepDeposit()).compareTo(other.isSetKeepDeposit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeepDeposit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keepDeposit, other.keepDeposit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientNo()).compareTo(other.isSetClientNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientNo, other.clientNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentId()).compareTo(other.isSetInstrumentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentId, other.instrumentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EsHoldField(");
    boolean first = true;

    if (isSetHoldKeyId()) {
      sb.append("holdKeyId:");
      sb.append(this.holdKeyId);
      first = false;
    }
    if (isSetCommodityNo()) {
      if (!first) sb.append(", ");
      sb.append("commodityNo:");
      if (this.commodityNo == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityNo);
      }
      first = false;
    }
    if (isSetContractNo()) {
      if (!first) sb.append(", ");
      sb.append("contractNo:");
      if (this.contractNo == null) {
        sb.append("null");
      } else {
        sb.append(this.contractNo);
      }
      first = false;
    }
    if (isSetDirect()) {
      if (!first) sb.append(", ");
      sb.append("direct:");
      if (this.direct == null) {
        sb.append("null");
      } else {
        sb.append(this.direct);
      }
      first = false;
    }
    if (isSetHedge()) {
      if (!first) sb.append(", ");
      sb.append("hedge:");
      if (this.hedge == null) {
        sb.append("null");
      } else {
        sb.append(this.hedge);
      }
      first = false;
    }
    if (isSetTradePrice()) {
      if (!first) sb.append(", ");
      sb.append("tradePrice:");
      sb.append(this.tradePrice);
      first = false;
    }
    if (isSetTradeVol()) {
      if (!first) sb.append(", ");
      sb.append("tradeVol:");
      sb.append(this.tradeVol);
      first = false;
    }
    if (isSetYSettlePrice()) {
      if (!first) sb.append(", ");
      sb.append("ySettlePrice:");
      sb.append(this.ySettlePrice);
      first = false;
    }
    if (isSetTNewPrice()) {
      if (!first) sb.append(", ");
      sb.append("tNewPrice:");
      sb.append(this.tNewPrice);
      first = false;
    }
    if (isSetMatchDateTime()) {
      if (!first) sb.append(", ");
      sb.append("matchDateTime:");
      sb.append(this.matchDateTime);
      first = false;
    }
    if (isSetMatchNo()) {
      if (!first) sb.append(", ");
      sb.append("matchNo:");
      if (this.matchNo == null) {
        sb.append("null");
      } else {
        sb.append(this.matchNo);
      }
      first = false;
    }
    if (isSetDeposit()) {
      if (!first) sb.append(", ");
      sb.append("deposit:");
      sb.append(this.deposit);
      first = false;
    }
    if (isSetKeepDeposit()) {
      if (!first) sb.append(", ");
      sb.append("keepDeposit:");
      sb.append(this.keepDeposit);
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    if (isSetClientNo()) {
      if (!first) sb.append(", ");
      sb.append("clientNo:");
      if (this.clientNo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientNo);
      }
      first = false;
    }
    if (isSetInstrumentId()) {
      if (!first) sb.append(", ");
      sb.append("instrumentId:");
      if (this.instrumentId == null) {
        sb.append("null");
      } else {
        sb.append(this.instrumentId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EsHoldFieldStandardSchemeFactory implements SchemeFactory {
    public EsHoldFieldStandardScheme getScheme() {
      return new EsHoldFieldStandardScheme();
    }
  }

  private static class EsHoldFieldStandardScheme extends StandardScheme<EsHoldField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EsHoldField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOLD_KEY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.holdKeyId = iprot.readI32();
              struct.setHoldKeyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMMODITY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityNo = iprot.readString();
              struct.setCommodityNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTRACT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractNo = iprot.readString();
              struct.setContractNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DIRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.direct = EsDirectType.findByValue(iprot.readI32());
              struct.setDirectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HEDGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hedge = EsHedgeType.findByValue(iprot.readI32());
              struct.setHedgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tradePrice = iprot.readDouble();
              struct.setTradePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRADE_VOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeVol = iprot.readI32();
              struct.setTradeVolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // Y_SETTLE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ySettlePrice = iprot.readDouble();
              struct.setYSettlePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // T_NEW_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tNewPrice = iprot.readDouble();
              struct.setTNewPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MATCH_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.matchDateTime = iprot.readI64();
              struct.setMatchDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MATCH_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchNo = iprot.readString();
              struct.setMatchNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DEPOSIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deposit = iprot.readDouble();
              struct.setDepositIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // KEEP_DEPOSIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.keepDeposit = iprot.readDouble();
              struct.setKeepDepositIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CLIENT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientNo = iprot.readString();
              struct.setClientNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentId = iprot.readString();
              struct.setInstrumentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EsHoldField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetHoldKeyId()) {
        oprot.writeFieldBegin(HOLD_KEY_ID_FIELD_DESC);
        oprot.writeI32(struct.holdKeyId);
        oprot.writeFieldEnd();
      }
      if (struct.commodityNo != null) {
        if (struct.isSetCommodityNo()) {
          oprot.writeFieldBegin(COMMODITY_NO_FIELD_DESC);
          oprot.writeString(struct.commodityNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractNo != null) {
        if (struct.isSetContractNo()) {
          oprot.writeFieldBegin(CONTRACT_NO_FIELD_DESC);
          oprot.writeString(struct.contractNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.direct != null) {
        if (struct.isSetDirect()) {
          oprot.writeFieldBegin(DIRECT_FIELD_DESC);
          oprot.writeI32(struct.direct.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.hedge != null) {
        if (struct.isSetHedge()) {
          oprot.writeFieldBegin(HEDGE_FIELD_DESC);
          oprot.writeI32(struct.hedge.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTradePrice()) {
        oprot.writeFieldBegin(TRADE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.tradePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradeVol()) {
        oprot.writeFieldBegin(TRADE_VOL_FIELD_DESC);
        oprot.writeI32(struct.tradeVol);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYSettlePrice()) {
        oprot.writeFieldBegin(Y_SETTLE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.ySettlePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTNewPrice()) {
        oprot.writeFieldBegin(T_NEW_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.tNewPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMatchDateTime()) {
        oprot.writeFieldBegin(MATCH_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.matchDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.matchNo != null) {
        if (struct.isSetMatchNo()) {
          oprot.writeFieldBegin(MATCH_NO_FIELD_DESC);
          oprot.writeString(struct.matchNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDeposit()) {
        oprot.writeFieldBegin(DEPOSIT_FIELD_DESC);
        oprot.writeDouble(struct.deposit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetKeepDeposit()) {
        oprot.writeFieldBegin(KEEP_DEPOSIT_FIELD_DESC);
        oprot.writeDouble(struct.keepDeposit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.clientNo != null) {
        if (struct.isSetClientNo()) {
          oprot.writeFieldBegin(CLIENT_NO_FIELD_DESC);
          oprot.writeString(struct.clientNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.instrumentId != null) {
        if (struct.isSetInstrumentId()) {
          oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
          oprot.writeString(struct.instrumentId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EsHoldFieldTupleSchemeFactory implements SchemeFactory {
    public EsHoldFieldTupleScheme getScheme() {
      return new EsHoldFieldTupleScheme();
    }
  }

  private static class EsHoldFieldTupleScheme extends TupleScheme<EsHoldField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EsHoldField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHoldKeyId()) {
        optionals.set(0);
      }
      if (struct.isSetCommodityNo()) {
        optionals.set(1);
      }
      if (struct.isSetContractNo()) {
        optionals.set(2);
      }
      if (struct.isSetDirect()) {
        optionals.set(3);
      }
      if (struct.isSetHedge()) {
        optionals.set(4);
      }
      if (struct.isSetTradePrice()) {
        optionals.set(5);
      }
      if (struct.isSetTradeVol()) {
        optionals.set(6);
      }
      if (struct.isSetYSettlePrice()) {
        optionals.set(7);
      }
      if (struct.isSetTNewPrice()) {
        optionals.set(8);
      }
      if (struct.isSetMatchDateTime()) {
        optionals.set(9);
      }
      if (struct.isSetMatchNo()) {
        optionals.set(10);
      }
      if (struct.isSetDeposit()) {
        optionals.set(11);
      }
      if (struct.isSetKeepDeposit()) {
        optionals.set(12);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(13);
      }
      if (struct.isSetClientNo()) {
        optionals.set(14);
      }
      if (struct.isSetInstrumentId()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetHoldKeyId()) {
        oprot.writeI32(struct.holdKeyId);
      }
      if (struct.isSetCommodityNo()) {
        oprot.writeString(struct.commodityNo);
      }
      if (struct.isSetContractNo()) {
        oprot.writeString(struct.contractNo);
      }
      if (struct.isSetDirect()) {
        oprot.writeI32(struct.direct.getValue());
      }
      if (struct.isSetHedge()) {
        oprot.writeI32(struct.hedge.getValue());
      }
      if (struct.isSetTradePrice()) {
        oprot.writeDouble(struct.tradePrice);
      }
      if (struct.isSetTradeVol()) {
        oprot.writeI32(struct.tradeVol);
      }
      if (struct.isSetYSettlePrice()) {
        oprot.writeDouble(struct.ySettlePrice);
      }
      if (struct.isSetTNewPrice()) {
        oprot.writeDouble(struct.tNewPrice);
      }
      if (struct.isSetMatchDateTime()) {
        oprot.writeI64(struct.matchDateTime);
      }
      if (struct.isSetMatchNo()) {
        oprot.writeString(struct.matchNo);
      }
      if (struct.isSetDeposit()) {
        oprot.writeDouble(struct.deposit);
      }
      if (struct.isSetKeepDeposit()) {
        oprot.writeDouble(struct.keepDeposit);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
      if (struct.isSetClientNo()) {
        oprot.writeString(struct.clientNo);
      }
      if (struct.isSetInstrumentId()) {
        oprot.writeString(struct.instrumentId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EsHoldField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.holdKeyId = iprot.readI32();
        struct.setHoldKeyIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.commodityNo = iprot.readString();
        struct.setCommodityNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contractNo = iprot.readString();
        struct.setContractNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.direct = EsDirectType.findByValue(iprot.readI32());
        struct.setDirectIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hedge = EsHedgeType.findByValue(iprot.readI32());
        struct.setHedgeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tradePrice = iprot.readDouble();
        struct.setTradePriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tradeVol = iprot.readI32();
        struct.setTradeVolIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ySettlePrice = iprot.readDouble();
        struct.setYSettlePriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tNewPrice = iprot.readDouble();
        struct.setTNewPriceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.matchDateTime = iprot.readI64();
        struct.setMatchDateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.matchNo = iprot.readString();
        struct.setMatchNoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.deposit = iprot.readDouble();
        struct.setDepositIsSet(true);
      }
      if (incoming.get(12)) {
        struct.keepDeposit = iprot.readDouble();
        struct.setKeepDepositIsSet(true);
      }
      if (incoming.get(13)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.clientNo = iprot.readString();
        struct.setClientNoIsSet(true);
      }
      if (incoming.get(15)) {
        struct.instrumentId = iprot.readString();
        struct.setInstrumentIdIsSet(true);
      }
    }
  }

}

