/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.es_service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EsClientCountRent implements org.apache.thrift.TBase<EsClientCountRent, EsClientCountRent._Fields>, java.io.Serializable, Cloneable, Comparable<EsClientCountRent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EsClientCountRent");

  private static final org.apache.thrift.protocol.TField B_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("bFee", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField D_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("dFee", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENCY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEPOSIT_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("depositMode", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DEPOSIT_FIELD_DESC = new org.apache.thrift.protocol.TField("deposit", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField LOCK_DEPOSIT_FIELD_DESC = new org.apache.thrift.protocol.TField("lockDeposit", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField KEEP_DEPOSIT_FIELD_DESC = new org.apache.thrift.protocol.TField("keepDeposit", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField COMMODITY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityNo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EsClientCountRentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EsClientCountRentTupleSchemeFactory());
  }

  public double bFee; // optional
  public double dFee; // optional
  public String currencyNo; // optional
  /**
   * 
   * @see EsDepositModeType
   */
  public EsDepositModeType depositMode; // optional
  public double deposit; // optional
  public double lockDeposit; // optional
  public double keepDeposit; // optional
  public String commodityNo; // optional
  public int sledAccountId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    B_FEE((short)1, "bFee"),
    D_FEE((short)2, "dFee"),
    CURRENCY_NO((short)3, "currencyNo"),
    /**
     * 
     * @see EsDepositModeType
     */
    DEPOSIT_MODE((short)4, "depositMode"),
    DEPOSIT((short)5, "deposit"),
    LOCK_DEPOSIT((short)6, "lockDeposit"),
    KEEP_DEPOSIT((short)7, "keepDeposit"),
    COMMODITY_NO((short)8, "commodityNo"),
    SLED_ACCOUNT_ID((short)9, "sledAccountId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // B_FEE
          return B_FEE;
        case 2: // D_FEE
          return D_FEE;
        case 3: // CURRENCY_NO
          return CURRENCY_NO;
        case 4: // DEPOSIT_MODE
          return DEPOSIT_MODE;
        case 5: // DEPOSIT
          return DEPOSIT;
        case 6: // LOCK_DEPOSIT
          return LOCK_DEPOSIT;
        case 7: // KEEP_DEPOSIT
          return KEEP_DEPOSIT;
        case 8: // COMMODITY_NO
          return COMMODITY_NO;
        case 9: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BFEE_ISSET_ID = 0;
  private static final int __DFEE_ISSET_ID = 1;
  private static final int __DEPOSIT_ISSET_ID = 2;
  private static final int __LOCKDEPOSIT_ISSET_ID = 3;
  private static final int __KEEPDEPOSIT_ISSET_ID = 4;
  private static final int __SLEDACCOUNTID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.B_FEE,_Fields.D_FEE,_Fields.CURRENCY_NO,_Fields.DEPOSIT_MODE,_Fields.DEPOSIT,_Fields.LOCK_DEPOSIT,_Fields.KEEP_DEPOSIT,_Fields.COMMODITY_NO,_Fields.SLED_ACCOUNT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.B_FEE, new org.apache.thrift.meta_data.FieldMetaData("bFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.D_FEE, new org.apache.thrift.meta_data.FieldMetaData("dFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY_NO, new org.apache.thrift.meta_data.FieldMetaData("currencyNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPOSIT_MODE, new org.apache.thrift.meta_data.FieldMetaData("depositMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsDepositModeType.class)));
    tmpMap.put(_Fields.DEPOSIT, new org.apache.thrift.meta_data.FieldMetaData("deposit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOCK_DEPOSIT, new org.apache.thrift.meta_data.FieldMetaData("lockDeposit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.KEEP_DEPOSIT, new org.apache.thrift.meta_data.FieldMetaData("keepDeposit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMODITY_NO, new org.apache.thrift.meta_data.FieldMetaData("commodityNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EsClientCountRent.class, metaDataMap);
  }

  public EsClientCountRent() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EsClientCountRent(EsClientCountRent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bFee = other.bFee;
    this.dFee = other.dFee;
    if (other.isSetCurrencyNo()) {
      this.currencyNo = other.currencyNo;
    }
    if (other.isSetDepositMode()) {
      this.depositMode = other.depositMode;
    }
    this.deposit = other.deposit;
    this.lockDeposit = other.lockDeposit;
    this.keepDeposit = other.keepDeposit;
    if (other.isSetCommodityNo()) {
      this.commodityNo = other.commodityNo;
    }
    this.sledAccountId = other.sledAccountId;
  }

  public EsClientCountRent deepCopy() {
    return new EsClientCountRent(this);
  }

  @Override
  public void clear() {
    setBFeeIsSet(false);
    this.bFee = 0.0;
    setDFeeIsSet(false);
    this.dFee = 0.0;
    this.currencyNo = null;
    this.depositMode = null;
    setDepositIsSet(false);
    this.deposit = 0.0;
    setLockDepositIsSet(false);
    this.lockDeposit = 0.0;
    setKeepDepositIsSet(false);
    this.keepDeposit = 0.0;
    this.commodityNo = null;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
  }

  public double getBFee() {
    return this.bFee;
  }

  public EsClientCountRent setBFee(double bFee) {
    this.bFee = bFee;
    setBFeeIsSet(true);
    return this;
  }

  public void unsetBFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BFEE_ISSET_ID);
  }

  /** Returns true if field bFee is set (has been assigned a value) and false otherwise */
  public boolean isSetBFee() {
    return EncodingUtils.testBit(__isset_bitfield, __BFEE_ISSET_ID);
  }

  public void setBFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BFEE_ISSET_ID, value);
  }

  public double getDFee() {
    return this.dFee;
  }

  public EsClientCountRent setDFee(double dFee) {
    this.dFee = dFee;
    setDFeeIsSet(true);
    return this;
  }

  public void unsetDFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DFEE_ISSET_ID);
  }

  /** Returns true if field dFee is set (has been assigned a value) and false otherwise */
  public boolean isSetDFee() {
    return EncodingUtils.testBit(__isset_bitfield, __DFEE_ISSET_ID);
  }

  public void setDFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DFEE_ISSET_ID, value);
  }

  public String getCurrencyNo() {
    return this.currencyNo;
  }

  public EsClientCountRent setCurrencyNo(String currencyNo) {
    this.currencyNo = currencyNo;
    return this;
  }

  public void unsetCurrencyNo() {
    this.currencyNo = null;
  }

  /** Returns true if field currencyNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyNo() {
    return this.currencyNo != null;
  }

  public void setCurrencyNoIsSet(boolean value) {
    if (!value) {
      this.currencyNo = null;
    }
  }

  /**
   * 
   * @see EsDepositModeType
   */
  public EsDepositModeType getDepositMode() {
    return this.depositMode;
  }

  /**
   * 
   * @see EsDepositModeType
   */
  public EsClientCountRent setDepositMode(EsDepositModeType depositMode) {
    this.depositMode = depositMode;
    return this;
  }

  public void unsetDepositMode() {
    this.depositMode = null;
  }

  /** Returns true if field depositMode is set (has been assigned a value) and false otherwise */
  public boolean isSetDepositMode() {
    return this.depositMode != null;
  }

  public void setDepositModeIsSet(boolean value) {
    if (!value) {
      this.depositMode = null;
    }
  }

  public double getDeposit() {
    return this.deposit;
  }

  public EsClientCountRent setDeposit(double deposit) {
    this.deposit = deposit;
    setDepositIsSet(true);
    return this;
  }

  public void unsetDeposit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPOSIT_ISSET_ID);
  }

  /** Returns true if field deposit is set (has been assigned a value) and false otherwise */
  public boolean isSetDeposit() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPOSIT_ISSET_ID);
  }

  public void setDepositIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPOSIT_ISSET_ID, value);
  }

  public double getLockDeposit() {
    return this.lockDeposit;
  }

  public EsClientCountRent setLockDeposit(double lockDeposit) {
    this.lockDeposit = lockDeposit;
    setLockDepositIsSet(true);
    return this;
  }

  public void unsetLockDeposit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCKDEPOSIT_ISSET_ID);
  }

  /** Returns true if field lockDeposit is set (has been assigned a value) and false otherwise */
  public boolean isSetLockDeposit() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCKDEPOSIT_ISSET_ID);
  }

  public void setLockDepositIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCKDEPOSIT_ISSET_ID, value);
  }

  public double getKeepDeposit() {
    return this.keepDeposit;
  }

  public EsClientCountRent setKeepDeposit(double keepDeposit) {
    this.keepDeposit = keepDeposit;
    setKeepDepositIsSet(true);
    return this;
  }

  public void unsetKeepDeposit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEEPDEPOSIT_ISSET_ID);
  }

  /** Returns true if field keepDeposit is set (has been assigned a value) and false otherwise */
  public boolean isSetKeepDeposit() {
    return EncodingUtils.testBit(__isset_bitfield, __KEEPDEPOSIT_ISSET_ID);
  }

  public void setKeepDepositIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEEPDEPOSIT_ISSET_ID, value);
  }

  public String getCommodityNo() {
    return this.commodityNo;
  }

  public EsClientCountRent setCommodityNo(String commodityNo) {
    this.commodityNo = commodityNo;
    return this;
  }

  public void unsetCommodityNo() {
    this.commodityNo = null;
  }

  /** Returns true if field commodityNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityNo() {
    return this.commodityNo != null;
  }

  public void setCommodityNoIsSet(boolean value) {
    if (!value) {
      this.commodityNo = null;
    }
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public EsClientCountRent setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case B_FEE:
      if (value == null) {
        unsetBFee();
      } else {
        setBFee((Double)value);
      }
      break;

    case D_FEE:
      if (value == null) {
        unsetDFee();
      } else {
        setDFee((Double)value);
      }
      break;

    case CURRENCY_NO:
      if (value == null) {
        unsetCurrencyNo();
      } else {
        setCurrencyNo((String)value);
      }
      break;

    case DEPOSIT_MODE:
      if (value == null) {
        unsetDepositMode();
      } else {
        setDepositMode((EsDepositModeType)value);
      }
      break;

    case DEPOSIT:
      if (value == null) {
        unsetDeposit();
      } else {
        setDeposit((Double)value);
      }
      break;

    case LOCK_DEPOSIT:
      if (value == null) {
        unsetLockDeposit();
      } else {
        setLockDeposit((Double)value);
      }
      break;

    case KEEP_DEPOSIT:
      if (value == null) {
        unsetKeepDeposit();
      } else {
        setKeepDeposit((Double)value);
      }
      break;

    case COMMODITY_NO:
      if (value == null) {
        unsetCommodityNo();
      } else {
        setCommodityNo((String)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case B_FEE:
      return Double.valueOf(getBFee());

    case D_FEE:
      return Double.valueOf(getDFee());

    case CURRENCY_NO:
      return getCurrencyNo();

    case DEPOSIT_MODE:
      return getDepositMode();

    case DEPOSIT:
      return Double.valueOf(getDeposit());

    case LOCK_DEPOSIT:
      return Double.valueOf(getLockDeposit());

    case KEEP_DEPOSIT:
      return Double.valueOf(getKeepDeposit());

    case COMMODITY_NO:
      return getCommodityNo();

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case B_FEE:
      return isSetBFee();
    case D_FEE:
      return isSetDFee();
    case CURRENCY_NO:
      return isSetCurrencyNo();
    case DEPOSIT_MODE:
      return isSetDepositMode();
    case DEPOSIT:
      return isSetDeposit();
    case LOCK_DEPOSIT:
      return isSetLockDeposit();
    case KEEP_DEPOSIT:
      return isSetKeepDeposit();
    case COMMODITY_NO:
      return isSetCommodityNo();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EsClientCountRent)
      return this.equals((EsClientCountRent)that);
    return false;
  }

  public boolean equals(EsClientCountRent that) {
    if (that == null)
      return false;

    boolean this_present_bFee = true && this.isSetBFee();
    boolean that_present_bFee = true && that.isSetBFee();
    if (this_present_bFee || that_present_bFee) {
      if (!(this_present_bFee && that_present_bFee))
        return false;
      if (this.bFee != that.bFee)
        return false;
    }

    boolean this_present_dFee = true && this.isSetDFee();
    boolean that_present_dFee = true && that.isSetDFee();
    if (this_present_dFee || that_present_dFee) {
      if (!(this_present_dFee && that_present_dFee))
        return false;
      if (this.dFee != that.dFee)
        return false;
    }

    boolean this_present_currencyNo = true && this.isSetCurrencyNo();
    boolean that_present_currencyNo = true && that.isSetCurrencyNo();
    if (this_present_currencyNo || that_present_currencyNo) {
      if (!(this_present_currencyNo && that_present_currencyNo))
        return false;
      if (!this.currencyNo.equals(that.currencyNo))
        return false;
    }

    boolean this_present_depositMode = true && this.isSetDepositMode();
    boolean that_present_depositMode = true && that.isSetDepositMode();
    if (this_present_depositMode || that_present_depositMode) {
      if (!(this_present_depositMode && that_present_depositMode))
        return false;
      if (!this.depositMode.equals(that.depositMode))
        return false;
    }

    boolean this_present_deposit = true && this.isSetDeposit();
    boolean that_present_deposit = true && that.isSetDeposit();
    if (this_present_deposit || that_present_deposit) {
      if (!(this_present_deposit && that_present_deposit))
        return false;
      if (this.deposit != that.deposit)
        return false;
    }

    boolean this_present_lockDeposit = true && this.isSetLockDeposit();
    boolean that_present_lockDeposit = true && that.isSetLockDeposit();
    if (this_present_lockDeposit || that_present_lockDeposit) {
      if (!(this_present_lockDeposit && that_present_lockDeposit))
        return false;
      if (this.lockDeposit != that.lockDeposit)
        return false;
    }

    boolean this_present_keepDeposit = true && this.isSetKeepDeposit();
    boolean that_present_keepDeposit = true && that.isSetKeepDeposit();
    if (this_present_keepDeposit || that_present_keepDeposit) {
      if (!(this_present_keepDeposit && that_present_keepDeposit))
        return false;
      if (this.keepDeposit != that.keepDeposit)
        return false;
    }

    boolean this_present_commodityNo = true && this.isSetCommodityNo();
    boolean that_present_commodityNo = true && that.isSetCommodityNo();
    if (this_present_commodityNo || that_present_commodityNo) {
      if (!(this_present_commodityNo && that_present_commodityNo))
        return false;
      if (!this.commodityNo.equals(that.commodityNo))
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EsClientCountRent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBFee()).compareTo(other.isSetBFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bFee, other.bFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDFee()).compareTo(other.isSetDFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dFee, other.dFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyNo()).compareTo(other.isSetCurrencyNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyNo, other.currencyNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepositMode()).compareTo(other.isSetDepositMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepositMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depositMode, other.depositMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeposit()).compareTo(other.isSetDeposit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeposit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deposit, other.deposit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLockDeposit()).compareTo(other.isSetLockDeposit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockDeposit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockDeposit, other.lockDeposit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeepDeposit()).compareTo(other.isSetKeepDeposit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeepDeposit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keepDeposit, other.keepDeposit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityNo()).compareTo(other.isSetCommodityNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityNo, other.commodityNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EsClientCountRent(");
    boolean first = true;

    if (isSetBFee()) {
      sb.append("bFee:");
      sb.append(this.bFee);
      first = false;
    }
    if (isSetDFee()) {
      if (!first) sb.append(", ");
      sb.append("dFee:");
      sb.append(this.dFee);
      first = false;
    }
    if (isSetCurrencyNo()) {
      if (!first) sb.append(", ");
      sb.append("currencyNo:");
      if (this.currencyNo == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyNo);
      }
      first = false;
    }
    if (isSetDepositMode()) {
      if (!first) sb.append(", ");
      sb.append("depositMode:");
      if (this.depositMode == null) {
        sb.append("null");
      } else {
        sb.append(this.depositMode);
      }
      first = false;
    }
    if (isSetDeposit()) {
      if (!first) sb.append(", ");
      sb.append("deposit:");
      sb.append(this.deposit);
      first = false;
    }
    if (isSetLockDeposit()) {
      if (!first) sb.append(", ");
      sb.append("lockDeposit:");
      sb.append(this.lockDeposit);
      first = false;
    }
    if (isSetKeepDeposit()) {
      if (!first) sb.append(", ");
      sb.append("keepDeposit:");
      sb.append(this.keepDeposit);
      first = false;
    }
    if (isSetCommodityNo()) {
      if (!first) sb.append(", ");
      sb.append("commodityNo:");
      if (this.commodityNo == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityNo);
      }
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EsClientCountRentStandardSchemeFactory implements SchemeFactory {
    public EsClientCountRentStandardScheme getScheme() {
      return new EsClientCountRentStandardScheme();
    }
  }

  private static class EsClientCountRentStandardScheme extends StandardScheme<EsClientCountRent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EsClientCountRent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // B_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bFee = iprot.readDouble();
              struct.setBFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // D_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dFee = iprot.readDouble();
              struct.setDFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENCY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyNo = iprot.readString();
              struct.setCurrencyNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEPOSIT_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.depositMode = EsDepositModeType.findByValue(iprot.readI32());
              struct.setDepositModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEPOSIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deposit = iprot.readDouble();
              struct.setDepositIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOCK_DEPOSIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lockDeposit = iprot.readDouble();
              struct.setLockDepositIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // KEEP_DEPOSIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.keepDeposit = iprot.readDouble();
              struct.setKeepDepositIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMMODITY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityNo = iprot.readString();
              struct.setCommodityNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EsClientCountRent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetBFee()) {
        oprot.writeFieldBegin(B_FEE_FIELD_DESC);
        oprot.writeDouble(struct.bFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDFee()) {
        oprot.writeFieldBegin(D_FEE_FIELD_DESC);
        oprot.writeDouble(struct.dFee);
        oprot.writeFieldEnd();
      }
      if (struct.currencyNo != null) {
        if (struct.isSetCurrencyNo()) {
          oprot.writeFieldBegin(CURRENCY_NO_FIELD_DESC);
          oprot.writeString(struct.currencyNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.depositMode != null) {
        if (struct.isSetDepositMode()) {
          oprot.writeFieldBegin(DEPOSIT_MODE_FIELD_DESC);
          oprot.writeI32(struct.depositMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDeposit()) {
        oprot.writeFieldBegin(DEPOSIT_FIELD_DESC);
        oprot.writeDouble(struct.deposit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLockDeposit()) {
        oprot.writeFieldBegin(LOCK_DEPOSIT_FIELD_DESC);
        oprot.writeDouble(struct.lockDeposit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetKeepDeposit()) {
        oprot.writeFieldBegin(KEEP_DEPOSIT_FIELD_DESC);
        oprot.writeDouble(struct.keepDeposit);
        oprot.writeFieldEnd();
      }
      if (struct.commodityNo != null) {
        if (struct.isSetCommodityNo()) {
          oprot.writeFieldBegin(COMMODITY_NO_FIELD_DESC);
          oprot.writeString(struct.commodityNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EsClientCountRentTupleSchemeFactory implements SchemeFactory {
    public EsClientCountRentTupleScheme getScheme() {
      return new EsClientCountRentTupleScheme();
    }
  }

  private static class EsClientCountRentTupleScheme extends TupleScheme<EsClientCountRent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EsClientCountRent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBFee()) {
        optionals.set(0);
      }
      if (struct.isSetDFee()) {
        optionals.set(1);
      }
      if (struct.isSetCurrencyNo()) {
        optionals.set(2);
      }
      if (struct.isSetDepositMode()) {
        optionals.set(3);
      }
      if (struct.isSetDeposit()) {
        optionals.set(4);
      }
      if (struct.isSetLockDeposit()) {
        optionals.set(5);
      }
      if (struct.isSetKeepDeposit()) {
        optionals.set(6);
      }
      if (struct.isSetCommodityNo()) {
        optionals.set(7);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetBFee()) {
        oprot.writeDouble(struct.bFee);
      }
      if (struct.isSetDFee()) {
        oprot.writeDouble(struct.dFee);
      }
      if (struct.isSetCurrencyNo()) {
        oprot.writeString(struct.currencyNo);
      }
      if (struct.isSetDepositMode()) {
        oprot.writeI32(struct.depositMode.getValue());
      }
      if (struct.isSetDeposit()) {
        oprot.writeDouble(struct.deposit);
      }
      if (struct.isSetLockDeposit()) {
        oprot.writeDouble(struct.lockDeposit);
      }
      if (struct.isSetKeepDeposit()) {
        oprot.writeDouble(struct.keepDeposit);
      }
      if (struct.isSetCommodityNo()) {
        oprot.writeString(struct.commodityNo);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EsClientCountRent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.bFee = iprot.readDouble();
        struct.setBFeeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dFee = iprot.readDouble();
        struct.setDFeeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.currencyNo = iprot.readString();
        struct.setCurrencyNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.depositMode = EsDepositModeType.findByValue(iprot.readI32());
        struct.setDepositModeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.deposit = iprot.readDouble();
        struct.setDepositIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lockDeposit = iprot.readDouble();
        struct.setLockDepositIsSet(true);
      }
      if (incoming.get(6)) {
        struct.keepDeposit = iprot.readDouble();
        struct.setKeepDepositIsSet(true);
      }
      if (incoming.get(7)) {
        struct.commodityNo = iprot.readString();
        struct.setCommodityNoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
    }
  }

}

