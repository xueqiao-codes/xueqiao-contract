/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.standard.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SledCommodity implements org.apache.thrift.TBase<SledCommodity, SledCommodity._Fields>, java.io.Serializable, Cloneable, Comparable<SledCommodity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SledCommodity");

  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_BASE_COMMODITY_FIELD_DESC = new org.apache.thrift.protocol.TField("sledBaseCommodity", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RELATE_COMMODITY_FIELD_DESC = new org.apache.thrift.protocol.TField("relateCommodity", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CURRENCY_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyGroup", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField TRADE_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeCurrency", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONTRACT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractSize", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField OPEN_CLOSE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("openCloseMode", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField STRIKE_PRICE_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("strikePriceTimes", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField TICK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("tickSize", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField DENOMINATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("denominator", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CMB_DIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("cmbDirect", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField DELIVERY_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryMode", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField DELIVERY_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryDays", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField TIMEZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("timezone", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField COMMODITY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityState", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField DEPOSIT_CALCULATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("depositCalculateMode", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField MAX_SINGLE_ORDER_VOL_FIELD_DESC = new org.apache.thrift.protocol.TField("maxSingleOrderVol", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField MAX_HOLD_VOL_FIELD_DESC = new org.apache.thrift.protocol.TField("maxHoldVol", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField COVER_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("coverMode", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField OPEN_CLOSE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("openCloseFee", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField CLOSE_TODAY_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("closeTodayFee", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField ENG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("engName", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cnName", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField TC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tcName", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField ADD_ONE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("addOneTime", org.apache.thrift.protocol.TType.STRING, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SledCommodityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SledCommodityTupleSchemeFactory());
  }

  public int sledCommodityId; // optional
  public SledBaseCommodity sledBaseCommodity; // optional
  public List<SledBaseCommodity> relateCommodity; // optional
  public CurrencyGroup currencyGroup; // optional
  public String tradeCurrency; // optional
  public double contractSize; // optional
  /**
   * 
   * @see OpenCloseMode
   */
  public OpenCloseMode openCloseMode; // optional
  public double strikePriceTimes; // optional
  public double tickSize; // optional
  public int denominator; // optional
  /**
   * 
   * @see CmbDirect
   */
  public CmbDirect cmbDirect; // optional
  /**
   * 
   * @see DeliveryMode
   */
  public DeliveryMode deliveryMode; // optional
  public int deliveryDays; // optional
  public String timezone; // optional
  /**
   * 
   * @see CommodityState
   */
  public CommodityState commodityState; // optional
  /**
   * 
   * @see DepositCalculateMode
   */
  public DepositCalculateMode depositCalculateMode; // optional
  public int maxSingleOrderVol; // optional
  public int maxHoldVol; // optional
  /**
   * 
   * @see CoverMode
   */
  public CoverMode coverMode; // optional
  public double openCloseFee; // optional
  public double closeTodayFee; // optional
  public String engName; // optional
  public String cnName; // optional
  public String tcName; // optional
  public String addOneTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_COMMODITY_ID((short)1, "sledCommodityId"),
    SLED_BASE_COMMODITY((short)2, "sledBaseCommodity"),
    RELATE_COMMODITY((short)3, "relateCommodity"),
    CURRENCY_GROUP((short)4, "currencyGroup"),
    TRADE_CURRENCY((short)5, "tradeCurrency"),
    CONTRACT_SIZE((short)6, "contractSize"),
    /**
     * 
     * @see OpenCloseMode
     */
    OPEN_CLOSE_MODE((short)7, "openCloseMode"),
    STRIKE_PRICE_TIMES((short)8, "strikePriceTimes"),
    TICK_SIZE((short)9, "tickSize"),
    DENOMINATOR((short)10, "denominator"),
    /**
     * 
     * @see CmbDirect
     */
    CMB_DIRECT((short)11, "cmbDirect"),
    /**
     * 
     * @see DeliveryMode
     */
    DELIVERY_MODE((short)12, "deliveryMode"),
    DELIVERY_DAYS((short)13, "deliveryDays"),
    TIMEZONE((short)14, "timezone"),
    /**
     * 
     * @see CommodityState
     */
    COMMODITY_STATE((short)15, "commodityState"),
    /**
     * 
     * @see DepositCalculateMode
     */
    DEPOSIT_CALCULATE_MODE((short)16, "depositCalculateMode"),
    MAX_SINGLE_ORDER_VOL((short)17, "maxSingleOrderVol"),
    MAX_HOLD_VOL((short)18, "maxHoldVol"),
    /**
     * 
     * @see CoverMode
     */
    COVER_MODE((short)19, "coverMode"),
    OPEN_CLOSE_FEE((short)20, "openCloseFee"),
    CLOSE_TODAY_FEE((short)21, "closeTodayFee"),
    ENG_NAME((short)22, "engName"),
    CN_NAME((short)23, "cnName"),
    TC_NAME((short)24, "tcName"),
    ADD_ONE_TIME((short)25, "addOneTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 2: // SLED_BASE_COMMODITY
          return SLED_BASE_COMMODITY;
        case 3: // RELATE_COMMODITY
          return RELATE_COMMODITY;
        case 4: // CURRENCY_GROUP
          return CURRENCY_GROUP;
        case 5: // TRADE_CURRENCY
          return TRADE_CURRENCY;
        case 6: // CONTRACT_SIZE
          return CONTRACT_SIZE;
        case 7: // OPEN_CLOSE_MODE
          return OPEN_CLOSE_MODE;
        case 8: // STRIKE_PRICE_TIMES
          return STRIKE_PRICE_TIMES;
        case 9: // TICK_SIZE
          return TICK_SIZE;
        case 10: // DENOMINATOR
          return DENOMINATOR;
        case 11: // CMB_DIRECT
          return CMB_DIRECT;
        case 12: // DELIVERY_MODE
          return DELIVERY_MODE;
        case 13: // DELIVERY_DAYS
          return DELIVERY_DAYS;
        case 14: // TIMEZONE
          return TIMEZONE;
        case 15: // COMMODITY_STATE
          return COMMODITY_STATE;
        case 16: // DEPOSIT_CALCULATE_MODE
          return DEPOSIT_CALCULATE_MODE;
        case 17: // MAX_SINGLE_ORDER_VOL
          return MAX_SINGLE_ORDER_VOL;
        case 18: // MAX_HOLD_VOL
          return MAX_HOLD_VOL;
        case 19: // COVER_MODE
          return COVER_MODE;
        case 20: // OPEN_CLOSE_FEE
          return OPEN_CLOSE_FEE;
        case 21: // CLOSE_TODAY_FEE
          return CLOSE_TODAY_FEE;
        case 22: // ENG_NAME
          return ENG_NAME;
        case 23: // CN_NAME
          return CN_NAME;
        case 24: // TC_NAME
          return TC_NAME;
        case 25: // ADD_ONE_TIME
          return ADD_ONE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDCOMMODITYID_ISSET_ID = 0;
  private static final int __CONTRACTSIZE_ISSET_ID = 1;
  private static final int __STRIKEPRICETIMES_ISSET_ID = 2;
  private static final int __TICKSIZE_ISSET_ID = 3;
  private static final int __DENOMINATOR_ISSET_ID = 4;
  private static final int __DELIVERYDAYS_ISSET_ID = 5;
  private static final int __MAXSINGLEORDERVOL_ISSET_ID = 6;
  private static final int __MAXHOLDVOL_ISSET_ID = 7;
  private static final int __OPENCLOSEFEE_ISSET_ID = 8;
  private static final int __CLOSETODAYFEE_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_COMMODITY_ID,_Fields.SLED_BASE_COMMODITY,_Fields.RELATE_COMMODITY,_Fields.CURRENCY_GROUP,_Fields.TRADE_CURRENCY,_Fields.CONTRACT_SIZE,_Fields.OPEN_CLOSE_MODE,_Fields.STRIKE_PRICE_TIMES,_Fields.TICK_SIZE,_Fields.DENOMINATOR,_Fields.CMB_DIRECT,_Fields.DELIVERY_MODE,_Fields.DELIVERY_DAYS,_Fields.TIMEZONE,_Fields.COMMODITY_STATE,_Fields.DEPOSIT_CALCULATE_MODE,_Fields.MAX_SINGLE_ORDER_VOL,_Fields.MAX_HOLD_VOL,_Fields.COVER_MODE,_Fields.OPEN_CLOSE_FEE,_Fields.CLOSE_TODAY_FEE,_Fields.ENG_NAME,_Fields.CN_NAME,_Fields.TC_NAME,_Fields.ADD_ONE_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_BASE_COMMODITY, new org.apache.thrift.meta_data.FieldMetaData("sledBaseCommodity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SledBaseCommodity.class)));
    tmpMap.put(_Fields.RELATE_COMMODITY, new org.apache.thrift.meta_data.FieldMetaData("relateCommodity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SledBaseCommodity.class))));
    tmpMap.put(_Fields.CURRENCY_GROUP, new org.apache.thrift.meta_data.FieldMetaData("currencyGroup", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CurrencyGroup.class)));
    tmpMap.put(_Fields.TRADE_CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("tradeCurrency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("contractSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPEN_CLOSE_MODE, new org.apache.thrift.meta_data.FieldMetaData("openCloseMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OpenCloseMode.class)));
    tmpMap.put(_Fields.STRIKE_PRICE_TIMES, new org.apache.thrift.meta_data.FieldMetaData("strikePriceTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TICK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("tickSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DENOMINATOR, new org.apache.thrift.meta_data.FieldMetaData("denominator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CMB_DIRECT, new org.apache.thrift.meta_data.FieldMetaData("cmbDirect", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CmbDirect.class)));
    tmpMap.put(_Fields.DELIVERY_MODE, new org.apache.thrift.meta_data.FieldMetaData("deliveryMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DeliveryMode.class)));
    tmpMap.put(_Fields.DELIVERY_DAYS, new org.apache.thrift.meta_data.FieldMetaData("deliveryDays", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMEZONE, new org.apache.thrift.meta_data.FieldMetaData("timezone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_STATE, new org.apache.thrift.meta_data.FieldMetaData("commodityState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CommodityState.class)));
    tmpMap.put(_Fields.DEPOSIT_CALCULATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("depositCalculateMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DepositCalculateMode.class)));
    tmpMap.put(_Fields.MAX_SINGLE_ORDER_VOL, new org.apache.thrift.meta_data.FieldMetaData("maxSingleOrderVol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_HOLD_VOL, new org.apache.thrift.meta_data.FieldMetaData("maxHoldVol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COVER_MODE, new org.apache.thrift.meta_data.FieldMetaData("coverMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CoverMode.class)));
    tmpMap.put(_Fields.OPEN_CLOSE_FEE, new org.apache.thrift.meta_data.FieldMetaData("openCloseFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_TODAY_FEE, new org.apache.thrift.meta_data.FieldMetaData("closeTodayFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ENG_NAME, new org.apache.thrift.meta_data.FieldMetaData("engName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CN_NAME, new org.apache.thrift.meta_data.FieldMetaData("cnName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TC_NAME, new org.apache.thrift.meta_data.FieldMetaData("tcName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADD_ONE_TIME, new org.apache.thrift.meta_data.FieldMetaData("addOneTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SledCommodity.class, metaDataMap);
  }

  public SledCommodity() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SledCommodity(SledCommodity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sledCommodityId = other.sledCommodityId;
    if (other.isSetSledBaseCommodity()) {
      this.sledBaseCommodity = new SledBaseCommodity(other.sledBaseCommodity);
    }
    if (other.isSetRelateCommodity()) {
      List<SledBaseCommodity> __this__relateCommodity = new ArrayList<SledBaseCommodity>(other.relateCommodity.size());
      for (SledBaseCommodity other_element : other.relateCommodity) {
        __this__relateCommodity.add(new SledBaseCommodity(other_element));
      }
      this.relateCommodity = __this__relateCommodity;
    }
    if (other.isSetCurrencyGroup()) {
      this.currencyGroup = new CurrencyGroup(other.currencyGroup);
    }
    if (other.isSetTradeCurrency()) {
      this.tradeCurrency = other.tradeCurrency;
    }
    this.contractSize = other.contractSize;
    if (other.isSetOpenCloseMode()) {
      this.openCloseMode = other.openCloseMode;
    }
    this.strikePriceTimes = other.strikePriceTimes;
    this.tickSize = other.tickSize;
    this.denominator = other.denominator;
    if (other.isSetCmbDirect()) {
      this.cmbDirect = other.cmbDirect;
    }
    if (other.isSetDeliveryMode()) {
      this.deliveryMode = other.deliveryMode;
    }
    this.deliveryDays = other.deliveryDays;
    if (other.isSetTimezone()) {
      this.timezone = other.timezone;
    }
    if (other.isSetCommodityState()) {
      this.commodityState = other.commodityState;
    }
    if (other.isSetDepositCalculateMode()) {
      this.depositCalculateMode = other.depositCalculateMode;
    }
    this.maxSingleOrderVol = other.maxSingleOrderVol;
    this.maxHoldVol = other.maxHoldVol;
    if (other.isSetCoverMode()) {
      this.coverMode = other.coverMode;
    }
    this.openCloseFee = other.openCloseFee;
    this.closeTodayFee = other.closeTodayFee;
    if (other.isSetEngName()) {
      this.engName = other.engName;
    }
    if (other.isSetCnName()) {
      this.cnName = other.cnName;
    }
    if (other.isSetTcName()) {
      this.tcName = other.tcName;
    }
    if (other.isSetAddOneTime()) {
      this.addOneTime = other.addOneTime;
    }
  }

  public SledCommodity deepCopy() {
    return new SledCommodity(this);
  }

  @Override
  public void clear() {
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    this.sledBaseCommodity = null;
    this.relateCommodity = null;
    this.currencyGroup = null;
    this.tradeCurrency = null;
    setContractSizeIsSet(false);
    this.contractSize = 0.0;
    this.openCloseMode = null;
    setStrikePriceTimesIsSet(false);
    this.strikePriceTimes = 0.0;
    setTickSizeIsSet(false);
    this.tickSize = 0.0;
    setDenominatorIsSet(false);
    this.denominator = 0;
    this.cmbDirect = null;
    this.deliveryMode = null;
    setDeliveryDaysIsSet(false);
    this.deliveryDays = 0;
    this.timezone = null;
    this.commodityState = null;
    this.depositCalculateMode = null;
    setMaxSingleOrderVolIsSet(false);
    this.maxSingleOrderVol = 0;
    setMaxHoldVolIsSet(false);
    this.maxHoldVol = 0;
    this.coverMode = null;
    setOpenCloseFeeIsSet(false);
    this.openCloseFee = 0.0;
    setCloseTodayFeeIsSet(false);
    this.closeTodayFee = 0.0;
    this.engName = null;
    this.cnName = null;
    this.tcName = null;
    this.addOneTime = null;
  }

  public int getSledCommodityId() {
    return this.sledCommodityId;
  }

  public SledCommodity setSledCommodityId(int sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public SledBaseCommodity getSledBaseCommodity() {
    return this.sledBaseCommodity;
  }

  public SledCommodity setSledBaseCommodity(SledBaseCommodity sledBaseCommodity) {
    this.sledBaseCommodity = sledBaseCommodity;
    return this;
  }

  public void unsetSledBaseCommodity() {
    this.sledBaseCommodity = null;
  }

  /** Returns true if field sledBaseCommodity is set (has been assigned a value) and false otherwise */
  public boolean isSetSledBaseCommodity() {
    return this.sledBaseCommodity != null;
  }

  public void setSledBaseCommodityIsSet(boolean value) {
    if (!value) {
      this.sledBaseCommodity = null;
    }
  }

  public int getRelateCommoditySize() {
    return (this.relateCommodity == null) ? 0 : this.relateCommodity.size();
  }

  public java.util.Iterator<SledBaseCommodity> getRelateCommodityIterator() {
    return (this.relateCommodity == null) ? null : this.relateCommodity.iterator();
  }

  public void addToRelateCommodity(SledBaseCommodity elem) {
    if (this.relateCommodity == null) {
      this.relateCommodity = new ArrayList<SledBaseCommodity>();
    }
    this.relateCommodity.add(elem);
  }

  public List<SledBaseCommodity> getRelateCommodity() {
    return this.relateCommodity;
  }

  public SledCommodity setRelateCommodity(List<SledBaseCommodity> relateCommodity) {
    this.relateCommodity = relateCommodity;
    return this;
  }

  public void unsetRelateCommodity() {
    this.relateCommodity = null;
  }

  /** Returns true if field relateCommodity is set (has been assigned a value) and false otherwise */
  public boolean isSetRelateCommodity() {
    return this.relateCommodity != null;
  }

  public void setRelateCommodityIsSet(boolean value) {
    if (!value) {
      this.relateCommodity = null;
    }
  }

  public CurrencyGroup getCurrencyGroup() {
    return this.currencyGroup;
  }

  public SledCommodity setCurrencyGroup(CurrencyGroup currencyGroup) {
    this.currencyGroup = currencyGroup;
    return this;
  }

  public void unsetCurrencyGroup() {
    this.currencyGroup = null;
  }

  /** Returns true if field currencyGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyGroup() {
    return this.currencyGroup != null;
  }

  public void setCurrencyGroupIsSet(boolean value) {
    if (!value) {
      this.currencyGroup = null;
    }
  }

  public String getTradeCurrency() {
    return this.tradeCurrency;
  }

  public SledCommodity setTradeCurrency(String tradeCurrency) {
    this.tradeCurrency = tradeCurrency;
    return this;
  }

  public void unsetTradeCurrency() {
    this.tradeCurrency = null;
  }

  /** Returns true if field tradeCurrency is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeCurrency() {
    return this.tradeCurrency != null;
  }

  public void setTradeCurrencyIsSet(boolean value) {
    if (!value) {
      this.tradeCurrency = null;
    }
  }

  public double getContractSize() {
    return this.contractSize;
  }

  public SledCommodity setContractSize(double contractSize) {
    this.contractSize = contractSize;
    setContractSizeIsSet(true);
    return this;
  }

  public void unsetContractSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTSIZE_ISSET_ID);
  }

  /** Returns true if field contractSize is set (has been assigned a value) and false otherwise */
  public boolean isSetContractSize() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTSIZE_ISSET_ID);
  }

  public void setContractSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTSIZE_ISSET_ID, value);
  }

  /**
   * 
   * @see OpenCloseMode
   */
  public OpenCloseMode getOpenCloseMode() {
    return this.openCloseMode;
  }

  /**
   * 
   * @see OpenCloseMode
   */
  public SledCommodity setOpenCloseMode(OpenCloseMode openCloseMode) {
    this.openCloseMode = openCloseMode;
    return this;
  }

  public void unsetOpenCloseMode() {
    this.openCloseMode = null;
  }

  /** Returns true if field openCloseMode is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenCloseMode() {
    return this.openCloseMode != null;
  }

  public void setOpenCloseModeIsSet(boolean value) {
    if (!value) {
      this.openCloseMode = null;
    }
  }

  public double getStrikePriceTimes() {
    return this.strikePriceTimes;
  }

  public SledCommodity setStrikePriceTimes(double strikePriceTimes) {
    this.strikePriceTimes = strikePriceTimes;
    setStrikePriceTimesIsSet(true);
    return this;
  }

  public void unsetStrikePriceTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRIKEPRICETIMES_ISSET_ID);
  }

  /** Returns true if field strikePriceTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetStrikePriceTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __STRIKEPRICETIMES_ISSET_ID);
  }

  public void setStrikePriceTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRIKEPRICETIMES_ISSET_ID, value);
  }

  public double getTickSize() {
    return this.tickSize;
  }

  public SledCommodity setTickSize(double tickSize) {
    this.tickSize = tickSize;
    setTickSizeIsSet(true);
    return this;
  }

  public void unsetTickSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TICKSIZE_ISSET_ID);
  }

  /** Returns true if field tickSize is set (has been assigned a value) and false otherwise */
  public boolean isSetTickSize() {
    return EncodingUtils.testBit(__isset_bitfield, __TICKSIZE_ISSET_ID);
  }

  public void setTickSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TICKSIZE_ISSET_ID, value);
  }

  public int getDenominator() {
    return this.denominator;
  }

  public SledCommodity setDenominator(int denominator) {
    this.denominator = denominator;
    setDenominatorIsSet(true);
    return this;
  }

  public void unsetDenominator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DENOMINATOR_ISSET_ID);
  }

  /** Returns true if field denominator is set (has been assigned a value) and false otherwise */
  public boolean isSetDenominator() {
    return EncodingUtils.testBit(__isset_bitfield, __DENOMINATOR_ISSET_ID);
  }

  public void setDenominatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DENOMINATOR_ISSET_ID, value);
  }

  /**
   * 
   * @see CmbDirect
   */
  public CmbDirect getCmbDirect() {
    return this.cmbDirect;
  }

  /**
   * 
   * @see CmbDirect
   */
  public SledCommodity setCmbDirect(CmbDirect cmbDirect) {
    this.cmbDirect = cmbDirect;
    return this;
  }

  public void unsetCmbDirect() {
    this.cmbDirect = null;
  }

  /** Returns true if field cmbDirect is set (has been assigned a value) and false otherwise */
  public boolean isSetCmbDirect() {
    return this.cmbDirect != null;
  }

  public void setCmbDirectIsSet(boolean value) {
    if (!value) {
      this.cmbDirect = null;
    }
  }

  /**
   * 
   * @see DeliveryMode
   */
  public DeliveryMode getDeliveryMode() {
    return this.deliveryMode;
  }

  /**
   * 
   * @see DeliveryMode
   */
  public SledCommodity setDeliveryMode(DeliveryMode deliveryMode) {
    this.deliveryMode = deliveryMode;
    return this;
  }

  public void unsetDeliveryMode() {
    this.deliveryMode = null;
  }

  /** Returns true if field deliveryMode is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryMode() {
    return this.deliveryMode != null;
  }

  public void setDeliveryModeIsSet(boolean value) {
    if (!value) {
      this.deliveryMode = null;
    }
  }

  public int getDeliveryDays() {
    return this.deliveryDays;
  }

  public SledCommodity setDeliveryDays(int deliveryDays) {
    this.deliveryDays = deliveryDays;
    setDeliveryDaysIsSet(true);
    return this;
  }

  public void unsetDeliveryDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYDAYS_ISSET_ID);
  }

  /** Returns true if field deliveryDays is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryDays() {
    return EncodingUtils.testBit(__isset_bitfield, __DELIVERYDAYS_ISSET_ID);
  }

  public void setDeliveryDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYDAYS_ISSET_ID, value);
  }

  public String getTimezone() {
    return this.timezone;
  }

  public SledCommodity setTimezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  public void unsetTimezone() {
    this.timezone = null;
  }

  /** Returns true if field timezone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimezone() {
    return this.timezone != null;
  }

  public void setTimezoneIsSet(boolean value) {
    if (!value) {
      this.timezone = null;
    }
  }

  /**
   * 
   * @see CommodityState
   */
  public CommodityState getCommodityState() {
    return this.commodityState;
  }

  /**
   * 
   * @see CommodityState
   */
  public SledCommodity setCommodityState(CommodityState commodityState) {
    this.commodityState = commodityState;
    return this;
  }

  public void unsetCommodityState() {
    this.commodityState = null;
  }

  /** Returns true if field commodityState is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityState() {
    return this.commodityState != null;
  }

  public void setCommodityStateIsSet(boolean value) {
    if (!value) {
      this.commodityState = null;
    }
  }

  /**
   * 
   * @see DepositCalculateMode
   */
  public DepositCalculateMode getDepositCalculateMode() {
    return this.depositCalculateMode;
  }

  /**
   * 
   * @see DepositCalculateMode
   */
  public SledCommodity setDepositCalculateMode(DepositCalculateMode depositCalculateMode) {
    this.depositCalculateMode = depositCalculateMode;
    return this;
  }

  public void unsetDepositCalculateMode() {
    this.depositCalculateMode = null;
  }

  /** Returns true if field depositCalculateMode is set (has been assigned a value) and false otherwise */
  public boolean isSetDepositCalculateMode() {
    return this.depositCalculateMode != null;
  }

  public void setDepositCalculateModeIsSet(boolean value) {
    if (!value) {
      this.depositCalculateMode = null;
    }
  }

  public int getMaxSingleOrderVol() {
    return this.maxSingleOrderVol;
  }

  public SledCommodity setMaxSingleOrderVol(int maxSingleOrderVol) {
    this.maxSingleOrderVol = maxSingleOrderVol;
    setMaxSingleOrderVolIsSet(true);
    return this;
  }

  public void unsetMaxSingleOrderVol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXSINGLEORDERVOL_ISSET_ID);
  }

  /** Returns true if field maxSingleOrderVol is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxSingleOrderVol() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXSINGLEORDERVOL_ISSET_ID);
  }

  public void setMaxSingleOrderVolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXSINGLEORDERVOL_ISSET_ID, value);
  }

  public int getMaxHoldVol() {
    return this.maxHoldVol;
  }

  public SledCommodity setMaxHoldVol(int maxHoldVol) {
    this.maxHoldVol = maxHoldVol;
    setMaxHoldVolIsSet(true);
    return this;
  }

  public void unsetMaxHoldVol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXHOLDVOL_ISSET_ID);
  }

  /** Returns true if field maxHoldVol is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxHoldVol() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXHOLDVOL_ISSET_ID);
  }

  public void setMaxHoldVolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXHOLDVOL_ISSET_ID, value);
  }

  /**
   * 
   * @see CoverMode
   */
  public CoverMode getCoverMode() {
    return this.coverMode;
  }

  /**
   * 
   * @see CoverMode
   */
  public SledCommodity setCoverMode(CoverMode coverMode) {
    this.coverMode = coverMode;
    return this;
  }

  public void unsetCoverMode() {
    this.coverMode = null;
  }

  /** Returns true if field coverMode is set (has been assigned a value) and false otherwise */
  public boolean isSetCoverMode() {
    return this.coverMode != null;
  }

  public void setCoverModeIsSet(boolean value) {
    if (!value) {
      this.coverMode = null;
    }
  }

  public double getOpenCloseFee() {
    return this.openCloseFee;
  }

  public SledCommodity setOpenCloseFee(double openCloseFee) {
    this.openCloseFee = openCloseFee;
    setOpenCloseFeeIsSet(true);
    return this;
  }

  public void unsetOpenCloseFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID);
  }

  /** Returns true if field openCloseFee is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenCloseFee() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID);
  }

  public void setOpenCloseFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID, value);
  }

  public double getCloseTodayFee() {
    return this.closeTodayFee;
  }

  public SledCommodity setCloseTodayFee(double closeTodayFee) {
    this.closeTodayFee = closeTodayFee;
    setCloseTodayFeeIsSet(true);
    return this;
  }

  public void unsetCloseTodayFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSETODAYFEE_ISSET_ID);
  }

  /** Returns true if field closeTodayFee is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseTodayFee() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSETODAYFEE_ISSET_ID);
  }

  public void setCloseTodayFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSETODAYFEE_ISSET_ID, value);
  }

  public String getEngName() {
    return this.engName;
  }

  public SledCommodity setEngName(String engName) {
    this.engName = engName;
    return this;
  }

  public void unsetEngName() {
    this.engName = null;
  }

  /** Returns true if field engName is set (has been assigned a value) and false otherwise */
  public boolean isSetEngName() {
    return this.engName != null;
  }

  public void setEngNameIsSet(boolean value) {
    if (!value) {
      this.engName = null;
    }
  }

  public String getCnName() {
    return this.cnName;
  }

  public SledCommodity setCnName(String cnName) {
    this.cnName = cnName;
    return this;
  }

  public void unsetCnName() {
    this.cnName = null;
  }

  /** Returns true if field cnName is set (has been assigned a value) and false otherwise */
  public boolean isSetCnName() {
    return this.cnName != null;
  }

  public void setCnNameIsSet(boolean value) {
    if (!value) {
      this.cnName = null;
    }
  }

  public String getTcName() {
    return this.tcName;
  }

  public SledCommodity setTcName(String tcName) {
    this.tcName = tcName;
    return this;
  }

  public void unsetTcName() {
    this.tcName = null;
  }

  /** Returns true if field tcName is set (has been assigned a value) and false otherwise */
  public boolean isSetTcName() {
    return this.tcName != null;
  }

  public void setTcNameIsSet(boolean value) {
    if (!value) {
      this.tcName = null;
    }
  }

  public String getAddOneTime() {
    return this.addOneTime;
  }

  public SledCommodity setAddOneTime(String addOneTime) {
    this.addOneTime = addOneTime;
    return this;
  }

  public void unsetAddOneTime() {
    this.addOneTime = null;
  }

  /** Returns true if field addOneTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAddOneTime() {
    return this.addOneTime != null;
  }

  public void setAddOneTimeIsSet(boolean value) {
    if (!value) {
      this.addOneTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Integer)value);
      }
      break;

    case SLED_BASE_COMMODITY:
      if (value == null) {
        unsetSledBaseCommodity();
      } else {
        setSledBaseCommodity((SledBaseCommodity)value);
      }
      break;

    case RELATE_COMMODITY:
      if (value == null) {
        unsetRelateCommodity();
      } else {
        setRelateCommodity((List<SledBaseCommodity>)value);
      }
      break;

    case CURRENCY_GROUP:
      if (value == null) {
        unsetCurrencyGroup();
      } else {
        setCurrencyGroup((CurrencyGroup)value);
      }
      break;

    case TRADE_CURRENCY:
      if (value == null) {
        unsetTradeCurrency();
      } else {
        setTradeCurrency((String)value);
      }
      break;

    case CONTRACT_SIZE:
      if (value == null) {
        unsetContractSize();
      } else {
        setContractSize((Double)value);
      }
      break;

    case OPEN_CLOSE_MODE:
      if (value == null) {
        unsetOpenCloseMode();
      } else {
        setOpenCloseMode((OpenCloseMode)value);
      }
      break;

    case STRIKE_PRICE_TIMES:
      if (value == null) {
        unsetStrikePriceTimes();
      } else {
        setStrikePriceTimes((Double)value);
      }
      break;

    case TICK_SIZE:
      if (value == null) {
        unsetTickSize();
      } else {
        setTickSize((Double)value);
      }
      break;

    case DENOMINATOR:
      if (value == null) {
        unsetDenominator();
      } else {
        setDenominator((Integer)value);
      }
      break;

    case CMB_DIRECT:
      if (value == null) {
        unsetCmbDirect();
      } else {
        setCmbDirect((CmbDirect)value);
      }
      break;

    case DELIVERY_MODE:
      if (value == null) {
        unsetDeliveryMode();
      } else {
        setDeliveryMode((DeliveryMode)value);
      }
      break;

    case DELIVERY_DAYS:
      if (value == null) {
        unsetDeliveryDays();
      } else {
        setDeliveryDays((Integer)value);
      }
      break;

    case TIMEZONE:
      if (value == null) {
        unsetTimezone();
      } else {
        setTimezone((String)value);
      }
      break;

    case COMMODITY_STATE:
      if (value == null) {
        unsetCommodityState();
      } else {
        setCommodityState((CommodityState)value);
      }
      break;

    case DEPOSIT_CALCULATE_MODE:
      if (value == null) {
        unsetDepositCalculateMode();
      } else {
        setDepositCalculateMode((DepositCalculateMode)value);
      }
      break;

    case MAX_SINGLE_ORDER_VOL:
      if (value == null) {
        unsetMaxSingleOrderVol();
      } else {
        setMaxSingleOrderVol((Integer)value);
      }
      break;

    case MAX_HOLD_VOL:
      if (value == null) {
        unsetMaxHoldVol();
      } else {
        setMaxHoldVol((Integer)value);
      }
      break;

    case COVER_MODE:
      if (value == null) {
        unsetCoverMode();
      } else {
        setCoverMode((CoverMode)value);
      }
      break;

    case OPEN_CLOSE_FEE:
      if (value == null) {
        unsetOpenCloseFee();
      } else {
        setOpenCloseFee((Double)value);
      }
      break;

    case CLOSE_TODAY_FEE:
      if (value == null) {
        unsetCloseTodayFee();
      } else {
        setCloseTodayFee((Double)value);
      }
      break;

    case ENG_NAME:
      if (value == null) {
        unsetEngName();
      } else {
        setEngName((String)value);
      }
      break;

    case CN_NAME:
      if (value == null) {
        unsetCnName();
      } else {
        setCnName((String)value);
      }
      break;

    case TC_NAME:
      if (value == null) {
        unsetTcName();
      } else {
        setTcName((String)value);
      }
      break;

    case ADD_ONE_TIME:
      if (value == null) {
        unsetAddOneTime();
      } else {
        setAddOneTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_COMMODITY_ID:
      return Integer.valueOf(getSledCommodityId());

    case SLED_BASE_COMMODITY:
      return getSledBaseCommodity();

    case RELATE_COMMODITY:
      return getRelateCommodity();

    case CURRENCY_GROUP:
      return getCurrencyGroup();

    case TRADE_CURRENCY:
      return getTradeCurrency();

    case CONTRACT_SIZE:
      return Double.valueOf(getContractSize());

    case OPEN_CLOSE_MODE:
      return getOpenCloseMode();

    case STRIKE_PRICE_TIMES:
      return Double.valueOf(getStrikePriceTimes());

    case TICK_SIZE:
      return Double.valueOf(getTickSize());

    case DENOMINATOR:
      return Integer.valueOf(getDenominator());

    case CMB_DIRECT:
      return getCmbDirect();

    case DELIVERY_MODE:
      return getDeliveryMode();

    case DELIVERY_DAYS:
      return Integer.valueOf(getDeliveryDays());

    case TIMEZONE:
      return getTimezone();

    case COMMODITY_STATE:
      return getCommodityState();

    case DEPOSIT_CALCULATE_MODE:
      return getDepositCalculateMode();

    case MAX_SINGLE_ORDER_VOL:
      return Integer.valueOf(getMaxSingleOrderVol());

    case MAX_HOLD_VOL:
      return Integer.valueOf(getMaxHoldVol());

    case COVER_MODE:
      return getCoverMode();

    case OPEN_CLOSE_FEE:
      return Double.valueOf(getOpenCloseFee());

    case CLOSE_TODAY_FEE:
      return Double.valueOf(getCloseTodayFee());

    case ENG_NAME:
      return getEngName();

    case CN_NAME:
      return getCnName();

    case TC_NAME:
      return getTcName();

    case ADD_ONE_TIME:
      return getAddOneTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case SLED_BASE_COMMODITY:
      return isSetSledBaseCommodity();
    case RELATE_COMMODITY:
      return isSetRelateCommodity();
    case CURRENCY_GROUP:
      return isSetCurrencyGroup();
    case TRADE_CURRENCY:
      return isSetTradeCurrency();
    case CONTRACT_SIZE:
      return isSetContractSize();
    case OPEN_CLOSE_MODE:
      return isSetOpenCloseMode();
    case STRIKE_PRICE_TIMES:
      return isSetStrikePriceTimes();
    case TICK_SIZE:
      return isSetTickSize();
    case DENOMINATOR:
      return isSetDenominator();
    case CMB_DIRECT:
      return isSetCmbDirect();
    case DELIVERY_MODE:
      return isSetDeliveryMode();
    case DELIVERY_DAYS:
      return isSetDeliveryDays();
    case TIMEZONE:
      return isSetTimezone();
    case COMMODITY_STATE:
      return isSetCommodityState();
    case DEPOSIT_CALCULATE_MODE:
      return isSetDepositCalculateMode();
    case MAX_SINGLE_ORDER_VOL:
      return isSetMaxSingleOrderVol();
    case MAX_HOLD_VOL:
      return isSetMaxHoldVol();
    case COVER_MODE:
      return isSetCoverMode();
    case OPEN_CLOSE_FEE:
      return isSetOpenCloseFee();
    case CLOSE_TODAY_FEE:
      return isSetCloseTodayFee();
    case ENG_NAME:
      return isSetEngName();
    case CN_NAME:
      return isSetCnName();
    case TC_NAME:
      return isSetTcName();
    case ADD_ONE_TIME:
      return isSetAddOneTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SledCommodity)
      return this.equals((SledCommodity)that);
    return false;
  }

  public boolean equals(SledCommodity that) {
    if (that == null)
      return false;

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_sledBaseCommodity = true && this.isSetSledBaseCommodity();
    boolean that_present_sledBaseCommodity = true && that.isSetSledBaseCommodity();
    if (this_present_sledBaseCommodity || that_present_sledBaseCommodity) {
      if (!(this_present_sledBaseCommodity && that_present_sledBaseCommodity))
        return false;
      if (!this.sledBaseCommodity.equals(that.sledBaseCommodity))
        return false;
    }

    boolean this_present_relateCommodity = true && this.isSetRelateCommodity();
    boolean that_present_relateCommodity = true && that.isSetRelateCommodity();
    if (this_present_relateCommodity || that_present_relateCommodity) {
      if (!(this_present_relateCommodity && that_present_relateCommodity))
        return false;
      if (!this.relateCommodity.equals(that.relateCommodity))
        return false;
    }

    boolean this_present_currencyGroup = true && this.isSetCurrencyGroup();
    boolean that_present_currencyGroup = true && that.isSetCurrencyGroup();
    if (this_present_currencyGroup || that_present_currencyGroup) {
      if (!(this_present_currencyGroup && that_present_currencyGroup))
        return false;
      if (!this.currencyGroup.equals(that.currencyGroup))
        return false;
    }

    boolean this_present_tradeCurrency = true && this.isSetTradeCurrency();
    boolean that_present_tradeCurrency = true && that.isSetTradeCurrency();
    if (this_present_tradeCurrency || that_present_tradeCurrency) {
      if (!(this_present_tradeCurrency && that_present_tradeCurrency))
        return false;
      if (!this.tradeCurrency.equals(that.tradeCurrency))
        return false;
    }

    boolean this_present_contractSize = true && this.isSetContractSize();
    boolean that_present_contractSize = true && that.isSetContractSize();
    if (this_present_contractSize || that_present_contractSize) {
      if (!(this_present_contractSize && that_present_contractSize))
        return false;
      if (this.contractSize != that.contractSize)
        return false;
    }

    boolean this_present_openCloseMode = true && this.isSetOpenCloseMode();
    boolean that_present_openCloseMode = true && that.isSetOpenCloseMode();
    if (this_present_openCloseMode || that_present_openCloseMode) {
      if (!(this_present_openCloseMode && that_present_openCloseMode))
        return false;
      if (!this.openCloseMode.equals(that.openCloseMode))
        return false;
    }

    boolean this_present_strikePriceTimes = true && this.isSetStrikePriceTimes();
    boolean that_present_strikePriceTimes = true && that.isSetStrikePriceTimes();
    if (this_present_strikePriceTimes || that_present_strikePriceTimes) {
      if (!(this_present_strikePriceTimes && that_present_strikePriceTimes))
        return false;
      if (this.strikePriceTimes != that.strikePriceTimes)
        return false;
    }

    boolean this_present_tickSize = true && this.isSetTickSize();
    boolean that_present_tickSize = true && that.isSetTickSize();
    if (this_present_tickSize || that_present_tickSize) {
      if (!(this_present_tickSize && that_present_tickSize))
        return false;
      if (this.tickSize != that.tickSize)
        return false;
    }

    boolean this_present_denominator = true && this.isSetDenominator();
    boolean that_present_denominator = true && that.isSetDenominator();
    if (this_present_denominator || that_present_denominator) {
      if (!(this_present_denominator && that_present_denominator))
        return false;
      if (this.denominator != that.denominator)
        return false;
    }

    boolean this_present_cmbDirect = true && this.isSetCmbDirect();
    boolean that_present_cmbDirect = true && that.isSetCmbDirect();
    if (this_present_cmbDirect || that_present_cmbDirect) {
      if (!(this_present_cmbDirect && that_present_cmbDirect))
        return false;
      if (!this.cmbDirect.equals(that.cmbDirect))
        return false;
    }

    boolean this_present_deliveryMode = true && this.isSetDeliveryMode();
    boolean that_present_deliveryMode = true && that.isSetDeliveryMode();
    if (this_present_deliveryMode || that_present_deliveryMode) {
      if (!(this_present_deliveryMode && that_present_deliveryMode))
        return false;
      if (!this.deliveryMode.equals(that.deliveryMode))
        return false;
    }

    boolean this_present_deliveryDays = true && this.isSetDeliveryDays();
    boolean that_present_deliveryDays = true && that.isSetDeliveryDays();
    if (this_present_deliveryDays || that_present_deliveryDays) {
      if (!(this_present_deliveryDays && that_present_deliveryDays))
        return false;
      if (this.deliveryDays != that.deliveryDays)
        return false;
    }

    boolean this_present_timezone = true && this.isSetTimezone();
    boolean that_present_timezone = true && that.isSetTimezone();
    if (this_present_timezone || that_present_timezone) {
      if (!(this_present_timezone && that_present_timezone))
        return false;
      if (!this.timezone.equals(that.timezone))
        return false;
    }

    boolean this_present_commodityState = true && this.isSetCommodityState();
    boolean that_present_commodityState = true && that.isSetCommodityState();
    if (this_present_commodityState || that_present_commodityState) {
      if (!(this_present_commodityState && that_present_commodityState))
        return false;
      if (!this.commodityState.equals(that.commodityState))
        return false;
    }

    boolean this_present_depositCalculateMode = true && this.isSetDepositCalculateMode();
    boolean that_present_depositCalculateMode = true && that.isSetDepositCalculateMode();
    if (this_present_depositCalculateMode || that_present_depositCalculateMode) {
      if (!(this_present_depositCalculateMode && that_present_depositCalculateMode))
        return false;
      if (!this.depositCalculateMode.equals(that.depositCalculateMode))
        return false;
    }

    boolean this_present_maxSingleOrderVol = true && this.isSetMaxSingleOrderVol();
    boolean that_present_maxSingleOrderVol = true && that.isSetMaxSingleOrderVol();
    if (this_present_maxSingleOrderVol || that_present_maxSingleOrderVol) {
      if (!(this_present_maxSingleOrderVol && that_present_maxSingleOrderVol))
        return false;
      if (this.maxSingleOrderVol != that.maxSingleOrderVol)
        return false;
    }

    boolean this_present_maxHoldVol = true && this.isSetMaxHoldVol();
    boolean that_present_maxHoldVol = true && that.isSetMaxHoldVol();
    if (this_present_maxHoldVol || that_present_maxHoldVol) {
      if (!(this_present_maxHoldVol && that_present_maxHoldVol))
        return false;
      if (this.maxHoldVol != that.maxHoldVol)
        return false;
    }

    boolean this_present_coverMode = true && this.isSetCoverMode();
    boolean that_present_coverMode = true && that.isSetCoverMode();
    if (this_present_coverMode || that_present_coverMode) {
      if (!(this_present_coverMode && that_present_coverMode))
        return false;
      if (!this.coverMode.equals(that.coverMode))
        return false;
    }

    boolean this_present_openCloseFee = true && this.isSetOpenCloseFee();
    boolean that_present_openCloseFee = true && that.isSetOpenCloseFee();
    if (this_present_openCloseFee || that_present_openCloseFee) {
      if (!(this_present_openCloseFee && that_present_openCloseFee))
        return false;
      if (this.openCloseFee != that.openCloseFee)
        return false;
    }

    boolean this_present_closeTodayFee = true && this.isSetCloseTodayFee();
    boolean that_present_closeTodayFee = true && that.isSetCloseTodayFee();
    if (this_present_closeTodayFee || that_present_closeTodayFee) {
      if (!(this_present_closeTodayFee && that_present_closeTodayFee))
        return false;
      if (this.closeTodayFee != that.closeTodayFee)
        return false;
    }

    boolean this_present_engName = true && this.isSetEngName();
    boolean that_present_engName = true && that.isSetEngName();
    if (this_present_engName || that_present_engName) {
      if (!(this_present_engName && that_present_engName))
        return false;
      if (!this.engName.equals(that.engName))
        return false;
    }

    boolean this_present_cnName = true && this.isSetCnName();
    boolean that_present_cnName = true && that.isSetCnName();
    if (this_present_cnName || that_present_cnName) {
      if (!(this_present_cnName && that_present_cnName))
        return false;
      if (!this.cnName.equals(that.cnName))
        return false;
    }

    boolean this_present_tcName = true && this.isSetTcName();
    boolean that_present_tcName = true && that.isSetTcName();
    if (this_present_tcName || that_present_tcName) {
      if (!(this_present_tcName && that_present_tcName))
        return false;
      if (!this.tcName.equals(that.tcName))
        return false;
    }

    boolean this_present_addOneTime = true && this.isSetAddOneTime();
    boolean that_present_addOneTime = true && that.isSetAddOneTime();
    if (this_present_addOneTime || that_present_addOneTime) {
      if (!(this_present_addOneTime && that_present_addOneTime))
        return false;
      if (!this.addOneTime.equals(that.addOneTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SledCommodity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledBaseCommodity()).compareTo(other.isSetSledBaseCommodity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledBaseCommodity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledBaseCommodity, other.sledBaseCommodity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelateCommodity()).compareTo(other.isSetRelateCommodity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelateCommodity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relateCommodity, other.relateCommodity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyGroup()).compareTo(other.isSetCurrencyGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyGroup, other.currencyGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeCurrency()).compareTo(other.isSetTradeCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeCurrency, other.tradeCurrency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractSize()).compareTo(other.isSetContractSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractSize, other.contractSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenCloseMode()).compareTo(other.isSetOpenCloseMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenCloseMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openCloseMode, other.openCloseMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrikePriceTimes()).compareTo(other.isSetStrikePriceTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrikePriceTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strikePriceTimes, other.strikePriceTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTickSize()).compareTo(other.isSetTickSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTickSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tickSize, other.tickSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDenominator()).compareTo(other.isSetDenominator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDenominator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.denominator, other.denominator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCmbDirect()).compareTo(other.isSetCmbDirect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCmbDirect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmbDirect, other.cmbDirect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryMode()).compareTo(other.isSetDeliveryMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryMode, other.deliveryMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryDays()).compareTo(other.isSetDeliveryDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryDays, other.deliveryDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimezone()).compareTo(other.isSetTimezone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimezone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timezone, other.timezone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityState()).compareTo(other.isSetCommodityState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityState, other.commodityState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepositCalculateMode()).compareTo(other.isSetDepositCalculateMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepositCalculateMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depositCalculateMode, other.depositCalculateMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxSingleOrderVol()).compareTo(other.isSetMaxSingleOrderVol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxSingleOrderVol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxSingleOrderVol, other.maxSingleOrderVol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxHoldVol()).compareTo(other.isSetMaxHoldVol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxHoldVol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxHoldVol, other.maxHoldVol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoverMode()).compareTo(other.isSetCoverMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoverMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coverMode, other.coverMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenCloseFee()).compareTo(other.isSetOpenCloseFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenCloseFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openCloseFee, other.openCloseFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseTodayFee()).compareTo(other.isSetCloseTodayFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseTodayFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeTodayFee, other.closeTodayFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngName()).compareTo(other.isSetEngName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engName, other.engName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnName()).compareTo(other.isSetCnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnName, other.cnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTcName()).compareTo(other.isSetTcName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTcName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tcName, other.tcName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddOneTime()).compareTo(other.isSetAddOneTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddOneTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addOneTime, other.addOneTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SledCommodity(");
    boolean first = true;

    if (isSetSledCommodityId()) {
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetSledBaseCommodity()) {
      if (!first) sb.append(", ");
      sb.append("sledBaseCommodity:");
      if (this.sledBaseCommodity == null) {
        sb.append("null");
      } else {
        sb.append(this.sledBaseCommodity);
      }
      first = false;
    }
    if (isSetRelateCommodity()) {
      if (!first) sb.append(", ");
      sb.append("relateCommodity:");
      if (this.relateCommodity == null) {
        sb.append("null");
      } else {
        sb.append(this.relateCommodity);
      }
      first = false;
    }
    if (isSetCurrencyGroup()) {
      if (!first) sb.append(", ");
      sb.append("currencyGroup:");
      if (this.currencyGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyGroup);
      }
      first = false;
    }
    if (isSetTradeCurrency()) {
      if (!first) sb.append(", ");
      sb.append("tradeCurrency:");
      if (this.tradeCurrency == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeCurrency);
      }
      first = false;
    }
    if (isSetContractSize()) {
      if (!first) sb.append(", ");
      sb.append("contractSize:");
      sb.append(this.contractSize);
      first = false;
    }
    if (isSetOpenCloseMode()) {
      if (!first) sb.append(", ");
      sb.append("openCloseMode:");
      if (this.openCloseMode == null) {
        sb.append("null");
      } else {
        sb.append(this.openCloseMode);
      }
      first = false;
    }
    if (isSetStrikePriceTimes()) {
      if (!first) sb.append(", ");
      sb.append("strikePriceTimes:");
      sb.append(this.strikePriceTimes);
      first = false;
    }
    if (isSetTickSize()) {
      if (!first) sb.append(", ");
      sb.append("tickSize:");
      sb.append(this.tickSize);
      first = false;
    }
    if (isSetDenominator()) {
      if (!first) sb.append(", ");
      sb.append("denominator:");
      sb.append(this.denominator);
      first = false;
    }
    if (isSetCmbDirect()) {
      if (!first) sb.append(", ");
      sb.append("cmbDirect:");
      if (this.cmbDirect == null) {
        sb.append("null");
      } else {
        sb.append(this.cmbDirect);
      }
      first = false;
    }
    if (isSetDeliveryMode()) {
      if (!first) sb.append(", ");
      sb.append("deliveryMode:");
      if (this.deliveryMode == null) {
        sb.append("null");
      } else {
        sb.append(this.deliveryMode);
      }
      first = false;
    }
    if (isSetDeliveryDays()) {
      if (!first) sb.append(", ");
      sb.append("deliveryDays:");
      sb.append(this.deliveryDays);
      first = false;
    }
    if (isSetTimezone()) {
      if (!first) sb.append(", ");
      sb.append("timezone:");
      if (this.timezone == null) {
        sb.append("null");
      } else {
        sb.append(this.timezone);
      }
      first = false;
    }
    if (isSetCommodityState()) {
      if (!first) sb.append(", ");
      sb.append("commodityState:");
      if (this.commodityState == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityState);
      }
      first = false;
    }
    if (isSetDepositCalculateMode()) {
      if (!first) sb.append(", ");
      sb.append("depositCalculateMode:");
      if (this.depositCalculateMode == null) {
        sb.append("null");
      } else {
        sb.append(this.depositCalculateMode);
      }
      first = false;
    }
    if (isSetMaxSingleOrderVol()) {
      if (!first) sb.append(", ");
      sb.append("maxSingleOrderVol:");
      sb.append(this.maxSingleOrderVol);
      first = false;
    }
    if (isSetMaxHoldVol()) {
      if (!first) sb.append(", ");
      sb.append("maxHoldVol:");
      sb.append(this.maxHoldVol);
      first = false;
    }
    if (isSetCoverMode()) {
      if (!first) sb.append(", ");
      sb.append("coverMode:");
      if (this.coverMode == null) {
        sb.append("null");
      } else {
        sb.append(this.coverMode);
      }
      first = false;
    }
    if (isSetOpenCloseFee()) {
      if (!first) sb.append(", ");
      sb.append("openCloseFee:");
      sb.append(this.openCloseFee);
      first = false;
    }
    if (isSetCloseTodayFee()) {
      if (!first) sb.append(", ");
      sb.append("closeTodayFee:");
      sb.append(this.closeTodayFee);
      first = false;
    }
    if (isSetEngName()) {
      if (!first) sb.append(", ");
      sb.append("engName:");
      if (this.engName == null) {
        sb.append("null");
      } else {
        sb.append(this.engName);
      }
      first = false;
    }
    if (isSetCnName()) {
      if (!first) sb.append(", ");
      sb.append("cnName:");
      if (this.cnName == null) {
        sb.append("null");
      } else {
        sb.append(this.cnName);
      }
      first = false;
    }
    if (isSetTcName()) {
      if (!first) sb.append(", ");
      sb.append("tcName:");
      if (this.tcName == null) {
        sb.append("null");
      } else {
        sb.append(this.tcName);
      }
      first = false;
    }
    if (isSetAddOneTime()) {
      if (!first) sb.append(", ");
      sb.append("addOneTime:");
      if (this.addOneTime == null) {
        sb.append("null");
      } else {
        sb.append(this.addOneTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (sledBaseCommodity != null) {
      sledBaseCommodity.validate();
    }
    if (currencyGroup != null) {
      currencyGroup.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SledCommodityStandardSchemeFactory implements SchemeFactory {
    public SledCommodityStandardScheme getScheme() {
      return new SledCommodityStandardScheme();
    }
  }

  private static class SledCommodityStandardScheme extends StandardScheme<SledCommodity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SledCommodity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledCommodityId = iprot.readI32();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_BASE_COMMODITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sledBaseCommodity = new SledBaseCommodity();
              struct.sledBaseCommodity.read(iprot);
              struct.setSledBaseCommodityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RELATE_COMMODITY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.relateCommodity = new ArrayList<SledBaseCommodity>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  SledBaseCommodity _elem42;
                  _elem42 = new SledBaseCommodity();
                  _elem42.read(iprot);
                  struct.relateCommodity.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setRelateCommodityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CURRENCY_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.currencyGroup = new CurrencyGroup();
              struct.currencyGroup.read(iprot);
              struct.setCurrencyGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRADE_CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeCurrency = iprot.readString();
              struct.setTradeCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTRACT_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.contractSize = iprot.readDouble();
              struct.setContractSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPEN_CLOSE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.openCloseMode = OpenCloseMode.findByValue(iprot.readI32());
              struct.setOpenCloseModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STRIKE_PRICE_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.strikePriceTimes = iprot.readDouble();
              struct.setStrikePriceTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TICK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tickSize = iprot.readDouble();
              struct.setTickSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DENOMINATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.denominator = iprot.readI32();
              struct.setDenominatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CMB_DIRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cmbDirect = CmbDirect.findByValue(iprot.readI32());
              struct.setCmbDirectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DELIVERY_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deliveryMode = DeliveryMode.findByValue(iprot.readI32());
              struct.setDeliveryModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DELIVERY_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deliveryDays = iprot.readI32();
              struct.setDeliveryDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TIMEZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timezone = iprot.readString();
              struct.setTimezoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COMMODITY_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commodityState = CommodityState.findByValue(iprot.readI32());
              struct.setCommodityStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DEPOSIT_CALCULATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.depositCalculateMode = DepositCalculateMode.findByValue(iprot.readI32());
              struct.setDepositCalculateModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MAX_SINGLE_ORDER_VOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxSingleOrderVol = iprot.readI32();
              struct.setMaxSingleOrderVolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MAX_HOLD_VOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxHoldVol = iprot.readI32();
              struct.setMaxHoldVolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // COVER_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coverMode = CoverMode.findByValue(iprot.readI32());
              struct.setCoverModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // OPEN_CLOSE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openCloseFee = iprot.readDouble();
              struct.setOpenCloseFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CLOSE_TODAY_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeTodayFee = iprot.readDouble();
              struct.setCloseTodayFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ENG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engName = iprot.readString();
              struct.setEngNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnName = iprot.readString();
              struct.setCnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tcName = iprot.readString();
              struct.setTcNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ADD_ONE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addOneTime = iprot.readString();
              struct.setAddOneTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SledCommodity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.sledBaseCommodity != null) {
        if (struct.isSetSledBaseCommodity()) {
          oprot.writeFieldBegin(SLED_BASE_COMMODITY_FIELD_DESC);
          struct.sledBaseCommodity.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.relateCommodity != null) {
        if (struct.isSetRelateCommodity()) {
          oprot.writeFieldBegin(RELATE_COMMODITY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.relateCommodity.size()));
            for (SledBaseCommodity _iter43 : struct.relateCommodity)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.currencyGroup != null) {
        if (struct.isSetCurrencyGroup()) {
          oprot.writeFieldBegin(CURRENCY_GROUP_FIELD_DESC);
          struct.currencyGroup.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tradeCurrency != null) {
        if (struct.isSetTradeCurrency()) {
          oprot.writeFieldBegin(TRADE_CURRENCY_FIELD_DESC);
          oprot.writeString(struct.tradeCurrency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetContractSize()) {
        oprot.writeFieldBegin(CONTRACT_SIZE_FIELD_DESC);
        oprot.writeDouble(struct.contractSize);
        oprot.writeFieldEnd();
      }
      if (struct.openCloseMode != null) {
        if (struct.isSetOpenCloseMode()) {
          oprot.writeFieldBegin(OPEN_CLOSE_MODE_FIELD_DESC);
          oprot.writeI32(struct.openCloseMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStrikePriceTimes()) {
        oprot.writeFieldBegin(STRIKE_PRICE_TIMES_FIELD_DESC);
        oprot.writeDouble(struct.strikePriceTimes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTickSize()) {
        oprot.writeFieldBegin(TICK_SIZE_FIELD_DESC);
        oprot.writeDouble(struct.tickSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDenominator()) {
        oprot.writeFieldBegin(DENOMINATOR_FIELD_DESC);
        oprot.writeI32(struct.denominator);
        oprot.writeFieldEnd();
      }
      if (struct.cmbDirect != null) {
        if (struct.isSetCmbDirect()) {
          oprot.writeFieldBegin(CMB_DIRECT_FIELD_DESC);
          oprot.writeI32(struct.cmbDirect.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.deliveryMode != null) {
        if (struct.isSetDeliveryMode()) {
          oprot.writeFieldBegin(DELIVERY_MODE_FIELD_DESC);
          oprot.writeI32(struct.deliveryMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDeliveryDays()) {
        oprot.writeFieldBegin(DELIVERY_DAYS_FIELD_DESC);
        oprot.writeI32(struct.deliveryDays);
        oprot.writeFieldEnd();
      }
      if (struct.timezone != null) {
        if (struct.isSetTimezone()) {
          oprot.writeFieldBegin(TIMEZONE_FIELD_DESC);
          oprot.writeString(struct.timezone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityState != null) {
        if (struct.isSetCommodityState()) {
          oprot.writeFieldBegin(COMMODITY_STATE_FIELD_DESC);
          oprot.writeI32(struct.commodityState.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.depositCalculateMode != null) {
        if (struct.isSetDepositCalculateMode()) {
          oprot.writeFieldBegin(DEPOSIT_CALCULATE_MODE_FIELD_DESC);
          oprot.writeI32(struct.depositCalculateMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMaxSingleOrderVol()) {
        oprot.writeFieldBegin(MAX_SINGLE_ORDER_VOL_FIELD_DESC);
        oprot.writeI32(struct.maxSingleOrderVol);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxHoldVol()) {
        oprot.writeFieldBegin(MAX_HOLD_VOL_FIELD_DESC);
        oprot.writeI32(struct.maxHoldVol);
        oprot.writeFieldEnd();
      }
      if (struct.coverMode != null) {
        if (struct.isSetCoverMode()) {
          oprot.writeFieldBegin(COVER_MODE_FIELD_DESC);
          oprot.writeI32(struct.coverMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOpenCloseFee()) {
        oprot.writeFieldBegin(OPEN_CLOSE_FEE_FIELD_DESC);
        oprot.writeDouble(struct.openCloseFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseTodayFee()) {
        oprot.writeFieldBegin(CLOSE_TODAY_FEE_FIELD_DESC);
        oprot.writeDouble(struct.closeTodayFee);
        oprot.writeFieldEnd();
      }
      if (struct.engName != null) {
        if (struct.isSetEngName()) {
          oprot.writeFieldBegin(ENG_NAME_FIELD_DESC);
          oprot.writeString(struct.engName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cnName != null) {
        if (struct.isSetCnName()) {
          oprot.writeFieldBegin(CN_NAME_FIELD_DESC);
          oprot.writeString(struct.cnName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tcName != null) {
        if (struct.isSetTcName()) {
          oprot.writeFieldBegin(TC_NAME_FIELD_DESC);
          oprot.writeString(struct.tcName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.addOneTime != null) {
        if (struct.isSetAddOneTime()) {
          oprot.writeFieldBegin(ADD_ONE_TIME_FIELD_DESC);
          oprot.writeString(struct.addOneTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SledCommodityTupleSchemeFactory implements SchemeFactory {
    public SledCommodityTupleScheme getScheme() {
      return new SledCommodityTupleScheme();
    }
  }

  private static class SledCommodityTupleScheme extends TupleScheme<SledCommodity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SledCommodity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledCommodityId()) {
        optionals.set(0);
      }
      if (struct.isSetSledBaseCommodity()) {
        optionals.set(1);
      }
      if (struct.isSetRelateCommodity()) {
        optionals.set(2);
      }
      if (struct.isSetCurrencyGroup()) {
        optionals.set(3);
      }
      if (struct.isSetTradeCurrency()) {
        optionals.set(4);
      }
      if (struct.isSetContractSize()) {
        optionals.set(5);
      }
      if (struct.isSetOpenCloseMode()) {
        optionals.set(6);
      }
      if (struct.isSetStrikePriceTimes()) {
        optionals.set(7);
      }
      if (struct.isSetTickSize()) {
        optionals.set(8);
      }
      if (struct.isSetDenominator()) {
        optionals.set(9);
      }
      if (struct.isSetCmbDirect()) {
        optionals.set(10);
      }
      if (struct.isSetDeliveryMode()) {
        optionals.set(11);
      }
      if (struct.isSetDeliveryDays()) {
        optionals.set(12);
      }
      if (struct.isSetTimezone()) {
        optionals.set(13);
      }
      if (struct.isSetCommodityState()) {
        optionals.set(14);
      }
      if (struct.isSetDepositCalculateMode()) {
        optionals.set(15);
      }
      if (struct.isSetMaxSingleOrderVol()) {
        optionals.set(16);
      }
      if (struct.isSetMaxHoldVol()) {
        optionals.set(17);
      }
      if (struct.isSetCoverMode()) {
        optionals.set(18);
      }
      if (struct.isSetOpenCloseFee()) {
        optionals.set(19);
      }
      if (struct.isSetCloseTodayFee()) {
        optionals.set(20);
      }
      if (struct.isSetEngName()) {
        optionals.set(21);
      }
      if (struct.isSetCnName()) {
        optionals.set(22);
      }
      if (struct.isSetTcName()) {
        optionals.set(23);
      }
      if (struct.isSetAddOneTime()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetSledCommodityId()) {
        oprot.writeI32(struct.sledCommodityId);
      }
      if (struct.isSetSledBaseCommodity()) {
        struct.sledBaseCommodity.write(oprot);
      }
      if (struct.isSetRelateCommodity()) {
        {
          oprot.writeI32(struct.relateCommodity.size());
          for (SledBaseCommodity _iter44 : struct.relateCommodity)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetCurrencyGroup()) {
        struct.currencyGroup.write(oprot);
      }
      if (struct.isSetTradeCurrency()) {
        oprot.writeString(struct.tradeCurrency);
      }
      if (struct.isSetContractSize()) {
        oprot.writeDouble(struct.contractSize);
      }
      if (struct.isSetOpenCloseMode()) {
        oprot.writeI32(struct.openCloseMode.getValue());
      }
      if (struct.isSetStrikePriceTimes()) {
        oprot.writeDouble(struct.strikePriceTimes);
      }
      if (struct.isSetTickSize()) {
        oprot.writeDouble(struct.tickSize);
      }
      if (struct.isSetDenominator()) {
        oprot.writeI32(struct.denominator);
      }
      if (struct.isSetCmbDirect()) {
        oprot.writeI32(struct.cmbDirect.getValue());
      }
      if (struct.isSetDeliveryMode()) {
        oprot.writeI32(struct.deliveryMode.getValue());
      }
      if (struct.isSetDeliveryDays()) {
        oprot.writeI32(struct.deliveryDays);
      }
      if (struct.isSetTimezone()) {
        oprot.writeString(struct.timezone);
      }
      if (struct.isSetCommodityState()) {
        oprot.writeI32(struct.commodityState.getValue());
      }
      if (struct.isSetDepositCalculateMode()) {
        oprot.writeI32(struct.depositCalculateMode.getValue());
      }
      if (struct.isSetMaxSingleOrderVol()) {
        oprot.writeI32(struct.maxSingleOrderVol);
      }
      if (struct.isSetMaxHoldVol()) {
        oprot.writeI32(struct.maxHoldVol);
      }
      if (struct.isSetCoverMode()) {
        oprot.writeI32(struct.coverMode.getValue());
      }
      if (struct.isSetOpenCloseFee()) {
        oprot.writeDouble(struct.openCloseFee);
      }
      if (struct.isSetCloseTodayFee()) {
        oprot.writeDouble(struct.closeTodayFee);
      }
      if (struct.isSetEngName()) {
        oprot.writeString(struct.engName);
      }
      if (struct.isSetCnName()) {
        oprot.writeString(struct.cnName);
      }
      if (struct.isSetTcName()) {
        oprot.writeString(struct.tcName);
      }
      if (struct.isSetAddOneTime()) {
        oprot.writeString(struct.addOneTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SledCommodity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.sledCommodityId = iprot.readI32();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledBaseCommodity = new SledBaseCommodity();
        struct.sledBaseCommodity.read(iprot);
        struct.setSledBaseCommodityIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.relateCommodity = new ArrayList<SledBaseCommodity>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            SledBaseCommodity _elem47;
            _elem47 = new SledBaseCommodity();
            _elem47.read(iprot);
            struct.relateCommodity.add(_elem47);
          }
        }
        struct.setRelateCommodityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.currencyGroup = new CurrencyGroup();
        struct.currencyGroup.read(iprot);
        struct.setCurrencyGroupIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tradeCurrency = iprot.readString();
        struct.setTradeCurrencyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.contractSize = iprot.readDouble();
        struct.setContractSizeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.openCloseMode = OpenCloseMode.findByValue(iprot.readI32());
        struct.setOpenCloseModeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.strikePriceTimes = iprot.readDouble();
        struct.setStrikePriceTimesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tickSize = iprot.readDouble();
        struct.setTickSizeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.denominator = iprot.readI32();
        struct.setDenominatorIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cmbDirect = CmbDirect.findByValue(iprot.readI32());
        struct.setCmbDirectIsSet(true);
      }
      if (incoming.get(11)) {
        struct.deliveryMode = DeliveryMode.findByValue(iprot.readI32());
        struct.setDeliveryModeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.deliveryDays = iprot.readI32();
        struct.setDeliveryDaysIsSet(true);
      }
      if (incoming.get(13)) {
        struct.timezone = iprot.readString();
        struct.setTimezoneIsSet(true);
      }
      if (incoming.get(14)) {
        struct.commodityState = CommodityState.findByValue(iprot.readI32());
        struct.setCommodityStateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.depositCalculateMode = DepositCalculateMode.findByValue(iprot.readI32());
        struct.setDepositCalculateModeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.maxSingleOrderVol = iprot.readI32();
        struct.setMaxSingleOrderVolIsSet(true);
      }
      if (incoming.get(17)) {
        struct.maxHoldVol = iprot.readI32();
        struct.setMaxHoldVolIsSet(true);
      }
      if (incoming.get(18)) {
        struct.coverMode = CoverMode.findByValue(iprot.readI32());
        struct.setCoverModeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.openCloseFee = iprot.readDouble();
        struct.setOpenCloseFeeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.closeTodayFee = iprot.readDouble();
        struct.setCloseTodayFeeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.engName = iprot.readString();
        struct.setEngNameIsSet(true);
      }
      if (incoming.get(22)) {
        struct.cnName = iprot.readString();
        struct.setCnNameIsSet(true);
      }
      if (incoming.get(23)) {
        struct.tcName = iprot.readString();
        struct.setTcNameIsSet(true);
      }
      if (incoming.get(24)) {
        struct.addOneTime = iprot.readString();
        struct.setAddOneTimeIsSet(true);
      }
    }
  }

}

