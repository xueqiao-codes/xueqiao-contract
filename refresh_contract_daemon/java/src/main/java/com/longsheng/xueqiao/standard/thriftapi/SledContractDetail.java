/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.standard.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SledContractDetail implements org.apache.thrift.TBase<SledContractDetail, SledContractDetail._Fields>, java.io.Serializable, Cloneable, Comparable<SledContractDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SledContractDetail");

  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContract", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CONTRACT_ENG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("contractEngName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTRACT_CN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("contractCnName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTRACT_TC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("contractTcName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTRACT_EXP_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractExpDate", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_TRADE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastTradeDate", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField FIRST_NOTICE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("firstNoticeDate", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField MARGIN_CALCULATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("marginCalculateMode", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CURRENCY_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyGroup", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField INITIAL_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("initialMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField MAINTENANCE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("maintenanceMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField SELL_INITIAL_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("sellInitialMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField SELL_MAINTENANCE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("sellMaintenanceMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField LOCK_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("lockMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField COMMISSION_CALCULATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("commissionCalculateMode", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField OPEN_CLOSE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("openCloseFee", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField CLOSE_TODAY_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("closeTodayFee", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField CONTRACT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractSize", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField PLATFORM_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("platformEnv", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField TICK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("tickSize", org.apache.thrift.protocol.TType.DOUBLE, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SledContractDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SledContractDetailTupleSchemeFactory());
  }

  public SledContract sledContract; // optional
  public String contractEngName; // optional
  public String contractCnName; // optional
  public String contractTcName; // optional
  public long contractExpDate; // optional
  public long lastTradeDate; // optional
  public long firstNoticeDate; // optional
  /**
   * 
   * @see CalculateMode
   */
  public CalculateMode marginCalculateMode; // optional
  public CurrencyGroup currencyGroup; // optional
  public String currency; // optional
  public double initialMargin; // optional
  public double maintenanceMargin; // optional
  public double sellInitialMargin; // optional
  public double sellMaintenanceMargin; // optional
  public double lockMargin; // optional
  /**
   * 
   * @see CalculateMode
   */
  public CalculateMode commissionCalculateMode; // optional
  public double openCloseFee; // optional
  public double closeTodayFee; // optional
  public double contractSize; // optional
  /**
   * 
   * @see PlatformEnv
   */
  public PlatformEnv platformEnv; // optional
  public double tickSize; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_CONTRACT((short)1, "sledContract"),
    CONTRACT_ENG_NAME((short)2, "contractEngName"),
    CONTRACT_CN_NAME((short)3, "contractCnName"),
    CONTRACT_TC_NAME((short)4, "contractTcName"),
    CONTRACT_EXP_DATE((short)5, "contractExpDate"),
    LAST_TRADE_DATE((short)6, "lastTradeDate"),
    FIRST_NOTICE_DATE((short)7, "firstNoticeDate"),
    /**
     * 
     * @see CalculateMode
     */
    MARGIN_CALCULATE_MODE((short)8, "marginCalculateMode"),
    CURRENCY_GROUP((short)9, "currencyGroup"),
    CURRENCY((short)10, "currency"),
    INITIAL_MARGIN((short)11, "initialMargin"),
    MAINTENANCE_MARGIN((short)12, "maintenanceMargin"),
    SELL_INITIAL_MARGIN((short)13, "sellInitialMargin"),
    SELL_MAINTENANCE_MARGIN((short)14, "sellMaintenanceMargin"),
    LOCK_MARGIN((short)15, "lockMargin"),
    /**
     * 
     * @see CalculateMode
     */
    COMMISSION_CALCULATE_MODE((short)16, "commissionCalculateMode"),
    OPEN_CLOSE_FEE((short)17, "openCloseFee"),
    CLOSE_TODAY_FEE((short)18, "closeTodayFee"),
    CONTRACT_SIZE((short)19, "contractSize"),
    /**
     * 
     * @see PlatformEnv
     */
    PLATFORM_ENV((short)20, "platformEnv"),
    TICK_SIZE((short)21, "tickSize");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_CONTRACT
          return SLED_CONTRACT;
        case 2: // CONTRACT_ENG_NAME
          return CONTRACT_ENG_NAME;
        case 3: // CONTRACT_CN_NAME
          return CONTRACT_CN_NAME;
        case 4: // CONTRACT_TC_NAME
          return CONTRACT_TC_NAME;
        case 5: // CONTRACT_EXP_DATE
          return CONTRACT_EXP_DATE;
        case 6: // LAST_TRADE_DATE
          return LAST_TRADE_DATE;
        case 7: // FIRST_NOTICE_DATE
          return FIRST_NOTICE_DATE;
        case 8: // MARGIN_CALCULATE_MODE
          return MARGIN_CALCULATE_MODE;
        case 9: // CURRENCY_GROUP
          return CURRENCY_GROUP;
        case 10: // CURRENCY
          return CURRENCY;
        case 11: // INITIAL_MARGIN
          return INITIAL_MARGIN;
        case 12: // MAINTENANCE_MARGIN
          return MAINTENANCE_MARGIN;
        case 13: // SELL_INITIAL_MARGIN
          return SELL_INITIAL_MARGIN;
        case 14: // SELL_MAINTENANCE_MARGIN
          return SELL_MAINTENANCE_MARGIN;
        case 15: // LOCK_MARGIN
          return LOCK_MARGIN;
        case 16: // COMMISSION_CALCULATE_MODE
          return COMMISSION_CALCULATE_MODE;
        case 17: // OPEN_CLOSE_FEE
          return OPEN_CLOSE_FEE;
        case 18: // CLOSE_TODAY_FEE
          return CLOSE_TODAY_FEE;
        case 19: // CONTRACT_SIZE
          return CONTRACT_SIZE;
        case 20: // PLATFORM_ENV
          return PLATFORM_ENV;
        case 21: // TICK_SIZE
          return TICK_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONTRACTEXPDATE_ISSET_ID = 0;
  private static final int __LASTTRADEDATE_ISSET_ID = 1;
  private static final int __FIRSTNOTICEDATE_ISSET_ID = 2;
  private static final int __INITIALMARGIN_ISSET_ID = 3;
  private static final int __MAINTENANCEMARGIN_ISSET_ID = 4;
  private static final int __SELLINITIALMARGIN_ISSET_ID = 5;
  private static final int __SELLMAINTENANCEMARGIN_ISSET_ID = 6;
  private static final int __LOCKMARGIN_ISSET_ID = 7;
  private static final int __OPENCLOSEFEE_ISSET_ID = 8;
  private static final int __CLOSETODAYFEE_ISSET_ID = 9;
  private static final int __CONTRACTSIZE_ISSET_ID = 10;
  private static final int __TICKSIZE_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_CONTRACT,_Fields.CONTRACT_ENG_NAME,_Fields.CONTRACT_CN_NAME,_Fields.CONTRACT_TC_NAME,_Fields.CONTRACT_EXP_DATE,_Fields.LAST_TRADE_DATE,_Fields.FIRST_NOTICE_DATE,_Fields.MARGIN_CALCULATE_MODE,_Fields.CURRENCY_GROUP,_Fields.CURRENCY,_Fields.INITIAL_MARGIN,_Fields.MAINTENANCE_MARGIN,_Fields.SELL_INITIAL_MARGIN,_Fields.SELL_MAINTENANCE_MARGIN,_Fields.LOCK_MARGIN,_Fields.COMMISSION_CALCULATE_MODE,_Fields.OPEN_CLOSE_FEE,_Fields.CLOSE_TODAY_FEE,_Fields.CONTRACT_SIZE,_Fields.PLATFORM_ENV,_Fields.TICK_SIZE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_CONTRACT, new org.apache.thrift.meta_data.FieldMetaData("sledContract", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SledContract.class)));
    tmpMap.put(_Fields.CONTRACT_ENG_NAME, new org.apache.thrift.meta_data.FieldMetaData("contractEngName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_CN_NAME, new org.apache.thrift.meta_data.FieldMetaData("contractCnName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_TC_NAME, new org.apache.thrift.meta_data.FieldMetaData("contractTcName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_EXP_DATE, new org.apache.thrift.meta_data.FieldMetaData("contractExpDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_TRADE_DATE, new org.apache.thrift.meta_data.FieldMetaData("lastTradeDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FIRST_NOTICE_DATE, new org.apache.thrift.meta_data.FieldMetaData("firstNoticeDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MARGIN_CALCULATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("marginCalculateMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CalculateMode.class)));
    tmpMap.put(_Fields.CURRENCY_GROUP, new org.apache.thrift.meta_data.FieldMetaData("currencyGroup", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CurrencyGroup.class)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INITIAL_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("initialMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAINTENANCE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("maintenanceMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELL_INITIAL_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("sellInitialMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELL_MAINTENANCE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("sellMaintenanceMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOCK_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("lockMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMISSION_CALCULATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("commissionCalculateMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CalculateMode.class)));
    tmpMap.put(_Fields.OPEN_CLOSE_FEE, new org.apache.thrift.meta_data.FieldMetaData("openCloseFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_TODAY_FEE, new org.apache.thrift.meta_data.FieldMetaData("closeTodayFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONTRACT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("contractSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PLATFORM_ENV, new org.apache.thrift.meta_data.FieldMetaData("platformEnv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PlatformEnv.class)));
    tmpMap.put(_Fields.TICK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("tickSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SledContractDetail.class, metaDataMap);
  }

  public SledContractDetail() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SledContractDetail(SledContractDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSledContract()) {
      this.sledContract = new SledContract(other.sledContract);
    }
    if (other.isSetContractEngName()) {
      this.contractEngName = other.contractEngName;
    }
    if (other.isSetContractCnName()) {
      this.contractCnName = other.contractCnName;
    }
    if (other.isSetContractTcName()) {
      this.contractTcName = other.contractTcName;
    }
    this.contractExpDate = other.contractExpDate;
    this.lastTradeDate = other.lastTradeDate;
    this.firstNoticeDate = other.firstNoticeDate;
    if (other.isSetMarginCalculateMode()) {
      this.marginCalculateMode = other.marginCalculateMode;
    }
    if (other.isSetCurrencyGroup()) {
      this.currencyGroup = new CurrencyGroup(other.currencyGroup);
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.initialMargin = other.initialMargin;
    this.maintenanceMargin = other.maintenanceMargin;
    this.sellInitialMargin = other.sellInitialMargin;
    this.sellMaintenanceMargin = other.sellMaintenanceMargin;
    this.lockMargin = other.lockMargin;
    if (other.isSetCommissionCalculateMode()) {
      this.commissionCalculateMode = other.commissionCalculateMode;
    }
    this.openCloseFee = other.openCloseFee;
    this.closeTodayFee = other.closeTodayFee;
    this.contractSize = other.contractSize;
    if (other.isSetPlatformEnv()) {
      this.platformEnv = other.platformEnv;
    }
    this.tickSize = other.tickSize;
  }

  public SledContractDetail deepCopy() {
    return new SledContractDetail(this);
  }

  @Override
  public void clear() {
    this.sledContract = null;
    this.contractEngName = null;
    this.contractCnName = null;
    this.contractTcName = null;
    setContractExpDateIsSet(false);
    this.contractExpDate = 0;
    setLastTradeDateIsSet(false);
    this.lastTradeDate = 0;
    setFirstNoticeDateIsSet(false);
    this.firstNoticeDate = 0;
    this.marginCalculateMode = null;
    this.currencyGroup = null;
    this.currency = null;
    setInitialMarginIsSet(false);
    this.initialMargin = 0.0;
    setMaintenanceMarginIsSet(false);
    this.maintenanceMargin = 0.0;
    setSellInitialMarginIsSet(false);
    this.sellInitialMargin = 0.0;
    setSellMaintenanceMarginIsSet(false);
    this.sellMaintenanceMargin = 0.0;
    setLockMarginIsSet(false);
    this.lockMargin = 0.0;
    this.commissionCalculateMode = null;
    setOpenCloseFeeIsSet(false);
    this.openCloseFee = 0.0;
    setCloseTodayFeeIsSet(false);
    this.closeTodayFee = 0.0;
    setContractSizeIsSet(false);
    this.contractSize = 0.0;
    this.platformEnv = null;
    setTickSizeIsSet(false);
    this.tickSize = 0.0;
  }

  public SledContract getSledContract() {
    return this.sledContract;
  }

  public SledContractDetail setSledContract(SledContract sledContract) {
    this.sledContract = sledContract;
    return this;
  }

  public void unsetSledContract() {
    this.sledContract = null;
  }

  /** Returns true if field sledContract is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContract() {
    return this.sledContract != null;
  }

  public void setSledContractIsSet(boolean value) {
    if (!value) {
      this.sledContract = null;
    }
  }

  public String getContractEngName() {
    return this.contractEngName;
  }

  public SledContractDetail setContractEngName(String contractEngName) {
    this.contractEngName = contractEngName;
    return this;
  }

  public void unsetContractEngName() {
    this.contractEngName = null;
  }

  /** Returns true if field contractEngName is set (has been assigned a value) and false otherwise */
  public boolean isSetContractEngName() {
    return this.contractEngName != null;
  }

  public void setContractEngNameIsSet(boolean value) {
    if (!value) {
      this.contractEngName = null;
    }
  }

  public String getContractCnName() {
    return this.contractCnName;
  }

  public SledContractDetail setContractCnName(String contractCnName) {
    this.contractCnName = contractCnName;
    return this;
  }

  public void unsetContractCnName() {
    this.contractCnName = null;
  }

  /** Returns true if field contractCnName is set (has been assigned a value) and false otherwise */
  public boolean isSetContractCnName() {
    return this.contractCnName != null;
  }

  public void setContractCnNameIsSet(boolean value) {
    if (!value) {
      this.contractCnName = null;
    }
  }

  public String getContractTcName() {
    return this.contractTcName;
  }

  public SledContractDetail setContractTcName(String contractTcName) {
    this.contractTcName = contractTcName;
    return this;
  }

  public void unsetContractTcName() {
    this.contractTcName = null;
  }

  /** Returns true if field contractTcName is set (has been assigned a value) and false otherwise */
  public boolean isSetContractTcName() {
    return this.contractTcName != null;
  }

  public void setContractTcNameIsSet(boolean value) {
    if (!value) {
      this.contractTcName = null;
    }
  }

  public long getContractExpDate() {
    return this.contractExpDate;
  }

  public SledContractDetail setContractExpDate(long contractExpDate) {
    this.contractExpDate = contractExpDate;
    setContractExpDateIsSet(true);
    return this;
  }

  public void unsetContractExpDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTEXPDATE_ISSET_ID);
  }

  /** Returns true if field contractExpDate is set (has been assigned a value) and false otherwise */
  public boolean isSetContractExpDate() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTEXPDATE_ISSET_ID);
  }

  public void setContractExpDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTEXPDATE_ISSET_ID, value);
  }

  public long getLastTradeDate() {
    return this.lastTradeDate;
  }

  public SledContractDetail setLastTradeDate(long lastTradeDate) {
    this.lastTradeDate = lastTradeDate;
    setLastTradeDateIsSet(true);
    return this;
  }

  public void unsetLastTradeDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTTRADEDATE_ISSET_ID);
  }

  /** Returns true if field lastTradeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastTradeDate() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTTRADEDATE_ISSET_ID);
  }

  public void setLastTradeDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTTRADEDATE_ISSET_ID, value);
  }

  public long getFirstNoticeDate() {
    return this.firstNoticeDate;
  }

  public SledContractDetail setFirstNoticeDate(long firstNoticeDate) {
    this.firstNoticeDate = firstNoticeDate;
    setFirstNoticeDateIsSet(true);
    return this;
  }

  public void unsetFirstNoticeDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTNOTICEDATE_ISSET_ID);
  }

  /** Returns true if field firstNoticeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstNoticeDate() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTNOTICEDATE_ISSET_ID);
  }

  public void setFirstNoticeDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTNOTICEDATE_ISSET_ID, value);
  }

  /**
   * 
   * @see CalculateMode
   */
  public CalculateMode getMarginCalculateMode() {
    return this.marginCalculateMode;
  }

  /**
   * 
   * @see CalculateMode
   */
  public SledContractDetail setMarginCalculateMode(CalculateMode marginCalculateMode) {
    this.marginCalculateMode = marginCalculateMode;
    return this;
  }

  public void unsetMarginCalculateMode() {
    this.marginCalculateMode = null;
  }

  /** Returns true if field marginCalculateMode is set (has been assigned a value) and false otherwise */
  public boolean isSetMarginCalculateMode() {
    return this.marginCalculateMode != null;
  }

  public void setMarginCalculateModeIsSet(boolean value) {
    if (!value) {
      this.marginCalculateMode = null;
    }
  }

  public CurrencyGroup getCurrencyGroup() {
    return this.currencyGroup;
  }

  public SledContractDetail setCurrencyGroup(CurrencyGroup currencyGroup) {
    this.currencyGroup = currencyGroup;
    return this;
  }

  public void unsetCurrencyGroup() {
    this.currencyGroup = null;
  }

  /** Returns true if field currencyGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyGroup() {
    return this.currencyGroup != null;
  }

  public void setCurrencyGroupIsSet(boolean value) {
    if (!value) {
      this.currencyGroup = null;
    }
  }

  public String getCurrency() {
    return this.currency;
  }

  public SledContractDetail setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public double getInitialMargin() {
    return this.initialMargin;
  }

  public SledContractDetail setInitialMargin(double initialMargin) {
    this.initialMargin = initialMargin;
    setInitialMarginIsSet(true);
    return this;
  }

  public void unsetInitialMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INITIALMARGIN_ISSET_ID);
  }

  /** Returns true if field initialMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetInitialMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __INITIALMARGIN_ISSET_ID);
  }

  public void setInitialMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INITIALMARGIN_ISSET_ID, value);
  }

  public double getMaintenanceMargin() {
    return this.maintenanceMargin;
  }

  public SledContractDetail setMaintenanceMargin(double maintenanceMargin) {
    this.maintenanceMargin = maintenanceMargin;
    setMaintenanceMarginIsSet(true);
    return this;
  }

  public void unsetMaintenanceMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAINTENANCEMARGIN_ISSET_ID);
  }

  /** Returns true if field maintenanceMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetMaintenanceMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __MAINTENANCEMARGIN_ISSET_ID);
  }

  public void setMaintenanceMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAINTENANCEMARGIN_ISSET_ID, value);
  }

  public double getSellInitialMargin() {
    return this.sellInitialMargin;
  }

  public SledContractDetail setSellInitialMargin(double sellInitialMargin) {
    this.sellInitialMargin = sellInitialMargin;
    setSellInitialMarginIsSet(true);
    return this;
  }

  public void unsetSellInitialMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLINITIALMARGIN_ISSET_ID);
  }

  /** Returns true if field sellInitialMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetSellInitialMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLINITIALMARGIN_ISSET_ID);
  }

  public void setSellInitialMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLINITIALMARGIN_ISSET_ID, value);
  }

  public double getSellMaintenanceMargin() {
    return this.sellMaintenanceMargin;
  }

  public SledContractDetail setSellMaintenanceMargin(double sellMaintenanceMargin) {
    this.sellMaintenanceMargin = sellMaintenanceMargin;
    setSellMaintenanceMarginIsSet(true);
    return this;
  }

  public void unsetSellMaintenanceMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLMAINTENANCEMARGIN_ISSET_ID);
  }

  /** Returns true if field sellMaintenanceMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetSellMaintenanceMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLMAINTENANCEMARGIN_ISSET_ID);
  }

  public void setSellMaintenanceMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLMAINTENANCEMARGIN_ISSET_ID, value);
  }

  public double getLockMargin() {
    return this.lockMargin;
  }

  public SledContractDetail setLockMargin(double lockMargin) {
    this.lockMargin = lockMargin;
    setLockMarginIsSet(true);
    return this;
  }

  public void unsetLockMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCKMARGIN_ISSET_ID);
  }

  /** Returns true if field lockMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetLockMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCKMARGIN_ISSET_ID);
  }

  public void setLockMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCKMARGIN_ISSET_ID, value);
  }

  /**
   * 
   * @see CalculateMode
   */
  public CalculateMode getCommissionCalculateMode() {
    return this.commissionCalculateMode;
  }

  /**
   * 
   * @see CalculateMode
   */
  public SledContractDetail setCommissionCalculateMode(CalculateMode commissionCalculateMode) {
    this.commissionCalculateMode = commissionCalculateMode;
    return this;
  }

  public void unsetCommissionCalculateMode() {
    this.commissionCalculateMode = null;
  }

  /** Returns true if field commissionCalculateMode is set (has been assigned a value) and false otherwise */
  public boolean isSetCommissionCalculateMode() {
    return this.commissionCalculateMode != null;
  }

  public void setCommissionCalculateModeIsSet(boolean value) {
    if (!value) {
      this.commissionCalculateMode = null;
    }
  }

  public double getOpenCloseFee() {
    return this.openCloseFee;
  }

  public SledContractDetail setOpenCloseFee(double openCloseFee) {
    this.openCloseFee = openCloseFee;
    setOpenCloseFeeIsSet(true);
    return this;
  }

  public void unsetOpenCloseFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID);
  }

  /** Returns true if field openCloseFee is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenCloseFee() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID);
  }

  public void setOpenCloseFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID, value);
  }

  public double getCloseTodayFee() {
    return this.closeTodayFee;
  }

  public SledContractDetail setCloseTodayFee(double closeTodayFee) {
    this.closeTodayFee = closeTodayFee;
    setCloseTodayFeeIsSet(true);
    return this;
  }

  public void unsetCloseTodayFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSETODAYFEE_ISSET_ID);
  }

  /** Returns true if field closeTodayFee is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseTodayFee() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSETODAYFEE_ISSET_ID);
  }

  public void setCloseTodayFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSETODAYFEE_ISSET_ID, value);
  }

  public double getContractSize() {
    return this.contractSize;
  }

  public SledContractDetail setContractSize(double contractSize) {
    this.contractSize = contractSize;
    setContractSizeIsSet(true);
    return this;
  }

  public void unsetContractSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTSIZE_ISSET_ID);
  }

  /** Returns true if field contractSize is set (has been assigned a value) and false otherwise */
  public boolean isSetContractSize() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTSIZE_ISSET_ID);
  }

  public void setContractSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTSIZE_ISSET_ID, value);
  }

  /**
   * 
   * @see PlatformEnv
   */
  public PlatformEnv getPlatformEnv() {
    return this.platformEnv;
  }

  /**
   * 
   * @see PlatformEnv
   */
  public SledContractDetail setPlatformEnv(PlatformEnv platformEnv) {
    this.platformEnv = platformEnv;
    return this;
  }

  public void unsetPlatformEnv() {
    this.platformEnv = null;
  }

  /** Returns true if field platformEnv is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformEnv() {
    return this.platformEnv != null;
  }

  public void setPlatformEnvIsSet(boolean value) {
    if (!value) {
      this.platformEnv = null;
    }
  }

  public double getTickSize() {
    return this.tickSize;
  }

  public SledContractDetail setTickSize(double tickSize) {
    this.tickSize = tickSize;
    setTickSizeIsSet(true);
    return this;
  }

  public void unsetTickSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TICKSIZE_ISSET_ID);
  }

  /** Returns true if field tickSize is set (has been assigned a value) and false otherwise */
  public boolean isSetTickSize() {
    return EncodingUtils.testBit(__isset_bitfield, __TICKSIZE_ISSET_ID);
  }

  public void setTickSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TICKSIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_CONTRACT:
      if (value == null) {
        unsetSledContract();
      } else {
        setSledContract((SledContract)value);
      }
      break;

    case CONTRACT_ENG_NAME:
      if (value == null) {
        unsetContractEngName();
      } else {
        setContractEngName((String)value);
      }
      break;

    case CONTRACT_CN_NAME:
      if (value == null) {
        unsetContractCnName();
      } else {
        setContractCnName((String)value);
      }
      break;

    case CONTRACT_TC_NAME:
      if (value == null) {
        unsetContractTcName();
      } else {
        setContractTcName((String)value);
      }
      break;

    case CONTRACT_EXP_DATE:
      if (value == null) {
        unsetContractExpDate();
      } else {
        setContractExpDate((Long)value);
      }
      break;

    case LAST_TRADE_DATE:
      if (value == null) {
        unsetLastTradeDate();
      } else {
        setLastTradeDate((Long)value);
      }
      break;

    case FIRST_NOTICE_DATE:
      if (value == null) {
        unsetFirstNoticeDate();
      } else {
        setFirstNoticeDate((Long)value);
      }
      break;

    case MARGIN_CALCULATE_MODE:
      if (value == null) {
        unsetMarginCalculateMode();
      } else {
        setMarginCalculateMode((CalculateMode)value);
      }
      break;

    case CURRENCY_GROUP:
      if (value == null) {
        unsetCurrencyGroup();
      } else {
        setCurrencyGroup((CurrencyGroup)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case INITIAL_MARGIN:
      if (value == null) {
        unsetInitialMargin();
      } else {
        setInitialMargin((Double)value);
      }
      break;

    case MAINTENANCE_MARGIN:
      if (value == null) {
        unsetMaintenanceMargin();
      } else {
        setMaintenanceMargin((Double)value);
      }
      break;

    case SELL_INITIAL_MARGIN:
      if (value == null) {
        unsetSellInitialMargin();
      } else {
        setSellInitialMargin((Double)value);
      }
      break;

    case SELL_MAINTENANCE_MARGIN:
      if (value == null) {
        unsetSellMaintenanceMargin();
      } else {
        setSellMaintenanceMargin((Double)value);
      }
      break;

    case LOCK_MARGIN:
      if (value == null) {
        unsetLockMargin();
      } else {
        setLockMargin((Double)value);
      }
      break;

    case COMMISSION_CALCULATE_MODE:
      if (value == null) {
        unsetCommissionCalculateMode();
      } else {
        setCommissionCalculateMode((CalculateMode)value);
      }
      break;

    case OPEN_CLOSE_FEE:
      if (value == null) {
        unsetOpenCloseFee();
      } else {
        setOpenCloseFee((Double)value);
      }
      break;

    case CLOSE_TODAY_FEE:
      if (value == null) {
        unsetCloseTodayFee();
      } else {
        setCloseTodayFee((Double)value);
      }
      break;

    case CONTRACT_SIZE:
      if (value == null) {
        unsetContractSize();
      } else {
        setContractSize((Double)value);
      }
      break;

    case PLATFORM_ENV:
      if (value == null) {
        unsetPlatformEnv();
      } else {
        setPlatformEnv((PlatformEnv)value);
      }
      break;

    case TICK_SIZE:
      if (value == null) {
        unsetTickSize();
      } else {
        setTickSize((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_CONTRACT:
      return getSledContract();

    case CONTRACT_ENG_NAME:
      return getContractEngName();

    case CONTRACT_CN_NAME:
      return getContractCnName();

    case CONTRACT_TC_NAME:
      return getContractTcName();

    case CONTRACT_EXP_DATE:
      return Long.valueOf(getContractExpDate());

    case LAST_TRADE_DATE:
      return Long.valueOf(getLastTradeDate());

    case FIRST_NOTICE_DATE:
      return Long.valueOf(getFirstNoticeDate());

    case MARGIN_CALCULATE_MODE:
      return getMarginCalculateMode();

    case CURRENCY_GROUP:
      return getCurrencyGroup();

    case CURRENCY:
      return getCurrency();

    case INITIAL_MARGIN:
      return Double.valueOf(getInitialMargin());

    case MAINTENANCE_MARGIN:
      return Double.valueOf(getMaintenanceMargin());

    case SELL_INITIAL_MARGIN:
      return Double.valueOf(getSellInitialMargin());

    case SELL_MAINTENANCE_MARGIN:
      return Double.valueOf(getSellMaintenanceMargin());

    case LOCK_MARGIN:
      return Double.valueOf(getLockMargin());

    case COMMISSION_CALCULATE_MODE:
      return getCommissionCalculateMode();

    case OPEN_CLOSE_FEE:
      return Double.valueOf(getOpenCloseFee());

    case CLOSE_TODAY_FEE:
      return Double.valueOf(getCloseTodayFee());

    case CONTRACT_SIZE:
      return Double.valueOf(getContractSize());

    case PLATFORM_ENV:
      return getPlatformEnv();

    case TICK_SIZE:
      return Double.valueOf(getTickSize());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_CONTRACT:
      return isSetSledContract();
    case CONTRACT_ENG_NAME:
      return isSetContractEngName();
    case CONTRACT_CN_NAME:
      return isSetContractCnName();
    case CONTRACT_TC_NAME:
      return isSetContractTcName();
    case CONTRACT_EXP_DATE:
      return isSetContractExpDate();
    case LAST_TRADE_DATE:
      return isSetLastTradeDate();
    case FIRST_NOTICE_DATE:
      return isSetFirstNoticeDate();
    case MARGIN_CALCULATE_MODE:
      return isSetMarginCalculateMode();
    case CURRENCY_GROUP:
      return isSetCurrencyGroup();
    case CURRENCY:
      return isSetCurrency();
    case INITIAL_MARGIN:
      return isSetInitialMargin();
    case MAINTENANCE_MARGIN:
      return isSetMaintenanceMargin();
    case SELL_INITIAL_MARGIN:
      return isSetSellInitialMargin();
    case SELL_MAINTENANCE_MARGIN:
      return isSetSellMaintenanceMargin();
    case LOCK_MARGIN:
      return isSetLockMargin();
    case COMMISSION_CALCULATE_MODE:
      return isSetCommissionCalculateMode();
    case OPEN_CLOSE_FEE:
      return isSetOpenCloseFee();
    case CLOSE_TODAY_FEE:
      return isSetCloseTodayFee();
    case CONTRACT_SIZE:
      return isSetContractSize();
    case PLATFORM_ENV:
      return isSetPlatformEnv();
    case TICK_SIZE:
      return isSetTickSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SledContractDetail)
      return this.equals((SledContractDetail)that);
    return false;
  }

  public boolean equals(SledContractDetail that) {
    if (that == null)
      return false;

    boolean this_present_sledContract = true && this.isSetSledContract();
    boolean that_present_sledContract = true && that.isSetSledContract();
    if (this_present_sledContract || that_present_sledContract) {
      if (!(this_present_sledContract && that_present_sledContract))
        return false;
      if (!this.sledContract.equals(that.sledContract))
        return false;
    }

    boolean this_present_contractEngName = true && this.isSetContractEngName();
    boolean that_present_contractEngName = true && that.isSetContractEngName();
    if (this_present_contractEngName || that_present_contractEngName) {
      if (!(this_present_contractEngName && that_present_contractEngName))
        return false;
      if (!this.contractEngName.equals(that.contractEngName))
        return false;
    }

    boolean this_present_contractCnName = true && this.isSetContractCnName();
    boolean that_present_contractCnName = true && that.isSetContractCnName();
    if (this_present_contractCnName || that_present_contractCnName) {
      if (!(this_present_contractCnName && that_present_contractCnName))
        return false;
      if (!this.contractCnName.equals(that.contractCnName))
        return false;
    }

    boolean this_present_contractTcName = true && this.isSetContractTcName();
    boolean that_present_contractTcName = true && that.isSetContractTcName();
    if (this_present_contractTcName || that_present_contractTcName) {
      if (!(this_present_contractTcName && that_present_contractTcName))
        return false;
      if (!this.contractTcName.equals(that.contractTcName))
        return false;
    }

    boolean this_present_contractExpDate = true && this.isSetContractExpDate();
    boolean that_present_contractExpDate = true && that.isSetContractExpDate();
    if (this_present_contractExpDate || that_present_contractExpDate) {
      if (!(this_present_contractExpDate && that_present_contractExpDate))
        return false;
      if (this.contractExpDate != that.contractExpDate)
        return false;
    }

    boolean this_present_lastTradeDate = true && this.isSetLastTradeDate();
    boolean that_present_lastTradeDate = true && that.isSetLastTradeDate();
    if (this_present_lastTradeDate || that_present_lastTradeDate) {
      if (!(this_present_lastTradeDate && that_present_lastTradeDate))
        return false;
      if (this.lastTradeDate != that.lastTradeDate)
        return false;
    }

    boolean this_present_firstNoticeDate = true && this.isSetFirstNoticeDate();
    boolean that_present_firstNoticeDate = true && that.isSetFirstNoticeDate();
    if (this_present_firstNoticeDate || that_present_firstNoticeDate) {
      if (!(this_present_firstNoticeDate && that_present_firstNoticeDate))
        return false;
      if (this.firstNoticeDate != that.firstNoticeDate)
        return false;
    }

    boolean this_present_marginCalculateMode = true && this.isSetMarginCalculateMode();
    boolean that_present_marginCalculateMode = true && that.isSetMarginCalculateMode();
    if (this_present_marginCalculateMode || that_present_marginCalculateMode) {
      if (!(this_present_marginCalculateMode && that_present_marginCalculateMode))
        return false;
      if (!this.marginCalculateMode.equals(that.marginCalculateMode))
        return false;
    }

    boolean this_present_currencyGroup = true && this.isSetCurrencyGroup();
    boolean that_present_currencyGroup = true && that.isSetCurrencyGroup();
    if (this_present_currencyGroup || that_present_currencyGroup) {
      if (!(this_present_currencyGroup && that_present_currencyGroup))
        return false;
      if (!this.currencyGroup.equals(that.currencyGroup))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_initialMargin = true && this.isSetInitialMargin();
    boolean that_present_initialMargin = true && that.isSetInitialMargin();
    if (this_present_initialMargin || that_present_initialMargin) {
      if (!(this_present_initialMargin && that_present_initialMargin))
        return false;
      if (this.initialMargin != that.initialMargin)
        return false;
    }

    boolean this_present_maintenanceMargin = true && this.isSetMaintenanceMargin();
    boolean that_present_maintenanceMargin = true && that.isSetMaintenanceMargin();
    if (this_present_maintenanceMargin || that_present_maintenanceMargin) {
      if (!(this_present_maintenanceMargin && that_present_maintenanceMargin))
        return false;
      if (this.maintenanceMargin != that.maintenanceMargin)
        return false;
    }

    boolean this_present_sellInitialMargin = true && this.isSetSellInitialMargin();
    boolean that_present_sellInitialMargin = true && that.isSetSellInitialMargin();
    if (this_present_sellInitialMargin || that_present_sellInitialMargin) {
      if (!(this_present_sellInitialMargin && that_present_sellInitialMargin))
        return false;
      if (this.sellInitialMargin != that.sellInitialMargin)
        return false;
    }

    boolean this_present_sellMaintenanceMargin = true && this.isSetSellMaintenanceMargin();
    boolean that_present_sellMaintenanceMargin = true && that.isSetSellMaintenanceMargin();
    if (this_present_sellMaintenanceMargin || that_present_sellMaintenanceMargin) {
      if (!(this_present_sellMaintenanceMargin && that_present_sellMaintenanceMargin))
        return false;
      if (this.sellMaintenanceMargin != that.sellMaintenanceMargin)
        return false;
    }

    boolean this_present_lockMargin = true && this.isSetLockMargin();
    boolean that_present_lockMargin = true && that.isSetLockMargin();
    if (this_present_lockMargin || that_present_lockMargin) {
      if (!(this_present_lockMargin && that_present_lockMargin))
        return false;
      if (this.lockMargin != that.lockMargin)
        return false;
    }

    boolean this_present_commissionCalculateMode = true && this.isSetCommissionCalculateMode();
    boolean that_present_commissionCalculateMode = true && that.isSetCommissionCalculateMode();
    if (this_present_commissionCalculateMode || that_present_commissionCalculateMode) {
      if (!(this_present_commissionCalculateMode && that_present_commissionCalculateMode))
        return false;
      if (!this.commissionCalculateMode.equals(that.commissionCalculateMode))
        return false;
    }

    boolean this_present_openCloseFee = true && this.isSetOpenCloseFee();
    boolean that_present_openCloseFee = true && that.isSetOpenCloseFee();
    if (this_present_openCloseFee || that_present_openCloseFee) {
      if (!(this_present_openCloseFee && that_present_openCloseFee))
        return false;
      if (this.openCloseFee != that.openCloseFee)
        return false;
    }

    boolean this_present_closeTodayFee = true && this.isSetCloseTodayFee();
    boolean that_present_closeTodayFee = true && that.isSetCloseTodayFee();
    if (this_present_closeTodayFee || that_present_closeTodayFee) {
      if (!(this_present_closeTodayFee && that_present_closeTodayFee))
        return false;
      if (this.closeTodayFee != that.closeTodayFee)
        return false;
    }

    boolean this_present_contractSize = true && this.isSetContractSize();
    boolean that_present_contractSize = true && that.isSetContractSize();
    if (this_present_contractSize || that_present_contractSize) {
      if (!(this_present_contractSize && that_present_contractSize))
        return false;
      if (this.contractSize != that.contractSize)
        return false;
    }

    boolean this_present_platformEnv = true && this.isSetPlatformEnv();
    boolean that_present_platformEnv = true && that.isSetPlatformEnv();
    if (this_present_platformEnv || that_present_platformEnv) {
      if (!(this_present_platformEnv && that_present_platformEnv))
        return false;
      if (!this.platformEnv.equals(that.platformEnv))
        return false;
    }

    boolean this_present_tickSize = true && this.isSetTickSize();
    boolean that_present_tickSize = true && that.isSetTickSize();
    if (this_present_tickSize || that_present_tickSize) {
      if (!(this_present_tickSize && that_present_tickSize))
        return false;
      if (this.tickSize != that.tickSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SledContractDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledContract()).compareTo(other.isSetSledContract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContract, other.sledContract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractEngName()).compareTo(other.isSetContractEngName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractEngName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractEngName, other.contractEngName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractCnName()).compareTo(other.isSetContractCnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractCnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractCnName, other.contractCnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractTcName()).compareTo(other.isSetContractTcName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractTcName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractTcName, other.contractTcName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractExpDate()).compareTo(other.isSetContractExpDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractExpDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractExpDate, other.contractExpDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastTradeDate()).compareTo(other.isSetLastTradeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastTradeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastTradeDate, other.lastTradeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstNoticeDate()).compareTo(other.isSetFirstNoticeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstNoticeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstNoticeDate, other.firstNoticeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarginCalculateMode()).compareTo(other.isSetMarginCalculateMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarginCalculateMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marginCalculateMode, other.marginCalculateMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyGroup()).compareTo(other.isSetCurrencyGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyGroup, other.currencyGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitialMargin()).compareTo(other.isSetInitialMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initialMargin, other.initialMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaintenanceMargin()).compareTo(other.isSetMaintenanceMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaintenanceMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maintenanceMargin, other.maintenanceMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellInitialMargin()).compareTo(other.isSetSellInitialMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellInitialMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellInitialMargin, other.sellInitialMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellMaintenanceMargin()).compareTo(other.isSetSellMaintenanceMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellMaintenanceMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellMaintenanceMargin, other.sellMaintenanceMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLockMargin()).compareTo(other.isSetLockMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockMargin, other.lockMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommissionCalculateMode()).compareTo(other.isSetCommissionCalculateMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommissionCalculateMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commissionCalculateMode, other.commissionCalculateMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenCloseFee()).compareTo(other.isSetOpenCloseFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenCloseFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openCloseFee, other.openCloseFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseTodayFee()).compareTo(other.isSetCloseTodayFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseTodayFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeTodayFee, other.closeTodayFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractSize()).compareTo(other.isSetContractSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractSize, other.contractSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformEnv()).compareTo(other.isSetPlatformEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformEnv, other.platformEnv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTickSize()).compareTo(other.isSetTickSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTickSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tickSize, other.tickSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SledContractDetail(");
    boolean first = true;

    if (isSetSledContract()) {
      sb.append("sledContract:");
      if (this.sledContract == null) {
        sb.append("null");
      } else {
        sb.append(this.sledContract);
      }
      first = false;
    }
    if (isSetContractEngName()) {
      if (!first) sb.append(", ");
      sb.append("contractEngName:");
      if (this.contractEngName == null) {
        sb.append("null");
      } else {
        sb.append(this.contractEngName);
      }
      first = false;
    }
    if (isSetContractCnName()) {
      if (!first) sb.append(", ");
      sb.append("contractCnName:");
      if (this.contractCnName == null) {
        sb.append("null");
      } else {
        sb.append(this.contractCnName);
      }
      first = false;
    }
    if (isSetContractTcName()) {
      if (!first) sb.append(", ");
      sb.append("contractTcName:");
      if (this.contractTcName == null) {
        sb.append("null");
      } else {
        sb.append(this.contractTcName);
      }
      first = false;
    }
    if (isSetContractExpDate()) {
      if (!first) sb.append(", ");
      sb.append("contractExpDate:");
      sb.append(this.contractExpDate);
      first = false;
    }
    if (isSetLastTradeDate()) {
      if (!first) sb.append(", ");
      sb.append("lastTradeDate:");
      sb.append(this.lastTradeDate);
      first = false;
    }
    if (isSetFirstNoticeDate()) {
      if (!first) sb.append(", ");
      sb.append("firstNoticeDate:");
      sb.append(this.firstNoticeDate);
      first = false;
    }
    if (isSetMarginCalculateMode()) {
      if (!first) sb.append(", ");
      sb.append("marginCalculateMode:");
      if (this.marginCalculateMode == null) {
        sb.append("null");
      } else {
        sb.append(this.marginCalculateMode);
      }
      first = false;
    }
    if (isSetCurrencyGroup()) {
      if (!first) sb.append(", ");
      sb.append("currencyGroup:");
      if (this.currencyGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyGroup);
      }
      first = false;
    }
    if (isSetCurrency()) {
      if (!first) sb.append(", ");
      sb.append("currency:");
      if (this.currency == null) {
        sb.append("null");
      } else {
        sb.append(this.currency);
      }
      first = false;
    }
    if (isSetInitialMargin()) {
      if (!first) sb.append(", ");
      sb.append("initialMargin:");
      sb.append(this.initialMargin);
      first = false;
    }
    if (isSetMaintenanceMargin()) {
      if (!first) sb.append(", ");
      sb.append("maintenanceMargin:");
      sb.append(this.maintenanceMargin);
      first = false;
    }
    if (isSetSellInitialMargin()) {
      if (!first) sb.append(", ");
      sb.append("sellInitialMargin:");
      sb.append(this.sellInitialMargin);
      first = false;
    }
    if (isSetSellMaintenanceMargin()) {
      if (!first) sb.append(", ");
      sb.append("sellMaintenanceMargin:");
      sb.append(this.sellMaintenanceMargin);
      first = false;
    }
    if (isSetLockMargin()) {
      if (!first) sb.append(", ");
      sb.append("lockMargin:");
      sb.append(this.lockMargin);
      first = false;
    }
    if (isSetCommissionCalculateMode()) {
      if (!first) sb.append(", ");
      sb.append("commissionCalculateMode:");
      if (this.commissionCalculateMode == null) {
        sb.append("null");
      } else {
        sb.append(this.commissionCalculateMode);
      }
      first = false;
    }
    if (isSetOpenCloseFee()) {
      if (!first) sb.append(", ");
      sb.append("openCloseFee:");
      sb.append(this.openCloseFee);
      first = false;
    }
    if (isSetCloseTodayFee()) {
      if (!first) sb.append(", ");
      sb.append("closeTodayFee:");
      sb.append(this.closeTodayFee);
      first = false;
    }
    if (isSetContractSize()) {
      if (!first) sb.append(", ");
      sb.append("contractSize:");
      sb.append(this.contractSize);
      first = false;
    }
    if (isSetPlatformEnv()) {
      if (!first) sb.append(", ");
      sb.append("platformEnv:");
      if (this.platformEnv == null) {
        sb.append("null");
      } else {
        sb.append(this.platformEnv);
      }
      first = false;
    }
    if (isSetTickSize()) {
      if (!first) sb.append(", ");
      sb.append("tickSize:");
      sb.append(this.tickSize);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (sledContract != null) {
      sledContract.validate();
    }
    if (currencyGroup != null) {
      currencyGroup.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SledContractDetailStandardSchemeFactory implements SchemeFactory {
    public SledContractDetailStandardScheme getScheme() {
      return new SledContractDetailStandardScheme();
    }
  }

  private static class SledContractDetailStandardScheme extends StandardScheme<SledContractDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SledContractDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_CONTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sledContract = new SledContract();
              struct.sledContract.read(iprot);
              struct.setSledContractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTRACT_ENG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractEngName = iprot.readString();
              struct.setContractEngNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTRACT_CN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractCnName = iprot.readString();
              struct.setContractCnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTRACT_TC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractTcName = iprot.readString();
              struct.setContractTcNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTRACT_EXP_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.contractExpDate = iprot.readI64();
              struct.setContractExpDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_TRADE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastTradeDate = iprot.readI64();
              struct.setLastTradeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FIRST_NOTICE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.firstNoticeDate = iprot.readI64();
              struct.setFirstNoticeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MARGIN_CALCULATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.marginCalculateMode = CalculateMode.findByValue(iprot.readI32());
              struct.setMarginCalculateModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CURRENCY_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.currencyGroup = new CurrencyGroup();
              struct.currencyGroup.read(iprot);
              struct.setCurrencyGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // INITIAL_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.initialMargin = iprot.readDouble();
              struct.setInitialMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MAINTENANCE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maintenanceMargin = iprot.readDouble();
              struct.setMaintenanceMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SELL_INITIAL_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sellInitialMargin = iprot.readDouble();
              struct.setSellInitialMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SELL_MAINTENANCE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sellMaintenanceMargin = iprot.readDouble();
              struct.setSellMaintenanceMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LOCK_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lockMargin = iprot.readDouble();
              struct.setLockMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // COMMISSION_CALCULATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commissionCalculateMode = CalculateMode.findByValue(iprot.readI32());
              struct.setCommissionCalculateModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // OPEN_CLOSE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openCloseFee = iprot.readDouble();
              struct.setOpenCloseFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CLOSE_TODAY_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeTodayFee = iprot.readDouble();
              struct.setCloseTodayFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CONTRACT_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.contractSize = iprot.readDouble();
              struct.setContractSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PLATFORM_ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platformEnv = PlatformEnv.findByValue(iprot.readI32());
              struct.setPlatformEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TICK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tickSize = iprot.readDouble();
              struct.setTickSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SledContractDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledContract != null) {
        if (struct.isSetSledContract()) {
          oprot.writeFieldBegin(SLED_CONTRACT_FIELD_DESC);
          struct.sledContract.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractEngName != null) {
        if (struct.isSetContractEngName()) {
          oprot.writeFieldBegin(CONTRACT_ENG_NAME_FIELD_DESC);
          oprot.writeString(struct.contractEngName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractCnName != null) {
        if (struct.isSetContractCnName()) {
          oprot.writeFieldBegin(CONTRACT_CN_NAME_FIELD_DESC);
          oprot.writeString(struct.contractCnName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractTcName != null) {
        if (struct.isSetContractTcName()) {
          oprot.writeFieldBegin(CONTRACT_TC_NAME_FIELD_DESC);
          oprot.writeString(struct.contractTcName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetContractExpDate()) {
        oprot.writeFieldBegin(CONTRACT_EXP_DATE_FIELD_DESC);
        oprot.writeI64(struct.contractExpDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastTradeDate()) {
        oprot.writeFieldBegin(LAST_TRADE_DATE_FIELD_DESC);
        oprot.writeI64(struct.lastTradeDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFirstNoticeDate()) {
        oprot.writeFieldBegin(FIRST_NOTICE_DATE_FIELD_DESC);
        oprot.writeI64(struct.firstNoticeDate);
        oprot.writeFieldEnd();
      }
      if (struct.marginCalculateMode != null) {
        if (struct.isSetMarginCalculateMode()) {
          oprot.writeFieldBegin(MARGIN_CALCULATE_MODE_FIELD_DESC);
          oprot.writeI32(struct.marginCalculateMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.currencyGroup != null) {
        if (struct.isSetCurrencyGroup()) {
          oprot.writeFieldBegin(CURRENCY_GROUP_FIELD_DESC);
          struct.currencyGroup.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.currency != null) {
        if (struct.isSetCurrency()) {
          oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
          oprot.writeString(struct.currency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInitialMargin()) {
        oprot.writeFieldBegin(INITIAL_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.initialMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaintenanceMargin()) {
        oprot.writeFieldBegin(MAINTENANCE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.maintenanceMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSellInitialMargin()) {
        oprot.writeFieldBegin(SELL_INITIAL_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.sellInitialMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSellMaintenanceMargin()) {
        oprot.writeFieldBegin(SELL_MAINTENANCE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.sellMaintenanceMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLockMargin()) {
        oprot.writeFieldBegin(LOCK_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.lockMargin);
        oprot.writeFieldEnd();
      }
      if (struct.commissionCalculateMode != null) {
        if (struct.isSetCommissionCalculateMode()) {
          oprot.writeFieldBegin(COMMISSION_CALCULATE_MODE_FIELD_DESC);
          oprot.writeI32(struct.commissionCalculateMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOpenCloseFee()) {
        oprot.writeFieldBegin(OPEN_CLOSE_FEE_FIELD_DESC);
        oprot.writeDouble(struct.openCloseFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseTodayFee()) {
        oprot.writeFieldBegin(CLOSE_TODAY_FEE_FIELD_DESC);
        oprot.writeDouble(struct.closeTodayFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetContractSize()) {
        oprot.writeFieldBegin(CONTRACT_SIZE_FIELD_DESC);
        oprot.writeDouble(struct.contractSize);
        oprot.writeFieldEnd();
      }
      if (struct.platformEnv != null) {
        if (struct.isSetPlatformEnv()) {
          oprot.writeFieldBegin(PLATFORM_ENV_FIELD_DESC);
          oprot.writeI32(struct.platformEnv.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTickSize()) {
        oprot.writeFieldBegin(TICK_SIZE_FIELD_DESC);
        oprot.writeDouble(struct.tickSize);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SledContractDetailTupleSchemeFactory implements SchemeFactory {
    public SledContractDetailTupleScheme getScheme() {
      return new SledContractDetailTupleScheme();
    }
  }

  private static class SledContractDetailTupleScheme extends TupleScheme<SledContractDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SledContractDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledContract()) {
        optionals.set(0);
      }
      if (struct.isSetContractEngName()) {
        optionals.set(1);
      }
      if (struct.isSetContractCnName()) {
        optionals.set(2);
      }
      if (struct.isSetContractTcName()) {
        optionals.set(3);
      }
      if (struct.isSetContractExpDate()) {
        optionals.set(4);
      }
      if (struct.isSetLastTradeDate()) {
        optionals.set(5);
      }
      if (struct.isSetFirstNoticeDate()) {
        optionals.set(6);
      }
      if (struct.isSetMarginCalculateMode()) {
        optionals.set(7);
      }
      if (struct.isSetCurrencyGroup()) {
        optionals.set(8);
      }
      if (struct.isSetCurrency()) {
        optionals.set(9);
      }
      if (struct.isSetInitialMargin()) {
        optionals.set(10);
      }
      if (struct.isSetMaintenanceMargin()) {
        optionals.set(11);
      }
      if (struct.isSetSellInitialMargin()) {
        optionals.set(12);
      }
      if (struct.isSetSellMaintenanceMargin()) {
        optionals.set(13);
      }
      if (struct.isSetLockMargin()) {
        optionals.set(14);
      }
      if (struct.isSetCommissionCalculateMode()) {
        optionals.set(15);
      }
      if (struct.isSetOpenCloseFee()) {
        optionals.set(16);
      }
      if (struct.isSetCloseTodayFee()) {
        optionals.set(17);
      }
      if (struct.isSetContractSize()) {
        optionals.set(18);
      }
      if (struct.isSetPlatformEnv()) {
        optionals.set(19);
      }
      if (struct.isSetTickSize()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetSledContract()) {
        struct.sledContract.write(oprot);
      }
      if (struct.isSetContractEngName()) {
        oprot.writeString(struct.contractEngName);
      }
      if (struct.isSetContractCnName()) {
        oprot.writeString(struct.contractCnName);
      }
      if (struct.isSetContractTcName()) {
        oprot.writeString(struct.contractTcName);
      }
      if (struct.isSetContractExpDate()) {
        oprot.writeI64(struct.contractExpDate);
      }
      if (struct.isSetLastTradeDate()) {
        oprot.writeI64(struct.lastTradeDate);
      }
      if (struct.isSetFirstNoticeDate()) {
        oprot.writeI64(struct.firstNoticeDate);
      }
      if (struct.isSetMarginCalculateMode()) {
        oprot.writeI32(struct.marginCalculateMode.getValue());
      }
      if (struct.isSetCurrencyGroup()) {
        struct.currencyGroup.write(oprot);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetInitialMargin()) {
        oprot.writeDouble(struct.initialMargin);
      }
      if (struct.isSetMaintenanceMargin()) {
        oprot.writeDouble(struct.maintenanceMargin);
      }
      if (struct.isSetSellInitialMargin()) {
        oprot.writeDouble(struct.sellInitialMargin);
      }
      if (struct.isSetSellMaintenanceMargin()) {
        oprot.writeDouble(struct.sellMaintenanceMargin);
      }
      if (struct.isSetLockMargin()) {
        oprot.writeDouble(struct.lockMargin);
      }
      if (struct.isSetCommissionCalculateMode()) {
        oprot.writeI32(struct.commissionCalculateMode.getValue());
      }
      if (struct.isSetOpenCloseFee()) {
        oprot.writeDouble(struct.openCloseFee);
      }
      if (struct.isSetCloseTodayFee()) {
        oprot.writeDouble(struct.closeTodayFee);
      }
      if (struct.isSetContractSize()) {
        oprot.writeDouble(struct.contractSize);
      }
      if (struct.isSetPlatformEnv()) {
        oprot.writeI32(struct.platformEnv.getValue());
      }
      if (struct.isSetTickSize()) {
        oprot.writeDouble(struct.tickSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SledContractDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.sledContract = new SledContract();
        struct.sledContract.read(iprot);
        struct.setSledContractIsSet(true);
      }
      if (incoming.get(1)) {
        struct.contractEngName = iprot.readString();
        struct.setContractEngNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contractCnName = iprot.readString();
        struct.setContractCnNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.contractTcName = iprot.readString();
        struct.setContractTcNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.contractExpDate = iprot.readI64();
        struct.setContractExpDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lastTradeDate = iprot.readI64();
        struct.setLastTradeDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.firstNoticeDate = iprot.readI64();
        struct.setFirstNoticeDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.marginCalculateMode = CalculateMode.findByValue(iprot.readI32());
        struct.setMarginCalculateModeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.currencyGroup = new CurrencyGroup();
        struct.currencyGroup.read(iprot);
        struct.setCurrencyGroupIsSet(true);
      }
      if (incoming.get(9)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.initialMargin = iprot.readDouble();
        struct.setInitialMarginIsSet(true);
      }
      if (incoming.get(11)) {
        struct.maintenanceMargin = iprot.readDouble();
        struct.setMaintenanceMarginIsSet(true);
      }
      if (incoming.get(12)) {
        struct.sellInitialMargin = iprot.readDouble();
        struct.setSellInitialMarginIsSet(true);
      }
      if (incoming.get(13)) {
        struct.sellMaintenanceMargin = iprot.readDouble();
        struct.setSellMaintenanceMarginIsSet(true);
      }
      if (incoming.get(14)) {
        struct.lockMargin = iprot.readDouble();
        struct.setLockMarginIsSet(true);
      }
      if (incoming.get(15)) {
        struct.commissionCalculateMode = CalculateMode.findByValue(iprot.readI32());
        struct.setCommissionCalculateModeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.openCloseFee = iprot.readDouble();
        struct.setOpenCloseFeeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.closeTodayFee = iprot.readDouble();
        struct.setCloseTodayFeeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.contractSize = iprot.readDouble();
        struct.setContractSizeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.platformEnv = PlatformEnv.findByValue(iprot.readI32());
        struct.setPlatformEnvIsSet(true);
      }
      if (incoming.get(20)) {
        struct.tickSize = iprot.readDouble();
        struct.setTickSizeIsSet(true);
      }
    }
  }

}

