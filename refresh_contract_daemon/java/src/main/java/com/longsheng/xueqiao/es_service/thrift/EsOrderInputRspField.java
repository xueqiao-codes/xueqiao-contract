/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.es_service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EsOrderInputRspField implements org.apache.thrift.TBase<EsOrderInputRspField, EsOrderInputRspField._Fields>, java.io.Serializable, Cloneable, Comparable<EsOrderInputRspField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EsOrderInputRspField");

  private static final org.apache.thrift.protocol.TField SLED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_STREAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStreamId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField LOCAL_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("localNo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TRADE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeNo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField INSERT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("insertNo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField INSERT_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("insertDateTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField ORDER_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderState", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EsOrderInputRspFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EsOrderInputRspFieldTupleSchemeFactory());
  }

  public String sledId; // required
  public int sledAccountId; // optional
  public int userId; // optional
  public int orderStreamId; // optional
  public int orderId; // optional
  public String localNo; // optional
  public String tradeNo; // optional
  public String insertNo; // optional
  public long insertDateTime; // optional
  /**
   * 
   * @see EsOrderStateType
   */
  public EsOrderStateType orderState; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_ID((short)1, "sledId"),
    SLED_ACCOUNT_ID((short)2, "sledAccountId"),
    USER_ID((short)3, "userId"),
    ORDER_STREAM_ID((short)4, "orderStreamId"),
    ORDER_ID((short)5, "orderId"),
    LOCAL_NO((short)6, "localNo"),
    TRADE_NO((short)7, "tradeNo"),
    INSERT_NO((short)8, "insertNo"),
    INSERT_DATE_TIME((short)9, "insertDateTime"),
    /**
     * 
     * @see EsOrderStateType
     */
    ORDER_STATE((short)10, "orderState");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_ID
          return SLED_ID;
        case 2: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // ORDER_STREAM_ID
          return ORDER_STREAM_ID;
        case 5: // ORDER_ID
          return ORDER_ID;
        case 6: // LOCAL_NO
          return LOCAL_NO;
        case 7: // TRADE_NO
          return TRADE_NO;
        case 8: // INSERT_NO
          return INSERT_NO;
        case 9: // INSERT_DATE_TIME
          return INSERT_DATE_TIME;
        case 10: // ORDER_STATE
          return ORDER_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDACCOUNTID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __ORDERSTREAMID_ISSET_ID = 2;
  private static final int __ORDERID_ISSET_ID = 3;
  private static final int __INSERTDATETIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_ACCOUNT_ID,_Fields.USER_ID,_Fields.ORDER_STREAM_ID,_Fields.ORDER_ID,_Fields.LOCAL_NO,_Fields.TRADE_NO,_Fields.INSERT_NO,_Fields.INSERT_DATE_TIME,_Fields.ORDER_STATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_ID, new org.apache.thrift.meta_data.FieldMetaData("sledId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_STREAM_ID, new org.apache.thrift.meta_data.FieldMetaData("orderStreamId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCAL_NO, new org.apache.thrift.meta_data.FieldMetaData("localNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRADE_NO, new org.apache.thrift.meta_data.FieldMetaData("tradeNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSERT_NO, new org.apache.thrift.meta_data.FieldMetaData("insertNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSERT_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("insertDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_STATE, new org.apache.thrift.meta_data.FieldMetaData("orderState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsOrderStateType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EsOrderInputRspField.class, metaDataMap);
  }

  public EsOrderInputRspField() {
  }

  public EsOrderInputRspField(
    String sledId)
  {
    this();
    this.sledId = sledId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EsOrderInputRspField(EsOrderInputRspField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSledId()) {
      this.sledId = other.sledId;
    }
    this.sledAccountId = other.sledAccountId;
    this.userId = other.userId;
    this.orderStreamId = other.orderStreamId;
    this.orderId = other.orderId;
    if (other.isSetLocalNo()) {
      this.localNo = other.localNo;
    }
    if (other.isSetTradeNo()) {
      this.tradeNo = other.tradeNo;
    }
    if (other.isSetInsertNo()) {
      this.insertNo = other.insertNo;
    }
    this.insertDateTime = other.insertDateTime;
    if (other.isSetOrderState()) {
      this.orderState = other.orderState;
    }
  }

  public EsOrderInputRspField deepCopy() {
    return new EsOrderInputRspField(this);
  }

  @Override
  public void clear() {
    this.sledId = null;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setOrderStreamIdIsSet(false);
    this.orderStreamId = 0;
    setOrderIdIsSet(false);
    this.orderId = 0;
    this.localNo = null;
    this.tradeNo = null;
    this.insertNo = null;
    setInsertDateTimeIsSet(false);
    this.insertDateTime = 0;
    this.orderState = null;
  }

  public String getSledId() {
    return this.sledId;
  }

  public EsOrderInputRspField setSledId(String sledId) {
    this.sledId = sledId;
    return this;
  }

  public void unsetSledId() {
    this.sledId = null;
  }

  /** Returns true if field sledId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledId() {
    return this.sledId != null;
  }

  public void setSledIdIsSet(boolean value) {
    if (!value) {
      this.sledId = null;
    }
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public EsOrderInputRspField setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public EsOrderInputRspField setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getOrderStreamId() {
    return this.orderStreamId;
  }

  public EsOrderInputRspField setOrderStreamId(int orderStreamId) {
    this.orderStreamId = orderStreamId;
    setOrderStreamIdIsSet(true);
    return this;
  }

  public void unsetOrderStreamId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERSTREAMID_ISSET_ID);
  }

  /** Returns true if field orderStreamId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStreamId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERSTREAMID_ISSET_ID);
  }

  public void setOrderStreamIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERSTREAMID_ISSET_ID, value);
  }

  public int getOrderId() {
    return this.orderId;
  }

  public EsOrderInputRspField setOrderId(int orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  public String getLocalNo() {
    return this.localNo;
  }

  public EsOrderInputRspField setLocalNo(String localNo) {
    this.localNo = localNo;
    return this;
  }

  public void unsetLocalNo() {
    this.localNo = null;
  }

  /** Returns true if field localNo is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalNo() {
    return this.localNo != null;
  }

  public void setLocalNoIsSet(boolean value) {
    if (!value) {
      this.localNo = null;
    }
  }

  public String getTradeNo() {
    return this.tradeNo;
  }

  public EsOrderInputRspField setTradeNo(String tradeNo) {
    this.tradeNo = tradeNo;
    return this;
  }

  public void unsetTradeNo() {
    this.tradeNo = null;
  }

  /** Returns true if field tradeNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeNo() {
    return this.tradeNo != null;
  }

  public void setTradeNoIsSet(boolean value) {
    if (!value) {
      this.tradeNo = null;
    }
  }

  public String getInsertNo() {
    return this.insertNo;
  }

  public EsOrderInputRspField setInsertNo(String insertNo) {
    this.insertNo = insertNo;
    return this;
  }

  public void unsetInsertNo() {
    this.insertNo = null;
  }

  /** Returns true if field insertNo is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertNo() {
    return this.insertNo != null;
  }

  public void setInsertNoIsSet(boolean value) {
    if (!value) {
      this.insertNo = null;
    }
  }

  public long getInsertDateTime() {
    return this.insertDateTime;
  }

  public EsOrderInputRspField setInsertDateTime(long insertDateTime) {
    this.insertDateTime = insertDateTime;
    setInsertDateTimeIsSet(true);
    return this;
  }

  public void unsetInsertDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSERTDATETIME_ISSET_ID);
  }

  /** Returns true if field insertDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __INSERTDATETIME_ISSET_ID);
  }

  public void setInsertDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSERTDATETIME_ISSET_ID, value);
  }

  /**
   * 
   * @see EsOrderStateType
   */
  public EsOrderStateType getOrderState() {
    return this.orderState;
  }

  /**
   * 
   * @see EsOrderStateType
   */
  public EsOrderInputRspField setOrderState(EsOrderStateType orderState) {
    this.orderState = orderState;
    return this;
  }

  public void unsetOrderState() {
    this.orderState = null;
  }

  /** Returns true if field orderState is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderState() {
    return this.orderState != null;
  }

  public void setOrderStateIsSet(boolean value) {
    if (!value) {
      this.orderState = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_ID:
      if (value == null) {
        unsetSledId();
      } else {
        setSledId((String)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case ORDER_STREAM_ID:
      if (value == null) {
        unsetOrderStreamId();
      } else {
        setOrderStreamId((Integer)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Integer)value);
      }
      break;

    case LOCAL_NO:
      if (value == null) {
        unsetLocalNo();
      } else {
        setLocalNo((String)value);
      }
      break;

    case TRADE_NO:
      if (value == null) {
        unsetTradeNo();
      } else {
        setTradeNo((String)value);
      }
      break;

    case INSERT_NO:
      if (value == null) {
        unsetInsertNo();
      } else {
        setInsertNo((String)value);
      }
      break;

    case INSERT_DATE_TIME:
      if (value == null) {
        unsetInsertDateTime();
      } else {
        setInsertDateTime((Long)value);
      }
      break;

    case ORDER_STATE:
      if (value == null) {
        unsetOrderState();
      } else {
        setOrderState((EsOrderStateType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_ID:
      return getSledId();

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case ORDER_STREAM_ID:
      return Integer.valueOf(getOrderStreamId());

    case ORDER_ID:
      return Integer.valueOf(getOrderId());

    case LOCAL_NO:
      return getLocalNo();

    case TRADE_NO:
      return getTradeNo();

    case INSERT_NO:
      return getInsertNo();

    case INSERT_DATE_TIME:
      return Long.valueOf(getInsertDateTime());

    case ORDER_STATE:
      return getOrderState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_ID:
      return isSetSledId();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    case USER_ID:
      return isSetUserId();
    case ORDER_STREAM_ID:
      return isSetOrderStreamId();
    case ORDER_ID:
      return isSetOrderId();
    case LOCAL_NO:
      return isSetLocalNo();
    case TRADE_NO:
      return isSetTradeNo();
    case INSERT_NO:
      return isSetInsertNo();
    case INSERT_DATE_TIME:
      return isSetInsertDateTime();
    case ORDER_STATE:
      return isSetOrderState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EsOrderInputRspField)
      return this.equals((EsOrderInputRspField)that);
    return false;
  }

  public boolean equals(EsOrderInputRspField that) {
    if (that == null)
      return false;

    boolean this_present_sledId = true && this.isSetSledId();
    boolean that_present_sledId = true && that.isSetSledId();
    if (this_present_sledId || that_present_sledId) {
      if (!(this_present_sledId && that_present_sledId))
        return false;
      if (!this.sledId.equals(that.sledId))
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_orderStreamId = true && this.isSetOrderStreamId();
    boolean that_present_orderStreamId = true && that.isSetOrderStreamId();
    if (this_present_orderStreamId || that_present_orderStreamId) {
      if (!(this_present_orderStreamId && that_present_orderStreamId))
        return false;
      if (this.orderStreamId != that.orderStreamId)
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_localNo = true && this.isSetLocalNo();
    boolean that_present_localNo = true && that.isSetLocalNo();
    if (this_present_localNo || that_present_localNo) {
      if (!(this_present_localNo && that_present_localNo))
        return false;
      if (!this.localNo.equals(that.localNo))
        return false;
    }

    boolean this_present_tradeNo = true && this.isSetTradeNo();
    boolean that_present_tradeNo = true && that.isSetTradeNo();
    if (this_present_tradeNo || that_present_tradeNo) {
      if (!(this_present_tradeNo && that_present_tradeNo))
        return false;
      if (!this.tradeNo.equals(that.tradeNo))
        return false;
    }

    boolean this_present_insertNo = true && this.isSetInsertNo();
    boolean that_present_insertNo = true && that.isSetInsertNo();
    if (this_present_insertNo || that_present_insertNo) {
      if (!(this_present_insertNo && that_present_insertNo))
        return false;
      if (!this.insertNo.equals(that.insertNo))
        return false;
    }

    boolean this_present_insertDateTime = true && this.isSetInsertDateTime();
    boolean that_present_insertDateTime = true && that.isSetInsertDateTime();
    if (this_present_insertDateTime || that_present_insertDateTime) {
      if (!(this_present_insertDateTime && that_present_insertDateTime))
        return false;
      if (this.insertDateTime != that.insertDateTime)
        return false;
    }

    boolean this_present_orderState = true && this.isSetOrderState();
    boolean that_present_orderState = true && that.isSetOrderState();
    if (this_present_orderState || that_present_orderState) {
      if (!(this_present_orderState && that_present_orderState))
        return false;
      if (!this.orderState.equals(that.orderState))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EsOrderInputRspField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledId()).compareTo(other.isSetSledId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledId, other.sledId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStreamId()).compareTo(other.isSetOrderStreamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStreamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStreamId, other.orderStreamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalNo()).compareTo(other.isSetLocalNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localNo, other.localNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeNo()).compareTo(other.isSetTradeNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeNo, other.tradeNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertNo()).compareTo(other.isSetInsertNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertNo, other.insertNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertDateTime()).compareTo(other.isSetInsertDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertDateTime, other.insertDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderState()).compareTo(other.isSetOrderState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderState, other.orderState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EsOrderInputRspField(");
    boolean first = true;

    sb.append("sledId:");
    if (this.sledId == null) {
      sb.append("null");
    } else {
      sb.append(this.sledId);
    }
    first = false;
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetOrderStreamId()) {
      if (!first) sb.append(", ");
      sb.append("orderStreamId:");
      sb.append(this.orderStreamId);
      first = false;
    }
    if (isSetOrderId()) {
      if (!first) sb.append(", ");
      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
    }
    if (isSetLocalNo()) {
      if (!first) sb.append(", ");
      sb.append("localNo:");
      if (this.localNo == null) {
        sb.append("null");
      } else {
        sb.append(this.localNo);
      }
      first = false;
    }
    if (isSetTradeNo()) {
      if (!first) sb.append(", ");
      sb.append("tradeNo:");
      if (this.tradeNo == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeNo);
      }
      first = false;
    }
    if (isSetInsertNo()) {
      if (!first) sb.append(", ");
      sb.append("insertNo:");
      if (this.insertNo == null) {
        sb.append("null");
      } else {
        sb.append(this.insertNo);
      }
      first = false;
    }
    if (isSetInsertDateTime()) {
      if (!first) sb.append(", ");
      sb.append("insertDateTime:");
      sb.append(this.insertDateTime);
      first = false;
    }
    if (isSetOrderState()) {
      if (!first) sb.append(", ");
      sb.append("orderState:");
      if (this.orderState == null) {
        sb.append("null");
      } else {
        sb.append(this.orderState);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sledId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sledId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EsOrderInputRspFieldStandardSchemeFactory implements SchemeFactory {
    public EsOrderInputRspFieldStandardScheme getScheme() {
      return new EsOrderInputRspFieldStandardScheme();
    }
  }

  private static class EsOrderInputRspFieldStandardScheme extends StandardScheme<EsOrderInputRspField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EsOrderInputRspField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledId = iprot.readString();
              struct.setSledIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_STREAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderStreamId = iprot.readI32();
              struct.setOrderStreamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderId = iprot.readI32();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOCAL_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.localNo = iprot.readString();
              struct.setLocalNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRADE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeNo = iprot.readString();
              struct.setTradeNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INSERT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.insertNo = iprot.readString();
              struct.setInsertNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INSERT_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.insertDateTime = iprot.readI64();
              struct.setInsertDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORDER_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderState = EsOrderStateType.findByValue(iprot.readI32());
              struct.setOrderStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EsOrderInputRspField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledId != null) {
        oprot.writeFieldBegin(SLED_ID_FIELD_DESC);
        oprot.writeString(struct.sledId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderStreamId()) {
        oprot.writeFieldBegin(ORDER_STREAM_ID_FIELD_DESC);
        oprot.writeI32(struct.orderStreamId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderId()) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI32(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.localNo != null) {
        if (struct.isSetLocalNo()) {
          oprot.writeFieldBegin(LOCAL_NO_FIELD_DESC);
          oprot.writeString(struct.localNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tradeNo != null) {
        if (struct.isSetTradeNo()) {
          oprot.writeFieldBegin(TRADE_NO_FIELD_DESC);
          oprot.writeString(struct.tradeNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.insertNo != null) {
        if (struct.isSetInsertNo()) {
          oprot.writeFieldBegin(INSERT_NO_FIELD_DESC);
          oprot.writeString(struct.insertNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInsertDateTime()) {
        oprot.writeFieldBegin(INSERT_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.insertDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.orderState != null) {
        if (struct.isSetOrderState()) {
          oprot.writeFieldBegin(ORDER_STATE_FIELD_DESC);
          oprot.writeI32(struct.orderState.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EsOrderInputRspFieldTupleSchemeFactory implements SchemeFactory {
    public EsOrderInputRspFieldTupleScheme getScheme() {
      return new EsOrderInputRspFieldTupleScheme();
    }
  }

  private static class EsOrderInputRspFieldTupleScheme extends TupleScheme<EsOrderInputRspField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EsOrderInputRspField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sledId);
      BitSet optionals = new BitSet();
      if (struct.isSetSledAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetOrderStreamId()) {
        optionals.set(2);
      }
      if (struct.isSetOrderId()) {
        optionals.set(3);
      }
      if (struct.isSetLocalNo()) {
        optionals.set(4);
      }
      if (struct.isSetTradeNo()) {
        optionals.set(5);
      }
      if (struct.isSetInsertNo()) {
        optionals.set(6);
      }
      if (struct.isSetInsertDateTime()) {
        optionals.set(7);
      }
      if (struct.isSetOrderState()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetOrderStreamId()) {
        oprot.writeI32(struct.orderStreamId);
      }
      if (struct.isSetOrderId()) {
        oprot.writeI32(struct.orderId);
      }
      if (struct.isSetLocalNo()) {
        oprot.writeString(struct.localNo);
      }
      if (struct.isSetTradeNo()) {
        oprot.writeString(struct.tradeNo);
      }
      if (struct.isSetInsertNo()) {
        oprot.writeString(struct.insertNo);
      }
      if (struct.isSetInsertDateTime()) {
        oprot.writeI64(struct.insertDateTime);
      }
      if (struct.isSetOrderState()) {
        oprot.writeI32(struct.orderState.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EsOrderInputRspField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sledId = iprot.readString();
      struct.setSledIdIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orderStreamId = iprot.readI32();
        struct.setOrderStreamIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderId = iprot.readI32();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.localNo = iprot.readString();
        struct.setLocalNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tradeNo = iprot.readString();
        struct.setTradeNoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.insertNo = iprot.readString();
        struct.setInsertNoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.insertDateTime = iprot.readI64();
        struct.setInsertDateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.orderState = EsOrderStateType.findByValue(iprot.readI32());
        struct.setOrderStateIsSet(true);
      }
    }
  }

}

