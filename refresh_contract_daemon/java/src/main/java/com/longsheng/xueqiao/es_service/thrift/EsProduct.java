/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.es_service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EsProduct implements org.apache.thrift.TBase<EsProduct, EsProduct._Fields>, java.io.Serializable, Cloneable, Comparable<EsProduct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EsProduct");

  private static final org.apache.thrift.protocol.TField EXCHANGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COMMODITY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RELATE_COMMODITY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("relateCommodityNo", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COMMODITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMMODITY_ATTRIBUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityAttribute", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COMMODITY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityState", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PRODUCT_DOT_FIELD_DESC = new org.apache.thrift.protocol.TField("productDot", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField UPPER_TICK_FIELD_DESC = new org.apache.thrift.protocol.TField("upperTick", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField LOWER_TICK_FIELD_DESC = new org.apache.thrift.protocol.TField("lowerTick", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CURRENCY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyNo", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DELIVERY_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryMode", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField DELIVERY_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryDays", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField DEPOSIT_CALCULATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("depositCalculateMode", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField MAX_SINGLE_ORDER_VOL_FIELD_DESC = new org.apache.thrift.protocol.TField("maxSingleOrderVol", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField MAX_HOLD_VOL_FIELD_DESC = new org.apache.thrift.protocol.TField("maxHoldVol", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField ADD_ONE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("addOneTime", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CMB_DIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("cmbDirect", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField COVER_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("coverMode", org.apache.thrift.protocol.TType.I32, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EsProductStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EsProductTupleSchemeFactory());
  }

  public String exchangeNo; // optional
  /**
   * 
   * @see EsCommodityType
   */
  public EsCommodityType commodityType; // optional
  public String commodityNo; // optional
  public String relateCommodityNo; // optional
  public String commodityName; // optional
  public String commodityAttribute; // optional
  /**
   * 
   * @see EsCommodityStateType
   */
  public EsCommodityStateType commodityState; // optional
  public double productDot; // optional
  public double upperTick; // optional
  public int lowerTick; // optional
  public String currencyNo; // optional
  /**
   * 
   * @see EsDeliveryModeType
   */
  public EsDeliveryModeType deliveryMode; // optional
  public int deliveryDays; // optional
  /**
   * 
   * @see EsDepositCalculateModeType
   */
  public EsDepositCalculateModeType depositCalculateMode; // optional
  public int maxSingleOrderVol; // optional
  public int maxHoldVol; // optional
  public String addOneTime; // optional
  /**
   * 
   * @see EsDirectType
   */
  public EsDirectType cmbDirect; // optional
  /**
   * 
   * @see EsCoverModeType
   */
  public EsCoverModeType coverMode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXCHANGE_NO((short)1, "exchangeNo"),
    /**
     * 
     * @see EsCommodityType
     */
    COMMODITY_TYPE((short)2, "commodityType"),
    COMMODITY_NO((short)3, "commodityNo"),
    RELATE_COMMODITY_NO((short)4, "relateCommodityNo"),
    COMMODITY_NAME((short)5, "commodityName"),
    COMMODITY_ATTRIBUTE((short)6, "commodityAttribute"),
    /**
     * 
     * @see EsCommodityStateType
     */
    COMMODITY_STATE((short)7, "commodityState"),
    PRODUCT_DOT((short)8, "productDot"),
    UPPER_TICK((short)9, "upperTick"),
    LOWER_TICK((short)10, "lowerTick"),
    CURRENCY_NO((short)11, "currencyNo"),
    /**
     * 
     * @see EsDeliveryModeType
     */
    DELIVERY_MODE((short)12, "deliveryMode"),
    DELIVERY_DAYS((short)13, "deliveryDays"),
    /**
     * 
     * @see EsDepositCalculateModeType
     */
    DEPOSIT_CALCULATE_MODE((short)14, "depositCalculateMode"),
    MAX_SINGLE_ORDER_VOL((short)15, "maxSingleOrderVol"),
    MAX_HOLD_VOL((short)16, "maxHoldVol"),
    ADD_ONE_TIME((short)17, "addOneTime"),
    /**
     * 
     * @see EsDirectType
     */
    CMB_DIRECT((short)18, "cmbDirect"),
    /**
     * 
     * @see EsCoverModeType
     */
    COVER_MODE((short)19, "coverMode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXCHANGE_NO
          return EXCHANGE_NO;
        case 2: // COMMODITY_TYPE
          return COMMODITY_TYPE;
        case 3: // COMMODITY_NO
          return COMMODITY_NO;
        case 4: // RELATE_COMMODITY_NO
          return RELATE_COMMODITY_NO;
        case 5: // COMMODITY_NAME
          return COMMODITY_NAME;
        case 6: // COMMODITY_ATTRIBUTE
          return COMMODITY_ATTRIBUTE;
        case 7: // COMMODITY_STATE
          return COMMODITY_STATE;
        case 8: // PRODUCT_DOT
          return PRODUCT_DOT;
        case 9: // UPPER_TICK
          return UPPER_TICK;
        case 10: // LOWER_TICK
          return LOWER_TICK;
        case 11: // CURRENCY_NO
          return CURRENCY_NO;
        case 12: // DELIVERY_MODE
          return DELIVERY_MODE;
        case 13: // DELIVERY_DAYS
          return DELIVERY_DAYS;
        case 14: // DEPOSIT_CALCULATE_MODE
          return DEPOSIT_CALCULATE_MODE;
        case 15: // MAX_SINGLE_ORDER_VOL
          return MAX_SINGLE_ORDER_VOL;
        case 16: // MAX_HOLD_VOL
          return MAX_HOLD_VOL;
        case 17: // ADD_ONE_TIME
          return ADD_ONE_TIME;
        case 18: // CMB_DIRECT
          return CMB_DIRECT;
        case 19: // COVER_MODE
          return COVER_MODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRODUCTDOT_ISSET_ID = 0;
  private static final int __UPPERTICK_ISSET_ID = 1;
  private static final int __LOWERTICK_ISSET_ID = 2;
  private static final int __DELIVERYDAYS_ISSET_ID = 3;
  private static final int __MAXSINGLEORDERVOL_ISSET_ID = 4;
  private static final int __MAXHOLDVOL_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.EXCHANGE_NO,_Fields.COMMODITY_TYPE,_Fields.COMMODITY_NO,_Fields.RELATE_COMMODITY_NO,_Fields.COMMODITY_NAME,_Fields.COMMODITY_ATTRIBUTE,_Fields.COMMODITY_STATE,_Fields.PRODUCT_DOT,_Fields.UPPER_TICK,_Fields.LOWER_TICK,_Fields.CURRENCY_NO,_Fields.DELIVERY_MODE,_Fields.DELIVERY_DAYS,_Fields.DEPOSIT_CALCULATE_MODE,_Fields.MAX_SINGLE_ORDER_VOL,_Fields.MAX_HOLD_VOL,_Fields.ADD_ONE_TIME,_Fields.CMB_DIRECT,_Fields.COVER_MODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXCHANGE_NO, new org.apache.thrift.meta_data.FieldMetaData("exchangeNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("commodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsCommodityType.class)));
    tmpMap.put(_Fields.COMMODITY_NO, new org.apache.thrift.meta_data.FieldMetaData("commodityNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATE_COMMODITY_NO, new org.apache.thrift.meta_data.FieldMetaData("relateCommodityNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("commodityName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_ATTRIBUTE, new org.apache.thrift.meta_data.FieldMetaData("commodityAttribute", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_STATE, new org.apache.thrift.meta_data.FieldMetaData("commodityState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsCommodityStateType.class)));
    tmpMap.put(_Fields.PRODUCT_DOT, new org.apache.thrift.meta_data.FieldMetaData("productDot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPPER_TICK, new org.apache.thrift.meta_data.FieldMetaData("upperTick", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOWER_TICK, new org.apache.thrift.meta_data.FieldMetaData("lowerTick", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENCY_NO, new org.apache.thrift.meta_data.FieldMetaData("currencyNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_MODE, new org.apache.thrift.meta_data.FieldMetaData("deliveryMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsDeliveryModeType.class)));
    tmpMap.put(_Fields.DELIVERY_DAYS, new org.apache.thrift.meta_data.FieldMetaData("deliveryDays", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPOSIT_CALCULATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("depositCalculateMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsDepositCalculateModeType.class)));
    tmpMap.put(_Fields.MAX_SINGLE_ORDER_VOL, new org.apache.thrift.meta_data.FieldMetaData("maxSingleOrderVol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_HOLD_VOL, new org.apache.thrift.meta_data.FieldMetaData("maxHoldVol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADD_ONE_TIME, new org.apache.thrift.meta_data.FieldMetaData("addOneTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CMB_DIRECT, new org.apache.thrift.meta_data.FieldMetaData("cmbDirect", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsDirectType.class)));
    tmpMap.put(_Fields.COVER_MODE, new org.apache.thrift.meta_data.FieldMetaData("coverMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsCoverModeType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EsProduct.class, metaDataMap);
  }

  public EsProduct() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EsProduct(EsProduct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetExchangeNo()) {
      this.exchangeNo = other.exchangeNo;
    }
    if (other.isSetCommodityType()) {
      this.commodityType = other.commodityType;
    }
    if (other.isSetCommodityNo()) {
      this.commodityNo = other.commodityNo;
    }
    if (other.isSetRelateCommodityNo()) {
      this.relateCommodityNo = other.relateCommodityNo;
    }
    if (other.isSetCommodityName()) {
      this.commodityName = other.commodityName;
    }
    if (other.isSetCommodityAttribute()) {
      this.commodityAttribute = other.commodityAttribute;
    }
    if (other.isSetCommodityState()) {
      this.commodityState = other.commodityState;
    }
    this.productDot = other.productDot;
    this.upperTick = other.upperTick;
    this.lowerTick = other.lowerTick;
    if (other.isSetCurrencyNo()) {
      this.currencyNo = other.currencyNo;
    }
    if (other.isSetDeliveryMode()) {
      this.deliveryMode = other.deliveryMode;
    }
    this.deliveryDays = other.deliveryDays;
    if (other.isSetDepositCalculateMode()) {
      this.depositCalculateMode = other.depositCalculateMode;
    }
    this.maxSingleOrderVol = other.maxSingleOrderVol;
    this.maxHoldVol = other.maxHoldVol;
    if (other.isSetAddOneTime()) {
      this.addOneTime = other.addOneTime;
    }
    if (other.isSetCmbDirect()) {
      this.cmbDirect = other.cmbDirect;
    }
    if (other.isSetCoverMode()) {
      this.coverMode = other.coverMode;
    }
  }

  public EsProduct deepCopy() {
    return new EsProduct(this);
  }

  @Override
  public void clear() {
    this.exchangeNo = null;
    this.commodityType = null;
    this.commodityNo = null;
    this.relateCommodityNo = null;
    this.commodityName = null;
    this.commodityAttribute = null;
    this.commodityState = null;
    setProductDotIsSet(false);
    this.productDot = 0.0;
    setUpperTickIsSet(false);
    this.upperTick = 0.0;
    setLowerTickIsSet(false);
    this.lowerTick = 0;
    this.currencyNo = null;
    this.deliveryMode = null;
    setDeliveryDaysIsSet(false);
    this.deliveryDays = 0;
    this.depositCalculateMode = null;
    setMaxSingleOrderVolIsSet(false);
    this.maxSingleOrderVol = 0;
    setMaxHoldVolIsSet(false);
    this.maxHoldVol = 0;
    this.addOneTime = null;
    this.cmbDirect = null;
    this.coverMode = null;
  }

  public String getExchangeNo() {
    return this.exchangeNo;
  }

  public EsProduct setExchangeNo(String exchangeNo) {
    this.exchangeNo = exchangeNo;
    return this;
  }

  public void unsetExchangeNo() {
    this.exchangeNo = null;
  }

  /** Returns true if field exchangeNo is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeNo() {
    return this.exchangeNo != null;
  }

  public void setExchangeNoIsSet(boolean value) {
    if (!value) {
      this.exchangeNo = null;
    }
  }

  /**
   * 
   * @see EsCommodityType
   */
  public EsCommodityType getCommodityType() {
    return this.commodityType;
  }

  /**
   * 
   * @see EsCommodityType
   */
  public EsProduct setCommodityType(EsCommodityType commodityType) {
    this.commodityType = commodityType;
    return this;
  }

  public void unsetCommodityType() {
    this.commodityType = null;
  }

  /** Returns true if field commodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityType() {
    return this.commodityType != null;
  }

  public void setCommodityTypeIsSet(boolean value) {
    if (!value) {
      this.commodityType = null;
    }
  }

  public String getCommodityNo() {
    return this.commodityNo;
  }

  public EsProduct setCommodityNo(String commodityNo) {
    this.commodityNo = commodityNo;
    return this;
  }

  public void unsetCommodityNo() {
    this.commodityNo = null;
  }

  /** Returns true if field commodityNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityNo() {
    return this.commodityNo != null;
  }

  public void setCommodityNoIsSet(boolean value) {
    if (!value) {
      this.commodityNo = null;
    }
  }

  public String getRelateCommodityNo() {
    return this.relateCommodityNo;
  }

  public EsProduct setRelateCommodityNo(String relateCommodityNo) {
    this.relateCommodityNo = relateCommodityNo;
    return this;
  }

  public void unsetRelateCommodityNo() {
    this.relateCommodityNo = null;
  }

  /** Returns true if field relateCommodityNo is set (has been assigned a value) and false otherwise */
  public boolean isSetRelateCommodityNo() {
    return this.relateCommodityNo != null;
  }

  public void setRelateCommodityNoIsSet(boolean value) {
    if (!value) {
      this.relateCommodityNo = null;
    }
  }

  public String getCommodityName() {
    return this.commodityName;
  }

  public EsProduct setCommodityName(String commodityName) {
    this.commodityName = commodityName;
    return this;
  }

  public void unsetCommodityName() {
    this.commodityName = null;
  }

  /** Returns true if field commodityName is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityName() {
    return this.commodityName != null;
  }

  public void setCommodityNameIsSet(boolean value) {
    if (!value) {
      this.commodityName = null;
    }
  }

  public String getCommodityAttribute() {
    return this.commodityAttribute;
  }

  public EsProduct setCommodityAttribute(String commodityAttribute) {
    this.commodityAttribute = commodityAttribute;
    return this;
  }

  public void unsetCommodityAttribute() {
    this.commodityAttribute = null;
  }

  /** Returns true if field commodityAttribute is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityAttribute() {
    return this.commodityAttribute != null;
  }

  public void setCommodityAttributeIsSet(boolean value) {
    if (!value) {
      this.commodityAttribute = null;
    }
  }

  /**
   * 
   * @see EsCommodityStateType
   */
  public EsCommodityStateType getCommodityState() {
    return this.commodityState;
  }

  /**
   * 
   * @see EsCommodityStateType
   */
  public EsProduct setCommodityState(EsCommodityStateType commodityState) {
    this.commodityState = commodityState;
    return this;
  }

  public void unsetCommodityState() {
    this.commodityState = null;
  }

  /** Returns true if field commodityState is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityState() {
    return this.commodityState != null;
  }

  public void setCommodityStateIsSet(boolean value) {
    if (!value) {
      this.commodityState = null;
    }
  }

  public double getProductDot() {
    return this.productDot;
  }

  public EsProduct setProductDot(double productDot) {
    this.productDot = productDot;
    setProductDotIsSet(true);
    return this;
  }

  public void unsetProductDot() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTDOT_ISSET_ID);
  }

  /** Returns true if field productDot is set (has been assigned a value) and false otherwise */
  public boolean isSetProductDot() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTDOT_ISSET_ID);
  }

  public void setProductDotIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTDOT_ISSET_ID, value);
  }

  public double getUpperTick() {
    return this.upperTick;
  }

  public EsProduct setUpperTick(double upperTick) {
    this.upperTick = upperTick;
    setUpperTickIsSet(true);
    return this;
  }

  public void unsetUpperTick() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPPERTICK_ISSET_ID);
  }

  /** Returns true if field upperTick is set (has been assigned a value) and false otherwise */
  public boolean isSetUpperTick() {
    return EncodingUtils.testBit(__isset_bitfield, __UPPERTICK_ISSET_ID);
  }

  public void setUpperTickIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPPERTICK_ISSET_ID, value);
  }

  public int getLowerTick() {
    return this.lowerTick;
  }

  public EsProduct setLowerTick(int lowerTick) {
    this.lowerTick = lowerTick;
    setLowerTickIsSet(true);
    return this;
  }

  public void unsetLowerTick() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOWERTICK_ISSET_ID);
  }

  /** Returns true if field lowerTick is set (has been assigned a value) and false otherwise */
  public boolean isSetLowerTick() {
    return EncodingUtils.testBit(__isset_bitfield, __LOWERTICK_ISSET_ID);
  }

  public void setLowerTickIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOWERTICK_ISSET_ID, value);
  }

  public String getCurrencyNo() {
    return this.currencyNo;
  }

  public EsProduct setCurrencyNo(String currencyNo) {
    this.currencyNo = currencyNo;
    return this;
  }

  public void unsetCurrencyNo() {
    this.currencyNo = null;
  }

  /** Returns true if field currencyNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyNo() {
    return this.currencyNo != null;
  }

  public void setCurrencyNoIsSet(boolean value) {
    if (!value) {
      this.currencyNo = null;
    }
  }

  /**
   * 
   * @see EsDeliveryModeType
   */
  public EsDeliveryModeType getDeliveryMode() {
    return this.deliveryMode;
  }

  /**
   * 
   * @see EsDeliveryModeType
   */
  public EsProduct setDeliveryMode(EsDeliveryModeType deliveryMode) {
    this.deliveryMode = deliveryMode;
    return this;
  }

  public void unsetDeliveryMode() {
    this.deliveryMode = null;
  }

  /** Returns true if field deliveryMode is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryMode() {
    return this.deliveryMode != null;
  }

  public void setDeliveryModeIsSet(boolean value) {
    if (!value) {
      this.deliveryMode = null;
    }
  }

  public int getDeliveryDays() {
    return this.deliveryDays;
  }

  public EsProduct setDeliveryDays(int deliveryDays) {
    this.deliveryDays = deliveryDays;
    setDeliveryDaysIsSet(true);
    return this;
  }

  public void unsetDeliveryDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYDAYS_ISSET_ID);
  }

  /** Returns true if field deliveryDays is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryDays() {
    return EncodingUtils.testBit(__isset_bitfield, __DELIVERYDAYS_ISSET_ID);
  }

  public void setDeliveryDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYDAYS_ISSET_ID, value);
  }

  /**
   * 
   * @see EsDepositCalculateModeType
   */
  public EsDepositCalculateModeType getDepositCalculateMode() {
    return this.depositCalculateMode;
  }

  /**
   * 
   * @see EsDepositCalculateModeType
   */
  public EsProduct setDepositCalculateMode(EsDepositCalculateModeType depositCalculateMode) {
    this.depositCalculateMode = depositCalculateMode;
    return this;
  }

  public void unsetDepositCalculateMode() {
    this.depositCalculateMode = null;
  }

  /** Returns true if field depositCalculateMode is set (has been assigned a value) and false otherwise */
  public boolean isSetDepositCalculateMode() {
    return this.depositCalculateMode != null;
  }

  public void setDepositCalculateModeIsSet(boolean value) {
    if (!value) {
      this.depositCalculateMode = null;
    }
  }

  public int getMaxSingleOrderVol() {
    return this.maxSingleOrderVol;
  }

  public EsProduct setMaxSingleOrderVol(int maxSingleOrderVol) {
    this.maxSingleOrderVol = maxSingleOrderVol;
    setMaxSingleOrderVolIsSet(true);
    return this;
  }

  public void unsetMaxSingleOrderVol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXSINGLEORDERVOL_ISSET_ID);
  }

  /** Returns true if field maxSingleOrderVol is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxSingleOrderVol() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXSINGLEORDERVOL_ISSET_ID);
  }

  public void setMaxSingleOrderVolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXSINGLEORDERVOL_ISSET_ID, value);
  }

  public int getMaxHoldVol() {
    return this.maxHoldVol;
  }

  public EsProduct setMaxHoldVol(int maxHoldVol) {
    this.maxHoldVol = maxHoldVol;
    setMaxHoldVolIsSet(true);
    return this;
  }

  public void unsetMaxHoldVol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXHOLDVOL_ISSET_ID);
  }

  /** Returns true if field maxHoldVol is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxHoldVol() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXHOLDVOL_ISSET_ID);
  }

  public void setMaxHoldVolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXHOLDVOL_ISSET_ID, value);
  }

  public String getAddOneTime() {
    return this.addOneTime;
  }

  public EsProduct setAddOneTime(String addOneTime) {
    this.addOneTime = addOneTime;
    return this;
  }

  public void unsetAddOneTime() {
    this.addOneTime = null;
  }

  /** Returns true if field addOneTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAddOneTime() {
    return this.addOneTime != null;
  }

  public void setAddOneTimeIsSet(boolean value) {
    if (!value) {
      this.addOneTime = null;
    }
  }

  /**
   * 
   * @see EsDirectType
   */
  public EsDirectType getCmbDirect() {
    return this.cmbDirect;
  }

  /**
   * 
   * @see EsDirectType
   */
  public EsProduct setCmbDirect(EsDirectType cmbDirect) {
    this.cmbDirect = cmbDirect;
    return this;
  }

  public void unsetCmbDirect() {
    this.cmbDirect = null;
  }

  /** Returns true if field cmbDirect is set (has been assigned a value) and false otherwise */
  public boolean isSetCmbDirect() {
    return this.cmbDirect != null;
  }

  public void setCmbDirectIsSet(boolean value) {
    if (!value) {
      this.cmbDirect = null;
    }
  }

  /**
   * 
   * @see EsCoverModeType
   */
  public EsCoverModeType getCoverMode() {
    return this.coverMode;
  }

  /**
   * 
   * @see EsCoverModeType
   */
  public EsProduct setCoverMode(EsCoverModeType coverMode) {
    this.coverMode = coverMode;
    return this;
  }

  public void unsetCoverMode() {
    this.coverMode = null;
  }

  /** Returns true if field coverMode is set (has been assigned a value) and false otherwise */
  public boolean isSetCoverMode() {
    return this.coverMode != null;
  }

  public void setCoverModeIsSet(boolean value) {
    if (!value) {
      this.coverMode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXCHANGE_NO:
      if (value == null) {
        unsetExchangeNo();
      } else {
        setExchangeNo((String)value);
      }
      break;

    case COMMODITY_TYPE:
      if (value == null) {
        unsetCommodityType();
      } else {
        setCommodityType((EsCommodityType)value);
      }
      break;

    case COMMODITY_NO:
      if (value == null) {
        unsetCommodityNo();
      } else {
        setCommodityNo((String)value);
      }
      break;

    case RELATE_COMMODITY_NO:
      if (value == null) {
        unsetRelateCommodityNo();
      } else {
        setRelateCommodityNo((String)value);
      }
      break;

    case COMMODITY_NAME:
      if (value == null) {
        unsetCommodityName();
      } else {
        setCommodityName((String)value);
      }
      break;

    case COMMODITY_ATTRIBUTE:
      if (value == null) {
        unsetCommodityAttribute();
      } else {
        setCommodityAttribute((String)value);
      }
      break;

    case COMMODITY_STATE:
      if (value == null) {
        unsetCommodityState();
      } else {
        setCommodityState((EsCommodityStateType)value);
      }
      break;

    case PRODUCT_DOT:
      if (value == null) {
        unsetProductDot();
      } else {
        setProductDot((Double)value);
      }
      break;

    case UPPER_TICK:
      if (value == null) {
        unsetUpperTick();
      } else {
        setUpperTick((Double)value);
      }
      break;

    case LOWER_TICK:
      if (value == null) {
        unsetLowerTick();
      } else {
        setLowerTick((Integer)value);
      }
      break;

    case CURRENCY_NO:
      if (value == null) {
        unsetCurrencyNo();
      } else {
        setCurrencyNo((String)value);
      }
      break;

    case DELIVERY_MODE:
      if (value == null) {
        unsetDeliveryMode();
      } else {
        setDeliveryMode((EsDeliveryModeType)value);
      }
      break;

    case DELIVERY_DAYS:
      if (value == null) {
        unsetDeliveryDays();
      } else {
        setDeliveryDays((Integer)value);
      }
      break;

    case DEPOSIT_CALCULATE_MODE:
      if (value == null) {
        unsetDepositCalculateMode();
      } else {
        setDepositCalculateMode((EsDepositCalculateModeType)value);
      }
      break;

    case MAX_SINGLE_ORDER_VOL:
      if (value == null) {
        unsetMaxSingleOrderVol();
      } else {
        setMaxSingleOrderVol((Integer)value);
      }
      break;

    case MAX_HOLD_VOL:
      if (value == null) {
        unsetMaxHoldVol();
      } else {
        setMaxHoldVol((Integer)value);
      }
      break;

    case ADD_ONE_TIME:
      if (value == null) {
        unsetAddOneTime();
      } else {
        setAddOneTime((String)value);
      }
      break;

    case CMB_DIRECT:
      if (value == null) {
        unsetCmbDirect();
      } else {
        setCmbDirect((EsDirectType)value);
      }
      break;

    case COVER_MODE:
      if (value == null) {
        unsetCoverMode();
      } else {
        setCoverMode((EsCoverModeType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXCHANGE_NO:
      return getExchangeNo();

    case COMMODITY_TYPE:
      return getCommodityType();

    case COMMODITY_NO:
      return getCommodityNo();

    case RELATE_COMMODITY_NO:
      return getRelateCommodityNo();

    case COMMODITY_NAME:
      return getCommodityName();

    case COMMODITY_ATTRIBUTE:
      return getCommodityAttribute();

    case COMMODITY_STATE:
      return getCommodityState();

    case PRODUCT_DOT:
      return Double.valueOf(getProductDot());

    case UPPER_TICK:
      return Double.valueOf(getUpperTick());

    case LOWER_TICK:
      return Integer.valueOf(getLowerTick());

    case CURRENCY_NO:
      return getCurrencyNo();

    case DELIVERY_MODE:
      return getDeliveryMode();

    case DELIVERY_DAYS:
      return Integer.valueOf(getDeliveryDays());

    case DEPOSIT_CALCULATE_MODE:
      return getDepositCalculateMode();

    case MAX_SINGLE_ORDER_VOL:
      return Integer.valueOf(getMaxSingleOrderVol());

    case MAX_HOLD_VOL:
      return Integer.valueOf(getMaxHoldVol());

    case ADD_ONE_TIME:
      return getAddOneTime();

    case CMB_DIRECT:
      return getCmbDirect();

    case COVER_MODE:
      return getCoverMode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXCHANGE_NO:
      return isSetExchangeNo();
    case COMMODITY_TYPE:
      return isSetCommodityType();
    case COMMODITY_NO:
      return isSetCommodityNo();
    case RELATE_COMMODITY_NO:
      return isSetRelateCommodityNo();
    case COMMODITY_NAME:
      return isSetCommodityName();
    case COMMODITY_ATTRIBUTE:
      return isSetCommodityAttribute();
    case COMMODITY_STATE:
      return isSetCommodityState();
    case PRODUCT_DOT:
      return isSetProductDot();
    case UPPER_TICK:
      return isSetUpperTick();
    case LOWER_TICK:
      return isSetLowerTick();
    case CURRENCY_NO:
      return isSetCurrencyNo();
    case DELIVERY_MODE:
      return isSetDeliveryMode();
    case DELIVERY_DAYS:
      return isSetDeliveryDays();
    case DEPOSIT_CALCULATE_MODE:
      return isSetDepositCalculateMode();
    case MAX_SINGLE_ORDER_VOL:
      return isSetMaxSingleOrderVol();
    case MAX_HOLD_VOL:
      return isSetMaxHoldVol();
    case ADD_ONE_TIME:
      return isSetAddOneTime();
    case CMB_DIRECT:
      return isSetCmbDirect();
    case COVER_MODE:
      return isSetCoverMode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EsProduct)
      return this.equals((EsProduct)that);
    return false;
  }

  public boolean equals(EsProduct that) {
    if (that == null)
      return false;

    boolean this_present_exchangeNo = true && this.isSetExchangeNo();
    boolean that_present_exchangeNo = true && that.isSetExchangeNo();
    if (this_present_exchangeNo || that_present_exchangeNo) {
      if (!(this_present_exchangeNo && that_present_exchangeNo))
        return false;
      if (!this.exchangeNo.equals(that.exchangeNo))
        return false;
    }

    boolean this_present_commodityType = true && this.isSetCommodityType();
    boolean that_present_commodityType = true && that.isSetCommodityType();
    if (this_present_commodityType || that_present_commodityType) {
      if (!(this_present_commodityType && that_present_commodityType))
        return false;
      if (!this.commodityType.equals(that.commodityType))
        return false;
    }

    boolean this_present_commodityNo = true && this.isSetCommodityNo();
    boolean that_present_commodityNo = true && that.isSetCommodityNo();
    if (this_present_commodityNo || that_present_commodityNo) {
      if (!(this_present_commodityNo && that_present_commodityNo))
        return false;
      if (!this.commodityNo.equals(that.commodityNo))
        return false;
    }

    boolean this_present_relateCommodityNo = true && this.isSetRelateCommodityNo();
    boolean that_present_relateCommodityNo = true && that.isSetRelateCommodityNo();
    if (this_present_relateCommodityNo || that_present_relateCommodityNo) {
      if (!(this_present_relateCommodityNo && that_present_relateCommodityNo))
        return false;
      if (!this.relateCommodityNo.equals(that.relateCommodityNo))
        return false;
    }

    boolean this_present_commodityName = true && this.isSetCommodityName();
    boolean that_present_commodityName = true && that.isSetCommodityName();
    if (this_present_commodityName || that_present_commodityName) {
      if (!(this_present_commodityName && that_present_commodityName))
        return false;
      if (!this.commodityName.equals(that.commodityName))
        return false;
    }

    boolean this_present_commodityAttribute = true && this.isSetCommodityAttribute();
    boolean that_present_commodityAttribute = true && that.isSetCommodityAttribute();
    if (this_present_commodityAttribute || that_present_commodityAttribute) {
      if (!(this_present_commodityAttribute && that_present_commodityAttribute))
        return false;
      if (!this.commodityAttribute.equals(that.commodityAttribute))
        return false;
    }

    boolean this_present_commodityState = true && this.isSetCommodityState();
    boolean that_present_commodityState = true && that.isSetCommodityState();
    if (this_present_commodityState || that_present_commodityState) {
      if (!(this_present_commodityState && that_present_commodityState))
        return false;
      if (!this.commodityState.equals(that.commodityState))
        return false;
    }

    boolean this_present_productDot = true && this.isSetProductDot();
    boolean that_present_productDot = true && that.isSetProductDot();
    if (this_present_productDot || that_present_productDot) {
      if (!(this_present_productDot && that_present_productDot))
        return false;
      if (this.productDot != that.productDot)
        return false;
    }

    boolean this_present_upperTick = true && this.isSetUpperTick();
    boolean that_present_upperTick = true && that.isSetUpperTick();
    if (this_present_upperTick || that_present_upperTick) {
      if (!(this_present_upperTick && that_present_upperTick))
        return false;
      if (this.upperTick != that.upperTick)
        return false;
    }

    boolean this_present_lowerTick = true && this.isSetLowerTick();
    boolean that_present_lowerTick = true && that.isSetLowerTick();
    if (this_present_lowerTick || that_present_lowerTick) {
      if (!(this_present_lowerTick && that_present_lowerTick))
        return false;
      if (this.lowerTick != that.lowerTick)
        return false;
    }

    boolean this_present_currencyNo = true && this.isSetCurrencyNo();
    boolean that_present_currencyNo = true && that.isSetCurrencyNo();
    if (this_present_currencyNo || that_present_currencyNo) {
      if (!(this_present_currencyNo && that_present_currencyNo))
        return false;
      if (!this.currencyNo.equals(that.currencyNo))
        return false;
    }

    boolean this_present_deliveryMode = true && this.isSetDeliveryMode();
    boolean that_present_deliveryMode = true && that.isSetDeliveryMode();
    if (this_present_deliveryMode || that_present_deliveryMode) {
      if (!(this_present_deliveryMode && that_present_deliveryMode))
        return false;
      if (!this.deliveryMode.equals(that.deliveryMode))
        return false;
    }

    boolean this_present_deliveryDays = true && this.isSetDeliveryDays();
    boolean that_present_deliveryDays = true && that.isSetDeliveryDays();
    if (this_present_deliveryDays || that_present_deliveryDays) {
      if (!(this_present_deliveryDays && that_present_deliveryDays))
        return false;
      if (this.deliveryDays != that.deliveryDays)
        return false;
    }

    boolean this_present_depositCalculateMode = true && this.isSetDepositCalculateMode();
    boolean that_present_depositCalculateMode = true && that.isSetDepositCalculateMode();
    if (this_present_depositCalculateMode || that_present_depositCalculateMode) {
      if (!(this_present_depositCalculateMode && that_present_depositCalculateMode))
        return false;
      if (!this.depositCalculateMode.equals(that.depositCalculateMode))
        return false;
    }

    boolean this_present_maxSingleOrderVol = true && this.isSetMaxSingleOrderVol();
    boolean that_present_maxSingleOrderVol = true && that.isSetMaxSingleOrderVol();
    if (this_present_maxSingleOrderVol || that_present_maxSingleOrderVol) {
      if (!(this_present_maxSingleOrderVol && that_present_maxSingleOrderVol))
        return false;
      if (this.maxSingleOrderVol != that.maxSingleOrderVol)
        return false;
    }

    boolean this_present_maxHoldVol = true && this.isSetMaxHoldVol();
    boolean that_present_maxHoldVol = true && that.isSetMaxHoldVol();
    if (this_present_maxHoldVol || that_present_maxHoldVol) {
      if (!(this_present_maxHoldVol && that_present_maxHoldVol))
        return false;
      if (this.maxHoldVol != that.maxHoldVol)
        return false;
    }

    boolean this_present_addOneTime = true && this.isSetAddOneTime();
    boolean that_present_addOneTime = true && that.isSetAddOneTime();
    if (this_present_addOneTime || that_present_addOneTime) {
      if (!(this_present_addOneTime && that_present_addOneTime))
        return false;
      if (!this.addOneTime.equals(that.addOneTime))
        return false;
    }

    boolean this_present_cmbDirect = true && this.isSetCmbDirect();
    boolean that_present_cmbDirect = true && that.isSetCmbDirect();
    if (this_present_cmbDirect || that_present_cmbDirect) {
      if (!(this_present_cmbDirect && that_present_cmbDirect))
        return false;
      if (!this.cmbDirect.equals(that.cmbDirect))
        return false;
    }

    boolean this_present_coverMode = true && this.isSetCoverMode();
    boolean that_present_coverMode = true && that.isSetCoverMode();
    if (this_present_coverMode || that_present_coverMode) {
      if (!(this_present_coverMode && that_present_coverMode))
        return false;
      if (!this.coverMode.equals(that.coverMode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EsProduct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExchangeNo()).compareTo(other.isSetExchangeNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeNo, other.exchangeNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityType()).compareTo(other.isSetCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityType, other.commodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityNo()).compareTo(other.isSetCommodityNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityNo, other.commodityNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelateCommodityNo()).compareTo(other.isSetRelateCommodityNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelateCommodityNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relateCommodityNo, other.relateCommodityNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityName()).compareTo(other.isSetCommodityName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityName, other.commodityName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityAttribute()).compareTo(other.isSetCommodityAttribute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityAttribute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityAttribute, other.commodityAttribute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityState()).compareTo(other.isSetCommodityState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityState, other.commodityState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductDot()).compareTo(other.isSetProductDot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductDot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productDot, other.productDot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpperTick()).compareTo(other.isSetUpperTick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpperTick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upperTick, other.upperTick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLowerTick()).compareTo(other.isSetLowerTick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLowerTick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lowerTick, other.lowerTick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyNo()).compareTo(other.isSetCurrencyNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyNo, other.currencyNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryMode()).compareTo(other.isSetDeliveryMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryMode, other.deliveryMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryDays()).compareTo(other.isSetDeliveryDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryDays, other.deliveryDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepositCalculateMode()).compareTo(other.isSetDepositCalculateMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepositCalculateMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depositCalculateMode, other.depositCalculateMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxSingleOrderVol()).compareTo(other.isSetMaxSingleOrderVol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxSingleOrderVol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxSingleOrderVol, other.maxSingleOrderVol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxHoldVol()).compareTo(other.isSetMaxHoldVol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxHoldVol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxHoldVol, other.maxHoldVol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddOneTime()).compareTo(other.isSetAddOneTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddOneTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addOneTime, other.addOneTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCmbDirect()).compareTo(other.isSetCmbDirect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCmbDirect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmbDirect, other.cmbDirect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoverMode()).compareTo(other.isSetCoverMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoverMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coverMode, other.coverMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EsProduct(");
    boolean first = true;

    if (isSetExchangeNo()) {
      sb.append("exchangeNo:");
      if (this.exchangeNo == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeNo);
      }
      first = false;
    }
    if (isSetCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("commodityType:");
      if (this.commodityType == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityType);
      }
      first = false;
    }
    if (isSetCommodityNo()) {
      if (!first) sb.append(", ");
      sb.append("commodityNo:");
      if (this.commodityNo == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityNo);
      }
      first = false;
    }
    if (isSetRelateCommodityNo()) {
      if (!first) sb.append(", ");
      sb.append("relateCommodityNo:");
      if (this.relateCommodityNo == null) {
        sb.append("null");
      } else {
        sb.append(this.relateCommodityNo);
      }
      first = false;
    }
    if (isSetCommodityName()) {
      if (!first) sb.append(", ");
      sb.append("commodityName:");
      if (this.commodityName == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityName);
      }
      first = false;
    }
    if (isSetCommodityAttribute()) {
      if (!first) sb.append(", ");
      sb.append("commodityAttribute:");
      if (this.commodityAttribute == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityAttribute);
      }
      first = false;
    }
    if (isSetCommodityState()) {
      if (!first) sb.append(", ");
      sb.append("commodityState:");
      if (this.commodityState == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityState);
      }
      first = false;
    }
    if (isSetProductDot()) {
      if (!first) sb.append(", ");
      sb.append("productDot:");
      sb.append(this.productDot);
      first = false;
    }
    if (isSetUpperTick()) {
      if (!first) sb.append(", ");
      sb.append("upperTick:");
      sb.append(this.upperTick);
      first = false;
    }
    if (isSetLowerTick()) {
      if (!first) sb.append(", ");
      sb.append("lowerTick:");
      sb.append(this.lowerTick);
      first = false;
    }
    if (isSetCurrencyNo()) {
      if (!first) sb.append(", ");
      sb.append("currencyNo:");
      if (this.currencyNo == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyNo);
      }
      first = false;
    }
    if (isSetDeliveryMode()) {
      if (!first) sb.append(", ");
      sb.append("deliveryMode:");
      if (this.deliveryMode == null) {
        sb.append("null");
      } else {
        sb.append(this.deliveryMode);
      }
      first = false;
    }
    if (isSetDeliveryDays()) {
      if (!first) sb.append(", ");
      sb.append("deliveryDays:");
      sb.append(this.deliveryDays);
      first = false;
    }
    if (isSetDepositCalculateMode()) {
      if (!first) sb.append(", ");
      sb.append("depositCalculateMode:");
      if (this.depositCalculateMode == null) {
        sb.append("null");
      } else {
        sb.append(this.depositCalculateMode);
      }
      first = false;
    }
    if (isSetMaxSingleOrderVol()) {
      if (!first) sb.append(", ");
      sb.append("maxSingleOrderVol:");
      sb.append(this.maxSingleOrderVol);
      first = false;
    }
    if (isSetMaxHoldVol()) {
      if (!first) sb.append(", ");
      sb.append("maxHoldVol:");
      sb.append(this.maxHoldVol);
      first = false;
    }
    if (isSetAddOneTime()) {
      if (!first) sb.append(", ");
      sb.append("addOneTime:");
      if (this.addOneTime == null) {
        sb.append("null");
      } else {
        sb.append(this.addOneTime);
      }
      first = false;
    }
    if (isSetCmbDirect()) {
      if (!first) sb.append(", ");
      sb.append("cmbDirect:");
      if (this.cmbDirect == null) {
        sb.append("null");
      } else {
        sb.append(this.cmbDirect);
      }
      first = false;
    }
    if (isSetCoverMode()) {
      if (!first) sb.append(", ");
      sb.append("coverMode:");
      if (this.coverMode == null) {
        sb.append("null");
      } else {
        sb.append(this.coverMode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EsProductStandardSchemeFactory implements SchemeFactory {
    public EsProductStandardScheme getScheme() {
      return new EsProductStandardScheme();
    }
  }

  private static class EsProductStandardScheme extends StandardScheme<EsProduct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EsProduct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXCHANGE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeNo = iprot.readString();
              struct.setExchangeNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commodityType = EsCommodityType.findByValue(iprot.readI32());
              struct.setCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMODITY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityNo = iprot.readString();
              struct.setCommodityNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RELATE_COMMODITY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relateCommodityNo = iprot.readString();
              struct.setRelateCommodityNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMODITY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityName = iprot.readString();
              struct.setCommodityNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMODITY_ATTRIBUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityAttribute = iprot.readString();
              struct.setCommodityAttributeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMMODITY_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commodityState = EsCommodityStateType.findByValue(iprot.readI32());
              struct.setCommodityStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRODUCT_DOT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.productDot = iprot.readDouble();
              struct.setProductDotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPPER_TICK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.upperTick = iprot.readDouble();
              struct.setUpperTickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOWER_TICK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lowerTick = iprot.readI32();
              struct.setLowerTickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CURRENCY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyNo = iprot.readString();
              struct.setCurrencyNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DELIVERY_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deliveryMode = EsDeliveryModeType.findByValue(iprot.readI32());
              struct.setDeliveryModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DELIVERY_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deliveryDays = iprot.readI32();
              struct.setDeliveryDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DEPOSIT_CALCULATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.depositCalculateMode = EsDepositCalculateModeType.findByValue(iprot.readI32());
              struct.setDepositCalculateModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MAX_SINGLE_ORDER_VOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxSingleOrderVol = iprot.readI32();
              struct.setMaxSingleOrderVolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MAX_HOLD_VOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxHoldVol = iprot.readI32();
              struct.setMaxHoldVolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ADD_ONE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addOneTime = iprot.readString();
              struct.setAddOneTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CMB_DIRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cmbDirect = EsDirectType.findByValue(iprot.readI32());
              struct.setCmbDirectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // COVER_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coverMode = EsCoverModeType.findByValue(iprot.readI32());
              struct.setCoverModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EsProduct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.exchangeNo != null) {
        if (struct.isSetExchangeNo()) {
          oprot.writeFieldBegin(EXCHANGE_NO_FIELD_DESC);
          oprot.writeString(struct.exchangeNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityType != null) {
        if (struct.isSetCommodityType()) {
          oprot.writeFieldBegin(COMMODITY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.commodityType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityNo != null) {
        if (struct.isSetCommodityNo()) {
          oprot.writeFieldBegin(COMMODITY_NO_FIELD_DESC);
          oprot.writeString(struct.commodityNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.relateCommodityNo != null) {
        if (struct.isSetRelateCommodityNo()) {
          oprot.writeFieldBegin(RELATE_COMMODITY_NO_FIELD_DESC);
          oprot.writeString(struct.relateCommodityNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityName != null) {
        if (struct.isSetCommodityName()) {
          oprot.writeFieldBegin(COMMODITY_NAME_FIELD_DESC);
          oprot.writeString(struct.commodityName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityAttribute != null) {
        if (struct.isSetCommodityAttribute()) {
          oprot.writeFieldBegin(COMMODITY_ATTRIBUTE_FIELD_DESC);
          oprot.writeString(struct.commodityAttribute);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityState != null) {
        if (struct.isSetCommodityState()) {
          oprot.writeFieldBegin(COMMODITY_STATE_FIELD_DESC);
          oprot.writeI32(struct.commodityState.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetProductDot()) {
        oprot.writeFieldBegin(PRODUCT_DOT_FIELD_DESC);
        oprot.writeDouble(struct.productDot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpperTick()) {
        oprot.writeFieldBegin(UPPER_TICK_FIELD_DESC);
        oprot.writeDouble(struct.upperTick);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLowerTick()) {
        oprot.writeFieldBegin(LOWER_TICK_FIELD_DESC);
        oprot.writeI32(struct.lowerTick);
        oprot.writeFieldEnd();
      }
      if (struct.currencyNo != null) {
        if (struct.isSetCurrencyNo()) {
          oprot.writeFieldBegin(CURRENCY_NO_FIELD_DESC);
          oprot.writeString(struct.currencyNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deliveryMode != null) {
        if (struct.isSetDeliveryMode()) {
          oprot.writeFieldBegin(DELIVERY_MODE_FIELD_DESC);
          oprot.writeI32(struct.deliveryMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDeliveryDays()) {
        oprot.writeFieldBegin(DELIVERY_DAYS_FIELD_DESC);
        oprot.writeI32(struct.deliveryDays);
        oprot.writeFieldEnd();
      }
      if (struct.depositCalculateMode != null) {
        if (struct.isSetDepositCalculateMode()) {
          oprot.writeFieldBegin(DEPOSIT_CALCULATE_MODE_FIELD_DESC);
          oprot.writeI32(struct.depositCalculateMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMaxSingleOrderVol()) {
        oprot.writeFieldBegin(MAX_SINGLE_ORDER_VOL_FIELD_DESC);
        oprot.writeI32(struct.maxSingleOrderVol);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxHoldVol()) {
        oprot.writeFieldBegin(MAX_HOLD_VOL_FIELD_DESC);
        oprot.writeI32(struct.maxHoldVol);
        oprot.writeFieldEnd();
      }
      if (struct.addOneTime != null) {
        if (struct.isSetAddOneTime()) {
          oprot.writeFieldBegin(ADD_ONE_TIME_FIELD_DESC);
          oprot.writeString(struct.addOneTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cmbDirect != null) {
        if (struct.isSetCmbDirect()) {
          oprot.writeFieldBegin(CMB_DIRECT_FIELD_DESC);
          oprot.writeI32(struct.cmbDirect.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.coverMode != null) {
        if (struct.isSetCoverMode()) {
          oprot.writeFieldBegin(COVER_MODE_FIELD_DESC);
          oprot.writeI32(struct.coverMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EsProductTupleSchemeFactory implements SchemeFactory {
    public EsProductTupleScheme getScheme() {
      return new EsProductTupleScheme();
    }
  }

  private static class EsProductTupleScheme extends TupleScheme<EsProduct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EsProduct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExchangeNo()) {
        optionals.set(0);
      }
      if (struct.isSetCommodityType()) {
        optionals.set(1);
      }
      if (struct.isSetCommodityNo()) {
        optionals.set(2);
      }
      if (struct.isSetRelateCommodityNo()) {
        optionals.set(3);
      }
      if (struct.isSetCommodityName()) {
        optionals.set(4);
      }
      if (struct.isSetCommodityAttribute()) {
        optionals.set(5);
      }
      if (struct.isSetCommodityState()) {
        optionals.set(6);
      }
      if (struct.isSetProductDot()) {
        optionals.set(7);
      }
      if (struct.isSetUpperTick()) {
        optionals.set(8);
      }
      if (struct.isSetLowerTick()) {
        optionals.set(9);
      }
      if (struct.isSetCurrencyNo()) {
        optionals.set(10);
      }
      if (struct.isSetDeliveryMode()) {
        optionals.set(11);
      }
      if (struct.isSetDeliveryDays()) {
        optionals.set(12);
      }
      if (struct.isSetDepositCalculateMode()) {
        optionals.set(13);
      }
      if (struct.isSetMaxSingleOrderVol()) {
        optionals.set(14);
      }
      if (struct.isSetMaxHoldVol()) {
        optionals.set(15);
      }
      if (struct.isSetAddOneTime()) {
        optionals.set(16);
      }
      if (struct.isSetCmbDirect()) {
        optionals.set(17);
      }
      if (struct.isSetCoverMode()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetExchangeNo()) {
        oprot.writeString(struct.exchangeNo);
      }
      if (struct.isSetCommodityType()) {
        oprot.writeI32(struct.commodityType.getValue());
      }
      if (struct.isSetCommodityNo()) {
        oprot.writeString(struct.commodityNo);
      }
      if (struct.isSetRelateCommodityNo()) {
        oprot.writeString(struct.relateCommodityNo);
      }
      if (struct.isSetCommodityName()) {
        oprot.writeString(struct.commodityName);
      }
      if (struct.isSetCommodityAttribute()) {
        oprot.writeString(struct.commodityAttribute);
      }
      if (struct.isSetCommodityState()) {
        oprot.writeI32(struct.commodityState.getValue());
      }
      if (struct.isSetProductDot()) {
        oprot.writeDouble(struct.productDot);
      }
      if (struct.isSetUpperTick()) {
        oprot.writeDouble(struct.upperTick);
      }
      if (struct.isSetLowerTick()) {
        oprot.writeI32(struct.lowerTick);
      }
      if (struct.isSetCurrencyNo()) {
        oprot.writeString(struct.currencyNo);
      }
      if (struct.isSetDeliveryMode()) {
        oprot.writeI32(struct.deliveryMode.getValue());
      }
      if (struct.isSetDeliveryDays()) {
        oprot.writeI32(struct.deliveryDays);
      }
      if (struct.isSetDepositCalculateMode()) {
        oprot.writeI32(struct.depositCalculateMode.getValue());
      }
      if (struct.isSetMaxSingleOrderVol()) {
        oprot.writeI32(struct.maxSingleOrderVol);
      }
      if (struct.isSetMaxHoldVol()) {
        oprot.writeI32(struct.maxHoldVol);
      }
      if (struct.isSetAddOneTime()) {
        oprot.writeString(struct.addOneTime);
      }
      if (struct.isSetCmbDirect()) {
        oprot.writeI32(struct.cmbDirect.getValue());
      }
      if (struct.isSetCoverMode()) {
        oprot.writeI32(struct.coverMode.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EsProduct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.exchangeNo = iprot.readString();
        struct.setExchangeNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.commodityType = EsCommodityType.findByValue(iprot.readI32());
        struct.setCommodityTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commodityNo = iprot.readString();
        struct.setCommodityNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.relateCommodityNo = iprot.readString();
        struct.setRelateCommodityNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.commodityName = iprot.readString();
        struct.setCommodityNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.commodityAttribute = iprot.readString();
        struct.setCommodityAttributeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.commodityState = EsCommodityStateType.findByValue(iprot.readI32());
        struct.setCommodityStateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.productDot = iprot.readDouble();
        struct.setProductDotIsSet(true);
      }
      if (incoming.get(8)) {
        struct.upperTick = iprot.readDouble();
        struct.setUpperTickIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lowerTick = iprot.readI32();
        struct.setLowerTickIsSet(true);
      }
      if (incoming.get(10)) {
        struct.currencyNo = iprot.readString();
        struct.setCurrencyNoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.deliveryMode = EsDeliveryModeType.findByValue(iprot.readI32());
        struct.setDeliveryModeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.deliveryDays = iprot.readI32();
        struct.setDeliveryDaysIsSet(true);
      }
      if (incoming.get(13)) {
        struct.depositCalculateMode = EsDepositCalculateModeType.findByValue(iprot.readI32());
        struct.setDepositCalculateModeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.maxSingleOrderVol = iprot.readI32();
        struct.setMaxSingleOrderVolIsSet(true);
      }
      if (incoming.get(15)) {
        struct.maxHoldVol = iprot.readI32();
        struct.setMaxHoldVolIsSet(true);
      }
      if (incoming.get(16)) {
        struct.addOneTime = iprot.readString();
        struct.setAddOneTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.cmbDirect = EsDirectType.findByValue(iprot.readI32());
        struct.setCmbDirectIsSet(true);
      }
      if (incoming.get(18)) {
        struct.coverMode = EsCoverModeType.findByValue(iprot.readI32());
        struct.setCoverModeIsSet(true);
      }
    }
  }

}

