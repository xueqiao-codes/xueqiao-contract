/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.common.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Contract implements org.apache.thrift.TBase<Contract, Contract._Fields>, java.io.Serializable, Cloneable, Comparable<Contract> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Contract");

  private static final org.apache.thrift.protocol.TField TRADE_INTERFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeInterface", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXCHANGE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMMODITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityType", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField CONTRACT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractCode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMMODITY_FIELD_DESC = new org.apache.thrift.protocol.TField("commodity", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContractStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContractTupleSchemeFactory());
  }

  public String tradeInterface; // optional
  public String exchangeCode; // optional
  public String commodityCode; // optional
  public byte commodityType; // optional
  public String contractCode; // required
  public Commodity commodity; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADE_INTERFACE((short)1, "tradeInterface"),
    EXCHANGE_CODE((short)2, "exchangeCode"),
    COMMODITY_CODE((short)3, "commodityCode"),
    COMMODITY_TYPE((short)4, "commodityType"),
    CONTRACT_CODE((short)5, "contractCode"),
    COMMODITY((short)6, "commodity");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADE_INTERFACE
          return TRADE_INTERFACE;
        case 2: // EXCHANGE_CODE
          return EXCHANGE_CODE;
        case 3: // COMMODITY_CODE
          return COMMODITY_CODE;
        case 4: // COMMODITY_TYPE
          return COMMODITY_TYPE;
        case 5: // CONTRACT_CODE
          return CONTRACT_CODE;
        case 6: // COMMODITY
          return COMMODITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMMODITYTYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TRADE_INTERFACE,_Fields.EXCHANGE_CODE,_Fields.COMMODITY_CODE,_Fields.COMMODITY_TYPE,_Fields.COMMODITY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADE_INTERFACE, new org.apache.thrift.meta_data.FieldMetaData("tradeInterface", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCHANGE_CODE, new org.apache.thrift.meta_data.FieldMetaData("exchangeCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("commodityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("commodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CONTRACT_CODE, new org.apache.thrift.meta_data.FieldMetaData("contractCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY, new org.apache.thrift.meta_data.FieldMetaData("commodity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Commodity.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Contract.class, metaDataMap);
  }

  public Contract() {
  }

  public Contract(
    String contractCode)
  {
    this();
    this.contractCode = contractCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Contract(Contract other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTradeInterface()) {
      this.tradeInterface = other.tradeInterface;
    }
    if (other.isSetExchangeCode()) {
      this.exchangeCode = other.exchangeCode;
    }
    if (other.isSetCommodityCode()) {
      this.commodityCode = other.commodityCode;
    }
    this.commodityType = other.commodityType;
    if (other.isSetContractCode()) {
      this.contractCode = other.contractCode;
    }
    if (other.isSetCommodity()) {
      this.commodity = new Commodity(other.commodity);
    }
  }

  public Contract deepCopy() {
    return new Contract(this);
  }

  @Override
  public void clear() {
    this.tradeInterface = null;
    this.exchangeCode = null;
    this.commodityCode = null;
    setCommodityTypeIsSet(false);
    this.commodityType = 0;
    this.contractCode = null;
    this.commodity = null;
  }

  public String getTradeInterface() {
    return this.tradeInterface;
  }

  public Contract setTradeInterface(String tradeInterface) {
    this.tradeInterface = tradeInterface;
    return this;
  }

  public void unsetTradeInterface() {
    this.tradeInterface = null;
  }

  /** Returns true if field tradeInterface is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeInterface() {
    return this.tradeInterface != null;
  }

  public void setTradeInterfaceIsSet(boolean value) {
    if (!value) {
      this.tradeInterface = null;
    }
  }

  public String getExchangeCode() {
    return this.exchangeCode;
  }

  public Contract setExchangeCode(String exchangeCode) {
    this.exchangeCode = exchangeCode;
    return this;
  }

  public void unsetExchangeCode() {
    this.exchangeCode = null;
  }

  /** Returns true if field exchangeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeCode() {
    return this.exchangeCode != null;
  }

  public void setExchangeCodeIsSet(boolean value) {
    if (!value) {
      this.exchangeCode = null;
    }
  }

  public String getCommodityCode() {
    return this.commodityCode;
  }

  public Contract setCommodityCode(String commodityCode) {
    this.commodityCode = commodityCode;
    return this;
  }

  public void unsetCommodityCode() {
    this.commodityCode = null;
  }

  /** Returns true if field commodityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityCode() {
    return this.commodityCode != null;
  }

  public void setCommodityCodeIsSet(boolean value) {
    if (!value) {
      this.commodityCode = null;
    }
  }

  public byte getCommodityType() {
    return this.commodityType;
  }

  public Contract setCommodityType(byte commodityType) {
    this.commodityType = commodityType;
    setCommodityTypeIsSet(true);
    return this;
  }

  public void unsetCommodityType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMODITYTYPE_ISSET_ID);
  }

  /** Returns true if field commodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityType() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMODITYTYPE_ISSET_ID);
  }

  public void setCommodityTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMODITYTYPE_ISSET_ID, value);
  }

  public String getContractCode() {
    return this.contractCode;
  }

  public Contract setContractCode(String contractCode) {
    this.contractCode = contractCode;
    return this;
  }

  public void unsetContractCode() {
    this.contractCode = null;
  }

  /** Returns true if field contractCode is set (has been assigned a value) and false otherwise */
  public boolean isSetContractCode() {
    return this.contractCode != null;
  }

  public void setContractCodeIsSet(boolean value) {
    if (!value) {
      this.contractCode = null;
    }
  }

  public Commodity getCommodity() {
    return this.commodity;
  }

  public Contract setCommodity(Commodity commodity) {
    this.commodity = commodity;
    return this;
  }

  public void unsetCommodity() {
    this.commodity = null;
  }

  /** Returns true if field commodity is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodity() {
    return this.commodity != null;
  }

  public void setCommodityIsSet(boolean value) {
    if (!value) {
      this.commodity = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADE_INTERFACE:
      if (value == null) {
        unsetTradeInterface();
      } else {
        setTradeInterface((String)value);
      }
      break;

    case EXCHANGE_CODE:
      if (value == null) {
        unsetExchangeCode();
      } else {
        setExchangeCode((String)value);
      }
      break;

    case COMMODITY_CODE:
      if (value == null) {
        unsetCommodityCode();
      } else {
        setCommodityCode((String)value);
      }
      break;

    case COMMODITY_TYPE:
      if (value == null) {
        unsetCommodityType();
      } else {
        setCommodityType((Byte)value);
      }
      break;

    case CONTRACT_CODE:
      if (value == null) {
        unsetContractCode();
      } else {
        setContractCode((String)value);
      }
      break;

    case COMMODITY:
      if (value == null) {
        unsetCommodity();
      } else {
        setCommodity((Commodity)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADE_INTERFACE:
      return getTradeInterface();

    case EXCHANGE_CODE:
      return getExchangeCode();

    case COMMODITY_CODE:
      return getCommodityCode();

    case COMMODITY_TYPE:
      return Byte.valueOf(getCommodityType());

    case CONTRACT_CODE:
      return getContractCode();

    case COMMODITY:
      return getCommodity();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADE_INTERFACE:
      return isSetTradeInterface();
    case EXCHANGE_CODE:
      return isSetExchangeCode();
    case COMMODITY_CODE:
      return isSetCommodityCode();
    case COMMODITY_TYPE:
      return isSetCommodityType();
    case CONTRACT_CODE:
      return isSetContractCode();
    case COMMODITY:
      return isSetCommodity();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Contract)
      return this.equals((Contract)that);
    return false;
  }

  public boolean equals(Contract that) {
    if (that == null)
      return false;

    boolean this_present_tradeInterface = true && this.isSetTradeInterface();
    boolean that_present_tradeInterface = true && that.isSetTradeInterface();
    if (this_present_tradeInterface || that_present_tradeInterface) {
      if (!(this_present_tradeInterface && that_present_tradeInterface))
        return false;
      if (!this.tradeInterface.equals(that.tradeInterface))
        return false;
    }

    boolean this_present_exchangeCode = true && this.isSetExchangeCode();
    boolean that_present_exchangeCode = true && that.isSetExchangeCode();
    if (this_present_exchangeCode || that_present_exchangeCode) {
      if (!(this_present_exchangeCode && that_present_exchangeCode))
        return false;
      if (!this.exchangeCode.equals(that.exchangeCode))
        return false;
    }

    boolean this_present_commodityCode = true && this.isSetCommodityCode();
    boolean that_present_commodityCode = true && that.isSetCommodityCode();
    if (this_present_commodityCode || that_present_commodityCode) {
      if (!(this_present_commodityCode && that_present_commodityCode))
        return false;
      if (!this.commodityCode.equals(that.commodityCode))
        return false;
    }

    boolean this_present_commodityType = true && this.isSetCommodityType();
    boolean that_present_commodityType = true && that.isSetCommodityType();
    if (this_present_commodityType || that_present_commodityType) {
      if (!(this_present_commodityType && that_present_commodityType))
        return false;
      if (this.commodityType != that.commodityType)
        return false;
    }

    boolean this_present_contractCode = true && this.isSetContractCode();
    boolean that_present_contractCode = true && that.isSetContractCode();
    if (this_present_contractCode || that_present_contractCode) {
      if (!(this_present_contractCode && that_present_contractCode))
        return false;
      if (!this.contractCode.equals(that.contractCode))
        return false;
    }

    boolean this_present_commodity = true && this.isSetCommodity();
    boolean that_present_commodity = true && that.isSetCommodity();
    if (this_present_commodity || that_present_commodity) {
      if (!(this_present_commodity && that_present_commodity))
        return false;
      if (!this.commodity.equals(that.commodity))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Contract other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradeInterface()).compareTo(other.isSetTradeInterface());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeInterface()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeInterface, other.tradeInterface);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeCode()).compareTo(other.isSetExchangeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeCode, other.exchangeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityCode()).compareTo(other.isSetCommodityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityCode, other.commodityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityType()).compareTo(other.isSetCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityType, other.commodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractCode()).compareTo(other.isSetContractCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractCode, other.contractCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodity()).compareTo(other.isSetCommodity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodity, other.commodity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Contract(");
    boolean first = true;

    if (isSetTradeInterface()) {
      sb.append("tradeInterface:");
      if (this.tradeInterface == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeInterface);
      }
      first = false;
    }
    if (isSetExchangeCode()) {
      if (!first) sb.append(", ");
      sb.append("exchangeCode:");
      if (this.exchangeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeCode);
      }
      first = false;
    }
    if (isSetCommodityCode()) {
      if (!first) sb.append(", ");
      sb.append("commodityCode:");
      if (this.commodityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityCode);
      }
      first = false;
    }
    if (isSetCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("commodityType:");
      sb.append(this.commodityType);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("contractCode:");
    if (this.contractCode == null) {
      sb.append("null");
    } else {
      sb.append(this.contractCode);
    }
    first = false;
    if (isSetCommodity()) {
      if (!first) sb.append(", ");
      sb.append("commodity:");
      if (this.commodity == null) {
        sb.append("null");
      } else {
        sb.append(this.commodity);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (contractCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contractCode' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (commodity != null) {
      commodity.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContractStandardSchemeFactory implements SchemeFactory {
    public ContractStandardScheme getScheme() {
      return new ContractStandardScheme();
    }
  }

  private static class ContractStandardScheme extends StandardScheme<Contract> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Contract struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADE_INTERFACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeInterface = iprot.readString();
              struct.setTradeInterfaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCHANGE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeCode = iprot.readString();
              struct.setExchangeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMODITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityCode = iprot.readString();
              struct.setCommodityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.commodityType = iprot.readByte();
              struct.setCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTRACT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractCode = iprot.readString();
              struct.setContractCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMODITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commodity = new Commodity();
              struct.commodity.read(iprot);
              struct.setCommodityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Contract struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tradeInterface != null) {
        if (struct.isSetTradeInterface()) {
          oprot.writeFieldBegin(TRADE_INTERFACE_FIELD_DESC);
          oprot.writeString(struct.tradeInterface);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchangeCode != null) {
        if (struct.isSetExchangeCode()) {
          oprot.writeFieldBegin(EXCHANGE_CODE_FIELD_DESC);
          oprot.writeString(struct.exchangeCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityCode != null) {
        if (struct.isSetCommodityCode()) {
          oprot.writeFieldBegin(COMMODITY_CODE_FIELD_DESC);
          oprot.writeString(struct.commodityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCommodityType()) {
        oprot.writeFieldBegin(COMMODITY_TYPE_FIELD_DESC);
        oprot.writeByte(struct.commodityType);
        oprot.writeFieldEnd();
      }
      if (struct.contractCode != null) {
        oprot.writeFieldBegin(CONTRACT_CODE_FIELD_DESC);
        oprot.writeString(struct.contractCode);
        oprot.writeFieldEnd();
      }
      if (struct.commodity != null) {
        if (struct.isSetCommodity()) {
          oprot.writeFieldBegin(COMMODITY_FIELD_DESC);
          struct.commodity.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContractTupleSchemeFactory implements SchemeFactory {
    public ContractTupleScheme getScheme() {
      return new ContractTupleScheme();
    }
  }

  private static class ContractTupleScheme extends TupleScheme<Contract> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Contract struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.contractCode);
      BitSet optionals = new BitSet();
      if (struct.isSetTradeInterface()) {
        optionals.set(0);
      }
      if (struct.isSetExchangeCode()) {
        optionals.set(1);
      }
      if (struct.isSetCommodityCode()) {
        optionals.set(2);
      }
      if (struct.isSetCommodityType()) {
        optionals.set(3);
      }
      if (struct.isSetCommodity()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTradeInterface()) {
        oprot.writeString(struct.tradeInterface);
      }
      if (struct.isSetExchangeCode()) {
        oprot.writeString(struct.exchangeCode);
      }
      if (struct.isSetCommodityCode()) {
        oprot.writeString(struct.commodityCode);
      }
      if (struct.isSetCommodityType()) {
        oprot.writeByte(struct.commodityType);
      }
      if (struct.isSetCommodity()) {
        struct.commodity.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Contract struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.contractCode = iprot.readString();
      struct.setContractCodeIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.tradeInterface = iprot.readString();
        struct.setTradeInterfaceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exchangeCode = iprot.readString();
        struct.setExchangeCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commodityCode = iprot.readString();
        struct.setCommodityCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.commodityType = iprot.readByte();
        struct.setCommodityTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.commodity = new Commodity();
        struct.commodity.read(iprot);
        struct.setCommodityIsSet(true);
      }
    }
  }

}

