/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.ctp_service.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CtpInputOrderField implements org.apache.thrift.TBase<CtpInputOrderField, CtpInputOrderField._Fields>, java.io.Serializable, Cloneable, Comparable<CtpInputOrderField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CtpInputOrderField");

  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderPriceType", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField COMB_OFFSET_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("combOffsetFlag", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField COMB_HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("combHedgeFlag", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("limitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField VOLUME_TOTAL_ORIGINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeTotalOriginal", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TIME_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("timeCondition", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField GTDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("GTDDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField VOLUME_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeCondition", org.apache.thrift.protocol.TType.BYTE, (short)10);
  private static final org.apache.thrift.protocol.TField MIN_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("minVolume", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CONTINGENT_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("contingentCondition", org.apache.thrift.protocol.TType.BYTE, (short)12);
  private static final org.apache.thrift.protocol.TField STOP_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("stopPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField FORCE_CLOSE_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("forceCloseReason", org.apache.thrift.protocol.TType.BYTE, (short)14);
  private static final org.apache.thrift.protocol.TField IS_AUTO_SUSPEND_FIELD_DESC = new org.apache.thrift.protocol.TField("isAutoSuspend", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField BUSINESS_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("businessUnit", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField USER_FORCE_CLOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("userForceClose", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField IS_SWAP_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isSwapOrder", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField SLED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledId", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CtpInputOrderFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CtpInputOrderFieldTupleSchemeFactory());
  }

  public String instrumentID; // required
  public byte orderPriceType; // optional
  public byte direction; // required
  public byte combOffsetFlag; // required
  public byte combHedgeFlag; // optional
  public double limitPrice; // required
  public int volumeTotalOriginal; // required
  public byte timeCondition; // optional
  public String GTDDate; // optional
  public byte volumeCondition; // optional
  public int minVolume; // optional
  public byte contingentCondition; // optional
  public double stopPrice; // optional
  public byte forceCloseReason; // optional
  public boolean isAutoSuspend; // optional
  public String businessUnit; // optional
  public int requestID; // optional
  public boolean userForceClose; // optional
  public boolean isSwapOrder; // optional
  public String sledId; // required
  public int sledAccountId; // optional
  public int userId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTRUMENT_ID((short)1, "instrumentID"),
    ORDER_PRICE_TYPE((short)2, "orderPriceType"),
    DIRECTION((short)3, "direction"),
    COMB_OFFSET_FLAG((short)4, "combOffsetFlag"),
    COMB_HEDGE_FLAG((short)5, "combHedgeFlag"),
    LIMIT_PRICE((short)6, "limitPrice"),
    VOLUME_TOTAL_ORIGINAL((short)7, "volumeTotalOriginal"),
    TIME_CONDITION((short)8, "timeCondition"),
    GTDDATE((short)9, "GTDDate"),
    VOLUME_CONDITION((short)10, "volumeCondition"),
    MIN_VOLUME((short)11, "minVolume"),
    CONTINGENT_CONDITION((short)12, "contingentCondition"),
    STOP_PRICE((short)13, "stopPrice"),
    FORCE_CLOSE_REASON((short)14, "forceCloseReason"),
    IS_AUTO_SUSPEND((short)15, "isAutoSuspend"),
    BUSINESS_UNIT((short)16, "businessUnit"),
    REQUEST_ID((short)17, "requestID"),
    USER_FORCE_CLOSE((short)18, "userForceClose"),
    IS_SWAP_ORDER((short)19, "isSwapOrder"),
    SLED_ID((short)20, "sledId"),
    SLED_ACCOUNT_ID((short)21, "sledAccountId"),
    USER_ID((short)22, "userId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 2: // ORDER_PRICE_TYPE
          return ORDER_PRICE_TYPE;
        case 3: // DIRECTION
          return DIRECTION;
        case 4: // COMB_OFFSET_FLAG
          return COMB_OFFSET_FLAG;
        case 5: // COMB_HEDGE_FLAG
          return COMB_HEDGE_FLAG;
        case 6: // LIMIT_PRICE
          return LIMIT_PRICE;
        case 7: // VOLUME_TOTAL_ORIGINAL
          return VOLUME_TOTAL_ORIGINAL;
        case 8: // TIME_CONDITION
          return TIME_CONDITION;
        case 9: // GTDDATE
          return GTDDATE;
        case 10: // VOLUME_CONDITION
          return VOLUME_CONDITION;
        case 11: // MIN_VOLUME
          return MIN_VOLUME;
        case 12: // CONTINGENT_CONDITION
          return CONTINGENT_CONDITION;
        case 13: // STOP_PRICE
          return STOP_PRICE;
        case 14: // FORCE_CLOSE_REASON
          return FORCE_CLOSE_REASON;
        case 15: // IS_AUTO_SUSPEND
          return IS_AUTO_SUSPEND;
        case 16: // BUSINESS_UNIT
          return BUSINESS_UNIT;
        case 17: // REQUEST_ID
          return REQUEST_ID;
        case 18: // USER_FORCE_CLOSE
          return USER_FORCE_CLOSE;
        case 19: // IS_SWAP_ORDER
          return IS_SWAP_ORDER;
        case 20: // SLED_ID
          return SLED_ID;
        case 21: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        case 22: // USER_ID
          return USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERPRICETYPE_ISSET_ID = 0;
  private static final int __DIRECTION_ISSET_ID = 1;
  private static final int __COMBOFFSETFLAG_ISSET_ID = 2;
  private static final int __COMBHEDGEFLAG_ISSET_ID = 3;
  private static final int __LIMITPRICE_ISSET_ID = 4;
  private static final int __VOLUMETOTALORIGINAL_ISSET_ID = 5;
  private static final int __TIMECONDITION_ISSET_ID = 6;
  private static final int __VOLUMECONDITION_ISSET_ID = 7;
  private static final int __MINVOLUME_ISSET_ID = 8;
  private static final int __CONTINGENTCONDITION_ISSET_ID = 9;
  private static final int __STOPPRICE_ISSET_ID = 10;
  private static final int __FORCECLOSEREASON_ISSET_ID = 11;
  private static final int __ISAUTOSUSPEND_ISSET_ID = 12;
  private static final int __REQUESTID_ISSET_ID = 13;
  private static final int __USERFORCECLOSE_ISSET_ID = 14;
  private static final int __ISSWAPORDER_ISSET_ID = 15;
  private static final int __SLEDACCOUNTID_ISSET_ID = 16;
  private static final int __USERID_ISSET_ID = 17;
  private int __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ORDER_PRICE_TYPE,_Fields.COMB_HEDGE_FLAG,_Fields.TIME_CONDITION,_Fields.GTDDATE,_Fields.VOLUME_CONDITION,_Fields.MIN_VOLUME,_Fields.CONTINGENT_CONDITION,_Fields.STOP_PRICE,_Fields.FORCE_CLOSE_REASON,_Fields.IS_AUTO_SUSPEND,_Fields.BUSINESS_UNIT,_Fields.REQUEST_ID,_Fields.USER_FORCE_CLOSE,_Fields.IS_SWAP_ORDER,_Fields.SLED_ACCOUNT_ID,_Fields.USER_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderPriceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COMB_OFFSET_FLAG, new org.apache.thrift.meta_data.FieldMetaData("combOffsetFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COMB_HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("combHedgeFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("limitPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VOLUME_TOTAL_ORIGINAL, new org.apache.thrift.meta_data.FieldMetaData("volumeTotalOriginal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("timeCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.GTDDATE, new org.apache.thrift.meta_data.FieldMetaData("GTDDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VOLUME_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("volumeCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MIN_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("minVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTINGENT_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("contingentCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.STOP_PRICE, new org.apache.thrift.meta_data.FieldMetaData("stopPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FORCE_CLOSE_REASON, new org.apache.thrift.meta_data.FieldMetaData("forceCloseReason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.IS_AUTO_SUSPEND, new org.apache.thrift.meta_data.FieldMetaData("isAutoSuspend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BUSINESS_UNIT, new org.apache.thrift.meta_data.FieldMetaData("businessUnit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_FORCE_CLOSE, new org.apache.thrift.meta_data.FieldMetaData("userForceClose", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_SWAP_ORDER, new org.apache.thrift.meta_data.FieldMetaData("isSwapOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SLED_ID, new org.apache.thrift.meta_data.FieldMetaData("sledId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CtpInputOrderField.class, metaDataMap);
  }

  public CtpInputOrderField() {
  }

  public CtpInputOrderField(
    String instrumentID,
    byte direction,
    byte combOffsetFlag,
    double limitPrice,
    int volumeTotalOriginal,
    String sledId)
  {
    this();
    this.instrumentID = instrumentID;
    this.direction = direction;
    setDirectionIsSet(true);
    this.combOffsetFlag = combOffsetFlag;
    setCombOffsetFlagIsSet(true);
    this.limitPrice = limitPrice;
    setLimitPriceIsSet(true);
    this.volumeTotalOriginal = volumeTotalOriginal;
    setVolumeTotalOriginalIsSet(true);
    this.sledId = sledId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CtpInputOrderField(CtpInputOrderField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    this.orderPriceType = other.orderPriceType;
    this.direction = other.direction;
    this.combOffsetFlag = other.combOffsetFlag;
    this.combHedgeFlag = other.combHedgeFlag;
    this.limitPrice = other.limitPrice;
    this.volumeTotalOriginal = other.volumeTotalOriginal;
    this.timeCondition = other.timeCondition;
    if (other.isSetGTDDate()) {
      this.GTDDate = other.GTDDate;
    }
    this.volumeCondition = other.volumeCondition;
    this.minVolume = other.minVolume;
    this.contingentCondition = other.contingentCondition;
    this.stopPrice = other.stopPrice;
    this.forceCloseReason = other.forceCloseReason;
    this.isAutoSuspend = other.isAutoSuspend;
    if (other.isSetBusinessUnit()) {
      this.businessUnit = other.businessUnit;
    }
    this.requestID = other.requestID;
    this.userForceClose = other.userForceClose;
    this.isSwapOrder = other.isSwapOrder;
    if (other.isSetSledId()) {
      this.sledId = other.sledId;
    }
    this.sledAccountId = other.sledAccountId;
    this.userId = other.userId;
  }

  public CtpInputOrderField deepCopy() {
    return new CtpInputOrderField(this);
  }

  @Override
  public void clear() {
    this.instrumentID = null;
    setOrderPriceTypeIsSet(false);
    this.orderPriceType = 0;
    setDirectionIsSet(false);
    this.direction = 0;
    setCombOffsetFlagIsSet(false);
    this.combOffsetFlag = 0;
    setCombHedgeFlagIsSet(false);
    this.combHedgeFlag = 0;
    setLimitPriceIsSet(false);
    this.limitPrice = 0.0;
    setVolumeTotalOriginalIsSet(false);
    this.volumeTotalOriginal = 0;
    setTimeConditionIsSet(false);
    this.timeCondition = 0;
    this.GTDDate = null;
    setVolumeConditionIsSet(false);
    this.volumeCondition = 0;
    setMinVolumeIsSet(false);
    this.minVolume = 0;
    setContingentConditionIsSet(false);
    this.contingentCondition = 0;
    setStopPriceIsSet(false);
    this.stopPrice = 0.0;
    setForceCloseReasonIsSet(false);
    this.forceCloseReason = 0;
    setIsAutoSuspendIsSet(false);
    this.isAutoSuspend = false;
    this.businessUnit = null;
    setRequestIDIsSet(false);
    this.requestID = 0;
    setUserForceCloseIsSet(false);
    this.userForceClose = false;
    setIsSwapOrderIsSet(false);
    this.isSwapOrder = false;
    this.sledId = null;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CtpInputOrderField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public byte getOrderPriceType() {
    return this.orderPriceType;
  }

  public CtpInputOrderField setOrderPriceType(byte orderPriceType) {
    this.orderPriceType = orderPriceType;
    setOrderPriceTypeIsSet(true);
    return this;
  }

  public void unsetOrderPriceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERPRICETYPE_ISSET_ID);
  }

  /** Returns true if field orderPriceType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderPriceType() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERPRICETYPE_ISSET_ID);
  }

  public void setOrderPriceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERPRICETYPE_ISSET_ID, value);
  }

  public byte getDirection() {
    return this.direction;
  }

  public CtpInputOrderField setDirection(byte direction) {
    this.direction = direction;
    setDirectionIsSet(true);
    return this;
  }

  public void unsetDirection() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return EncodingUtils.testBit(__isset_bitfield, __DIRECTION_ISSET_ID);
  }

  public void setDirectionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIRECTION_ISSET_ID, value);
  }

  public byte getCombOffsetFlag() {
    return this.combOffsetFlag;
  }

  public CtpInputOrderField setCombOffsetFlag(byte combOffsetFlag) {
    this.combOffsetFlag = combOffsetFlag;
    setCombOffsetFlagIsSet(true);
    return this;
  }

  public void unsetCombOffsetFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMBOFFSETFLAG_ISSET_ID);
  }

  /** Returns true if field combOffsetFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCombOffsetFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __COMBOFFSETFLAG_ISSET_ID);
  }

  public void setCombOffsetFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMBOFFSETFLAG_ISSET_ID, value);
  }

  public byte getCombHedgeFlag() {
    return this.combHedgeFlag;
  }

  public CtpInputOrderField setCombHedgeFlag(byte combHedgeFlag) {
    this.combHedgeFlag = combHedgeFlag;
    setCombHedgeFlagIsSet(true);
    return this;
  }

  public void unsetCombHedgeFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMBHEDGEFLAG_ISSET_ID);
  }

  /** Returns true if field combHedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCombHedgeFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __COMBHEDGEFLAG_ISSET_ID);
  }

  public void setCombHedgeFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMBHEDGEFLAG_ISSET_ID, value);
  }

  public double getLimitPrice() {
    return this.limitPrice;
  }

  public CtpInputOrderField setLimitPrice(double limitPrice) {
    this.limitPrice = limitPrice;
    setLimitPriceIsSet(true);
    return this;
  }

  public void unsetLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  /** Returns true if field limitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  public void setLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITPRICE_ISSET_ID, value);
  }

  public int getVolumeTotalOriginal() {
    return this.volumeTotalOriginal;
  }

  public CtpInputOrderField setVolumeTotalOriginal(int volumeTotalOriginal) {
    this.volumeTotalOriginal = volumeTotalOriginal;
    setVolumeTotalOriginalIsSet(true);
    return this;
  }

  public void unsetVolumeTotalOriginal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMETOTALORIGINAL_ISSET_ID);
  }

  /** Returns true if field volumeTotalOriginal is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeTotalOriginal() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMETOTALORIGINAL_ISSET_ID);
  }

  public void setVolumeTotalOriginalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMETOTALORIGINAL_ISSET_ID, value);
  }

  public byte getTimeCondition() {
    return this.timeCondition;
  }

  public CtpInputOrderField setTimeCondition(byte timeCondition) {
    this.timeCondition = timeCondition;
    setTimeConditionIsSet(true);
    return this;
  }

  public void unsetTimeCondition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMECONDITION_ISSET_ID);
  }

  /** Returns true if field timeCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeCondition() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMECONDITION_ISSET_ID);
  }

  public void setTimeConditionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMECONDITION_ISSET_ID, value);
  }

  public String getGTDDate() {
    return this.GTDDate;
  }

  public CtpInputOrderField setGTDDate(String GTDDate) {
    this.GTDDate = GTDDate;
    return this;
  }

  public void unsetGTDDate() {
    this.GTDDate = null;
  }

  /** Returns true if field GTDDate is set (has been assigned a value) and false otherwise */
  public boolean isSetGTDDate() {
    return this.GTDDate != null;
  }

  public void setGTDDateIsSet(boolean value) {
    if (!value) {
      this.GTDDate = null;
    }
  }

  public byte getVolumeCondition() {
    return this.volumeCondition;
  }

  public CtpInputOrderField setVolumeCondition(byte volumeCondition) {
    this.volumeCondition = volumeCondition;
    setVolumeConditionIsSet(true);
    return this;
  }

  public void unsetVolumeCondition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMECONDITION_ISSET_ID);
  }

  /** Returns true if field volumeCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeCondition() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMECONDITION_ISSET_ID);
  }

  public void setVolumeConditionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMECONDITION_ISSET_ID, value);
  }

  public int getMinVolume() {
    return this.minVolume;
  }

  public CtpInputOrderField setMinVolume(int minVolume) {
    this.minVolume = minVolume;
    setMinVolumeIsSet(true);
    return this;
  }

  public void unsetMinVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINVOLUME_ISSET_ID);
  }

  /** Returns true if field minVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMinVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MINVOLUME_ISSET_ID);
  }

  public void setMinVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINVOLUME_ISSET_ID, value);
  }

  public byte getContingentCondition() {
    return this.contingentCondition;
  }

  public CtpInputOrderField setContingentCondition(byte contingentCondition) {
    this.contingentCondition = contingentCondition;
    setContingentConditionIsSet(true);
    return this;
  }

  public void unsetContingentCondition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTINGENTCONDITION_ISSET_ID);
  }

  /** Returns true if field contingentCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetContingentCondition() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTINGENTCONDITION_ISSET_ID);
  }

  public void setContingentConditionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTINGENTCONDITION_ISSET_ID, value);
  }

  public double getStopPrice() {
    return this.stopPrice;
  }

  public CtpInputOrderField setStopPrice(double stopPrice) {
    this.stopPrice = stopPrice;
    setStopPriceIsSet(true);
    return this;
  }

  public void unsetStopPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPPRICE_ISSET_ID);
  }

  /** Returns true if field stopPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetStopPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __STOPPRICE_ISSET_ID);
  }

  public void setStopPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPPRICE_ISSET_ID, value);
  }

  public byte getForceCloseReason() {
    return this.forceCloseReason;
  }

  public CtpInputOrderField setForceCloseReason(byte forceCloseReason) {
    this.forceCloseReason = forceCloseReason;
    setForceCloseReasonIsSet(true);
    return this;
  }

  public void unsetForceCloseReason() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORCECLOSEREASON_ISSET_ID);
  }

  /** Returns true if field forceCloseReason is set (has been assigned a value) and false otherwise */
  public boolean isSetForceCloseReason() {
    return EncodingUtils.testBit(__isset_bitfield, __FORCECLOSEREASON_ISSET_ID);
  }

  public void setForceCloseReasonIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORCECLOSEREASON_ISSET_ID, value);
  }

  public boolean isIsAutoSuspend() {
    return this.isAutoSuspend;
  }

  public CtpInputOrderField setIsAutoSuspend(boolean isAutoSuspend) {
    this.isAutoSuspend = isAutoSuspend;
    setIsAutoSuspendIsSet(true);
    return this;
  }

  public void unsetIsAutoSuspend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAUTOSUSPEND_ISSET_ID);
  }

  /** Returns true if field isAutoSuspend is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAutoSuspend() {
    return EncodingUtils.testBit(__isset_bitfield, __ISAUTOSUSPEND_ISSET_ID);
  }

  public void setIsAutoSuspendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAUTOSUSPEND_ISSET_ID, value);
  }

  public String getBusinessUnit() {
    return this.businessUnit;
  }

  public CtpInputOrderField setBusinessUnit(String businessUnit) {
    this.businessUnit = businessUnit;
    return this;
  }

  public void unsetBusinessUnit() {
    this.businessUnit = null;
  }

  /** Returns true if field businessUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessUnit() {
    return this.businessUnit != null;
  }

  public void setBusinessUnitIsSet(boolean value) {
    if (!value) {
      this.businessUnit = null;
    }
  }

  public int getRequestID() {
    return this.requestID;
  }

  public CtpInputOrderField setRequestID(int requestID) {
    this.requestID = requestID;
    setRequestIDIsSet(true);
    return this;
  }

  public void unsetRequestID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestID() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  public boolean isUserForceClose() {
    return this.userForceClose;
  }

  public CtpInputOrderField setUserForceClose(boolean userForceClose) {
    this.userForceClose = userForceClose;
    setUserForceCloseIsSet(true);
    return this;
  }

  public void unsetUserForceClose() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERFORCECLOSE_ISSET_ID);
  }

  /** Returns true if field userForceClose is set (has been assigned a value) and false otherwise */
  public boolean isSetUserForceClose() {
    return EncodingUtils.testBit(__isset_bitfield, __USERFORCECLOSE_ISSET_ID);
  }

  public void setUserForceCloseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERFORCECLOSE_ISSET_ID, value);
  }

  public boolean isIsSwapOrder() {
    return this.isSwapOrder;
  }

  public CtpInputOrderField setIsSwapOrder(boolean isSwapOrder) {
    this.isSwapOrder = isSwapOrder;
    setIsSwapOrderIsSet(true);
    return this;
  }

  public void unsetIsSwapOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSWAPORDER_ISSET_ID);
  }

  /** Returns true if field isSwapOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSwapOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSWAPORDER_ISSET_ID);
  }

  public void setIsSwapOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSWAPORDER_ISSET_ID, value);
  }

  public String getSledId() {
    return this.sledId;
  }

  public CtpInputOrderField setSledId(String sledId) {
    this.sledId = sledId;
    return this;
  }

  public void unsetSledId() {
    this.sledId = null;
  }

  /** Returns true if field sledId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledId() {
    return this.sledId != null;
  }

  public void setSledIdIsSet(boolean value) {
    if (!value) {
      this.sledId = null;
    }
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public CtpInputOrderField setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public CtpInputOrderField setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case ORDER_PRICE_TYPE:
      if (value == null) {
        unsetOrderPriceType();
      } else {
        setOrderPriceType((Byte)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((Byte)value);
      }
      break;

    case COMB_OFFSET_FLAG:
      if (value == null) {
        unsetCombOffsetFlag();
      } else {
        setCombOffsetFlag((Byte)value);
      }
      break;

    case COMB_HEDGE_FLAG:
      if (value == null) {
        unsetCombHedgeFlag();
      } else {
        setCombHedgeFlag((Byte)value);
      }
      break;

    case LIMIT_PRICE:
      if (value == null) {
        unsetLimitPrice();
      } else {
        setLimitPrice((Double)value);
      }
      break;

    case VOLUME_TOTAL_ORIGINAL:
      if (value == null) {
        unsetVolumeTotalOriginal();
      } else {
        setVolumeTotalOriginal((Integer)value);
      }
      break;

    case TIME_CONDITION:
      if (value == null) {
        unsetTimeCondition();
      } else {
        setTimeCondition((Byte)value);
      }
      break;

    case GTDDATE:
      if (value == null) {
        unsetGTDDate();
      } else {
        setGTDDate((String)value);
      }
      break;

    case VOLUME_CONDITION:
      if (value == null) {
        unsetVolumeCondition();
      } else {
        setVolumeCondition((Byte)value);
      }
      break;

    case MIN_VOLUME:
      if (value == null) {
        unsetMinVolume();
      } else {
        setMinVolume((Integer)value);
      }
      break;

    case CONTINGENT_CONDITION:
      if (value == null) {
        unsetContingentCondition();
      } else {
        setContingentCondition((Byte)value);
      }
      break;

    case STOP_PRICE:
      if (value == null) {
        unsetStopPrice();
      } else {
        setStopPrice((Double)value);
      }
      break;

    case FORCE_CLOSE_REASON:
      if (value == null) {
        unsetForceCloseReason();
      } else {
        setForceCloseReason((Byte)value);
      }
      break;

    case IS_AUTO_SUSPEND:
      if (value == null) {
        unsetIsAutoSuspend();
      } else {
        setIsAutoSuspend((Boolean)value);
      }
      break;

    case BUSINESS_UNIT:
      if (value == null) {
        unsetBusinessUnit();
      } else {
        setBusinessUnit((String)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestID();
      } else {
        setRequestID((Integer)value);
      }
      break;

    case USER_FORCE_CLOSE:
      if (value == null) {
        unsetUserForceClose();
      } else {
        setUserForceClose((Boolean)value);
      }
      break;

    case IS_SWAP_ORDER:
      if (value == null) {
        unsetIsSwapOrder();
      } else {
        setIsSwapOrder((Boolean)value);
      }
      break;

    case SLED_ID:
      if (value == null) {
        unsetSledId();
      } else {
        setSledId((String)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTRUMENT_ID:
      return getInstrumentID();

    case ORDER_PRICE_TYPE:
      return Byte.valueOf(getOrderPriceType());

    case DIRECTION:
      return Byte.valueOf(getDirection());

    case COMB_OFFSET_FLAG:
      return Byte.valueOf(getCombOffsetFlag());

    case COMB_HEDGE_FLAG:
      return Byte.valueOf(getCombHedgeFlag());

    case LIMIT_PRICE:
      return Double.valueOf(getLimitPrice());

    case VOLUME_TOTAL_ORIGINAL:
      return Integer.valueOf(getVolumeTotalOriginal());

    case TIME_CONDITION:
      return Byte.valueOf(getTimeCondition());

    case GTDDATE:
      return getGTDDate();

    case VOLUME_CONDITION:
      return Byte.valueOf(getVolumeCondition());

    case MIN_VOLUME:
      return Integer.valueOf(getMinVolume());

    case CONTINGENT_CONDITION:
      return Byte.valueOf(getContingentCondition());

    case STOP_PRICE:
      return Double.valueOf(getStopPrice());

    case FORCE_CLOSE_REASON:
      return Byte.valueOf(getForceCloseReason());

    case IS_AUTO_SUSPEND:
      return Boolean.valueOf(isIsAutoSuspend());

    case BUSINESS_UNIT:
      return getBusinessUnit();

    case REQUEST_ID:
      return Integer.valueOf(getRequestID());

    case USER_FORCE_CLOSE:
      return Boolean.valueOf(isUserForceClose());

    case IS_SWAP_ORDER:
      return Boolean.valueOf(isIsSwapOrder());

    case SLED_ID:
      return getSledId();

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case ORDER_PRICE_TYPE:
      return isSetOrderPriceType();
    case DIRECTION:
      return isSetDirection();
    case COMB_OFFSET_FLAG:
      return isSetCombOffsetFlag();
    case COMB_HEDGE_FLAG:
      return isSetCombHedgeFlag();
    case LIMIT_PRICE:
      return isSetLimitPrice();
    case VOLUME_TOTAL_ORIGINAL:
      return isSetVolumeTotalOriginal();
    case TIME_CONDITION:
      return isSetTimeCondition();
    case GTDDATE:
      return isSetGTDDate();
    case VOLUME_CONDITION:
      return isSetVolumeCondition();
    case MIN_VOLUME:
      return isSetMinVolume();
    case CONTINGENT_CONDITION:
      return isSetContingentCondition();
    case STOP_PRICE:
      return isSetStopPrice();
    case FORCE_CLOSE_REASON:
      return isSetForceCloseReason();
    case IS_AUTO_SUSPEND:
      return isSetIsAutoSuspend();
    case BUSINESS_UNIT:
      return isSetBusinessUnit();
    case REQUEST_ID:
      return isSetRequestID();
    case USER_FORCE_CLOSE:
      return isSetUserForceClose();
    case IS_SWAP_ORDER:
      return isSetIsSwapOrder();
    case SLED_ID:
      return isSetSledId();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    case USER_ID:
      return isSetUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CtpInputOrderField)
      return this.equals((CtpInputOrderField)that);
    return false;
  }

  public boolean equals(CtpInputOrderField that) {
    if (that == null)
      return false;

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_orderPriceType = true && this.isSetOrderPriceType();
    boolean that_present_orderPriceType = true && that.isSetOrderPriceType();
    if (this_present_orderPriceType || that_present_orderPriceType) {
      if (!(this_present_orderPriceType && that_present_orderPriceType))
        return false;
      if (this.orderPriceType != that.orderPriceType)
        return false;
    }

    boolean this_present_direction = true;
    boolean that_present_direction = true;
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (this.direction != that.direction)
        return false;
    }

    boolean this_present_combOffsetFlag = true;
    boolean that_present_combOffsetFlag = true;
    if (this_present_combOffsetFlag || that_present_combOffsetFlag) {
      if (!(this_present_combOffsetFlag && that_present_combOffsetFlag))
        return false;
      if (this.combOffsetFlag != that.combOffsetFlag)
        return false;
    }

    boolean this_present_combHedgeFlag = true && this.isSetCombHedgeFlag();
    boolean that_present_combHedgeFlag = true && that.isSetCombHedgeFlag();
    if (this_present_combHedgeFlag || that_present_combHedgeFlag) {
      if (!(this_present_combHedgeFlag && that_present_combHedgeFlag))
        return false;
      if (this.combHedgeFlag != that.combHedgeFlag)
        return false;
    }

    boolean this_present_limitPrice = true;
    boolean that_present_limitPrice = true;
    if (this_present_limitPrice || that_present_limitPrice) {
      if (!(this_present_limitPrice && that_present_limitPrice))
        return false;
      if (this.limitPrice != that.limitPrice)
        return false;
    }

    boolean this_present_volumeTotalOriginal = true;
    boolean that_present_volumeTotalOriginal = true;
    if (this_present_volumeTotalOriginal || that_present_volumeTotalOriginal) {
      if (!(this_present_volumeTotalOriginal && that_present_volumeTotalOriginal))
        return false;
      if (this.volumeTotalOriginal != that.volumeTotalOriginal)
        return false;
    }

    boolean this_present_timeCondition = true && this.isSetTimeCondition();
    boolean that_present_timeCondition = true && that.isSetTimeCondition();
    if (this_present_timeCondition || that_present_timeCondition) {
      if (!(this_present_timeCondition && that_present_timeCondition))
        return false;
      if (this.timeCondition != that.timeCondition)
        return false;
    }

    boolean this_present_GTDDate = true && this.isSetGTDDate();
    boolean that_present_GTDDate = true && that.isSetGTDDate();
    if (this_present_GTDDate || that_present_GTDDate) {
      if (!(this_present_GTDDate && that_present_GTDDate))
        return false;
      if (!this.GTDDate.equals(that.GTDDate))
        return false;
    }

    boolean this_present_volumeCondition = true && this.isSetVolumeCondition();
    boolean that_present_volumeCondition = true && that.isSetVolumeCondition();
    if (this_present_volumeCondition || that_present_volumeCondition) {
      if (!(this_present_volumeCondition && that_present_volumeCondition))
        return false;
      if (this.volumeCondition != that.volumeCondition)
        return false;
    }

    boolean this_present_minVolume = true && this.isSetMinVolume();
    boolean that_present_minVolume = true && that.isSetMinVolume();
    if (this_present_minVolume || that_present_minVolume) {
      if (!(this_present_minVolume && that_present_minVolume))
        return false;
      if (this.minVolume != that.minVolume)
        return false;
    }

    boolean this_present_contingentCondition = true && this.isSetContingentCondition();
    boolean that_present_contingentCondition = true && that.isSetContingentCondition();
    if (this_present_contingentCondition || that_present_contingentCondition) {
      if (!(this_present_contingentCondition && that_present_contingentCondition))
        return false;
      if (this.contingentCondition != that.contingentCondition)
        return false;
    }

    boolean this_present_stopPrice = true && this.isSetStopPrice();
    boolean that_present_stopPrice = true && that.isSetStopPrice();
    if (this_present_stopPrice || that_present_stopPrice) {
      if (!(this_present_stopPrice && that_present_stopPrice))
        return false;
      if (this.stopPrice != that.stopPrice)
        return false;
    }

    boolean this_present_forceCloseReason = true && this.isSetForceCloseReason();
    boolean that_present_forceCloseReason = true && that.isSetForceCloseReason();
    if (this_present_forceCloseReason || that_present_forceCloseReason) {
      if (!(this_present_forceCloseReason && that_present_forceCloseReason))
        return false;
      if (this.forceCloseReason != that.forceCloseReason)
        return false;
    }

    boolean this_present_isAutoSuspend = true && this.isSetIsAutoSuspend();
    boolean that_present_isAutoSuspend = true && that.isSetIsAutoSuspend();
    if (this_present_isAutoSuspend || that_present_isAutoSuspend) {
      if (!(this_present_isAutoSuspend && that_present_isAutoSuspend))
        return false;
      if (this.isAutoSuspend != that.isAutoSuspend)
        return false;
    }

    boolean this_present_businessUnit = true && this.isSetBusinessUnit();
    boolean that_present_businessUnit = true && that.isSetBusinessUnit();
    if (this_present_businessUnit || that_present_businessUnit) {
      if (!(this_present_businessUnit && that_present_businessUnit))
        return false;
      if (!this.businessUnit.equals(that.businessUnit))
        return false;
    }

    boolean this_present_requestID = true && this.isSetRequestID();
    boolean that_present_requestID = true && that.isSetRequestID();
    if (this_present_requestID || that_present_requestID) {
      if (!(this_present_requestID && that_present_requestID))
        return false;
      if (this.requestID != that.requestID)
        return false;
    }

    boolean this_present_userForceClose = true && this.isSetUserForceClose();
    boolean that_present_userForceClose = true && that.isSetUserForceClose();
    if (this_present_userForceClose || that_present_userForceClose) {
      if (!(this_present_userForceClose && that_present_userForceClose))
        return false;
      if (this.userForceClose != that.userForceClose)
        return false;
    }

    boolean this_present_isSwapOrder = true && this.isSetIsSwapOrder();
    boolean that_present_isSwapOrder = true && that.isSetIsSwapOrder();
    if (this_present_isSwapOrder || that_present_isSwapOrder) {
      if (!(this_present_isSwapOrder && that_present_isSwapOrder))
        return false;
      if (this.isSwapOrder != that.isSwapOrder)
        return false;
    }

    boolean this_present_sledId = true && this.isSetSledId();
    boolean that_present_sledId = true && that.isSetSledId();
    if (this_present_sledId || that_present_sledId) {
      if (!(this_present_sledId && that_present_sledId))
        return false;
      if (!this.sledId.equals(that.sledId))
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CtpInputOrderField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderPriceType()).compareTo(other.isSetOrderPriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderPriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderPriceType, other.orderPriceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombOffsetFlag()).compareTo(other.isSetCombOffsetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombOffsetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combOffsetFlag, other.combOffsetFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombHedgeFlag()).compareTo(other.isSetCombHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combHedgeFlag, other.combHedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitPrice()).compareTo(other.isSetLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitPrice, other.limitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeTotalOriginal()).compareTo(other.isSetVolumeTotalOriginal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeTotalOriginal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeTotalOriginal, other.volumeTotalOriginal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeCondition()).compareTo(other.isSetTimeCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeCondition, other.timeCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGTDDate()).compareTo(other.isSetGTDDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGTDDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GTDDate, other.GTDDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeCondition()).compareTo(other.isSetVolumeCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeCondition, other.volumeCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinVolume()).compareTo(other.isSetMinVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minVolume, other.minVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContingentCondition()).compareTo(other.isSetContingentCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContingentCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contingentCondition, other.contingentCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopPrice()).compareTo(other.isSetStopPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopPrice, other.stopPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForceCloseReason()).compareTo(other.isSetForceCloseReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForceCloseReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forceCloseReason, other.forceCloseReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAutoSuspend()).compareTo(other.isSetIsAutoSuspend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAutoSuspend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAutoSuspend, other.isAutoSuspend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessUnit()).compareTo(other.isSetBusinessUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessUnit, other.businessUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestID()).compareTo(other.isSetRequestID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserForceClose()).compareTo(other.isSetUserForceClose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserForceClose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userForceClose, other.userForceClose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSwapOrder()).compareTo(other.isSetIsSwapOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSwapOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSwapOrder, other.isSwapOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledId()).compareTo(other.isSetSledId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledId, other.sledId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CtpInputOrderField(");
    boolean first = true;

    sb.append("instrumentID:");
    if (this.instrumentID == null) {
      sb.append("null");
    } else {
      sb.append(this.instrumentID);
    }
    first = false;
    if (isSetOrderPriceType()) {
      if (!first) sb.append(", ");
      sb.append("orderPriceType:");
      sb.append(this.orderPriceType);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("direction:");
    sb.append(this.direction);
    first = false;
    if (!first) sb.append(", ");
    sb.append("combOffsetFlag:");
    sb.append(this.combOffsetFlag);
    first = false;
    if (isSetCombHedgeFlag()) {
      if (!first) sb.append(", ");
      sb.append("combHedgeFlag:");
      sb.append(this.combHedgeFlag);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("limitPrice:");
    sb.append(this.limitPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("volumeTotalOriginal:");
    sb.append(this.volumeTotalOriginal);
    first = false;
    if (isSetTimeCondition()) {
      if (!first) sb.append(", ");
      sb.append("timeCondition:");
      sb.append(this.timeCondition);
      first = false;
    }
    if (isSetGTDDate()) {
      if (!first) sb.append(", ");
      sb.append("GTDDate:");
      if (this.GTDDate == null) {
        sb.append("null");
      } else {
        sb.append(this.GTDDate);
      }
      first = false;
    }
    if (isSetVolumeCondition()) {
      if (!first) sb.append(", ");
      sb.append("volumeCondition:");
      sb.append(this.volumeCondition);
      first = false;
    }
    if (isSetMinVolume()) {
      if (!first) sb.append(", ");
      sb.append("minVolume:");
      sb.append(this.minVolume);
      first = false;
    }
    if (isSetContingentCondition()) {
      if (!first) sb.append(", ");
      sb.append("contingentCondition:");
      sb.append(this.contingentCondition);
      first = false;
    }
    if (isSetStopPrice()) {
      if (!first) sb.append(", ");
      sb.append("stopPrice:");
      sb.append(this.stopPrice);
      first = false;
    }
    if (isSetForceCloseReason()) {
      if (!first) sb.append(", ");
      sb.append("forceCloseReason:");
      sb.append(this.forceCloseReason);
      first = false;
    }
    if (isSetIsAutoSuspend()) {
      if (!first) sb.append(", ");
      sb.append("isAutoSuspend:");
      sb.append(this.isAutoSuspend);
      first = false;
    }
    if (isSetBusinessUnit()) {
      if (!first) sb.append(", ");
      sb.append("businessUnit:");
      if (this.businessUnit == null) {
        sb.append("null");
      } else {
        sb.append(this.businessUnit);
      }
      first = false;
    }
    if (isSetRequestID()) {
      if (!first) sb.append(", ");
      sb.append("requestID:");
      sb.append(this.requestID);
      first = false;
    }
    if (isSetUserForceClose()) {
      if (!first) sb.append(", ");
      sb.append("userForceClose:");
      sb.append(this.userForceClose);
      first = false;
    }
    if (isSetIsSwapOrder()) {
      if (!first) sb.append(", ");
      sb.append("isSwapOrder:");
      sb.append(this.isSwapOrder);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sledId:");
    if (this.sledId == null) {
      sb.append("null");
    } else {
      sb.append(this.sledId);
    }
    first = false;
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (instrumentID == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'instrumentID' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'direction' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'combOffsetFlag' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'limitPrice' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'volumeTotalOriginal' because it's a primitive and you chose the non-beans generator.
    if (sledId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sledId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CtpInputOrderFieldStandardSchemeFactory implements SchemeFactory {
    public CtpInputOrderFieldStandardScheme getScheme() {
      return new CtpInputOrderFieldStandardScheme();
    }
  }

  private static class CtpInputOrderFieldStandardScheme extends StandardScheme<CtpInputOrderField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CtpInputOrderField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.orderPriceType = iprot.readByte();
              struct.setOrderPriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.direction = iprot.readByte();
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMB_OFFSET_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.combOffsetFlag = iprot.readByte();
              struct.setCombOffsetFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMB_HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.combHedgeFlag = iprot.readByte();
              struct.setCombHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.limitPrice = iprot.readDouble();
              struct.setLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VOLUME_TOTAL_ORIGINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volumeTotalOriginal = iprot.readI32();
              struct.setVolumeTotalOriginalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TIME_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.timeCondition = iprot.readByte();
              struct.setTimeConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GTDDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.GTDDate = iprot.readString();
              struct.setGTDDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VOLUME_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.volumeCondition = iprot.readByte();
              struct.setVolumeConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MIN_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minVolume = iprot.readI32();
              struct.setMinVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CONTINGENT_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.contingentCondition = iprot.readByte();
              struct.setContingentConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STOP_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.stopPrice = iprot.readDouble();
              struct.setStopPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FORCE_CLOSE_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.forceCloseReason = iprot.readByte();
              struct.setForceCloseReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IS_AUTO_SUSPEND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAutoSuspend = iprot.readBool();
              struct.setIsAutoSuspendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BUSINESS_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessUnit = iprot.readString();
              struct.setBusinessUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestID = iprot.readI32();
              struct.setRequestIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // USER_FORCE_CLOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.userForceClose = iprot.readBool();
              struct.setUserForceCloseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // IS_SWAP_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSwapOrder = iprot.readBool();
              struct.setIsSwapOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SLED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledId = iprot.readString();
              struct.setSledIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDirection()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'direction' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCombOffsetFlag()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'combOffsetFlag' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLimitPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'limitPrice' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVolumeTotalOriginal()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'volumeTotalOriginal' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CtpInputOrderField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instrumentID != null) {
        oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
        oprot.writeString(struct.instrumentID);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderPriceType()) {
        oprot.writeFieldBegin(ORDER_PRICE_TYPE_FIELD_DESC);
        oprot.writeByte(struct.orderPriceType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
      oprot.writeByte(struct.direction);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMB_OFFSET_FLAG_FIELD_DESC);
      oprot.writeByte(struct.combOffsetFlag);
      oprot.writeFieldEnd();
      if (struct.isSetCombHedgeFlag()) {
        oprot.writeFieldBegin(COMB_HEDGE_FLAG_FIELD_DESC);
        oprot.writeByte(struct.combHedgeFlag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIMIT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.limitPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOLUME_TOTAL_ORIGINAL_FIELD_DESC);
      oprot.writeI32(struct.volumeTotalOriginal);
      oprot.writeFieldEnd();
      if (struct.isSetTimeCondition()) {
        oprot.writeFieldBegin(TIME_CONDITION_FIELD_DESC);
        oprot.writeByte(struct.timeCondition);
        oprot.writeFieldEnd();
      }
      if (struct.GTDDate != null) {
        if (struct.isSetGTDDate()) {
          oprot.writeFieldBegin(GTDDATE_FIELD_DESC);
          oprot.writeString(struct.GTDDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVolumeCondition()) {
        oprot.writeFieldBegin(VOLUME_CONDITION_FIELD_DESC);
        oprot.writeByte(struct.volumeCondition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinVolume()) {
        oprot.writeFieldBegin(MIN_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.minVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetContingentCondition()) {
        oprot.writeFieldBegin(CONTINGENT_CONDITION_FIELD_DESC);
        oprot.writeByte(struct.contingentCondition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStopPrice()) {
        oprot.writeFieldBegin(STOP_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.stopPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetForceCloseReason()) {
        oprot.writeFieldBegin(FORCE_CLOSE_REASON_FIELD_DESC);
        oprot.writeByte(struct.forceCloseReason);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsAutoSuspend()) {
        oprot.writeFieldBegin(IS_AUTO_SUSPEND_FIELD_DESC);
        oprot.writeBool(struct.isAutoSuspend);
        oprot.writeFieldEnd();
      }
      if (struct.businessUnit != null) {
        if (struct.isSetBusinessUnit()) {
          oprot.writeFieldBegin(BUSINESS_UNIT_FIELD_DESC);
          oprot.writeString(struct.businessUnit);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRequestID()) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestID);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserForceClose()) {
        oprot.writeFieldBegin(USER_FORCE_CLOSE_FIELD_DESC);
        oprot.writeBool(struct.userForceClose);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsSwapOrder()) {
        oprot.writeFieldBegin(IS_SWAP_ORDER_FIELD_DESC);
        oprot.writeBool(struct.isSwapOrder);
        oprot.writeFieldEnd();
      }
      if (struct.sledId != null) {
        oprot.writeFieldBegin(SLED_ID_FIELD_DESC);
        oprot.writeString(struct.sledId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CtpInputOrderFieldTupleSchemeFactory implements SchemeFactory {
    public CtpInputOrderFieldTupleScheme getScheme() {
      return new CtpInputOrderFieldTupleScheme();
    }
  }

  private static class CtpInputOrderFieldTupleScheme extends TupleScheme<CtpInputOrderField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CtpInputOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.instrumentID);
      oprot.writeByte(struct.direction);
      oprot.writeByte(struct.combOffsetFlag);
      oprot.writeDouble(struct.limitPrice);
      oprot.writeI32(struct.volumeTotalOriginal);
      oprot.writeString(struct.sledId);
      BitSet optionals = new BitSet();
      if (struct.isSetOrderPriceType()) {
        optionals.set(0);
      }
      if (struct.isSetCombHedgeFlag()) {
        optionals.set(1);
      }
      if (struct.isSetTimeCondition()) {
        optionals.set(2);
      }
      if (struct.isSetGTDDate()) {
        optionals.set(3);
      }
      if (struct.isSetVolumeCondition()) {
        optionals.set(4);
      }
      if (struct.isSetMinVolume()) {
        optionals.set(5);
      }
      if (struct.isSetContingentCondition()) {
        optionals.set(6);
      }
      if (struct.isSetStopPrice()) {
        optionals.set(7);
      }
      if (struct.isSetForceCloseReason()) {
        optionals.set(8);
      }
      if (struct.isSetIsAutoSuspend()) {
        optionals.set(9);
      }
      if (struct.isSetBusinessUnit()) {
        optionals.set(10);
      }
      if (struct.isSetRequestID()) {
        optionals.set(11);
      }
      if (struct.isSetUserForceClose()) {
        optionals.set(12);
      }
      if (struct.isSetIsSwapOrder()) {
        optionals.set(13);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(14);
      }
      if (struct.isSetUserId()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetOrderPriceType()) {
        oprot.writeByte(struct.orderPriceType);
      }
      if (struct.isSetCombHedgeFlag()) {
        oprot.writeByte(struct.combHedgeFlag);
      }
      if (struct.isSetTimeCondition()) {
        oprot.writeByte(struct.timeCondition);
      }
      if (struct.isSetGTDDate()) {
        oprot.writeString(struct.GTDDate);
      }
      if (struct.isSetVolumeCondition()) {
        oprot.writeByte(struct.volumeCondition);
      }
      if (struct.isSetMinVolume()) {
        oprot.writeI32(struct.minVolume);
      }
      if (struct.isSetContingentCondition()) {
        oprot.writeByte(struct.contingentCondition);
      }
      if (struct.isSetStopPrice()) {
        oprot.writeDouble(struct.stopPrice);
      }
      if (struct.isSetForceCloseReason()) {
        oprot.writeByte(struct.forceCloseReason);
      }
      if (struct.isSetIsAutoSuspend()) {
        oprot.writeBool(struct.isAutoSuspend);
      }
      if (struct.isSetBusinessUnit()) {
        oprot.writeString(struct.businessUnit);
      }
      if (struct.isSetRequestID()) {
        oprot.writeI32(struct.requestID);
      }
      if (struct.isSetUserForceClose()) {
        oprot.writeBool(struct.userForceClose);
      }
      if (struct.isSetIsSwapOrder()) {
        oprot.writeBool(struct.isSwapOrder);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CtpInputOrderField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.instrumentID = iprot.readString();
      struct.setInstrumentIDIsSet(true);
      struct.direction = iprot.readByte();
      struct.setDirectionIsSet(true);
      struct.combOffsetFlag = iprot.readByte();
      struct.setCombOffsetFlagIsSet(true);
      struct.limitPrice = iprot.readDouble();
      struct.setLimitPriceIsSet(true);
      struct.volumeTotalOriginal = iprot.readI32();
      struct.setVolumeTotalOriginalIsSet(true);
      struct.sledId = iprot.readString();
      struct.setSledIdIsSet(true);
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.orderPriceType = iprot.readByte();
        struct.setOrderPriceTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.combHedgeFlag = iprot.readByte();
        struct.setCombHedgeFlagIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timeCondition = iprot.readByte();
        struct.setTimeConditionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.GTDDate = iprot.readString();
        struct.setGTDDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.volumeCondition = iprot.readByte();
        struct.setVolumeConditionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.minVolume = iprot.readI32();
        struct.setMinVolumeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.contingentCondition = iprot.readByte();
        struct.setContingentConditionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.stopPrice = iprot.readDouble();
        struct.setStopPriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.forceCloseReason = iprot.readByte();
        struct.setForceCloseReasonIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isAutoSuspend = iprot.readBool();
        struct.setIsAutoSuspendIsSet(true);
      }
      if (incoming.get(10)) {
        struct.businessUnit = iprot.readString();
        struct.setBusinessUnitIsSet(true);
      }
      if (incoming.get(11)) {
        struct.requestID = iprot.readI32();
        struct.setRequestIDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.userForceClose = iprot.readBool();
        struct.setUserForceCloseIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isSwapOrder = iprot.readBool();
        struct.setIsSwapOrderIsSet(true);
      }
      if (incoming.get(14)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
    }
  }

}

