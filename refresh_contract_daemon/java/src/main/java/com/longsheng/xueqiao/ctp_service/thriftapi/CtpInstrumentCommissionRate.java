/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.ctp_service.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CtpInstrumentCommissionRate implements org.apache.thrift.TBase<CtpInstrumentCommissionRate, CtpInstrumentCommissionRate._Fields>, java.io.Serializable, Cloneable, Comparable<CtpInstrumentCommissionRate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CtpInstrumentCommissionRate");

  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INVESTOR_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("investorRange", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField OPEN_RATIO_BY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("openRatioByMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField OPEN_RATIO_BY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("openRatioByVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField CLOSE_RATIO_BY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("closeRatioByMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField CLOSE_RATIO_BY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("closeRatioByVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField CLOSE_TODAY_RATIO_BY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("closeTodayRatioByMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField CLOSE_TODAY_RATIO_BY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("closeTodayRatioByVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CtpInstrumentCommissionRateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CtpInstrumentCommissionRateTupleSchemeFactory());
  }

  public String instrumentID; // optional
  public byte investorRange; // optional
  public double openRatioByMoney; // optional
  public double openRatioByVolume; // optional
  public double closeRatioByMoney; // optional
  public double closeRatioByVolume; // optional
  public double closeTodayRatioByMoney; // optional
  public double closeTodayRatioByVolume; // optional
  public int sledAccountId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTRUMENT_ID((short)1, "instrumentID"),
    INVESTOR_RANGE((short)2, "investorRange"),
    OPEN_RATIO_BY_MONEY((short)3, "openRatioByMoney"),
    OPEN_RATIO_BY_VOLUME((short)4, "openRatioByVolume"),
    CLOSE_RATIO_BY_MONEY((short)5, "closeRatioByMoney"),
    CLOSE_RATIO_BY_VOLUME((short)6, "closeRatioByVolume"),
    CLOSE_TODAY_RATIO_BY_MONEY((short)7, "closeTodayRatioByMoney"),
    CLOSE_TODAY_RATIO_BY_VOLUME((short)9, "closeTodayRatioByVolume"),
    SLED_ACCOUNT_ID((short)10, "sledAccountId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 2: // INVESTOR_RANGE
          return INVESTOR_RANGE;
        case 3: // OPEN_RATIO_BY_MONEY
          return OPEN_RATIO_BY_MONEY;
        case 4: // OPEN_RATIO_BY_VOLUME
          return OPEN_RATIO_BY_VOLUME;
        case 5: // CLOSE_RATIO_BY_MONEY
          return CLOSE_RATIO_BY_MONEY;
        case 6: // CLOSE_RATIO_BY_VOLUME
          return CLOSE_RATIO_BY_VOLUME;
        case 7: // CLOSE_TODAY_RATIO_BY_MONEY
          return CLOSE_TODAY_RATIO_BY_MONEY;
        case 9: // CLOSE_TODAY_RATIO_BY_VOLUME
          return CLOSE_TODAY_RATIO_BY_VOLUME;
        case 10: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INVESTORRANGE_ISSET_ID = 0;
  private static final int __OPENRATIOBYMONEY_ISSET_ID = 1;
  private static final int __OPENRATIOBYVOLUME_ISSET_ID = 2;
  private static final int __CLOSERATIOBYMONEY_ISSET_ID = 3;
  private static final int __CLOSERATIOBYVOLUME_ISSET_ID = 4;
  private static final int __CLOSETODAYRATIOBYMONEY_ISSET_ID = 5;
  private static final int __CLOSETODAYRATIOBYVOLUME_ISSET_ID = 6;
  private static final int __SLEDACCOUNTID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.INSTRUMENT_ID,_Fields.INVESTOR_RANGE,_Fields.OPEN_RATIO_BY_MONEY,_Fields.OPEN_RATIO_BY_VOLUME,_Fields.CLOSE_RATIO_BY_MONEY,_Fields.CLOSE_RATIO_BY_VOLUME,_Fields.CLOSE_TODAY_RATIO_BY_MONEY,_Fields.CLOSE_TODAY_RATIO_BY_VOLUME,_Fields.SLED_ACCOUNT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVESTOR_RANGE, new org.apache.thrift.meta_data.FieldMetaData("investorRange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.OPEN_RATIO_BY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("openRatioByMoney", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPEN_RATIO_BY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("openRatioByVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_RATIO_BY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("closeRatioByMoney", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_RATIO_BY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("closeRatioByVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_TODAY_RATIO_BY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("closeTodayRatioByMoney", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_TODAY_RATIO_BY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("closeTodayRatioByVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CtpInstrumentCommissionRate.class, metaDataMap);
  }

  public CtpInstrumentCommissionRate() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CtpInstrumentCommissionRate(CtpInstrumentCommissionRate other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    this.investorRange = other.investorRange;
    this.openRatioByMoney = other.openRatioByMoney;
    this.openRatioByVolume = other.openRatioByVolume;
    this.closeRatioByMoney = other.closeRatioByMoney;
    this.closeRatioByVolume = other.closeRatioByVolume;
    this.closeTodayRatioByMoney = other.closeTodayRatioByMoney;
    this.closeTodayRatioByVolume = other.closeTodayRatioByVolume;
    this.sledAccountId = other.sledAccountId;
  }

  public CtpInstrumentCommissionRate deepCopy() {
    return new CtpInstrumentCommissionRate(this);
  }

  @Override
  public void clear() {
    this.instrumentID = null;
    setInvestorRangeIsSet(false);
    this.investorRange = 0;
    setOpenRatioByMoneyIsSet(false);
    this.openRatioByMoney = 0.0;
    setOpenRatioByVolumeIsSet(false);
    this.openRatioByVolume = 0.0;
    setCloseRatioByMoneyIsSet(false);
    this.closeRatioByMoney = 0.0;
    setCloseRatioByVolumeIsSet(false);
    this.closeRatioByVolume = 0.0;
    setCloseTodayRatioByMoneyIsSet(false);
    this.closeTodayRatioByMoney = 0.0;
    setCloseTodayRatioByVolumeIsSet(false);
    this.closeTodayRatioByVolume = 0.0;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CtpInstrumentCommissionRate setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public byte getInvestorRange() {
    return this.investorRange;
  }

  public CtpInstrumentCommissionRate setInvestorRange(byte investorRange) {
    this.investorRange = investorRange;
    setInvestorRangeIsSet(true);
    return this;
  }

  public void unsetInvestorRange() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVESTORRANGE_ISSET_ID);
  }

  /** Returns true if field investorRange is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorRange() {
    return EncodingUtils.testBit(__isset_bitfield, __INVESTORRANGE_ISSET_ID);
  }

  public void setInvestorRangeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVESTORRANGE_ISSET_ID, value);
  }

  public double getOpenRatioByMoney() {
    return this.openRatioByMoney;
  }

  public CtpInstrumentCommissionRate setOpenRatioByMoney(double openRatioByMoney) {
    this.openRatioByMoney = openRatioByMoney;
    setOpenRatioByMoneyIsSet(true);
    return this;
  }

  public void unsetOpenRatioByMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENRATIOBYMONEY_ISSET_ID);
  }

  /** Returns true if field openRatioByMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenRatioByMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENRATIOBYMONEY_ISSET_ID);
  }

  public void setOpenRatioByMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENRATIOBYMONEY_ISSET_ID, value);
  }

  public double getOpenRatioByVolume() {
    return this.openRatioByVolume;
  }

  public CtpInstrumentCommissionRate setOpenRatioByVolume(double openRatioByVolume) {
    this.openRatioByVolume = openRatioByVolume;
    setOpenRatioByVolumeIsSet(true);
    return this;
  }

  public void unsetOpenRatioByVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENRATIOBYVOLUME_ISSET_ID);
  }

  /** Returns true if field openRatioByVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenRatioByVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENRATIOBYVOLUME_ISSET_ID);
  }

  public void setOpenRatioByVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENRATIOBYVOLUME_ISSET_ID, value);
  }

  public double getCloseRatioByMoney() {
    return this.closeRatioByMoney;
  }

  public CtpInstrumentCommissionRate setCloseRatioByMoney(double closeRatioByMoney) {
    this.closeRatioByMoney = closeRatioByMoney;
    setCloseRatioByMoneyIsSet(true);
    return this;
  }

  public void unsetCloseRatioByMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSERATIOBYMONEY_ISSET_ID);
  }

  /** Returns true if field closeRatioByMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseRatioByMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSERATIOBYMONEY_ISSET_ID);
  }

  public void setCloseRatioByMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSERATIOBYMONEY_ISSET_ID, value);
  }

  public double getCloseRatioByVolume() {
    return this.closeRatioByVolume;
  }

  public CtpInstrumentCommissionRate setCloseRatioByVolume(double closeRatioByVolume) {
    this.closeRatioByVolume = closeRatioByVolume;
    setCloseRatioByVolumeIsSet(true);
    return this;
  }

  public void unsetCloseRatioByVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSERATIOBYVOLUME_ISSET_ID);
  }

  /** Returns true if field closeRatioByVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseRatioByVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSERATIOBYVOLUME_ISSET_ID);
  }

  public void setCloseRatioByVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSERATIOBYVOLUME_ISSET_ID, value);
  }

  public double getCloseTodayRatioByMoney() {
    return this.closeTodayRatioByMoney;
  }

  public CtpInstrumentCommissionRate setCloseTodayRatioByMoney(double closeTodayRatioByMoney) {
    this.closeTodayRatioByMoney = closeTodayRatioByMoney;
    setCloseTodayRatioByMoneyIsSet(true);
    return this;
  }

  public void unsetCloseTodayRatioByMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSETODAYRATIOBYMONEY_ISSET_ID);
  }

  /** Returns true if field closeTodayRatioByMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseTodayRatioByMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSETODAYRATIOBYMONEY_ISSET_ID);
  }

  public void setCloseTodayRatioByMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSETODAYRATIOBYMONEY_ISSET_ID, value);
  }

  public double getCloseTodayRatioByVolume() {
    return this.closeTodayRatioByVolume;
  }

  public CtpInstrumentCommissionRate setCloseTodayRatioByVolume(double closeTodayRatioByVolume) {
    this.closeTodayRatioByVolume = closeTodayRatioByVolume;
    setCloseTodayRatioByVolumeIsSet(true);
    return this;
  }

  public void unsetCloseTodayRatioByVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSETODAYRATIOBYVOLUME_ISSET_ID);
  }

  /** Returns true if field closeTodayRatioByVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseTodayRatioByVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSETODAYRATIOBYVOLUME_ISSET_ID);
  }

  public void setCloseTodayRatioByVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSETODAYRATIOBYVOLUME_ISSET_ID, value);
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public CtpInstrumentCommissionRate setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case INVESTOR_RANGE:
      if (value == null) {
        unsetInvestorRange();
      } else {
        setInvestorRange((Byte)value);
      }
      break;

    case OPEN_RATIO_BY_MONEY:
      if (value == null) {
        unsetOpenRatioByMoney();
      } else {
        setOpenRatioByMoney((Double)value);
      }
      break;

    case OPEN_RATIO_BY_VOLUME:
      if (value == null) {
        unsetOpenRatioByVolume();
      } else {
        setOpenRatioByVolume((Double)value);
      }
      break;

    case CLOSE_RATIO_BY_MONEY:
      if (value == null) {
        unsetCloseRatioByMoney();
      } else {
        setCloseRatioByMoney((Double)value);
      }
      break;

    case CLOSE_RATIO_BY_VOLUME:
      if (value == null) {
        unsetCloseRatioByVolume();
      } else {
        setCloseRatioByVolume((Double)value);
      }
      break;

    case CLOSE_TODAY_RATIO_BY_MONEY:
      if (value == null) {
        unsetCloseTodayRatioByMoney();
      } else {
        setCloseTodayRatioByMoney((Double)value);
      }
      break;

    case CLOSE_TODAY_RATIO_BY_VOLUME:
      if (value == null) {
        unsetCloseTodayRatioByVolume();
      } else {
        setCloseTodayRatioByVolume((Double)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTRUMENT_ID:
      return getInstrumentID();

    case INVESTOR_RANGE:
      return Byte.valueOf(getInvestorRange());

    case OPEN_RATIO_BY_MONEY:
      return Double.valueOf(getOpenRatioByMoney());

    case OPEN_RATIO_BY_VOLUME:
      return Double.valueOf(getOpenRatioByVolume());

    case CLOSE_RATIO_BY_MONEY:
      return Double.valueOf(getCloseRatioByMoney());

    case CLOSE_RATIO_BY_VOLUME:
      return Double.valueOf(getCloseRatioByVolume());

    case CLOSE_TODAY_RATIO_BY_MONEY:
      return Double.valueOf(getCloseTodayRatioByMoney());

    case CLOSE_TODAY_RATIO_BY_VOLUME:
      return Double.valueOf(getCloseTodayRatioByVolume());

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case INVESTOR_RANGE:
      return isSetInvestorRange();
    case OPEN_RATIO_BY_MONEY:
      return isSetOpenRatioByMoney();
    case OPEN_RATIO_BY_VOLUME:
      return isSetOpenRatioByVolume();
    case CLOSE_RATIO_BY_MONEY:
      return isSetCloseRatioByMoney();
    case CLOSE_RATIO_BY_VOLUME:
      return isSetCloseRatioByVolume();
    case CLOSE_TODAY_RATIO_BY_MONEY:
      return isSetCloseTodayRatioByMoney();
    case CLOSE_TODAY_RATIO_BY_VOLUME:
      return isSetCloseTodayRatioByVolume();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CtpInstrumentCommissionRate)
      return this.equals((CtpInstrumentCommissionRate)that);
    return false;
  }

  public boolean equals(CtpInstrumentCommissionRate that) {
    if (that == null)
      return false;

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_investorRange = true && this.isSetInvestorRange();
    boolean that_present_investorRange = true && that.isSetInvestorRange();
    if (this_present_investorRange || that_present_investorRange) {
      if (!(this_present_investorRange && that_present_investorRange))
        return false;
      if (this.investorRange != that.investorRange)
        return false;
    }

    boolean this_present_openRatioByMoney = true && this.isSetOpenRatioByMoney();
    boolean that_present_openRatioByMoney = true && that.isSetOpenRatioByMoney();
    if (this_present_openRatioByMoney || that_present_openRatioByMoney) {
      if (!(this_present_openRatioByMoney && that_present_openRatioByMoney))
        return false;
      if (this.openRatioByMoney != that.openRatioByMoney)
        return false;
    }

    boolean this_present_openRatioByVolume = true && this.isSetOpenRatioByVolume();
    boolean that_present_openRatioByVolume = true && that.isSetOpenRatioByVolume();
    if (this_present_openRatioByVolume || that_present_openRatioByVolume) {
      if (!(this_present_openRatioByVolume && that_present_openRatioByVolume))
        return false;
      if (this.openRatioByVolume != that.openRatioByVolume)
        return false;
    }

    boolean this_present_closeRatioByMoney = true && this.isSetCloseRatioByMoney();
    boolean that_present_closeRatioByMoney = true && that.isSetCloseRatioByMoney();
    if (this_present_closeRatioByMoney || that_present_closeRatioByMoney) {
      if (!(this_present_closeRatioByMoney && that_present_closeRatioByMoney))
        return false;
      if (this.closeRatioByMoney != that.closeRatioByMoney)
        return false;
    }

    boolean this_present_closeRatioByVolume = true && this.isSetCloseRatioByVolume();
    boolean that_present_closeRatioByVolume = true && that.isSetCloseRatioByVolume();
    if (this_present_closeRatioByVolume || that_present_closeRatioByVolume) {
      if (!(this_present_closeRatioByVolume && that_present_closeRatioByVolume))
        return false;
      if (this.closeRatioByVolume != that.closeRatioByVolume)
        return false;
    }

    boolean this_present_closeTodayRatioByMoney = true && this.isSetCloseTodayRatioByMoney();
    boolean that_present_closeTodayRatioByMoney = true && that.isSetCloseTodayRatioByMoney();
    if (this_present_closeTodayRatioByMoney || that_present_closeTodayRatioByMoney) {
      if (!(this_present_closeTodayRatioByMoney && that_present_closeTodayRatioByMoney))
        return false;
      if (this.closeTodayRatioByMoney != that.closeTodayRatioByMoney)
        return false;
    }

    boolean this_present_closeTodayRatioByVolume = true && this.isSetCloseTodayRatioByVolume();
    boolean that_present_closeTodayRatioByVolume = true && that.isSetCloseTodayRatioByVolume();
    if (this_present_closeTodayRatioByVolume || that_present_closeTodayRatioByVolume) {
      if (!(this_present_closeTodayRatioByVolume && that_present_closeTodayRatioByVolume))
        return false;
      if (this.closeTodayRatioByVolume != that.closeTodayRatioByVolume)
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CtpInstrumentCommissionRate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorRange()).compareTo(other.isSetInvestorRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorRange, other.investorRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenRatioByMoney()).compareTo(other.isSetOpenRatioByMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenRatioByMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openRatioByMoney, other.openRatioByMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenRatioByVolume()).compareTo(other.isSetOpenRatioByVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenRatioByVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openRatioByVolume, other.openRatioByVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseRatioByMoney()).compareTo(other.isSetCloseRatioByMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseRatioByMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeRatioByMoney, other.closeRatioByMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseRatioByVolume()).compareTo(other.isSetCloseRatioByVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseRatioByVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeRatioByVolume, other.closeRatioByVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseTodayRatioByMoney()).compareTo(other.isSetCloseTodayRatioByMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseTodayRatioByMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeTodayRatioByMoney, other.closeTodayRatioByMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseTodayRatioByVolume()).compareTo(other.isSetCloseTodayRatioByVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseTodayRatioByVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeTodayRatioByVolume, other.closeTodayRatioByVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CtpInstrumentCommissionRate(");
    boolean first = true;

    if (isSetInstrumentID()) {
      sb.append("instrumentID:");
      if (this.instrumentID == null) {
        sb.append("null");
      } else {
        sb.append(this.instrumentID);
      }
      first = false;
    }
    if (isSetInvestorRange()) {
      if (!first) sb.append(", ");
      sb.append("investorRange:");
      sb.append(this.investorRange);
      first = false;
    }
    if (isSetOpenRatioByMoney()) {
      if (!first) sb.append(", ");
      sb.append("openRatioByMoney:");
      sb.append(this.openRatioByMoney);
      first = false;
    }
    if (isSetOpenRatioByVolume()) {
      if (!first) sb.append(", ");
      sb.append("openRatioByVolume:");
      sb.append(this.openRatioByVolume);
      first = false;
    }
    if (isSetCloseRatioByMoney()) {
      if (!first) sb.append(", ");
      sb.append("closeRatioByMoney:");
      sb.append(this.closeRatioByMoney);
      first = false;
    }
    if (isSetCloseRatioByVolume()) {
      if (!first) sb.append(", ");
      sb.append("closeRatioByVolume:");
      sb.append(this.closeRatioByVolume);
      first = false;
    }
    if (isSetCloseTodayRatioByMoney()) {
      if (!first) sb.append(", ");
      sb.append("closeTodayRatioByMoney:");
      sb.append(this.closeTodayRatioByMoney);
      first = false;
    }
    if (isSetCloseTodayRatioByVolume()) {
      if (!first) sb.append(", ");
      sb.append("closeTodayRatioByVolume:");
      sb.append(this.closeTodayRatioByVolume);
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CtpInstrumentCommissionRateStandardSchemeFactory implements SchemeFactory {
    public CtpInstrumentCommissionRateStandardScheme getScheme() {
      return new CtpInstrumentCommissionRateStandardScheme();
    }
  }

  private static class CtpInstrumentCommissionRateStandardScheme extends StandardScheme<CtpInstrumentCommissionRate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CtpInstrumentCommissionRate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INVESTOR_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.investorRange = iprot.readByte();
              struct.setInvestorRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPEN_RATIO_BY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openRatioByMoney = iprot.readDouble();
              struct.setOpenRatioByMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPEN_RATIO_BY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openRatioByVolume = iprot.readDouble();
              struct.setOpenRatioByVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLOSE_RATIO_BY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeRatioByMoney = iprot.readDouble();
              struct.setCloseRatioByMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLOSE_RATIO_BY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeRatioByVolume = iprot.readDouble();
              struct.setCloseRatioByVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CLOSE_TODAY_RATIO_BY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeTodayRatioByMoney = iprot.readDouble();
              struct.setCloseTodayRatioByMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CLOSE_TODAY_RATIO_BY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeTodayRatioByVolume = iprot.readDouble();
              struct.setCloseTodayRatioByVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CtpInstrumentCommissionRate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instrumentID != null) {
        if (struct.isSetInstrumentID()) {
          oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
          oprot.writeString(struct.instrumentID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInvestorRange()) {
        oprot.writeFieldBegin(INVESTOR_RANGE_FIELD_DESC);
        oprot.writeByte(struct.investorRange);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOpenRatioByMoney()) {
        oprot.writeFieldBegin(OPEN_RATIO_BY_MONEY_FIELD_DESC);
        oprot.writeDouble(struct.openRatioByMoney);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOpenRatioByVolume()) {
        oprot.writeFieldBegin(OPEN_RATIO_BY_VOLUME_FIELD_DESC);
        oprot.writeDouble(struct.openRatioByVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseRatioByMoney()) {
        oprot.writeFieldBegin(CLOSE_RATIO_BY_MONEY_FIELD_DESC);
        oprot.writeDouble(struct.closeRatioByMoney);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseRatioByVolume()) {
        oprot.writeFieldBegin(CLOSE_RATIO_BY_VOLUME_FIELD_DESC);
        oprot.writeDouble(struct.closeRatioByVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseTodayRatioByMoney()) {
        oprot.writeFieldBegin(CLOSE_TODAY_RATIO_BY_MONEY_FIELD_DESC);
        oprot.writeDouble(struct.closeTodayRatioByMoney);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseTodayRatioByVolume()) {
        oprot.writeFieldBegin(CLOSE_TODAY_RATIO_BY_VOLUME_FIELD_DESC);
        oprot.writeDouble(struct.closeTodayRatioByVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CtpInstrumentCommissionRateTupleSchemeFactory implements SchemeFactory {
    public CtpInstrumentCommissionRateTupleScheme getScheme() {
      return new CtpInstrumentCommissionRateTupleScheme();
    }
  }

  private static class CtpInstrumentCommissionRateTupleScheme extends TupleScheme<CtpInstrumentCommissionRate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CtpInstrumentCommissionRate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstrumentID()) {
        optionals.set(0);
      }
      if (struct.isSetInvestorRange()) {
        optionals.set(1);
      }
      if (struct.isSetOpenRatioByMoney()) {
        optionals.set(2);
      }
      if (struct.isSetOpenRatioByVolume()) {
        optionals.set(3);
      }
      if (struct.isSetCloseRatioByMoney()) {
        optionals.set(4);
      }
      if (struct.isSetCloseRatioByVolume()) {
        optionals.set(5);
      }
      if (struct.isSetCloseTodayRatioByMoney()) {
        optionals.set(6);
      }
      if (struct.isSetCloseTodayRatioByVolume()) {
        optionals.set(7);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetInvestorRange()) {
        oprot.writeByte(struct.investorRange);
      }
      if (struct.isSetOpenRatioByMoney()) {
        oprot.writeDouble(struct.openRatioByMoney);
      }
      if (struct.isSetOpenRatioByVolume()) {
        oprot.writeDouble(struct.openRatioByVolume);
      }
      if (struct.isSetCloseRatioByMoney()) {
        oprot.writeDouble(struct.closeRatioByMoney);
      }
      if (struct.isSetCloseRatioByVolume()) {
        oprot.writeDouble(struct.closeRatioByVolume);
      }
      if (struct.isSetCloseTodayRatioByMoney()) {
        oprot.writeDouble(struct.closeTodayRatioByMoney);
      }
      if (struct.isSetCloseTodayRatioByVolume()) {
        oprot.writeDouble(struct.closeTodayRatioByVolume);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CtpInstrumentCommissionRate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.investorRange = iprot.readByte();
        struct.setInvestorRangeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.openRatioByMoney = iprot.readDouble();
        struct.setOpenRatioByMoneyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.openRatioByVolume = iprot.readDouble();
        struct.setOpenRatioByVolumeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.closeRatioByMoney = iprot.readDouble();
        struct.setCloseRatioByMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.closeRatioByVolume = iprot.readDouble();
        struct.setCloseRatioByVolumeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.closeTodayRatioByMoney = iprot.readDouble();
        struct.setCloseTodayRatioByMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.closeTodayRatioByVolume = iprot.readDouble();
        struct.setCloseTodayRatioByVolumeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
    }
  }

}

