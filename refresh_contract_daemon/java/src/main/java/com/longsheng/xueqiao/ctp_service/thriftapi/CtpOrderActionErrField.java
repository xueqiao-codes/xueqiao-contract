/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.ctp_service.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CtpOrderActionErrField implements org.apache.thrift.TBase<CtpOrderActionErrField, CtpOrderActionErrField._Fields>, java.io.Serializable, Cloneable, Comparable<CtpOrderActionErrField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CtpOrderActionErrField");

  private static final org.apache.thrift.protocol.TField SLED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_ACTION_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("orderActionRef", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ORDER_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("orderRef", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestID", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FRONT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("frontID", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionID", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_SYS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderSysID", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ACTION_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("actionFlag", org.apache.thrift.protocol.TType.BYTE, (short)9);
  private static final org.apache.thrift.protocol.TField LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("limitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField VOLUME_CHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeChange", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ACTION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionDate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ACTION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("actionTime", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField TRADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traderID", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField INSTALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("installID", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ORDER_LOCAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderLocalID", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ACTION_LOCAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("actionLocalID", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PARTICIPANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("participantID", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientID", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField BUSINESS_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("businessUnit", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField ORDER_ACTION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderActionStatus", org.apache.thrift.protocol.TType.BYTE, (short)21);
  private static final org.apache.thrift.protocol.TField STATUS_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("statusMsg", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField ERROR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("errorID", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMsg", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField ACTION_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("actionDateTime", org.apache.thrift.protocol.TType.I64, (short)26);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)28);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CtpOrderActionErrFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CtpOrderActionErrFieldTupleSchemeFactory());
  }

  public String sledId; // required
  public int orderActionRef; // optional
  public String orderRef; // optional
  public int requestID; // optional
  public int frontID; // optional
  public int sessionID; // optional
  public String exchangeID; // optional
  public String orderSysID; // optional
  public byte actionFlag; // optional
  public double limitPrice; // optional
  public int volumeChange; // optional
  public String actionDate; // optional
  public String actionTime; // optional
  public String traderID; // optional
  public int installID; // optional
  public String orderLocalID; // optional
  public String actionLocalID; // optional
  public String participantID; // optional
  public String clientID; // optional
  public String businessUnit; // optional
  public byte orderActionStatus; // optional
  public String statusMsg; // optional
  public String instrumentID; // optional
  public int errorID; // required
  public String errorMsg; // required
  public long actionDateTime; // optional
  public int sledAccountId; // optional
  public int userId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_ID((short)1, "sledId"),
    ORDER_ACTION_REF((short)2, "orderActionRef"),
    ORDER_REF((short)3, "orderRef"),
    REQUEST_ID((short)4, "requestID"),
    FRONT_ID((short)5, "frontID"),
    SESSION_ID((short)6, "sessionID"),
    EXCHANGE_ID((short)7, "exchangeID"),
    ORDER_SYS_ID((short)8, "orderSysID"),
    ACTION_FLAG((short)9, "actionFlag"),
    LIMIT_PRICE((short)10, "limitPrice"),
    VOLUME_CHANGE((short)11, "volumeChange"),
    ACTION_DATE((short)12, "actionDate"),
    ACTION_TIME((short)13, "actionTime"),
    TRADER_ID((short)14, "traderID"),
    INSTALL_ID((short)15, "installID"),
    ORDER_LOCAL_ID((short)16, "orderLocalID"),
    ACTION_LOCAL_ID((short)17, "actionLocalID"),
    PARTICIPANT_ID((short)18, "participantID"),
    CLIENT_ID((short)19, "clientID"),
    BUSINESS_UNIT((short)20, "businessUnit"),
    ORDER_ACTION_STATUS((short)21, "orderActionStatus"),
    STATUS_MSG((short)22, "statusMsg"),
    INSTRUMENT_ID((short)23, "instrumentID"),
    ERROR_ID((short)24, "errorID"),
    ERROR_MSG((short)25, "errorMsg"),
    ACTION_DATE_TIME((short)26, "actionDateTime"),
    SLED_ACCOUNT_ID((short)27, "sledAccountId"),
    USER_ID((short)28, "userId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_ID
          return SLED_ID;
        case 2: // ORDER_ACTION_REF
          return ORDER_ACTION_REF;
        case 3: // ORDER_REF
          return ORDER_REF;
        case 4: // REQUEST_ID
          return REQUEST_ID;
        case 5: // FRONT_ID
          return FRONT_ID;
        case 6: // SESSION_ID
          return SESSION_ID;
        case 7: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 8: // ORDER_SYS_ID
          return ORDER_SYS_ID;
        case 9: // ACTION_FLAG
          return ACTION_FLAG;
        case 10: // LIMIT_PRICE
          return LIMIT_PRICE;
        case 11: // VOLUME_CHANGE
          return VOLUME_CHANGE;
        case 12: // ACTION_DATE
          return ACTION_DATE;
        case 13: // ACTION_TIME
          return ACTION_TIME;
        case 14: // TRADER_ID
          return TRADER_ID;
        case 15: // INSTALL_ID
          return INSTALL_ID;
        case 16: // ORDER_LOCAL_ID
          return ORDER_LOCAL_ID;
        case 17: // ACTION_LOCAL_ID
          return ACTION_LOCAL_ID;
        case 18: // PARTICIPANT_ID
          return PARTICIPANT_ID;
        case 19: // CLIENT_ID
          return CLIENT_ID;
        case 20: // BUSINESS_UNIT
          return BUSINESS_UNIT;
        case 21: // ORDER_ACTION_STATUS
          return ORDER_ACTION_STATUS;
        case 22: // STATUS_MSG
          return STATUS_MSG;
        case 23: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 24: // ERROR_ID
          return ERROR_ID;
        case 25: // ERROR_MSG
          return ERROR_MSG;
        case 26: // ACTION_DATE_TIME
          return ACTION_DATE_TIME;
        case 27: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        case 28: // USER_ID
          return USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERACTIONREF_ISSET_ID = 0;
  private static final int __REQUESTID_ISSET_ID = 1;
  private static final int __FRONTID_ISSET_ID = 2;
  private static final int __SESSIONID_ISSET_ID = 3;
  private static final int __ACTIONFLAG_ISSET_ID = 4;
  private static final int __LIMITPRICE_ISSET_ID = 5;
  private static final int __VOLUMECHANGE_ISSET_ID = 6;
  private static final int __INSTALLID_ISSET_ID = 7;
  private static final int __ORDERACTIONSTATUS_ISSET_ID = 8;
  private static final int __ERRORID_ISSET_ID = 9;
  private static final int __ACTIONDATETIME_ISSET_ID = 10;
  private static final int __SLEDACCOUNTID_ISSET_ID = 11;
  private static final int __USERID_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ORDER_ACTION_REF,_Fields.ORDER_REF,_Fields.REQUEST_ID,_Fields.FRONT_ID,_Fields.SESSION_ID,_Fields.EXCHANGE_ID,_Fields.ORDER_SYS_ID,_Fields.ACTION_FLAG,_Fields.LIMIT_PRICE,_Fields.VOLUME_CHANGE,_Fields.ACTION_DATE,_Fields.ACTION_TIME,_Fields.TRADER_ID,_Fields.INSTALL_ID,_Fields.ORDER_LOCAL_ID,_Fields.ACTION_LOCAL_ID,_Fields.PARTICIPANT_ID,_Fields.CLIENT_ID,_Fields.BUSINESS_UNIT,_Fields.ORDER_ACTION_STATUS,_Fields.STATUS_MSG,_Fields.INSTRUMENT_ID,_Fields.ACTION_DATE_TIME,_Fields.SLED_ACCOUNT_ID,_Fields.USER_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_ID, new org.apache.thrift.meta_data.FieldMetaData("sledId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_ACTION_REF, new org.apache.thrift.meta_data.FieldMetaData("orderActionRef", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_REF, new org.apache.thrift.meta_data.FieldMetaData("orderRef", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRONT_ID, new org.apache.thrift.meta_data.FieldMetaData("frontID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_SYS_ID, new org.apache.thrift.meta_data.FieldMetaData("orderSysID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION_FLAG, new org.apache.thrift.meta_data.FieldMetaData("actionFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("limitPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VOLUME_CHANGE, new org.apache.thrift.meta_data.FieldMetaData("volumeChange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_DATE, new org.apache.thrift.meta_data.FieldMetaData("actionDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION_TIME, new org.apache.thrift.meta_data.FieldMetaData("actionTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRADER_ID, new org.apache.thrift.meta_data.FieldMetaData("traderID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTALL_ID, new org.apache.thrift.meta_data.FieldMetaData("installID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_LOCAL_ID, new org.apache.thrift.meta_data.FieldMetaData("orderLocalID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION_LOCAL_ID, new org.apache.thrift.meta_data.FieldMetaData("actionLocalID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTICIPANT_ID, new org.apache.thrift.meta_data.FieldMetaData("participantID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_UNIT, new org.apache.thrift.meta_data.FieldMetaData("businessUnit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_ACTION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderActionStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.STATUS_MSG, new org.apache.thrift.meta_data.FieldMetaData("statusMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR_ID, new org.apache.thrift.meta_data.FieldMetaData("errorID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errorMsg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("actionDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CtpOrderActionErrField.class, metaDataMap);
  }

  public CtpOrderActionErrField() {
  }

  public CtpOrderActionErrField(
    String sledId,
    int errorID,
    String errorMsg)
  {
    this();
    this.sledId = sledId;
    this.errorID = errorID;
    setErrorIDIsSet(true);
    this.errorMsg = errorMsg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CtpOrderActionErrField(CtpOrderActionErrField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSledId()) {
      this.sledId = other.sledId;
    }
    this.orderActionRef = other.orderActionRef;
    if (other.isSetOrderRef()) {
      this.orderRef = other.orderRef;
    }
    this.requestID = other.requestID;
    this.frontID = other.frontID;
    this.sessionID = other.sessionID;
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    if (other.isSetOrderSysID()) {
      this.orderSysID = other.orderSysID;
    }
    this.actionFlag = other.actionFlag;
    this.limitPrice = other.limitPrice;
    this.volumeChange = other.volumeChange;
    if (other.isSetActionDate()) {
      this.actionDate = other.actionDate;
    }
    if (other.isSetActionTime()) {
      this.actionTime = other.actionTime;
    }
    if (other.isSetTraderID()) {
      this.traderID = other.traderID;
    }
    this.installID = other.installID;
    if (other.isSetOrderLocalID()) {
      this.orderLocalID = other.orderLocalID;
    }
    if (other.isSetActionLocalID()) {
      this.actionLocalID = other.actionLocalID;
    }
    if (other.isSetParticipantID()) {
      this.participantID = other.participantID;
    }
    if (other.isSetClientID()) {
      this.clientID = other.clientID;
    }
    if (other.isSetBusinessUnit()) {
      this.businessUnit = other.businessUnit;
    }
    this.orderActionStatus = other.orderActionStatus;
    if (other.isSetStatusMsg()) {
      this.statusMsg = other.statusMsg;
    }
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    this.errorID = other.errorID;
    if (other.isSetErrorMsg()) {
      this.errorMsg = other.errorMsg;
    }
    this.actionDateTime = other.actionDateTime;
    this.sledAccountId = other.sledAccountId;
    this.userId = other.userId;
  }

  public CtpOrderActionErrField deepCopy() {
    return new CtpOrderActionErrField(this);
  }

  @Override
  public void clear() {
    this.sledId = null;
    setOrderActionRefIsSet(false);
    this.orderActionRef = 0;
    this.orderRef = null;
    setRequestIDIsSet(false);
    this.requestID = 0;
    setFrontIDIsSet(false);
    this.frontID = 0;
    setSessionIDIsSet(false);
    this.sessionID = 0;
    this.exchangeID = null;
    this.orderSysID = null;
    setActionFlagIsSet(false);
    this.actionFlag = 0;
    setLimitPriceIsSet(false);
    this.limitPrice = 0.0;
    setVolumeChangeIsSet(false);
    this.volumeChange = 0;
    this.actionDate = null;
    this.actionTime = null;
    this.traderID = null;
    setInstallIDIsSet(false);
    this.installID = 0;
    this.orderLocalID = null;
    this.actionLocalID = null;
    this.participantID = null;
    this.clientID = null;
    this.businessUnit = null;
    setOrderActionStatusIsSet(false);
    this.orderActionStatus = 0;
    this.statusMsg = null;
    this.instrumentID = null;
    setErrorIDIsSet(false);
    this.errorID = 0;
    this.errorMsg = null;
    setActionDateTimeIsSet(false);
    this.actionDateTime = 0;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
  }

  public String getSledId() {
    return this.sledId;
  }

  public CtpOrderActionErrField setSledId(String sledId) {
    this.sledId = sledId;
    return this;
  }

  public void unsetSledId() {
    this.sledId = null;
  }

  /** Returns true if field sledId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledId() {
    return this.sledId != null;
  }

  public void setSledIdIsSet(boolean value) {
    if (!value) {
      this.sledId = null;
    }
  }

  public int getOrderActionRef() {
    return this.orderActionRef;
  }

  public CtpOrderActionErrField setOrderActionRef(int orderActionRef) {
    this.orderActionRef = orderActionRef;
    setOrderActionRefIsSet(true);
    return this;
  }

  public void unsetOrderActionRef() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERACTIONREF_ISSET_ID);
  }

  /** Returns true if field orderActionRef is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderActionRef() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERACTIONREF_ISSET_ID);
  }

  public void setOrderActionRefIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERACTIONREF_ISSET_ID, value);
  }

  public String getOrderRef() {
    return this.orderRef;
  }

  public CtpOrderActionErrField setOrderRef(String orderRef) {
    this.orderRef = orderRef;
    return this;
  }

  public void unsetOrderRef() {
    this.orderRef = null;
  }

  /** Returns true if field orderRef is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderRef() {
    return this.orderRef != null;
  }

  public void setOrderRefIsSet(boolean value) {
    if (!value) {
      this.orderRef = null;
    }
  }

  public int getRequestID() {
    return this.requestID;
  }

  public CtpOrderActionErrField setRequestID(int requestID) {
    this.requestID = requestID;
    setRequestIDIsSet(true);
    return this;
  }

  public void unsetRequestID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestID is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestID() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  public int getFrontID() {
    return this.frontID;
  }

  public CtpOrderActionErrField setFrontID(int frontID) {
    this.frontID = frontID;
    setFrontIDIsSet(true);
    return this;
  }

  public void unsetFrontID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRONTID_ISSET_ID);
  }

  /** Returns true if field frontID is set (has been assigned a value) and false otherwise */
  public boolean isSetFrontID() {
    return EncodingUtils.testBit(__isset_bitfield, __FRONTID_ISSET_ID);
  }

  public void setFrontIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRONTID_ISSET_ID, value);
  }

  public int getSessionID() {
    return this.sessionID;
  }

  public CtpOrderActionErrField setSessionID(int sessionID) {
    this.sessionID = sessionID;
    setSessionIDIsSet(true);
    return this;
  }

  public void unsetSessionID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionID is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionID() {
    return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CtpOrderActionErrField setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public String getOrderSysID() {
    return this.orderSysID;
  }

  public CtpOrderActionErrField setOrderSysID(String orderSysID) {
    this.orderSysID = orderSysID;
    return this;
  }

  public void unsetOrderSysID() {
    this.orderSysID = null;
  }

  /** Returns true if field orderSysID is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderSysID() {
    return this.orderSysID != null;
  }

  public void setOrderSysIDIsSet(boolean value) {
    if (!value) {
      this.orderSysID = null;
    }
  }

  public byte getActionFlag() {
    return this.actionFlag;
  }

  public CtpOrderActionErrField setActionFlag(byte actionFlag) {
    this.actionFlag = actionFlag;
    setActionFlagIsSet(true);
    return this;
  }

  public void unsetActionFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONFLAG_ISSET_ID);
  }

  /** Returns true if field actionFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetActionFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIONFLAG_ISSET_ID);
  }

  public void setActionFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONFLAG_ISSET_ID, value);
  }

  public double getLimitPrice() {
    return this.limitPrice;
  }

  public CtpOrderActionErrField setLimitPrice(double limitPrice) {
    this.limitPrice = limitPrice;
    setLimitPriceIsSet(true);
    return this;
  }

  public void unsetLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  /** Returns true if field limitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  public void setLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITPRICE_ISSET_ID, value);
  }

  public int getVolumeChange() {
    return this.volumeChange;
  }

  public CtpOrderActionErrField setVolumeChange(int volumeChange) {
    this.volumeChange = volumeChange;
    setVolumeChangeIsSet(true);
    return this;
  }

  public void unsetVolumeChange() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMECHANGE_ISSET_ID);
  }

  /** Returns true if field volumeChange is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeChange() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMECHANGE_ISSET_ID);
  }

  public void setVolumeChangeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMECHANGE_ISSET_ID, value);
  }

  public String getActionDate() {
    return this.actionDate;
  }

  public CtpOrderActionErrField setActionDate(String actionDate) {
    this.actionDate = actionDate;
    return this;
  }

  public void unsetActionDate() {
    this.actionDate = null;
  }

  /** Returns true if field actionDate is set (has been assigned a value) and false otherwise */
  public boolean isSetActionDate() {
    return this.actionDate != null;
  }

  public void setActionDateIsSet(boolean value) {
    if (!value) {
      this.actionDate = null;
    }
  }

  public String getActionTime() {
    return this.actionTime;
  }

  public CtpOrderActionErrField setActionTime(String actionTime) {
    this.actionTime = actionTime;
    return this;
  }

  public void unsetActionTime() {
    this.actionTime = null;
  }

  /** Returns true if field actionTime is set (has been assigned a value) and false otherwise */
  public boolean isSetActionTime() {
    return this.actionTime != null;
  }

  public void setActionTimeIsSet(boolean value) {
    if (!value) {
      this.actionTime = null;
    }
  }

  public String getTraderID() {
    return this.traderID;
  }

  public CtpOrderActionErrField setTraderID(String traderID) {
    this.traderID = traderID;
    return this;
  }

  public void unsetTraderID() {
    this.traderID = null;
  }

  /** Returns true if field traderID is set (has been assigned a value) and false otherwise */
  public boolean isSetTraderID() {
    return this.traderID != null;
  }

  public void setTraderIDIsSet(boolean value) {
    if (!value) {
      this.traderID = null;
    }
  }

  public int getInstallID() {
    return this.installID;
  }

  public CtpOrderActionErrField setInstallID(int installID) {
    this.installID = installID;
    setInstallIDIsSet(true);
    return this;
  }

  public void unsetInstallID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  /** Returns true if field installID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstallID() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTALLID_ISSET_ID);
  }

  public void setInstallIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTALLID_ISSET_ID, value);
  }

  public String getOrderLocalID() {
    return this.orderLocalID;
  }

  public CtpOrderActionErrField setOrderLocalID(String orderLocalID) {
    this.orderLocalID = orderLocalID;
    return this;
  }

  public void unsetOrderLocalID() {
    this.orderLocalID = null;
  }

  /** Returns true if field orderLocalID is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderLocalID() {
    return this.orderLocalID != null;
  }

  public void setOrderLocalIDIsSet(boolean value) {
    if (!value) {
      this.orderLocalID = null;
    }
  }

  public String getActionLocalID() {
    return this.actionLocalID;
  }

  public CtpOrderActionErrField setActionLocalID(String actionLocalID) {
    this.actionLocalID = actionLocalID;
    return this;
  }

  public void unsetActionLocalID() {
    this.actionLocalID = null;
  }

  /** Returns true if field actionLocalID is set (has been assigned a value) and false otherwise */
  public boolean isSetActionLocalID() {
    return this.actionLocalID != null;
  }

  public void setActionLocalIDIsSet(boolean value) {
    if (!value) {
      this.actionLocalID = null;
    }
  }

  public String getParticipantID() {
    return this.participantID;
  }

  public CtpOrderActionErrField setParticipantID(String participantID) {
    this.participantID = participantID;
    return this;
  }

  public void unsetParticipantID() {
    this.participantID = null;
  }

  /** Returns true if field participantID is set (has been assigned a value) and false otherwise */
  public boolean isSetParticipantID() {
    return this.participantID != null;
  }

  public void setParticipantIDIsSet(boolean value) {
    if (!value) {
      this.participantID = null;
    }
  }

  public String getClientID() {
    return this.clientID;
  }

  public CtpOrderActionErrField setClientID(String clientID) {
    this.clientID = clientID;
    return this;
  }

  public void unsetClientID() {
    this.clientID = null;
  }

  /** Returns true if field clientID is set (has been assigned a value) and false otherwise */
  public boolean isSetClientID() {
    return this.clientID != null;
  }

  public void setClientIDIsSet(boolean value) {
    if (!value) {
      this.clientID = null;
    }
  }

  public String getBusinessUnit() {
    return this.businessUnit;
  }

  public CtpOrderActionErrField setBusinessUnit(String businessUnit) {
    this.businessUnit = businessUnit;
    return this;
  }

  public void unsetBusinessUnit() {
    this.businessUnit = null;
  }

  /** Returns true if field businessUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessUnit() {
    return this.businessUnit != null;
  }

  public void setBusinessUnitIsSet(boolean value) {
    if (!value) {
      this.businessUnit = null;
    }
  }

  public byte getOrderActionStatus() {
    return this.orderActionStatus;
  }

  public CtpOrderActionErrField setOrderActionStatus(byte orderActionStatus) {
    this.orderActionStatus = orderActionStatus;
    setOrderActionStatusIsSet(true);
    return this;
  }

  public void unsetOrderActionStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERACTIONSTATUS_ISSET_ID);
  }

  /** Returns true if field orderActionStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderActionStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERACTIONSTATUS_ISSET_ID);
  }

  public void setOrderActionStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERACTIONSTATUS_ISSET_ID, value);
  }

  public String getStatusMsg() {
    return this.statusMsg;
  }

  public CtpOrderActionErrField setStatusMsg(String statusMsg) {
    this.statusMsg = statusMsg;
    return this;
  }

  public void unsetStatusMsg() {
    this.statusMsg = null;
  }

  /** Returns true if field statusMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusMsg() {
    return this.statusMsg != null;
  }

  public void setStatusMsgIsSet(boolean value) {
    if (!value) {
      this.statusMsg = null;
    }
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CtpOrderActionErrField setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public int getErrorID() {
    return this.errorID;
  }

  public CtpOrderActionErrField setErrorID(int errorID) {
    this.errorID = errorID;
    setErrorIDIsSet(true);
    return this;
  }

  public void unsetErrorID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRORID_ISSET_ID);
  }

  /** Returns true if field errorID is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorID() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRORID_ISSET_ID);
  }

  public void setErrorIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRORID_ISSET_ID, value);
  }

  public String getErrorMsg() {
    return this.errorMsg;
  }

  public CtpOrderActionErrField setErrorMsg(String errorMsg) {
    this.errorMsg = errorMsg;
    return this;
  }

  public void unsetErrorMsg() {
    this.errorMsg = null;
  }

  /** Returns true if field errorMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMsg() {
    return this.errorMsg != null;
  }

  public void setErrorMsgIsSet(boolean value) {
    if (!value) {
      this.errorMsg = null;
    }
  }

  public long getActionDateTime() {
    return this.actionDateTime;
  }

  public CtpOrderActionErrField setActionDateTime(long actionDateTime) {
    this.actionDateTime = actionDateTime;
    setActionDateTimeIsSet(true);
    return this;
  }

  public void unsetActionDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIONDATETIME_ISSET_ID);
  }

  /** Returns true if field actionDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetActionDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIONDATETIME_ISSET_ID);
  }

  public void setActionDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIONDATETIME_ISSET_ID, value);
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public CtpOrderActionErrField setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public CtpOrderActionErrField setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_ID:
      if (value == null) {
        unsetSledId();
      } else {
        setSledId((String)value);
      }
      break;

    case ORDER_ACTION_REF:
      if (value == null) {
        unsetOrderActionRef();
      } else {
        setOrderActionRef((Integer)value);
      }
      break;

    case ORDER_REF:
      if (value == null) {
        unsetOrderRef();
      } else {
        setOrderRef((String)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestID();
      } else {
        setRequestID((Integer)value);
      }
      break;

    case FRONT_ID:
      if (value == null) {
        unsetFrontID();
      } else {
        setFrontID((Integer)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionID();
      } else {
        setSessionID((Integer)value);
      }
      break;

    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case ORDER_SYS_ID:
      if (value == null) {
        unsetOrderSysID();
      } else {
        setOrderSysID((String)value);
      }
      break;

    case ACTION_FLAG:
      if (value == null) {
        unsetActionFlag();
      } else {
        setActionFlag((Byte)value);
      }
      break;

    case LIMIT_PRICE:
      if (value == null) {
        unsetLimitPrice();
      } else {
        setLimitPrice((Double)value);
      }
      break;

    case VOLUME_CHANGE:
      if (value == null) {
        unsetVolumeChange();
      } else {
        setVolumeChange((Integer)value);
      }
      break;

    case ACTION_DATE:
      if (value == null) {
        unsetActionDate();
      } else {
        setActionDate((String)value);
      }
      break;

    case ACTION_TIME:
      if (value == null) {
        unsetActionTime();
      } else {
        setActionTime((String)value);
      }
      break;

    case TRADER_ID:
      if (value == null) {
        unsetTraderID();
      } else {
        setTraderID((String)value);
      }
      break;

    case INSTALL_ID:
      if (value == null) {
        unsetInstallID();
      } else {
        setInstallID((Integer)value);
      }
      break;

    case ORDER_LOCAL_ID:
      if (value == null) {
        unsetOrderLocalID();
      } else {
        setOrderLocalID((String)value);
      }
      break;

    case ACTION_LOCAL_ID:
      if (value == null) {
        unsetActionLocalID();
      } else {
        setActionLocalID((String)value);
      }
      break;

    case PARTICIPANT_ID:
      if (value == null) {
        unsetParticipantID();
      } else {
        setParticipantID((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientID();
      } else {
        setClientID((String)value);
      }
      break;

    case BUSINESS_UNIT:
      if (value == null) {
        unsetBusinessUnit();
      } else {
        setBusinessUnit((String)value);
      }
      break;

    case ORDER_ACTION_STATUS:
      if (value == null) {
        unsetOrderActionStatus();
      } else {
        setOrderActionStatus((Byte)value);
      }
      break;

    case STATUS_MSG:
      if (value == null) {
        unsetStatusMsg();
      } else {
        setStatusMsg((String)value);
      }
      break;

    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case ERROR_ID:
      if (value == null) {
        unsetErrorID();
      } else {
        setErrorID((Integer)value);
      }
      break;

    case ERROR_MSG:
      if (value == null) {
        unsetErrorMsg();
      } else {
        setErrorMsg((String)value);
      }
      break;

    case ACTION_DATE_TIME:
      if (value == null) {
        unsetActionDateTime();
      } else {
        setActionDateTime((Long)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_ID:
      return getSledId();

    case ORDER_ACTION_REF:
      return Integer.valueOf(getOrderActionRef());

    case ORDER_REF:
      return getOrderRef();

    case REQUEST_ID:
      return Integer.valueOf(getRequestID());

    case FRONT_ID:
      return Integer.valueOf(getFrontID());

    case SESSION_ID:
      return Integer.valueOf(getSessionID());

    case EXCHANGE_ID:
      return getExchangeID();

    case ORDER_SYS_ID:
      return getOrderSysID();

    case ACTION_FLAG:
      return Byte.valueOf(getActionFlag());

    case LIMIT_PRICE:
      return Double.valueOf(getLimitPrice());

    case VOLUME_CHANGE:
      return Integer.valueOf(getVolumeChange());

    case ACTION_DATE:
      return getActionDate();

    case ACTION_TIME:
      return getActionTime();

    case TRADER_ID:
      return getTraderID();

    case INSTALL_ID:
      return Integer.valueOf(getInstallID());

    case ORDER_LOCAL_ID:
      return getOrderLocalID();

    case ACTION_LOCAL_ID:
      return getActionLocalID();

    case PARTICIPANT_ID:
      return getParticipantID();

    case CLIENT_ID:
      return getClientID();

    case BUSINESS_UNIT:
      return getBusinessUnit();

    case ORDER_ACTION_STATUS:
      return Byte.valueOf(getOrderActionStatus());

    case STATUS_MSG:
      return getStatusMsg();

    case INSTRUMENT_ID:
      return getInstrumentID();

    case ERROR_ID:
      return Integer.valueOf(getErrorID());

    case ERROR_MSG:
      return getErrorMsg();

    case ACTION_DATE_TIME:
      return Long.valueOf(getActionDateTime());

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_ID:
      return isSetSledId();
    case ORDER_ACTION_REF:
      return isSetOrderActionRef();
    case ORDER_REF:
      return isSetOrderRef();
    case REQUEST_ID:
      return isSetRequestID();
    case FRONT_ID:
      return isSetFrontID();
    case SESSION_ID:
      return isSetSessionID();
    case EXCHANGE_ID:
      return isSetExchangeID();
    case ORDER_SYS_ID:
      return isSetOrderSysID();
    case ACTION_FLAG:
      return isSetActionFlag();
    case LIMIT_PRICE:
      return isSetLimitPrice();
    case VOLUME_CHANGE:
      return isSetVolumeChange();
    case ACTION_DATE:
      return isSetActionDate();
    case ACTION_TIME:
      return isSetActionTime();
    case TRADER_ID:
      return isSetTraderID();
    case INSTALL_ID:
      return isSetInstallID();
    case ORDER_LOCAL_ID:
      return isSetOrderLocalID();
    case ACTION_LOCAL_ID:
      return isSetActionLocalID();
    case PARTICIPANT_ID:
      return isSetParticipantID();
    case CLIENT_ID:
      return isSetClientID();
    case BUSINESS_UNIT:
      return isSetBusinessUnit();
    case ORDER_ACTION_STATUS:
      return isSetOrderActionStatus();
    case STATUS_MSG:
      return isSetStatusMsg();
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case ERROR_ID:
      return isSetErrorID();
    case ERROR_MSG:
      return isSetErrorMsg();
    case ACTION_DATE_TIME:
      return isSetActionDateTime();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    case USER_ID:
      return isSetUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CtpOrderActionErrField)
      return this.equals((CtpOrderActionErrField)that);
    return false;
  }

  public boolean equals(CtpOrderActionErrField that) {
    if (that == null)
      return false;

    boolean this_present_sledId = true && this.isSetSledId();
    boolean that_present_sledId = true && that.isSetSledId();
    if (this_present_sledId || that_present_sledId) {
      if (!(this_present_sledId && that_present_sledId))
        return false;
      if (!this.sledId.equals(that.sledId))
        return false;
    }

    boolean this_present_orderActionRef = true && this.isSetOrderActionRef();
    boolean that_present_orderActionRef = true && that.isSetOrderActionRef();
    if (this_present_orderActionRef || that_present_orderActionRef) {
      if (!(this_present_orderActionRef && that_present_orderActionRef))
        return false;
      if (this.orderActionRef != that.orderActionRef)
        return false;
    }

    boolean this_present_orderRef = true && this.isSetOrderRef();
    boolean that_present_orderRef = true && that.isSetOrderRef();
    if (this_present_orderRef || that_present_orderRef) {
      if (!(this_present_orderRef && that_present_orderRef))
        return false;
      if (!this.orderRef.equals(that.orderRef))
        return false;
    }

    boolean this_present_requestID = true && this.isSetRequestID();
    boolean that_present_requestID = true && that.isSetRequestID();
    if (this_present_requestID || that_present_requestID) {
      if (!(this_present_requestID && that_present_requestID))
        return false;
      if (this.requestID != that.requestID)
        return false;
    }

    boolean this_present_frontID = true && this.isSetFrontID();
    boolean that_present_frontID = true && that.isSetFrontID();
    if (this_present_frontID || that_present_frontID) {
      if (!(this_present_frontID && that_present_frontID))
        return false;
      if (this.frontID != that.frontID)
        return false;
    }

    boolean this_present_sessionID = true && this.isSetSessionID();
    boolean that_present_sessionID = true && that.isSetSessionID();
    if (this_present_sessionID || that_present_sessionID) {
      if (!(this_present_sessionID && that_present_sessionID))
        return false;
      if (this.sessionID != that.sessionID)
        return false;
    }

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_orderSysID = true && this.isSetOrderSysID();
    boolean that_present_orderSysID = true && that.isSetOrderSysID();
    if (this_present_orderSysID || that_present_orderSysID) {
      if (!(this_present_orderSysID && that_present_orderSysID))
        return false;
      if (!this.orderSysID.equals(that.orderSysID))
        return false;
    }

    boolean this_present_actionFlag = true && this.isSetActionFlag();
    boolean that_present_actionFlag = true && that.isSetActionFlag();
    if (this_present_actionFlag || that_present_actionFlag) {
      if (!(this_present_actionFlag && that_present_actionFlag))
        return false;
      if (this.actionFlag != that.actionFlag)
        return false;
    }

    boolean this_present_limitPrice = true && this.isSetLimitPrice();
    boolean that_present_limitPrice = true && that.isSetLimitPrice();
    if (this_present_limitPrice || that_present_limitPrice) {
      if (!(this_present_limitPrice && that_present_limitPrice))
        return false;
      if (this.limitPrice != that.limitPrice)
        return false;
    }

    boolean this_present_volumeChange = true && this.isSetVolumeChange();
    boolean that_present_volumeChange = true && that.isSetVolumeChange();
    if (this_present_volumeChange || that_present_volumeChange) {
      if (!(this_present_volumeChange && that_present_volumeChange))
        return false;
      if (this.volumeChange != that.volumeChange)
        return false;
    }

    boolean this_present_actionDate = true && this.isSetActionDate();
    boolean that_present_actionDate = true && that.isSetActionDate();
    if (this_present_actionDate || that_present_actionDate) {
      if (!(this_present_actionDate && that_present_actionDate))
        return false;
      if (!this.actionDate.equals(that.actionDate))
        return false;
    }

    boolean this_present_actionTime = true && this.isSetActionTime();
    boolean that_present_actionTime = true && that.isSetActionTime();
    if (this_present_actionTime || that_present_actionTime) {
      if (!(this_present_actionTime && that_present_actionTime))
        return false;
      if (!this.actionTime.equals(that.actionTime))
        return false;
    }

    boolean this_present_traderID = true && this.isSetTraderID();
    boolean that_present_traderID = true && that.isSetTraderID();
    if (this_present_traderID || that_present_traderID) {
      if (!(this_present_traderID && that_present_traderID))
        return false;
      if (!this.traderID.equals(that.traderID))
        return false;
    }

    boolean this_present_installID = true && this.isSetInstallID();
    boolean that_present_installID = true && that.isSetInstallID();
    if (this_present_installID || that_present_installID) {
      if (!(this_present_installID && that_present_installID))
        return false;
      if (this.installID != that.installID)
        return false;
    }

    boolean this_present_orderLocalID = true && this.isSetOrderLocalID();
    boolean that_present_orderLocalID = true && that.isSetOrderLocalID();
    if (this_present_orderLocalID || that_present_orderLocalID) {
      if (!(this_present_orderLocalID && that_present_orderLocalID))
        return false;
      if (!this.orderLocalID.equals(that.orderLocalID))
        return false;
    }

    boolean this_present_actionLocalID = true && this.isSetActionLocalID();
    boolean that_present_actionLocalID = true && that.isSetActionLocalID();
    if (this_present_actionLocalID || that_present_actionLocalID) {
      if (!(this_present_actionLocalID && that_present_actionLocalID))
        return false;
      if (!this.actionLocalID.equals(that.actionLocalID))
        return false;
    }

    boolean this_present_participantID = true && this.isSetParticipantID();
    boolean that_present_participantID = true && that.isSetParticipantID();
    if (this_present_participantID || that_present_participantID) {
      if (!(this_present_participantID && that_present_participantID))
        return false;
      if (!this.participantID.equals(that.participantID))
        return false;
    }

    boolean this_present_clientID = true && this.isSetClientID();
    boolean that_present_clientID = true && that.isSetClientID();
    if (this_present_clientID || that_present_clientID) {
      if (!(this_present_clientID && that_present_clientID))
        return false;
      if (!this.clientID.equals(that.clientID))
        return false;
    }

    boolean this_present_businessUnit = true && this.isSetBusinessUnit();
    boolean that_present_businessUnit = true && that.isSetBusinessUnit();
    if (this_present_businessUnit || that_present_businessUnit) {
      if (!(this_present_businessUnit && that_present_businessUnit))
        return false;
      if (!this.businessUnit.equals(that.businessUnit))
        return false;
    }

    boolean this_present_orderActionStatus = true && this.isSetOrderActionStatus();
    boolean that_present_orderActionStatus = true && that.isSetOrderActionStatus();
    if (this_present_orderActionStatus || that_present_orderActionStatus) {
      if (!(this_present_orderActionStatus && that_present_orderActionStatus))
        return false;
      if (this.orderActionStatus != that.orderActionStatus)
        return false;
    }

    boolean this_present_statusMsg = true && this.isSetStatusMsg();
    boolean that_present_statusMsg = true && that.isSetStatusMsg();
    if (this_present_statusMsg || that_present_statusMsg) {
      if (!(this_present_statusMsg && that_present_statusMsg))
        return false;
      if (!this.statusMsg.equals(that.statusMsg))
        return false;
    }

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_errorID = true;
    boolean that_present_errorID = true;
    if (this_present_errorID || that_present_errorID) {
      if (!(this_present_errorID && that_present_errorID))
        return false;
      if (this.errorID != that.errorID)
        return false;
    }

    boolean this_present_errorMsg = true && this.isSetErrorMsg();
    boolean that_present_errorMsg = true && that.isSetErrorMsg();
    if (this_present_errorMsg || that_present_errorMsg) {
      if (!(this_present_errorMsg && that_present_errorMsg))
        return false;
      if (!this.errorMsg.equals(that.errorMsg))
        return false;
    }

    boolean this_present_actionDateTime = true && this.isSetActionDateTime();
    boolean that_present_actionDateTime = true && that.isSetActionDateTime();
    if (this_present_actionDateTime || that_present_actionDateTime) {
      if (!(this_present_actionDateTime && that_present_actionDateTime))
        return false;
      if (this.actionDateTime != that.actionDateTime)
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CtpOrderActionErrField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledId()).compareTo(other.isSetSledId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledId, other.sledId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderActionRef()).compareTo(other.isSetOrderActionRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderActionRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderActionRef, other.orderActionRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderRef()).compareTo(other.isSetOrderRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderRef, other.orderRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestID()).compareTo(other.isSetRequestID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestID, other.requestID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrontID()).compareTo(other.isSetFrontID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrontID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frontID, other.frontID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionID()).compareTo(other.isSetSessionID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionID, other.sessionID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderSysID()).compareTo(other.isSetOrderSysID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderSysID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderSysID, other.orderSysID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionFlag()).compareTo(other.isSetActionFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionFlag, other.actionFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitPrice()).compareTo(other.isSetLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitPrice, other.limitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeChange()).compareTo(other.isSetVolumeChange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeChange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeChange, other.volumeChange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionDate()).compareTo(other.isSetActionDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionDate, other.actionDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionTime()).compareTo(other.isSetActionTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionTime, other.actionTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraderID()).compareTo(other.isSetTraderID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraderID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traderID, other.traderID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstallID()).compareTo(other.isSetInstallID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstallID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.installID, other.installID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderLocalID()).compareTo(other.isSetOrderLocalID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderLocalID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderLocalID, other.orderLocalID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionLocalID()).compareTo(other.isSetActionLocalID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionLocalID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionLocalID, other.actionLocalID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParticipantID()).compareTo(other.isSetParticipantID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParticipantID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.participantID, other.participantID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientID()).compareTo(other.isSetClientID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientID, other.clientID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessUnit()).compareTo(other.isSetBusinessUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessUnit, other.businessUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderActionStatus()).compareTo(other.isSetOrderActionStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderActionStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderActionStatus, other.orderActionStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusMsg()).compareTo(other.isSetStatusMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusMsg, other.statusMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorID()).compareTo(other.isSetErrorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorID, other.errorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorMsg()).compareTo(other.isSetErrorMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMsg, other.errorMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionDateTime()).compareTo(other.isSetActionDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionDateTime, other.actionDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CtpOrderActionErrField(");
    boolean first = true;

    sb.append("sledId:");
    if (this.sledId == null) {
      sb.append("null");
    } else {
      sb.append(this.sledId);
    }
    first = false;
    if (isSetOrderActionRef()) {
      if (!first) sb.append(", ");
      sb.append("orderActionRef:");
      sb.append(this.orderActionRef);
      first = false;
    }
    if (isSetOrderRef()) {
      if (!first) sb.append(", ");
      sb.append("orderRef:");
      if (this.orderRef == null) {
        sb.append("null");
      } else {
        sb.append(this.orderRef);
      }
      first = false;
    }
    if (isSetRequestID()) {
      if (!first) sb.append(", ");
      sb.append("requestID:");
      sb.append(this.requestID);
      first = false;
    }
    if (isSetFrontID()) {
      if (!first) sb.append(", ");
      sb.append("frontID:");
      sb.append(this.frontID);
      first = false;
    }
    if (isSetSessionID()) {
      if (!first) sb.append(", ");
      sb.append("sessionID:");
      sb.append(this.sessionID);
      first = false;
    }
    if (isSetExchangeID()) {
      if (!first) sb.append(", ");
      sb.append("exchangeID:");
      if (this.exchangeID == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeID);
      }
      first = false;
    }
    if (isSetOrderSysID()) {
      if (!first) sb.append(", ");
      sb.append("orderSysID:");
      if (this.orderSysID == null) {
        sb.append("null");
      } else {
        sb.append(this.orderSysID);
      }
      first = false;
    }
    if (isSetActionFlag()) {
      if (!first) sb.append(", ");
      sb.append("actionFlag:");
      sb.append(this.actionFlag);
      first = false;
    }
    if (isSetLimitPrice()) {
      if (!first) sb.append(", ");
      sb.append("limitPrice:");
      sb.append(this.limitPrice);
      first = false;
    }
    if (isSetVolumeChange()) {
      if (!first) sb.append(", ");
      sb.append("volumeChange:");
      sb.append(this.volumeChange);
      first = false;
    }
    if (isSetActionDate()) {
      if (!first) sb.append(", ");
      sb.append("actionDate:");
      if (this.actionDate == null) {
        sb.append("null");
      } else {
        sb.append(this.actionDate);
      }
      first = false;
    }
    if (isSetActionTime()) {
      if (!first) sb.append(", ");
      sb.append("actionTime:");
      if (this.actionTime == null) {
        sb.append("null");
      } else {
        sb.append(this.actionTime);
      }
      first = false;
    }
    if (isSetTraderID()) {
      if (!first) sb.append(", ");
      sb.append("traderID:");
      if (this.traderID == null) {
        sb.append("null");
      } else {
        sb.append(this.traderID);
      }
      first = false;
    }
    if (isSetInstallID()) {
      if (!first) sb.append(", ");
      sb.append("installID:");
      sb.append(this.installID);
      first = false;
    }
    if (isSetOrderLocalID()) {
      if (!first) sb.append(", ");
      sb.append("orderLocalID:");
      if (this.orderLocalID == null) {
        sb.append("null");
      } else {
        sb.append(this.orderLocalID);
      }
      first = false;
    }
    if (isSetActionLocalID()) {
      if (!first) sb.append(", ");
      sb.append("actionLocalID:");
      if (this.actionLocalID == null) {
        sb.append("null");
      } else {
        sb.append(this.actionLocalID);
      }
      first = false;
    }
    if (isSetParticipantID()) {
      if (!first) sb.append(", ");
      sb.append("participantID:");
      if (this.participantID == null) {
        sb.append("null");
      } else {
        sb.append(this.participantID);
      }
      first = false;
    }
    if (isSetClientID()) {
      if (!first) sb.append(", ");
      sb.append("clientID:");
      if (this.clientID == null) {
        sb.append("null");
      } else {
        sb.append(this.clientID);
      }
      first = false;
    }
    if (isSetBusinessUnit()) {
      if (!first) sb.append(", ");
      sb.append("businessUnit:");
      if (this.businessUnit == null) {
        sb.append("null");
      } else {
        sb.append(this.businessUnit);
      }
      first = false;
    }
    if (isSetOrderActionStatus()) {
      if (!first) sb.append(", ");
      sb.append("orderActionStatus:");
      sb.append(this.orderActionStatus);
      first = false;
    }
    if (isSetStatusMsg()) {
      if (!first) sb.append(", ");
      sb.append("statusMsg:");
      if (this.statusMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.statusMsg);
      }
      first = false;
    }
    if (isSetInstrumentID()) {
      if (!first) sb.append(", ");
      sb.append("instrumentID:");
      if (this.instrumentID == null) {
        sb.append("null");
      } else {
        sb.append(this.instrumentID);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("errorID:");
    sb.append(this.errorID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorMsg:");
    if (this.errorMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errorMsg);
    }
    first = false;
    if (isSetActionDateTime()) {
      if (!first) sb.append(", ");
      sb.append("actionDateTime:");
      sb.append(this.actionDateTime);
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sledId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sledId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'errorID' because it's a primitive and you chose the non-beans generator.
    if (errorMsg == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'errorMsg' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CtpOrderActionErrFieldStandardSchemeFactory implements SchemeFactory {
    public CtpOrderActionErrFieldStandardScheme getScheme() {
      return new CtpOrderActionErrFieldStandardScheme();
    }
  }

  private static class CtpOrderActionErrFieldStandardScheme extends StandardScheme<CtpOrderActionErrField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CtpOrderActionErrField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledId = iprot.readString();
              struct.setSledIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_ACTION_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderActionRef = iprot.readI32();
              struct.setOrderActionRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORDER_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderRef = iprot.readString();
              struct.setOrderRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestID = iprot.readI32();
              struct.setRequestIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FRONT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frontID = iprot.readI32();
              struct.setFrontIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sessionID = iprot.readI32();
              struct.setSessionIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER_SYS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderSysID = iprot.readString();
              struct.setOrderSysIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTION_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.actionFlag = iprot.readByte();
              struct.setActionFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.limitPrice = iprot.readDouble();
              struct.setLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VOLUME_CHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volumeChange = iprot.readI32();
              struct.setVolumeChangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ACTION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionDate = iprot.readString();
              struct.setActionDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ACTION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionTime = iprot.readString();
              struct.setActionTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TRADER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traderID = iprot.readString();
              struct.setTraderIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // INSTALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.installID = iprot.readI32();
              struct.setInstallIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ORDER_LOCAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderLocalID = iprot.readString();
              struct.setOrderLocalIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ACTION_LOCAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionLocalID = iprot.readString();
              struct.setActionLocalIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PARTICIPANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.participantID = iprot.readString();
              struct.setParticipantIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientID = iprot.readString();
              struct.setClientIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BUSINESS_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessUnit = iprot.readString();
              struct.setBusinessUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ORDER_ACTION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.orderActionStatus = iprot.readByte();
              struct.setOrderActionStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // STATUS_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusMsg = iprot.readString();
              struct.setStatusMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ERROR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errorID = iprot.readI32();
              struct.setErrorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ERROR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMsg = iprot.readString();
              struct.setErrorMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ACTION_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.actionDateTime = iprot.readI64();
              struct.setActionDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetErrorID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'errorID' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CtpOrderActionErrField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledId != null) {
        oprot.writeFieldBegin(SLED_ID_FIELD_DESC);
        oprot.writeString(struct.sledId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderActionRef()) {
        oprot.writeFieldBegin(ORDER_ACTION_REF_FIELD_DESC);
        oprot.writeI32(struct.orderActionRef);
        oprot.writeFieldEnd();
      }
      if (struct.orderRef != null) {
        if (struct.isSetOrderRef()) {
          oprot.writeFieldBegin(ORDER_REF_FIELD_DESC);
          oprot.writeString(struct.orderRef);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRequestID()) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI32(struct.requestID);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrontID()) {
        oprot.writeFieldBegin(FRONT_ID_FIELD_DESC);
        oprot.writeI32(struct.frontID);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSessionID()) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI32(struct.sessionID);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeID != null) {
        if (struct.isSetExchangeID()) {
          oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
          oprot.writeString(struct.exchangeID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderSysID != null) {
        if (struct.isSetOrderSysID()) {
          oprot.writeFieldBegin(ORDER_SYS_ID_FIELD_DESC);
          oprot.writeString(struct.orderSysID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetActionFlag()) {
        oprot.writeFieldBegin(ACTION_FLAG_FIELD_DESC);
        oprot.writeByte(struct.actionFlag);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLimitPrice()) {
        oprot.writeFieldBegin(LIMIT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.limitPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVolumeChange()) {
        oprot.writeFieldBegin(VOLUME_CHANGE_FIELD_DESC);
        oprot.writeI32(struct.volumeChange);
        oprot.writeFieldEnd();
      }
      if (struct.actionDate != null) {
        if (struct.isSetActionDate()) {
          oprot.writeFieldBegin(ACTION_DATE_FIELD_DESC);
          oprot.writeString(struct.actionDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.actionTime != null) {
        if (struct.isSetActionTime()) {
          oprot.writeFieldBegin(ACTION_TIME_FIELD_DESC);
          oprot.writeString(struct.actionTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.traderID != null) {
        if (struct.isSetTraderID()) {
          oprot.writeFieldBegin(TRADER_ID_FIELD_DESC);
          oprot.writeString(struct.traderID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInstallID()) {
        oprot.writeFieldBegin(INSTALL_ID_FIELD_DESC);
        oprot.writeI32(struct.installID);
        oprot.writeFieldEnd();
      }
      if (struct.orderLocalID != null) {
        if (struct.isSetOrderLocalID()) {
          oprot.writeFieldBegin(ORDER_LOCAL_ID_FIELD_DESC);
          oprot.writeString(struct.orderLocalID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.actionLocalID != null) {
        if (struct.isSetActionLocalID()) {
          oprot.writeFieldBegin(ACTION_LOCAL_ID_FIELD_DESC);
          oprot.writeString(struct.actionLocalID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.participantID != null) {
        if (struct.isSetParticipantID()) {
          oprot.writeFieldBegin(PARTICIPANT_ID_FIELD_DESC);
          oprot.writeString(struct.participantID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientID != null) {
        if (struct.isSetClientID()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.businessUnit != null) {
        if (struct.isSetBusinessUnit()) {
          oprot.writeFieldBegin(BUSINESS_UNIT_FIELD_DESC);
          oprot.writeString(struct.businessUnit);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderActionStatus()) {
        oprot.writeFieldBegin(ORDER_ACTION_STATUS_FIELD_DESC);
        oprot.writeByte(struct.orderActionStatus);
        oprot.writeFieldEnd();
      }
      if (struct.statusMsg != null) {
        if (struct.isSetStatusMsg()) {
          oprot.writeFieldBegin(STATUS_MSG_FIELD_DESC);
          oprot.writeString(struct.statusMsg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.instrumentID != null) {
        if (struct.isSetInstrumentID()) {
          oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
          oprot.writeString(struct.instrumentID);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(ERROR_ID_FIELD_DESC);
      oprot.writeI32(struct.errorID);
      oprot.writeFieldEnd();
      if (struct.errorMsg != null) {
        oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
        oprot.writeString(struct.errorMsg);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActionDateTime()) {
        oprot.writeFieldBegin(ACTION_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.actionDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CtpOrderActionErrFieldTupleSchemeFactory implements SchemeFactory {
    public CtpOrderActionErrFieldTupleScheme getScheme() {
      return new CtpOrderActionErrFieldTupleScheme();
    }
  }

  private static class CtpOrderActionErrFieldTupleScheme extends TupleScheme<CtpOrderActionErrField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CtpOrderActionErrField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sledId);
      oprot.writeI32(struct.errorID);
      oprot.writeString(struct.errorMsg);
      BitSet optionals = new BitSet();
      if (struct.isSetOrderActionRef()) {
        optionals.set(0);
      }
      if (struct.isSetOrderRef()) {
        optionals.set(1);
      }
      if (struct.isSetRequestID()) {
        optionals.set(2);
      }
      if (struct.isSetFrontID()) {
        optionals.set(3);
      }
      if (struct.isSetSessionID()) {
        optionals.set(4);
      }
      if (struct.isSetExchangeID()) {
        optionals.set(5);
      }
      if (struct.isSetOrderSysID()) {
        optionals.set(6);
      }
      if (struct.isSetActionFlag()) {
        optionals.set(7);
      }
      if (struct.isSetLimitPrice()) {
        optionals.set(8);
      }
      if (struct.isSetVolumeChange()) {
        optionals.set(9);
      }
      if (struct.isSetActionDate()) {
        optionals.set(10);
      }
      if (struct.isSetActionTime()) {
        optionals.set(11);
      }
      if (struct.isSetTraderID()) {
        optionals.set(12);
      }
      if (struct.isSetInstallID()) {
        optionals.set(13);
      }
      if (struct.isSetOrderLocalID()) {
        optionals.set(14);
      }
      if (struct.isSetActionLocalID()) {
        optionals.set(15);
      }
      if (struct.isSetParticipantID()) {
        optionals.set(16);
      }
      if (struct.isSetClientID()) {
        optionals.set(17);
      }
      if (struct.isSetBusinessUnit()) {
        optionals.set(18);
      }
      if (struct.isSetOrderActionStatus()) {
        optionals.set(19);
      }
      if (struct.isSetStatusMsg()) {
        optionals.set(20);
      }
      if (struct.isSetInstrumentID()) {
        optionals.set(21);
      }
      if (struct.isSetActionDateTime()) {
        optionals.set(22);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(23);
      }
      if (struct.isSetUserId()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetOrderActionRef()) {
        oprot.writeI32(struct.orderActionRef);
      }
      if (struct.isSetOrderRef()) {
        oprot.writeString(struct.orderRef);
      }
      if (struct.isSetRequestID()) {
        oprot.writeI32(struct.requestID);
      }
      if (struct.isSetFrontID()) {
        oprot.writeI32(struct.frontID);
      }
      if (struct.isSetSessionID()) {
        oprot.writeI32(struct.sessionID);
      }
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetOrderSysID()) {
        oprot.writeString(struct.orderSysID);
      }
      if (struct.isSetActionFlag()) {
        oprot.writeByte(struct.actionFlag);
      }
      if (struct.isSetLimitPrice()) {
        oprot.writeDouble(struct.limitPrice);
      }
      if (struct.isSetVolumeChange()) {
        oprot.writeI32(struct.volumeChange);
      }
      if (struct.isSetActionDate()) {
        oprot.writeString(struct.actionDate);
      }
      if (struct.isSetActionTime()) {
        oprot.writeString(struct.actionTime);
      }
      if (struct.isSetTraderID()) {
        oprot.writeString(struct.traderID);
      }
      if (struct.isSetInstallID()) {
        oprot.writeI32(struct.installID);
      }
      if (struct.isSetOrderLocalID()) {
        oprot.writeString(struct.orderLocalID);
      }
      if (struct.isSetActionLocalID()) {
        oprot.writeString(struct.actionLocalID);
      }
      if (struct.isSetParticipantID()) {
        oprot.writeString(struct.participantID);
      }
      if (struct.isSetClientID()) {
        oprot.writeString(struct.clientID);
      }
      if (struct.isSetBusinessUnit()) {
        oprot.writeString(struct.businessUnit);
      }
      if (struct.isSetOrderActionStatus()) {
        oprot.writeByte(struct.orderActionStatus);
      }
      if (struct.isSetStatusMsg()) {
        oprot.writeString(struct.statusMsg);
      }
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetActionDateTime()) {
        oprot.writeI64(struct.actionDateTime);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CtpOrderActionErrField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sledId = iprot.readString();
      struct.setSledIdIsSet(true);
      struct.errorID = iprot.readI32();
      struct.setErrorIDIsSet(true);
      struct.errorMsg = iprot.readString();
      struct.setErrorMsgIsSet(true);
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.orderActionRef = iprot.readI32();
        struct.setOrderActionRefIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderRef = iprot.readString();
        struct.setOrderRefIsSet(true);
      }
      if (incoming.get(2)) {
        struct.requestID = iprot.readI32();
        struct.setRequestIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.frontID = iprot.readI32();
        struct.setFrontIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sessionID = iprot.readI32();
        struct.setSessionIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.orderSysID = iprot.readString();
        struct.setOrderSysIDIsSet(true);
      }
      if (incoming.get(7)) {
        struct.actionFlag = iprot.readByte();
        struct.setActionFlagIsSet(true);
      }
      if (incoming.get(8)) {
        struct.limitPrice = iprot.readDouble();
        struct.setLimitPriceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.volumeChange = iprot.readI32();
        struct.setVolumeChangeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.actionDate = iprot.readString();
        struct.setActionDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.actionTime = iprot.readString();
        struct.setActionTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.traderID = iprot.readString();
        struct.setTraderIDIsSet(true);
      }
      if (incoming.get(13)) {
        struct.installID = iprot.readI32();
        struct.setInstallIDIsSet(true);
      }
      if (incoming.get(14)) {
        struct.orderLocalID = iprot.readString();
        struct.setOrderLocalIDIsSet(true);
      }
      if (incoming.get(15)) {
        struct.actionLocalID = iprot.readString();
        struct.setActionLocalIDIsSet(true);
      }
      if (incoming.get(16)) {
        struct.participantID = iprot.readString();
        struct.setParticipantIDIsSet(true);
      }
      if (incoming.get(17)) {
        struct.clientID = iprot.readString();
        struct.setClientIDIsSet(true);
      }
      if (incoming.get(18)) {
        struct.businessUnit = iprot.readString();
        struct.setBusinessUnitIsSet(true);
      }
      if (incoming.get(19)) {
        struct.orderActionStatus = iprot.readByte();
        struct.setOrderActionStatusIsSet(true);
      }
      if (incoming.get(20)) {
        struct.statusMsg = iprot.readString();
        struct.setStatusMsgIsSet(true);
      }
      if (incoming.get(21)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(22)) {
        struct.actionDateTime = iprot.readI64();
        struct.setActionDateTimeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
      if (incoming.get(24)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
    }
  }

}

