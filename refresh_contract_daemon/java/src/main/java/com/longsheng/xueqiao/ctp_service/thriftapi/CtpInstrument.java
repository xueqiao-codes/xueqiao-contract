/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.ctp_service.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CtpInstrument implements org.apache.thrift.TBase<CtpInstrument, CtpInstrument._Fields>, java.io.Serializable, Cloneable, Comparable<CtpInstrument> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CtpInstrument");

  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INSTRUMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXCHANGE_INST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeInstID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PRODUCT_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("productClass", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField DELIVERY_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryYear", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DELIVERY_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryMonth", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MAX_MARKET_ORDER_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxMarketOrderVolume", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField MIN_MARKET_ORDER_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("minMarketOrderVolume", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField MAX_LIMIT_ORDER_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxLimitOrderVolume", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField MIN_LIMIT_ORDER_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("minLimitOrderVolume", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField VOLUME_MULTIPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeMultiple", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PRICE_TICK_FIELD_DESC = new org.apache.thrift.protocol.TField("priceTick", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField OPEN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("openDate", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField EXPIRE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("expireDate", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField START_DELIV_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDelivDate", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField END_DELIV_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDelivDate", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField INST_LIFE_PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("instLifePhase", org.apache.thrift.protocol.TType.BYTE, (short)20);
  private static final org.apache.thrift.protocol.TField IS_TRADING_FIELD_DESC = new org.apache.thrift.protocol.TField("isTrading", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField POSITION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionType", org.apache.thrift.protocol.TType.BYTE, (short)22);
  private static final org.apache.thrift.protocol.TField POSITION_DATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionDateType", org.apache.thrift.protocol.TType.BYTE, (short)23);
  private static final org.apache.thrift.protocol.TField LONG_MARGIN_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("longMarginRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField SHORT_MARGIN_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("shortMarginRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField MAX_MARGIN_SIDE_ALGORITHM_FIELD_DESC = new org.apache.thrift.protocol.TField("maxMarginSideAlgorithm", org.apache.thrift.protocol.TType.BYTE, (short)26);
  private static final org.apache.thrift.protocol.TField UNDERLYING_INSTR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("underlyingInstrID", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField STRIKE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("strikePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField OPTIONS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("optionsType", org.apache.thrift.protocol.TType.BYTE, (short)29);
  private static final org.apache.thrift.protocol.TField UNDERLYING_MULTIPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("underlyingMultiple", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField COMBINATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("combinationType", org.apache.thrift.protocol.TType.BYTE, (short)31);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)32);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CtpInstrumentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CtpInstrumentTupleSchemeFactory());
  }

  public String instrumentID; // optional
  public String exchangeID; // optional
  public String instrumentName; // optional
  public String exchangeInstID; // optional
  public String productID; // optional
  public byte productClass; // optional
  public int deliveryYear; // optional
  public int deliveryMonth; // optional
  public int maxMarketOrderVolume; // optional
  public int minMarketOrderVolume; // optional
  public int maxLimitOrderVolume; // optional
  public int minLimitOrderVolume; // optional
  public int volumeMultiple; // optional
  public double priceTick; // optional
  public String createDate; // optional
  public String openDate; // optional
  public String expireDate; // optional
  public String startDelivDate; // optional
  public String endDelivDate; // optional
  public byte instLifePhase; // optional
  public boolean isTrading; // optional
  public byte positionType; // optional
  public byte positionDateType; // optional
  public double longMarginRatio; // optional
  public double shortMarginRatio; // optional
  public byte maxMarginSideAlgorithm; // optional
  public String underlyingInstrID; // optional
  public double strikePrice; // optional
  public byte optionsType; // optional
  public double underlyingMultiple; // optional
  public byte combinationType; // optional
  public int sledAccountId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTRUMENT_ID((short)1, "instrumentID"),
    EXCHANGE_ID((short)2, "exchangeID"),
    INSTRUMENT_NAME((short)3, "instrumentName"),
    EXCHANGE_INST_ID((short)4, "exchangeInstID"),
    PRODUCT_ID((short)5, "productID"),
    PRODUCT_CLASS((short)6, "productClass"),
    DELIVERY_YEAR((short)7, "deliveryYear"),
    DELIVERY_MONTH((short)8, "deliveryMonth"),
    MAX_MARKET_ORDER_VOLUME((short)9, "maxMarketOrderVolume"),
    MIN_MARKET_ORDER_VOLUME((short)10, "minMarketOrderVolume"),
    MAX_LIMIT_ORDER_VOLUME((short)11, "maxLimitOrderVolume"),
    MIN_LIMIT_ORDER_VOLUME((short)12, "minLimitOrderVolume"),
    VOLUME_MULTIPLE((short)13, "volumeMultiple"),
    PRICE_TICK((short)14, "priceTick"),
    CREATE_DATE((short)15, "createDate"),
    OPEN_DATE((short)16, "openDate"),
    EXPIRE_DATE((short)17, "expireDate"),
    START_DELIV_DATE((short)18, "startDelivDate"),
    END_DELIV_DATE((short)19, "endDelivDate"),
    INST_LIFE_PHASE((short)20, "instLifePhase"),
    IS_TRADING((short)21, "isTrading"),
    POSITION_TYPE((short)22, "positionType"),
    POSITION_DATE_TYPE((short)23, "positionDateType"),
    LONG_MARGIN_RATIO((short)24, "longMarginRatio"),
    SHORT_MARGIN_RATIO((short)25, "shortMarginRatio"),
    MAX_MARGIN_SIDE_ALGORITHM((short)26, "maxMarginSideAlgorithm"),
    UNDERLYING_INSTR_ID((short)27, "underlyingInstrID"),
    STRIKE_PRICE((short)28, "strikePrice"),
    OPTIONS_TYPE((short)29, "optionsType"),
    UNDERLYING_MULTIPLE((short)30, "underlyingMultiple"),
    COMBINATION_TYPE((short)31, "combinationType"),
    SLED_ACCOUNT_ID((short)32, "sledAccountId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 2: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 3: // INSTRUMENT_NAME
          return INSTRUMENT_NAME;
        case 4: // EXCHANGE_INST_ID
          return EXCHANGE_INST_ID;
        case 5: // PRODUCT_ID
          return PRODUCT_ID;
        case 6: // PRODUCT_CLASS
          return PRODUCT_CLASS;
        case 7: // DELIVERY_YEAR
          return DELIVERY_YEAR;
        case 8: // DELIVERY_MONTH
          return DELIVERY_MONTH;
        case 9: // MAX_MARKET_ORDER_VOLUME
          return MAX_MARKET_ORDER_VOLUME;
        case 10: // MIN_MARKET_ORDER_VOLUME
          return MIN_MARKET_ORDER_VOLUME;
        case 11: // MAX_LIMIT_ORDER_VOLUME
          return MAX_LIMIT_ORDER_VOLUME;
        case 12: // MIN_LIMIT_ORDER_VOLUME
          return MIN_LIMIT_ORDER_VOLUME;
        case 13: // VOLUME_MULTIPLE
          return VOLUME_MULTIPLE;
        case 14: // PRICE_TICK
          return PRICE_TICK;
        case 15: // CREATE_DATE
          return CREATE_DATE;
        case 16: // OPEN_DATE
          return OPEN_DATE;
        case 17: // EXPIRE_DATE
          return EXPIRE_DATE;
        case 18: // START_DELIV_DATE
          return START_DELIV_DATE;
        case 19: // END_DELIV_DATE
          return END_DELIV_DATE;
        case 20: // INST_LIFE_PHASE
          return INST_LIFE_PHASE;
        case 21: // IS_TRADING
          return IS_TRADING;
        case 22: // POSITION_TYPE
          return POSITION_TYPE;
        case 23: // POSITION_DATE_TYPE
          return POSITION_DATE_TYPE;
        case 24: // LONG_MARGIN_RATIO
          return LONG_MARGIN_RATIO;
        case 25: // SHORT_MARGIN_RATIO
          return SHORT_MARGIN_RATIO;
        case 26: // MAX_MARGIN_SIDE_ALGORITHM
          return MAX_MARGIN_SIDE_ALGORITHM;
        case 27: // UNDERLYING_INSTR_ID
          return UNDERLYING_INSTR_ID;
        case 28: // STRIKE_PRICE
          return STRIKE_PRICE;
        case 29: // OPTIONS_TYPE
          return OPTIONS_TYPE;
        case 30: // UNDERLYING_MULTIPLE
          return UNDERLYING_MULTIPLE;
        case 31: // COMBINATION_TYPE
          return COMBINATION_TYPE;
        case 32: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRODUCTCLASS_ISSET_ID = 0;
  private static final int __DELIVERYYEAR_ISSET_ID = 1;
  private static final int __DELIVERYMONTH_ISSET_ID = 2;
  private static final int __MAXMARKETORDERVOLUME_ISSET_ID = 3;
  private static final int __MINMARKETORDERVOLUME_ISSET_ID = 4;
  private static final int __MAXLIMITORDERVOLUME_ISSET_ID = 5;
  private static final int __MINLIMITORDERVOLUME_ISSET_ID = 6;
  private static final int __VOLUMEMULTIPLE_ISSET_ID = 7;
  private static final int __PRICETICK_ISSET_ID = 8;
  private static final int __INSTLIFEPHASE_ISSET_ID = 9;
  private static final int __ISTRADING_ISSET_ID = 10;
  private static final int __POSITIONTYPE_ISSET_ID = 11;
  private static final int __POSITIONDATETYPE_ISSET_ID = 12;
  private static final int __LONGMARGINRATIO_ISSET_ID = 13;
  private static final int __SHORTMARGINRATIO_ISSET_ID = 14;
  private static final int __MAXMARGINSIDEALGORITHM_ISSET_ID = 15;
  private static final int __STRIKEPRICE_ISSET_ID = 16;
  private static final int __OPTIONSTYPE_ISSET_ID = 17;
  private static final int __UNDERLYINGMULTIPLE_ISSET_ID = 18;
  private static final int __COMBINATIONTYPE_ISSET_ID = 19;
  private static final int __SLEDACCOUNTID_ISSET_ID = 20;
  private int __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.INSTRUMENT_ID,_Fields.EXCHANGE_ID,_Fields.INSTRUMENT_NAME,_Fields.EXCHANGE_INST_ID,_Fields.PRODUCT_ID,_Fields.PRODUCT_CLASS,_Fields.DELIVERY_YEAR,_Fields.DELIVERY_MONTH,_Fields.MAX_MARKET_ORDER_VOLUME,_Fields.MIN_MARKET_ORDER_VOLUME,_Fields.MAX_LIMIT_ORDER_VOLUME,_Fields.MIN_LIMIT_ORDER_VOLUME,_Fields.VOLUME_MULTIPLE,_Fields.PRICE_TICK,_Fields.CREATE_DATE,_Fields.OPEN_DATE,_Fields.EXPIRE_DATE,_Fields.START_DELIV_DATE,_Fields.END_DELIV_DATE,_Fields.INST_LIFE_PHASE,_Fields.IS_TRADING,_Fields.POSITION_TYPE,_Fields.POSITION_DATE_TYPE,_Fields.LONG_MARGIN_RATIO,_Fields.SHORT_MARGIN_RATIO,_Fields.MAX_MARGIN_SIDE_ALGORITHM,_Fields.UNDERLYING_INSTR_ID,_Fields.STRIKE_PRICE,_Fields.OPTIONS_TYPE,_Fields.UNDERLYING_MULTIPLE,_Fields.COMBINATION_TYPE,_Fields.SLED_ACCOUNT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTRUMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("instrumentName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCHANGE_INST_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeInstID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_CLASS, new org.apache.thrift.meta_data.FieldMetaData("productClass", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DELIVERY_YEAR, new org.apache.thrift.meta_data.FieldMetaData("deliveryYear", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DELIVERY_MONTH, new org.apache.thrift.meta_data.FieldMetaData("deliveryMonth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_MARKET_ORDER_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("maxMarketOrderVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_MARKET_ORDER_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("minMarketOrderVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_LIMIT_ORDER_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("maxLimitOrderVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_LIMIT_ORDER_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("minLimitOrderVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VOLUME_MULTIPLE, new org.apache.thrift.meta_data.FieldMetaData("volumeMultiple", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRICE_TICK, new org.apache.thrift.meta_data.FieldMetaData("priceTick", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN_DATE, new org.apache.thrift.meta_data.FieldMetaData("openDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRE_DATE, new org.apache.thrift.meta_data.FieldMetaData("expireDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_DELIV_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDelivDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DELIV_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDelivDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INST_LIFE_PHASE, new org.apache.thrift.meta_data.FieldMetaData("instLifePhase", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.IS_TRADING, new org.apache.thrift.meta_data.FieldMetaData("isTrading", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.POSITION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("positionType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.POSITION_DATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("positionDateType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.LONG_MARGIN_RATIO, new org.apache.thrift.meta_data.FieldMetaData("longMarginRatio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHORT_MARGIN_RATIO, new org.apache.thrift.meta_data.FieldMetaData("shortMarginRatio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_MARGIN_SIDE_ALGORITHM, new org.apache.thrift.meta_data.FieldMetaData("maxMarginSideAlgorithm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.UNDERLYING_INSTR_ID, new org.apache.thrift.meta_data.FieldMetaData("underlyingInstrID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRIKE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("strikePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPTIONS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("optionsType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.UNDERLYING_MULTIPLE, new org.apache.thrift.meta_data.FieldMetaData("underlyingMultiple", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMBINATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("combinationType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CtpInstrument.class, metaDataMap);
  }

  public CtpInstrument() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CtpInstrument(CtpInstrument other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    if (other.isSetInstrumentName()) {
      this.instrumentName = other.instrumentName;
    }
    if (other.isSetExchangeInstID()) {
      this.exchangeInstID = other.exchangeInstID;
    }
    if (other.isSetProductID()) {
      this.productID = other.productID;
    }
    this.productClass = other.productClass;
    this.deliveryYear = other.deliveryYear;
    this.deliveryMonth = other.deliveryMonth;
    this.maxMarketOrderVolume = other.maxMarketOrderVolume;
    this.minMarketOrderVolume = other.minMarketOrderVolume;
    this.maxLimitOrderVolume = other.maxLimitOrderVolume;
    this.minLimitOrderVolume = other.minLimitOrderVolume;
    this.volumeMultiple = other.volumeMultiple;
    this.priceTick = other.priceTick;
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    if (other.isSetOpenDate()) {
      this.openDate = other.openDate;
    }
    if (other.isSetExpireDate()) {
      this.expireDate = other.expireDate;
    }
    if (other.isSetStartDelivDate()) {
      this.startDelivDate = other.startDelivDate;
    }
    if (other.isSetEndDelivDate()) {
      this.endDelivDate = other.endDelivDate;
    }
    this.instLifePhase = other.instLifePhase;
    this.isTrading = other.isTrading;
    this.positionType = other.positionType;
    this.positionDateType = other.positionDateType;
    this.longMarginRatio = other.longMarginRatio;
    this.shortMarginRatio = other.shortMarginRatio;
    this.maxMarginSideAlgorithm = other.maxMarginSideAlgorithm;
    if (other.isSetUnderlyingInstrID()) {
      this.underlyingInstrID = other.underlyingInstrID;
    }
    this.strikePrice = other.strikePrice;
    this.optionsType = other.optionsType;
    this.underlyingMultiple = other.underlyingMultiple;
    this.combinationType = other.combinationType;
    this.sledAccountId = other.sledAccountId;
  }

  public CtpInstrument deepCopy() {
    return new CtpInstrument(this);
  }

  @Override
  public void clear() {
    this.instrumentID = null;
    this.exchangeID = null;
    this.instrumentName = null;
    this.exchangeInstID = null;
    this.productID = null;
    setProductClassIsSet(false);
    this.productClass = 0;
    setDeliveryYearIsSet(false);
    this.deliveryYear = 0;
    setDeliveryMonthIsSet(false);
    this.deliveryMonth = 0;
    setMaxMarketOrderVolumeIsSet(false);
    this.maxMarketOrderVolume = 0;
    setMinMarketOrderVolumeIsSet(false);
    this.minMarketOrderVolume = 0;
    setMaxLimitOrderVolumeIsSet(false);
    this.maxLimitOrderVolume = 0;
    setMinLimitOrderVolumeIsSet(false);
    this.minLimitOrderVolume = 0;
    setVolumeMultipleIsSet(false);
    this.volumeMultiple = 0;
    setPriceTickIsSet(false);
    this.priceTick = 0.0;
    this.createDate = null;
    this.openDate = null;
    this.expireDate = null;
    this.startDelivDate = null;
    this.endDelivDate = null;
    setInstLifePhaseIsSet(false);
    this.instLifePhase = 0;
    setIsTradingIsSet(false);
    this.isTrading = false;
    setPositionTypeIsSet(false);
    this.positionType = 0;
    setPositionDateTypeIsSet(false);
    this.positionDateType = 0;
    setLongMarginRatioIsSet(false);
    this.longMarginRatio = 0.0;
    setShortMarginRatioIsSet(false);
    this.shortMarginRatio = 0.0;
    setMaxMarginSideAlgorithmIsSet(false);
    this.maxMarginSideAlgorithm = 0;
    this.underlyingInstrID = null;
    setStrikePriceIsSet(false);
    this.strikePrice = 0.0;
    setOptionsTypeIsSet(false);
    this.optionsType = 0;
    setUnderlyingMultipleIsSet(false);
    this.underlyingMultiple = 0.0;
    setCombinationTypeIsSet(false);
    this.combinationType = 0;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CtpInstrument setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CtpInstrument setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public String getInstrumentName() {
    return this.instrumentName;
  }

  public CtpInstrument setInstrumentName(String instrumentName) {
    this.instrumentName = instrumentName;
    return this;
  }

  public void unsetInstrumentName() {
    this.instrumentName = null;
  }

  /** Returns true if field instrumentName is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentName() {
    return this.instrumentName != null;
  }

  public void setInstrumentNameIsSet(boolean value) {
    if (!value) {
      this.instrumentName = null;
    }
  }

  public String getExchangeInstID() {
    return this.exchangeInstID;
  }

  public CtpInstrument setExchangeInstID(String exchangeInstID) {
    this.exchangeInstID = exchangeInstID;
    return this;
  }

  public void unsetExchangeInstID() {
    this.exchangeInstID = null;
  }

  /** Returns true if field exchangeInstID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeInstID() {
    return this.exchangeInstID != null;
  }

  public void setExchangeInstIDIsSet(boolean value) {
    if (!value) {
      this.exchangeInstID = null;
    }
  }

  public String getProductID() {
    return this.productID;
  }

  public CtpInstrument setProductID(String productID) {
    this.productID = productID;
    return this;
  }

  public void unsetProductID() {
    this.productID = null;
  }

  /** Returns true if field productID is set (has been assigned a value) and false otherwise */
  public boolean isSetProductID() {
    return this.productID != null;
  }

  public void setProductIDIsSet(boolean value) {
    if (!value) {
      this.productID = null;
    }
  }

  public byte getProductClass() {
    return this.productClass;
  }

  public CtpInstrument setProductClass(byte productClass) {
    this.productClass = productClass;
    setProductClassIsSet(true);
    return this;
  }

  public void unsetProductClass() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTCLASS_ISSET_ID);
  }

  /** Returns true if field productClass is set (has been assigned a value) and false otherwise */
  public boolean isSetProductClass() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTCLASS_ISSET_ID);
  }

  public void setProductClassIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTCLASS_ISSET_ID, value);
  }

  public int getDeliveryYear() {
    return this.deliveryYear;
  }

  public CtpInstrument setDeliveryYear(int deliveryYear) {
    this.deliveryYear = deliveryYear;
    setDeliveryYearIsSet(true);
    return this;
  }

  public void unsetDeliveryYear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYYEAR_ISSET_ID);
  }

  /** Returns true if field deliveryYear is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryYear() {
    return EncodingUtils.testBit(__isset_bitfield, __DELIVERYYEAR_ISSET_ID);
  }

  public void setDeliveryYearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYYEAR_ISSET_ID, value);
  }

  public int getDeliveryMonth() {
    return this.deliveryMonth;
  }

  public CtpInstrument setDeliveryMonth(int deliveryMonth) {
    this.deliveryMonth = deliveryMonth;
    setDeliveryMonthIsSet(true);
    return this;
  }

  public void unsetDeliveryMonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYMONTH_ISSET_ID);
  }

  /** Returns true if field deliveryMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryMonth() {
    return EncodingUtils.testBit(__isset_bitfield, __DELIVERYMONTH_ISSET_ID);
  }

  public void setDeliveryMonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYMONTH_ISSET_ID, value);
  }

  public int getMaxMarketOrderVolume() {
    return this.maxMarketOrderVolume;
  }

  public CtpInstrument setMaxMarketOrderVolume(int maxMarketOrderVolume) {
    this.maxMarketOrderVolume = maxMarketOrderVolume;
    setMaxMarketOrderVolumeIsSet(true);
    return this;
  }

  public void unsetMaxMarketOrderVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXMARKETORDERVOLUME_ISSET_ID);
  }

  /** Returns true if field maxMarketOrderVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxMarketOrderVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXMARKETORDERVOLUME_ISSET_ID);
  }

  public void setMaxMarketOrderVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXMARKETORDERVOLUME_ISSET_ID, value);
  }

  public int getMinMarketOrderVolume() {
    return this.minMarketOrderVolume;
  }

  public CtpInstrument setMinMarketOrderVolume(int minMarketOrderVolume) {
    this.minMarketOrderVolume = minMarketOrderVolume;
    setMinMarketOrderVolumeIsSet(true);
    return this;
  }

  public void unsetMinMarketOrderVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINMARKETORDERVOLUME_ISSET_ID);
  }

  /** Returns true if field minMarketOrderVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMinMarketOrderVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MINMARKETORDERVOLUME_ISSET_ID);
  }

  public void setMinMarketOrderVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINMARKETORDERVOLUME_ISSET_ID, value);
  }

  public int getMaxLimitOrderVolume() {
    return this.maxLimitOrderVolume;
  }

  public CtpInstrument setMaxLimitOrderVolume(int maxLimitOrderVolume) {
    this.maxLimitOrderVolume = maxLimitOrderVolume;
    setMaxLimitOrderVolumeIsSet(true);
    return this;
  }

  public void unsetMaxLimitOrderVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXLIMITORDERVOLUME_ISSET_ID);
  }

  /** Returns true if field maxLimitOrderVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxLimitOrderVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXLIMITORDERVOLUME_ISSET_ID);
  }

  public void setMaxLimitOrderVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXLIMITORDERVOLUME_ISSET_ID, value);
  }

  public int getMinLimitOrderVolume() {
    return this.minLimitOrderVolume;
  }

  public CtpInstrument setMinLimitOrderVolume(int minLimitOrderVolume) {
    this.minLimitOrderVolume = minLimitOrderVolume;
    setMinLimitOrderVolumeIsSet(true);
    return this;
  }

  public void unsetMinLimitOrderVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINLIMITORDERVOLUME_ISSET_ID);
  }

  /** Returns true if field minLimitOrderVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMinLimitOrderVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MINLIMITORDERVOLUME_ISSET_ID);
  }

  public void setMinLimitOrderVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINLIMITORDERVOLUME_ISSET_ID, value);
  }

  public int getVolumeMultiple() {
    return this.volumeMultiple;
  }

  public CtpInstrument setVolumeMultiple(int volumeMultiple) {
    this.volumeMultiple = volumeMultiple;
    setVolumeMultipleIsSet(true);
    return this;
  }

  public void unsetVolumeMultiple() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMEMULTIPLE_ISSET_ID);
  }

  /** Returns true if field volumeMultiple is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeMultiple() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMEMULTIPLE_ISSET_ID);
  }

  public void setVolumeMultipleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMEMULTIPLE_ISSET_ID, value);
  }

  public double getPriceTick() {
    return this.priceTick;
  }

  public CtpInstrument setPriceTick(double priceTick) {
    this.priceTick = priceTick;
    setPriceTickIsSet(true);
    return this;
  }

  public void unsetPriceTick() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICETICK_ISSET_ID);
  }

  /** Returns true if field priceTick is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceTick() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICETICK_ISSET_ID);
  }

  public void setPriceTickIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICETICK_ISSET_ID, value);
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public CtpInstrument setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public String getOpenDate() {
    return this.openDate;
  }

  public CtpInstrument setOpenDate(String openDate) {
    this.openDate = openDate;
    return this;
  }

  public void unsetOpenDate() {
    this.openDate = null;
  }

  /** Returns true if field openDate is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenDate() {
    return this.openDate != null;
  }

  public void setOpenDateIsSet(boolean value) {
    if (!value) {
      this.openDate = null;
    }
  }

  public String getExpireDate() {
    return this.expireDate;
  }

  public CtpInstrument setExpireDate(String expireDate) {
    this.expireDate = expireDate;
    return this;
  }

  public void unsetExpireDate() {
    this.expireDate = null;
  }

  /** Returns true if field expireDate is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireDate() {
    return this.expireDate != null;
  }

  public void setExpireDateIsSet(boolean value) {
    if (!value) {
      this.expireDate = null;
    }
  }

  public String getStartDelivDate() {
    return this.startDelivDate;
  }

  public CtpInstrument setStartDelivDate(String startDelivDate) {
    this.startDelivDate = startDelivDate;
    return this;
  }

  public void unsetStartDelivDate() {
    this.startDelivDate = null;
  }

  /** Returns true if field startDelivDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDelivDate() {
    return this.startDelivDate != null;
  }

  public void setStartDelivDateIsSet(boolean value) {
    if (!value) {
      this.startDelivDate = null;
    }
  }

  public String getEndDelivDate() {
    return this.endDelivDate;
  }

  public CtpInstrument setEndDelivDate(String endDelivDate) {
    this.endDelivDate = endDelivDate;
    return this;
  }

  public void unsetEndDelivDate() {
    this.endDelivDate = null;
  }

  /** Returns true if field endDelivDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDelivDate() {
    return this.endDelivDate != null;
  }

  public void setEndDelivDateIsSet(boolean value) {
    if (!value) {
      this.endDelivDate = null;
    }
  }

  public byte getInstLifePhase() {
    return this.instLifePhase;
  }

  public CtpInstrument setInstLifePhase(byte instLifePhase) {
    this.instLifePhase = instLifePhase;
    setInstLifePhaseIsSet(true);
    return this;
  }

  public void unsetInstLifePhase() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSTLIFEPHASE_ISSET_ID);
  }

  /** Returns true if field instLifePhase is set (has been assigned a value) and false otherwise */
  public boolean isSetInstLifePhase() {
    return EncodingUtils.testBit(__isset_bitfield, __INSTLIFEPHASE_ISSET_ID);
  }

  public void setInstLifePhaseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSTLIFEPHASE_ISSET_ID, value);
  }

  public boolean isIsTrading() {
    return this.isTrading;
  }

  public CtpInstrument setIsTrading(boolean isTrading) {
    this.isTrading = isTrading;
    setIsTradingIsSet(true);
    return this;
  }

  public void unsetIsTrading() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTRADING_ISSET_ID);
  }

  /** Returns true if field isTrading is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTrading() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTRADING_ISSET_ID);
  }

  public void setIsTradingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTRADING_ISSET_ID, value);
  }

  public byte getPositionType() {
    return this.positionType;
  }

  public CtpInstrument setPositionType(byte positionType) {
    this.positionType = positionType;
    setPositionTypeIsSet(true);
    return this;
  }

  public void unsetPositionType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONTYPE_ISSET_ID);
  }

  /** Returns true if field positionType is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionType() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONTYPE_ISSET_ID);
  }

  public void setPositionTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONTYPE_ISSET_ID, value);
  }

  public byte getPositionDateType() {
    return this.positionDateType;
  }

  public CtpInstrument setPositionDateType(byte positionDateType) {
    this.positionDateType = positionDateType;
    setPositionDateTypeIsSet(true);
    return this;
  }

  public void unsetPositionDateType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONDATETYPE_ISSET_ID);
  }

  /** Returns true if field positionDateType is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionDateType() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONDATETYPE_ISSET_ID);
  }

  public void setPositionDateTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONDATETYPE_ISSET_ID, value);
  }

  public double getLongMarginRatio() {
    return this.longMarginRatio;
  }

  public CtpInstrument setLongMarginRatio(double longMarginRatio) {
    this.longMarginRatio = longMarginRatio;
    setLongMarginRatioIsSet(true);
    return this;
  }

  public void unsetLongMarginRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGMARGINRATIO_ISSET_ID);
  }

  /** Returns true if field longMarginRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetLongMarginRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGMARGINRATIO_ISSET_ID);
  }

  public void setLongMarginRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGMARGINRATIO_ISSET_ID, value);
  }

  public double getShortMarginRatio() {
    return this.shortMarginRatio;
  }

  public CtpInstrument setShortMarginRatio(double shortMarginRatio) {
    this.shortMarginRatio = shortMarginRatio;
    setShortMarginRatioIsSet(true);
    return this;
  }

  public void unsetShortMarginRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHORTMARGINRATIO_ISSET_ID);
  }

  /** Returns true if field shortMarginRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetShortMarginRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __SHORTMARGINRATIO_ISSET_ID);
  }

  public void setShortMarginRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHORTMARGINRATIO_ISSET_ID, value);
  }

  public byte getMaxMarginSideAlgorithm() {
    return this.maxMarginSideAlgorithm;
  }

  public CtpInstrument setMaxMarginSideAlgorithm(byte maxMarginSideAlgorithm) {
    this.maxMarginSideAlgorithm = maxMarginSideAlgorithm;
    setMaxMarginSideAlgorithmIsSet(true);
    return this;
  }

  public void unsetMaxMarginSideAlgorithm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXMARGINSIDEALGORITHM_ISSET_ID);
  }

  /** Returns true if field maxMarginSideAlgorithm is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxMarginSideAlgorithm() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXMARGINSIDEALGORITHM_ISSET_ID);
  }

  public void setMaxMarginSideAlgorithmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXMARGINSIDEALGORITHM_ISSET_ID, value);
  }

  public String getUnderlyingInstrID() {
    return this.underlyingInstrID;
  }

  public CtpInstrument setUnderlyingInstrID(String underlyingInstrID) {
    this.underlyingInstrID = underlyingInstrID;
    return this;
  }

  public void unsetUnderlyingInstrID() {
    this.underlyingInstrID = null;
  }

  /** Returns true if field underlyingInstrID is set (has been assigned a value) and false otherwise */
  public boolean isSetUnderlyingInstrID() {
    return this.underlyingInstrID != null;
  }

  public void setUnderlyingInstrIDIsSet(boolean value) {
    if (!value) {
      this.underlyingInstrID = null;
    }
  }

  public double getStrikePrice() {
    return this.strikePrice;
  }

  public CtpInstrument setStrikePrice(double strikePrice) {
    this.strikePrice = strikePrice;
    setStrikePriceIsSet(true);
    return this;
  }

  public void unsetStrikePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRIKEPRICE_ISSET_ID);
  }

  /** Returns true if field strikePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetStrikePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __STRIKEPRICE_ISSET_ID);
  }

  public void setStrikePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRIKEPRICE_ISSET_ID, value);
  }

  public byte getOptionsType() {
    return this.optionsType;
  }

  public CtpInstrument setOptionsType(byte optionsType) {
    this.optionsType = optionsType;
    setOptionsTypeIsSet(true);
    return this;
  }

  public void unsetOptionsType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPTIONSTYPE_ISSET_ID);
  }

  /** Returns true if field optionsType is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionsType() {
    return EncodingUtils.testBit(__isset_bitfield, __OPTIONSTYPE_ISSET_ID);
  }

  public void setOptionsTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPTIONSTYPE_ISSET_ID, value);
  }

  public double getUnderlyingMultiple() {
    return this.underlyingMultiple;
  }

  public CtpInstrument setUnderlyingMultiple(double underlyingMultiple) {
    this.underlyingMultiple = underlyingMultiple;
    setUnderlyingMultipleIsSet(true);
    return this;
  }

  public void unsetUnderlyingMultiple() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNDERLYINGMULTIPLE_ISSET_ID);
  }

  /** Returns true if field underlyingMultiple is set (has been assigned a value) and false otherwise */
  public boolean isSetUnderlyingMultiple() {
    return EncodingUtils.testBit(__isset_bitfield, __UNDERLYINGMULTIPLE_ISSET_ID);
  }

  public void setUnderlyingMultipleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNDERLYINGMULTIPLE_ISSET_ID, value);
  }

  public byte getCombinationType() {
    return this.combinationType;
  }

  public CtpInstrument setCombinationType(byte combinationType) {
    this.combinationType = combinationType;
    setCombinationTypeIsSet(true);
    return this;
  }

  public void unsetCombinationType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMBINATIONTYPE_ISSET_ID);
  }

  /** Returns true if field combinationType is set (has been assigned a value) and false otherwise */
  public boolean isSetCombinationType() {
    return EncodingUtils.testBit(__isset_bitfield, __COMBINATIONTYPE_ISSET_ID);
  }

  public void setCombinationTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMBINATIONTYPE_ISSET_ID, value);
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public CtpInstrument setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case INSTRUMENT_NAME:
      if (value == null) {
        unsetInstrumentName();
      } else {
        setInstrumentName((String)value);
      }
      break;

    case EXCHANGE_INST_ID:
      if (value == null) {
        unsetExchangeInstID();
      } else {
        setExchangeInstID((String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductID();
      } else {
        setProductID((String)value);
      }
      break;

    case PRODUCT_CLASS:
      if (value == null) {
        unsetProductClass();
      } else {
        setProductClass((Byte)value);
      }
      break;

    case DELIVERY_YEAR:
      if (value == null) {
        unsetDeliveryYear();
      } else {
        setDeliveryYear((Integer)value);
      }
      break;

    case DELIVERY_MONTH:
      if (value == null) {
        unsetDeliveryMonth();
      } else {
        setDeliveryMonth((Integer)value);
      }
      break;

    case MAX_MARKET_ORDER_VOLUME:
      if (value == null) {
        unsetMaxMarketOrderVolume();
      } else {
        setMaxMarketOrderVolume((Integer)value);
      }
      break;

    case MIN_MARKET_ORDER_VOLUME:
      if (value == null) {
        unsetMinMarketOrderVolume();
      } else {
        setMinMarketOrderVolume((Integer)value);
      }
      break;

    case MAX_LIMIT_ORDER_VOLUME:
      if (value == null) {
        unsetMaxLimitOrderVolume();
      } else {
        setMaxLimitOrderVolume((Integer)value);
      }
      break;

    case MIN_LIMIT_ORDER_VOLUME:
      if (value == null) {
        unsetMinLimitOrderVolume();
      } else {
        setMinLimitOrderVolume((Integer)value);
      }
      break;

    case VOLUME_MULTIPLE:
      if (value == null) {
        unsetVolumeMultiple();
      } else {
        setVolumeMultiple((Integer)value);
      }
      break;

    case PRICE_TICK:
      if (value == null) {
        unsetPriceTick();
      } else {
        setPriceTick((Double)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case OPEN_DATE:
      if (value == null) {
        unsetOpenDate();
      } else {
        setOpenDate((String)value);
      }
      break;

    case EXPIRE_DATE:
      if (value == null) {
        unsetExpireDate();
      } else {
        setExpireDate((String)value);
      }
      break;

    case START_DELIV_DATE:
      if (value == null) {
        unsetStartDelivDate();
      } else {
        setStartDelivDate((String)value);
      }
      break;

    case END_DELIV_DATE:
      if (value == null) {
        unsetEndDelivDate();
      } else {
        setEndDelivDate((String)value);
      }
      break;

    case INST_LIFE_PHASE:
      if (value == null) {
        unsetInstLifePhase();
      } else {
        setInstLifePhase((Byte)value);
      }
      break;

    case IS_TRADING:
      if (value == null) {
        unsetIsTrading();
      } else {
        setIsTrading((Boolean)value);
      }
      break;

    case POSITION_TYPE:
      if (value == null) {
        unsetPositionType();
      } else {
        setPositionType((Byte)value);
      }
      break;

    case POSITION_DATE_TYPE:
      if (value == null) {
        unsetPositionDateType();
      } else {
        setPositionDateType((Byte)value);
      }
      break;

    case LONG_MARGIN_RATIO:
      if (value == null) {
        unsetLongMarginRatio();
      } else {
        setLongMarginRatio((Double)value);
      }
      break;

    case SHORT_MARGIN_RATIO:
      if (value == null) {
        unsetShortMarginRatio();
      } else {
        setShortMarginRatio((Double)value);
      }
      break;

    case MAX_MARGIN_SIDE_ALGORITHM:
      if (value == null) {
        unsetMaxMarginSideAlgorithm();
      } else {
        setMaxMarginSideAlgorithm((Byte)value);
      }
      break;

    case UNDERLYING_INSTR_ID:
      if (value == null) {
        unsetUnderlyingInstrID();
      } else {
        setUnderlyingInstrID((String)value);
      }
      break;

    case STRIKE_PRICE:
      if (value == null) {
        unsetStrikePrice();
      } else {
        setStrikePrice((Double)value);
      }
      break;

    case OPTIONS_TYPE:
      if (value == null) {
        unsetOptionsType();
      } else {
        setOptionsType((Byte)value);
      }
      break;

    case UNDERLYING_MULTIPLE:
      if (value == null) {
        unsetUnderlyingMultiple();
      } else {
        setUnderlyingMultiple((Double)value);
      }
      break;

    case COMBINATION_TYPE:
      if (value == null) {
        unsetCombinationType();
      } else {
        setCombinationType((Byte)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTRUMENT_ID:
      return getInstrumentID();

    case EXCHANGE_ID:
      return getExchangeID();

    case INSTRUMENT_NAME:
      return getInstrumentName();

    case EXCHANGE_INST_ID:
      return getExchangeInstID();

    case PRODUCT_ID:
      return getProductID();

    case PRODUCT_CLASS:
      return Byte.valueOf(getProductClass());

    case DELIVERY_YEAR:
      return Integer.valueOf(getDeliveryYear());

    case DELIVERY_MONTH:
      return Integer.valueOf(getDeliveryMonth());

    case MAX_MARKET_ORDER_VOLUME:
      return Integer.valueOf(getMaxMarketOrderVolume());

    case MIN_MARKET_ORDER_VOLUME:
      return Integer.valueOf(getMinMarketOrderVolume());

    case MAX_LIMIT_ORDER_VOLUME:
      return Integer.valueOf(getMaxLimitOrderVolume());

    case MIN_LIMIT_ORDER_VOLUME:
      return Integer.valueOf(getMinLimitOrderVolume());

    case VOLUME_MULTIPLE:
      return Integer.valueOf(getVolumeMultiple());

    case PRICE_TICK:
      return Double.valueOf(getPriceTick());

    case CREATE_DATE:
      return getCreateDate();

    case OPEN_DATE:
      return getOpenDate();

    case EXPIRE_DATE:
      return getExpireDate();

    case START_DELIV_DATE:
      return getStartDelivDate();

    case END_DELIV_DATE:
      return getEndDelivDate();

    case INST_LIFE_PHASE:
      return Byte.valueOf(getInstLifePhase());

    case IS_TRADING:
      return Boolean.valueOf(isIsTrading());

    case POSITION_TYPE:
      return Byte.valueOf(getPositionType());

    case POSITION_DATE_TYPE:
      return Byte.valueOf(getPositionDateType());

    case LONG_MARGIN_RATIO:
      return Double.valueOf(getLongMarginRatio());

    case SHORT_MARGIN_RATIO:
      return Double.valueOf(getShortMarginRatio());

    case MAX_MARGIN_SIDE_ALGORITHM:
      return Byte.valueOf(getMaxMarginSideAlgorithm());

    case UNDERLYING_INSTR_ID:
      return getUnderlyingInstrID();

    case STRIKE_PRICE:
      return Double.valueOf(getStrikePrice());

    case OPTIONS_TYPE:
      return Byte.valueOf(getOptionsType());

    case UNDERLYING_MULTIPLE:
      return Double.valueOf(getUnderlyingMultiple());

    case COMBINATION_TYPE:
      return Byte.valueOf(getCombinationType());

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case EXCHANGE_ID:
      return isSetExchangeID();
    case INSTRUMENT_NAME:
      return isSetInstrumentName();
    case EXCHANGE_INST_ID:
      return isSetExchangeInstID();
    case PRODUCT_ID:
      return isSetProductID();
    case PRODUCT_CLASS:
      return isSetProductClass();
    case DELIVERY_YEAR:
      return isSetDeliveryYear();
    case DELIVERY_MONTH:
      return isSetDeliveryMonth();
    case MAX_MARKET_ORDER_VOLUME:
      return isSetMaxMarketOrderVolume();
    case MIN_MARKET_ORDER_VOLUME:
      return isSetMinMarketOrderVolume();
    case MAX_LIMIT_ORDER_VOLUME:
      return isSetMaxLimitOrderVolume();
    case MIN_LIMIT_ORDER_VOLUME:
      return isSetMinLimitOrderVolume();
    case VOLUME_MULTIPLE:
      return isSetVolumeMultiple();
    case PRICE_TICK:
      return isSetPriceTick();
    case CREATE_DATE:
      return isSetCreateDate();
    case OPEN_DATE:
      return isSetOpenDate();
    case EXPIRE_DATE:
      return isSetExpireDate();
    case START_DELIV_DATE:
      return isSetStartDelivDate();
    case END_DELIV_DATE:
      return isSetEndDelivDate();
    case INST_LIFE_PHASE:
      return isSetInstLifePhase();
    case IS_TRADING:
      return isSetIsTrading();
    case POSITION_TYPE:
      return isSetPositionType();
    case POSITION_DATE_TYPE:
      return isSetPositionDateType();
    case LONG_MARGIN_RATIO:
      return isSetLongMarginRatio();
    case SHORT_MARGIN_RATIO:
      return isSetShortMarginRatio();
    case MAX_MARGIN_SIDE_ALGORITHM:
      return isSetMaxMarginSideAlgorithm();
    case UNDERLYING_INSTR_ID:
      return isSetUnderlyingInstrID();
    case STRIKE_PRICE:
      return isSetStrikePrice();
    case OPTIONS_TYPE:
      return isSetOptionsType();
    case UNDERLYING_MULTIPLE:
      return isSetUnderlyingMultiple();
    case COMBINATION_TYPE:
      return isSetCombinationType();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CtpInstrument)
      return this.equals((CtpInstrument)that);
    return false;
  }

  public boolean equals(CtpInstrument that) {
    if (that == null)
      return false;

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_instrumentName = true && this.isSetInstrumentName();
    boolean that_present_instrumentName = true && that.isSetInstrumentName();
    if (this_present_instrumentName || that_present_instrumentName) {
      if (!(this_present_instrumentName && that_present_instrumentName))
        return false;
      if (!this.instrumentName.equals(that.instrumentName))
        return false;
    }

    boolean this_present_exchangeInstID = true && this.isSetExchangeInstID();
    boolean that_present_exchangeInstID = true && that.isSetExchangeInstID();
    if (this_present_exchangeInstID || that_present_exchangeInstID) {
      if (!(this_present_exchangeInstID && that_present_exchangeInstID))
        return false;
      if (!this.exchangeInstID.equals(that.exchangeInstID))
        return false;
    }

    boolean this_present_productID = true && this.isSetProductID();
    boolean that_present_productID = true && that.isSetProductID();
    if (this_present_productID || that_present_productID) {
      if (!(this_present_productID && that_present_productID))
        return false;
      if (!this.productID.equals(that.productID))
        return false;
    }

    boolean this_present_productClass = true && this.isSetProductClass();
    boolean that_present_productClass = true && that.isSetProductClass();
    if (this_present_productClass || that_present_productClass) {
      if (!(this_present_productClass && that_present_productClass))
        return false;
      if (this.productClass != that.productClass)
        return false;
    }

    boolean this_present_deliveryYear = true && this.isSetDeliveryYear();
    boolean that_present_deliveryYear = true && that.isSetDeliveryYear();
    if (this_present_deliveryYear || that_present_deliveryYear) {
      if (!(this_present_deliveryYear && that_present_deliveryYear))
        return false;
      if (this.deliveryYear != that.deliveryYear)
        return false;
    }

    boolean this_present_deliveryMonth = true && this.isSetDeliveryMonth();
    boolean that_present_deliveryMonth = true && that.isSetDeliveryMonth();
    if (this_present_deliveryMonth || that_present_deliveryMonth) {
      if (!(this_present_deliveryMonth && that_present_deliveryMonth))
        return false;
      if (this.deliveryMonth != that.deliveryMonth)
        return false;
    }

    boolean this_present_maxMarketOrderVolume = true && this.isSetMaxMarketOrderVolume();
    boolean that_present_maxMarketOrderVolume = true && that.isSetMaxMarketOrderVolume();
    if (this_present_maxMarketOrderVolume || that_present_maxMarketOrderVolume) {
      if (!(this_present_maxMarketOrderVolume && that_present_maxMarketOrderVolume))
        return false;
      if (this.maxMarketOrderVolume != that.maxMarketOrderVolume)
        return false;
    }

    boolean this_present_minMarketOrderVolume = true && this.isSetMinMarketOrderVolume();
    boolean that_present_minMarketOrderVolume = true && that.isSetMinMarketOrderVolume();
    if (this_present_minMarketOrderVolume || that_present_minMarketOrderVolume) {
      if (!(this_present_minMarketOrderVolume && that_present_minMarketOrderVolume))
        return false;
      if (this.minMarketOrderVolume != that.minMarketOrderVolume)
        return false;
    }

    boolean this_present_maxLimitOrderVolume = true && this.isSetMaxLimitOrderVolume();
    boolean that_present_maxLimitOrderVolume = true && that.isSetMaxLimitOrderVolume();
    if (this_present_maxLimitOrderVolume || that_present_maxLimitOrderVolume) {
      if (!(this_present_maxLimitOrderVolume && that_present_maxLimitOrderVolume))
        return false;
      if (this.maxLimitOrderVolume != that.maxLimitOrderVolume)
        return false;
    }

    boolean this_present_minLimitOrderVolume = true && this.isSetMinLimitOrderVolume();
    boolean that_present_minLimitOrderVolume = true && that.isSetMinLimitOrderVolume();
    if (this_present_minLimitOrderVolume || that_present_minLimitOrderVolume) {
      if (!(this_present_minLimitOrderVolume && that_present_minLimitOrderVolume))
        return false;
      if (this.minLimitOrderVolume != that.minLimitOrderVolume)
        return false;
    }

    boolean this_present_volumeMultiple = true && this.isSetVolumeMultiple();
    boolean that_present_volumeMultiple = true && that.isSetVolumeMultiple();
    if (this_present_volumeMultiple || that_present_volumeMultiple) {
      if (!(this_present_volumeMultiple && that_present_volumeMultiple))
        return false;
      if (this.volumeMultiple != that.volumeMultiple)
        return false;
    }

    boolean this_present_priceTick = true && this.isSetPriceTick();
    boolean that_present_priceTick = true && that.isSetPriceTick();
    if (this_present_priceTick || that_present_priceTick) {
      if (!(this_present_priceTick && that_present_priceTick))
        return false;
      if (this.priceTick != that.priceTick)
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_openDate = true && this.isSetOpenDate();
    boolean that_present_openDate = true && that.isSetOpenDate();
    if (this_present_openDate || that_present_openDate) {
      if (!(this_present_openDate && that_present_openDate))
        return false;
      if (!this.openDate.equals(that.openDate))
        return false;
    }

    boolean this_present_expireDate = true && this.isSetExpireDate();
    boolean that_present_expireDate = true && that.isSetExpireDate();
    if (this_present_expireDate || that_present_expireDate) {
      if (!(this_present_expireDate && that_present_expireDate))
        return false;
      if (!this.expireDate.equals(that.expireDate))
        return false;
    }

    boolean this_present_startDelivDate = true && this.isSetStartDelivDate();
    boolean that_present_startDelivDate = true && that.isSetStartDelivDate();
    if (this_present_startDelivDate || that_present_startDelivDate) {
      if (!(this_present_startDelivDate && that_present_startDelivDate))
        return false;
      if (!this.startDelivDate.equals(that.startDelivDate))
        return false;
    }

    boolean this_present_endDelivDate = true && this.isSetEndDelivDate();
    boolean that_present_endDelivDate = true && that.isSetEndDelivDate();
    if (this_present_endDelivDate || that_present_endDelivDate) {
      if (!(this_present_endDelivDate && that_present_endDelivDate))
        return false;
      if (!this.endDelivDate.equals(that.endDelivDate))
        return false;
    }

    boolean this_present_instLifePhase = true && this.isSetInstLifePhase();
    boolean that_present_instLifePhase = true && that.isSetInstLifePhase();
    if (this_present_instLifePhase || that_present_instLifePhase) {
      if (!(this_present_instLifePhase && that_present_instLifePhase))
        return false;
      if (this.instLifePhase != that.instLifePhase)
        return false;
    }

    boolean this_present_isTrading = true && this.isSetIsTrading();
    boolean that_present_isTrading = true && that.isSetIsTrading();
    if (this_present_isTrading || that_present_isTrading) {
      if (!(this_present_isTrading && that_present_isTrading))
        return false;
      if (this.isTrading != that.isTrading)
        return false;
    }

    boolean this_present_positionType = true && this.isSetPositionType();
    boolean that_present_positionType = true && that.isSetPositionType();
    if (this_present_positionType || that_present_positionType) {
      if (!(this_present_positionType && that_present_positionType))
        return false;
      if (this.positionType != that.positionType)
        return false;
    }

    boolean this_present_positionDateType = true && this.isSetPositionDateType();
    boolean that_present_positionDateType = true && that.isSetPositionDateType();
    if (this_present_positionDateType || that_present_positionDateType) {
      if (!(this_present_positionDateType && that_present_positionDateType))
        return false;
      if (this.positionDateType != that.positionDateType)
        return false;
    }

    boolean this_present_longMarginRatio = true && this.isSetLongMarginRatio();
    boolean that_present_longMarginRatio = true && that.isSetLongMarginRatio();
    if (this_present_longMarginRatio || that_present_longMarginRatio) {
      if (!(this_present_longMarginRatio && that_present_longMarginRatio))
        return false;
      if (this.longMarginRatio != that.longMarginRatio)
        return false;
    }

    boolean this_present_shortMarginRatio = true && this.isSetShortMarginRatio();
    boolean that_present_shortMarginRatio = true && that.isSetShortMarginRatio();
    if (this_present_shortMarginRatio || that_present_shortMarginRatio) {
      if (!(this_present_shortMarginRatio && that_present_shortMarginRatio))
        return false;
      if (this.shortMarginRatio != that.shortMarginRatio)
        return false;
    }

    boolean this_present_maxMarginSideAlgorithm = true && this.isSetMaxMarginSideAlgorithm();
    boolean that_present_maxMarginSideAlgorithm = true && that.isSetMaxMarginSideAlgorithm();
    if (this_present_maxMarginSideAlgorithm || that_present_maxMarginSideAlgorithm) {
      if (!(this_present_maxMarginSideAlgorithm && that_present_maxMarginSideAlgorithm))
        return false;
      if (this.maxMarginSideAlgorithm != that.maxMarginSideAlgorithm)
        return false;
    }

    boolean this_present_underlyingInstrID = true && this.isSetUnderlyingInstrID();
    boolean that_present_underlyingInstrID = true && that.isSetUnderlyingInstrID();
    if (this_present_underlyingInstrID || that_present_underlyingInstrID) {
      if (!(this_present_underlyingInstrID && that_present_underlyingInstrID))
        return false;
      if (!this.underlyingInstrID.equals(that.underlyingInstrID))
        return false;
    }

    boolean this_present_strikePrice = true && this.isSetStrikePrice();
    boolean that_present_strikePrice = true && that.isSetStrikePrice();
    if (this_present_strikePrice || that_present_strikePrice) {
      if (!(this_present_strikePrice && that_present_strikePrice))
        return false;
      if (this.strikePrice != that.strikePrice)
        return false;
    }

    boolean this_present_optionsType = true && this.isSetOptionsType();
    boolean that_present_optionsType = true && that.isSetOptionsType();
    if (this_present_optionsType || that_present_optionsType) {
      if (!(this_present_optionsType && that_present_optionsType))
        return false;
      if (this.optionsType != that.optionsType)
        return false;
    }

    boolean this_present_underlyingMultiple = true && this.isSetUnderlyingMultiple();
    boolean that_present_underlyingMultiple = true && that.isSetUnderlyingMultiple();
    if (this_present_underlyingMultiple || that_present_underlyingMultiple) {
      if (!(this_present_underlyingMultiple && that_present_underlyingMultiple))
        return false;
      if (this.underlyingMultiple != that.underlyingMultiple)
        return false;
    }

    boolean this_present_combinationType = true && this.isSetCombinationType();
    boolean that_present_combinationType = true && that.isSetCombinationType();
    if (this_present_combinationType || that_present_combinationType) {
      if (!(this_present_combinationType && that_present_combinationType))
        return false;
      if (this.combinationType != that.combinationType)
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CtpInstrument other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstrumentName()).compareTo(other.isSetInstrumentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentName, other.instrumentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeInstID()).compareTo(other.isSetExchangeInstID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeInstID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeInstID, other.exchangeInstID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductID()).compareTo(other.isSetProductID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productID, other.productID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductClass()).compareTo(other.isSetProductClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productClass, other.productClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryYear()).compareTo(other.isSetDeliveryYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryYear, other.deliveryYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryMonth()).compareTo(other.isSetDeliveryMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryMonth, other.deliveryMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxMarketOrderVolume()).compareTo(other.isSetMaxMarketOrderVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxMarketOrderVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxMarketOrderVolume, other.maxMarketOrderVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinMarketOrderVolume()).compareTo(other.isSetMinMarketOrderVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinMarketOrderVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minMarketOrderVolume, other.minMarketOrderVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxLimitOrderVolume()).compareTo(other.isSetMaxLimitOrderVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxLimitOrderVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxLimitOrderVolume, other.maxLimitOrderVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinLimitOrderVolume()).compareTo(other.isSetMinLimitOrderVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinLimitOrderVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minLimitOrderVolume, other.minLimitOrderVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeMultiple()).compareTo(other.isSetVolumeMultiple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeMultiple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeMultiple, other.volumeMultiple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceTick()).compareTo(other.isSetPriceTick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceTick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceTick, other.priceTick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenDate()).compareTo(other.isSetOpenDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openDate, other.openDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireDate()).compareTo(other.isSetExpireDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireDate, other.expireDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDelivDate()).compareTo(other.isSetStartDelivDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDelivDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDelivDate, other.startDelivDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDelivDate()).compareTo(other.isSetEndDelivDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDelivDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDelivDate, other.endDelivDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstLifePhase()).compareTo(other.isSetInstLifePhase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstLifePhase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instLifePhase, other.instLifePhase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTrading()).compareTo(other.isSetIsTrading());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTrading()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTrading, other.isTrading);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionType()).compareTo(other.isSetPositionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionType, other.positionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionDateType()).compareTo(other.isSetPositionDateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionDateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionDateType, other.positionDateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongMarginRatio()).compareTo(other.isSetLongMarginRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongMarginRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longMarginRatio, other.longMarginRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortMarginRatio()).compareTo(other.isSetShortMarginRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortMarginRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortMarginRatio, other.shortMarginRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxMarginSideAlgorithm()).compareTo(other.isSetMaxMarginSideAlgorithm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxMarginSideAlgorithm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxMarginSideAlgorithm, other.maxMarginSideAlgorithm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnderlyingInstrID()).compareTo(other.isSetUnderlyingInstrID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnderlyingInstrID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.underlyingInstrID, other.underlyingInstrID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrikePrice()).compareTo(other.isSetStrikePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrikePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strikePrice, other.strikePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptionsType()).compareTo(other.isSetOptionsType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionsType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionsType, other.optionsType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnderlyingMultiple()).compareTo(other.isSetUnderlyingMultiple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnderlyingMultiple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.underlyingMultiple, other.underlyingMultiple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombinationType()).compareTo(other.isSetCombinationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombinationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combinationType, other.combinationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CtpInstrument(");
    boolean first = true;

    if (isSetInstrumentID()) {
      sb.append("instrumentID:");
      if (this.instrumentID == null) {
        sb.append("null");
      } else {
        sb.append(this.instrumentID);
      }
      first = false;
    }
    if (isSetExchangeID()) {
      if (!first) sb.append(", ");
      sb.append("exchangeID:");
      if (this.exchangeID == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeID);
      }
      first = false;
    }
    if (isSetInstrumentName()) {
      if (!first) sb.append(", ");
      sb.append("instrumentName:");
      if (this.instrumentName == null) {
        sb.append("null");
      } else {
        sb.append(this.instrumentName);
      }
      first = false;
    }
    if (isSetExchangeInstID()) {
      if (!first) sb.append(", ");
      sb.append("exchangeInstID:");
      if (this.exchangeInstID == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeInstID);
      }
      first = false;
    }
    if (isSetProductID()) {
      if (!first) sb.append(", ");
      sb.append("productID:");
      if (this.productID == null) {
        sb.append("null");
      } else {
        sb.append(this.productID);
      }
      first = false;
    }
    if (isSetProductClass()) {
      if (!first) sb.append(", ");
      sb.append("productClass:");
      sb.append(this.productClass);
      first = false;
    }
    if (isSetDeliveryYear()) {
      if (!first) sb.append(", ");
      sb.append("deliveryYear:");
      sb.append(this.deliveryYear);
      first = false;
    }
    if (isSetDeliveryMonth()) {
      if (!first) sb.append(", ");
      sb.append("deliveryMonth:");
      sb.append(this.deliveryMonth);
      first = false;
    }
    if (isSetMaxMarketOrderVolume()) {
      if (!first) sb.append(", ");
      sb.append("maxMarketOrderVolume:");
      sb.append(this.maxMarketOrderVolume);
      first = false;
    }
    if (isSetMinMarketOrderVolume()) {
      if (!first) sb.append(", ");
      sb.append("minMarketOrderVolume:");
      sb.append(this.minMarketOrderVolume);
      first = false;
    }
    if (isSetMaxLimitOrderVolume()) {
      if (!first) sb.append(", ");
      sb.append("maxLimitOrderVolume:");
      sb.append(this.maxLimitOrderVolume);
      first = false;
    }
    if (isSetMinLimitOrderVolume()) {
      if (!first) sb.append(", ");
      sb.append("minLimitOrderVolume:");
      sb.append(this.minLimitOrderVolume);
      first = false;
    }
    if (isSetVolumeMultiple()) {
      if (!first) sb.append(", ");
      sb.append("volumeMultiple:");
      sb.append(this.volumeMultiple);
      first = false;
    }
    if (isSetPriceTick()) {
      if (!first) sb.append(", ");
      sb.append("priceTick:");
      sb.append(this.priceTick);
      first = false;
    }
    if (isSetCreateDate()) {
      if (!first) sb.append(", ");
      sb.append("createDate:");
      if (this.createDate == null) {
        sb.append("null");
      } else {
        sb.append(this.createDate);
      }
      first = false;
    }
    if (isSetOpenDate()) {
      if (!first) sb.append(", ");
      sb.append("openDate:");
      if (this.openDate == null) {
        sb.append("null");
      } else {
        sb.append(this.openDate);
      }
      first = false;
    }
    if (isSetExpireDate()) {
      if (!first) sb.append(", ");
      sb.append("expireDate:");
      if (this.expireDate == null) {
        sb.append("null");
      } else {
        sb.append(this.expireDate);
      }
      first = false;
    }
    if (isSetStartDelivDate()) {
      if (!first) sb.append(", ");
      sb.append("startDelivDate:");
      if (this.startDelivDate == null) {
        sb.append("null");
      } else {
        sb.append(this.startDelivDate);
      }
      first = false;
    }
    if (isSetEndDelivDate()) {
      if (!first) sb.append(", ");
      sb.append("endDelivDate:");
      if (this.endDelivDate == null) {
        sb.append("null");
      } else {
        sb.append(this.endDelivDate);
      }
      first = false;
    }
    if (isSetInstLifePhase()) {
      if (!first) sb.append(", ");
      sb.append("instLifePhase:");
      sb.append(this.instLifePhase);
      first = false;
    }
    if (isSetIsTrading()) {
      if (!first) sb.append(", ");
      sb.append("isTrading:");
      sb.append(this.isTrading);
      first = false;
    }
    if (isSetPositionType()) {
      if (!first) sb.append(", ");
      sb.append("positionType:");
      sb.append(this.positionType);
      first = false;
    }
    if (isSetPositionDateType()) {
      if (!first) sb.append(", ");
      sb.append("positionDateType:");
      sb.append(this.positionDateType);
      first = false;
    }
    if (isSetLongMarginRatio()) {
      if (!first) sb.append(", ");
      sb.append("longMarginRatio:");
      sb.append(this.longMarginRatio);
      first = false;
    }
    if (isSetShortMarginRatio()) {
      if (!first) sb.append(", ");
      sb.append("shortMarginRatio:");
      sb.append(this.shortMarginRatio);
      first = false;
    }
    if (isSetMaxMarginSideAlgorithm()) {
      if (!first) sb.append(", ");
      sb.append("maxMarginSideAlgorithm:");
      sb.append(this.maxMarginSideAlgorithm);
      first = false;
    }
    if (isSetUnderlyingInstrID()) {
      if (!first) sb.append(", ");
      sb.append("underlyingInstrID:");
      if (this.underlyingInstrID == null) {
        sb.append("null");
      } else {
        sb.append(this.underlyingInstrID);
      }
      first = false;
    }
    if (isSetStrikePrice()) {
      if (!first) sb.append(", ");
      sb.append("strikePrice:");
      sb.append(this.strikePrice);
      first = false;
    }
    if (isSetOptionsType()) {
      if (!first) sb.append(", ");
      sb.append("optionsType:");
      sb.append(this.optionsType);
      first = false;
    }
    if (isSetUnderlyingMultiple()) {
      if (!first) sb.append(", ");
      sb.append("underlyingMultiple:");
      sb.append(this.underlyingMultiple);
      first = false;
    }
    if (isSetCombinationType()) {
      if (!first) sb.append(", ");
      sb.append("combinationType:");
      sb.append(this.combinationType);
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CtpInstrumentStandardSchemeFactory implements SchemeFactory {
    public CtpInstrumentStandardScheme getScheme() {
      return new CtpInstrumentStandardScheme();
    }
  }

  private static class CtpInstrumentStandardScheme extends StandardScheme<CtpInstrument> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CtpInstrument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSTRUMENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentName = iprot.readString();
              struct.setInstrumentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXCHANGE_INST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeInstID = iprot.readString();
              struct.setExchangeInstIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productID = iprot.readString();
              struct.setProductIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRODUCT_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.productClass = iprot.readByte();
              struct.setProductClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DELIVERY_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deliveryYear = iprot.readI32();
              struct.setDeliveryYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DELIVERY_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deliveryMonth = iprot.readI32();
              struct.setDeliveryMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAX_MARKET_ORDER_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxMarketOrderVolume = iprot.readI32();
              struct.setMaxMarketOrderVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MIN_MARKET_ORDER_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minMarketOrderVolume = iprot.readI32();
              struct.setMinMarketOrderVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAX_LIMIT_ORDER_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxLimitOrderVolume = iprot.readI32();
              struct.setMaxLimitOrderVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MIN_LIMIT_ORDER_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minLimitOrderVolume = iprot.readI32();
              struct.setMinLimitOrderVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VOLUME_MULTIPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volumeMultiple = iprot.readI32();
              struct.setVolumeMultipleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PRICE_TICK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priceTick = iprot.readDouble();
              struct.setPriceTickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // OPEN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openDate = iprot.readString();
              struct.setOpenDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // EXPIRE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expireDate = iprot.readString();
              struct.setExpireDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // START_DELIV_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startDelivDate = iprot.readString();
              struct.setStartDelivDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // END_DELIV_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDelivDate = iprot.readString();
              struct.setEndDelivDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // INST_LIFE_PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.instLifePhase = iprot.readByte();
              struct.setInstLifePhaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // IS_TRADING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTrading = iprot.readBool();
              struct.setIsTradingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // POSITION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.positionType = iprot.readByte();
              struct.setPositionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // POSITION_DATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.positionDateType = iprot.readByte();
              struct.setPositionDateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // LONG_MARGIN_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longMarginRatio = iprot.readDouble();
              struct.setLongMarginRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SHORT_MARGIN_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shortMarginRatio = iprot.readDouble();
              struct.setShortMarginRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // MAX_MARGIN_SIDE_ALGORITHM
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.maxMarginSideAlgorithm = iprot.readByte();
              struct.setMaxMarginSideAlgorithmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // UNDERLYING_INSTR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.underlyingInstrID = iprot.readString();
              struct.setUnderlyingInstrIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // STRIKE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.strikePrice = iprot.readDouble();
              struct.setStrikePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // OPTIONS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.optionsType = iprot.readByte();
              struct.setOptionsTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // UNDERLYING_MULTIPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.underlyingMultiple = iprot.readDouble();
              struct.setUnderlyingMultipleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // COMBINATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.combinationType = iprot.readByte();
              struct.setCombinationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CtpInstrument struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instrumentID != null) {
        if (struct.isSetInstrumentID()) {
          oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
          oprot.writeString(struct.instrumentID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchangeID != null) {
        if (struct.isSetExchangeID()) {
          oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
          oprot.writeString(struct.exchangeID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.instrumentName != null) {
        if (struct.isSetInstrumentName()) {
          oprot.writeFieldBegin(INSTRUMENT_NAME_FIELD_DESC);
          oprot.writeString(struct.instrumentName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchangeInstID != null) {
        if (struct.isSetExchangeInstID()) {
          oprot.writeFieldBegin(EXCHANGE_INST_ID_FIELD_DESC);
          oprot.writeString(struct.exchangeInstID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.productID != null) {
        if (struct.isSetProductID()) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetProductClass()) {
        oprot.writeFieldBegin(PRODUCT_CLASS_FIELD_DESC);
        oprot.writeByte(struct.productClass);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeliveryYear()) {
        oprot.writeFieldBegin(DELIVERY_YEAR_FIELD_DESC);
        oprot.writeI32(struct.deliveryYear);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeliveryMonth()) {
        oprot.writeFieldBegin(DELIVERY_MONTH_FIELD_DESC);
        oprot.writeI32(struct.deliveryMonth);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxMarketOrderVolume()) {
        oprot.writeFieldBegin(MAX_MARKET_ORDER_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.maxMarketOrderVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinMarketOrderVolume()) {
        oprot.writeFieldBegin(MIN_MARKET_ORDER_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.minMarketOrderVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxLimitOrderVolume()) {
        oprot.writeFieldBegin(MAX_LIMIT_ORDER_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.maxLimitOrderVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinLimitOrderVolume()) {
        oprot.writeFieldBegin(MIN_LIMIT_ORDER_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.minLimitOrderVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVolumeMultiple()) {
        oprot.writeFieldBegin(VOLUME_MULTIPLE_FIELD_DESC);
        oprot.writeI32(struct.volumeMultiple);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPriceTick()) {
        oprot.writeFieldBegin(PRICE_TICK_FIELD_DESC);
        oprot.writeDouble(struct.priceTick);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        if (struct.isSetCreateDate()) {
          oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
          oprot.writeString(struct.createDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.openDate != null) {
        if (struct.isSetOpenDate()) {
          oprot.writeFieldBegin(OPEN_DATE_FIELD_DESC);
          oprot.writeString(struct.openDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.expireDate != null) {
        if (struct.isSetExpireDate()) {
          oprot.writeFieldBegin(EXPIRE_DATE_FIELD_DESC);
          oprot.writeString(struct.expireDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.startDelivDate != null) {
        if (struct.isSetStartDelivDate()) {
          oprot.writeFieldBegin(START_DELIV_DATE_FIELD_DESC);
          oprot.writeString(struct.startDelivDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endDelivDate != null) {
        if (struct.isSetEndDelivDate()) {
          oprot.writeFieldBegin(END_DELIV_DATE_FIELD_DESC);
          oprot.writeString(struct.endDelivDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInstLifePhase()) {
        oprot.writeFieldBegin(INST_LIFE_PHASE_FIELD_DESC);
        oprot.writeByte(struct.instLifePhase);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsTrading()) {
        oprot.writeFieldBegin(IS_TRADING_FIELD_DESC);
        oprot.writeBool(struct.isTrading);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionType()) {
        oprot.writeFieldBegin(POSITION_TYPE_FIELD_DESC);
        oprot.writeByte(struct.positionType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionDateType()) {
        oprot.writeFieldBegin(POSITION_DATE_TYPE_FIELD_DESC);
        oprot.writeByte(struct.positionDateType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLongMarginRatio()) {
        oprot.writeFieldBegin(LONG_MARGIN_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.longMarginRatio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetShortMarginRatio()) {
        oprot.writeFieldBegin(SHORT_MARGIN_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.shortMarginRatio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxMarginSideAlgorithm()) {
        oprot.writeFieldBegin(MAX_MARGIN_SIDE_ALGORITHM_FIELD_DESC);
        oprot.writeByte(struct.maxMarginSideAlgorithm);
        oprot.writeFieldEnd();
      }
      if (struct.underlyingInstrID != null) {
        if (struct.isSetUnderlyingInstrID()) {
          oprot.writeFieldBegin(UNDERLYING_INSTR_ID_FIELD_DESC);
          oprot.writeString(struct.underlyingInstrID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStrikePrice()) {
        oprot.writeFieldBegin(STRIKE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.strikePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOptionsType()) {
        oprot.writeFieldBegin(OPTIONS_TYPE_FIELD_DESC);
        oprot.writeByte(struct.optionsType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUnderlyingMultiple()) {
        oprot.writeFieldBegin(UNDERLYING_MULTIPLE_FIELD_DESC);
        oprot.writeDouble(struct.underlyingMultiple);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCombinationType()) {
        oprot.writeFieldBegin(COMBINATION_TYPE_FIELD_DESC);
        oprot.writeByte(struct.combinationType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CtpInstrumentTupleSchemeFactory implements SchemeFactory {
    public CtpInstrumentTupleScheme getScheme() {
      return new CtpInstrumentTupleScheme();
    }
  }

  private static class CtpInstrumentTupleScheme extends TupleScheme<CtpInstrument> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CtpInstrument struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstrumentID()) {
        optionals.set(0);
      }
      if (struct.isSetExchangeID()) {
        optionals.set(1);
      }
      if (struct.isSetInstrumentName()) {
        optionals.set(2);
      }
      if (struct.isSetExchangeInstID()) {
        optionals.set(3);
      }
      if (struct.isSetProductID()) {
        optionals.set(4);
      }
      if (struct.isSetProductClass()) {
        optionals.set(5);
      }
      if (struct.isSetDeliveryYear()) {
        optionals.set(6);
      }
      if (struct.isSetDeliveryMonth()) {
        optionals.set(7);
      }
      if (struct.isSetMaxMarketOrderVolume()) {
        optionals.set(8);
      }
      if (struct.isSetMinMarketOrderVolume()) {
        optionals.set(9);
      }
      if (struct.isSetMaxLimitOrderVolume()) {
        optionals.set(10);
      }
      if (struct.isSetMinLimitOrderVolume()) {
        optionals.set(11);
      }
      if (struct.isSetVolumeMultiple()) {
        optionals.set(12);
      }
      if (struct.isSetPriceTick()) {
        optionals.set(13);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(14);
      }
      if (struct.isSetOpenDate()) {
        optionals.set(15);
      }
      if (struct.isSetExpireDate()) {
        optionals.set(16);
      }
      if (struct.isSetStartDelivDate()) {
        optionals.set(17);
      }
      if (struct.isSetEndDelivDate()) {
        optionals.set(18);
      }
      if (struct.isSetInstLifePhase()) {
        optionals.set(19);
      }
      if (struct.isSetIsTrading()) {
        optionals.set(20);
      }
      if (struct.isSetPositionType()) {
        optionals.set(21);
      }
      if (struct.isSetPositionDateType()) {
        optionals.set(22);
      }
      if (struct.isSetLongMarginRatio()) {
        optionals.set(23);
      }
      if (struct.isSetShortMarginRatio()) {
        optionals.set(24);
      }
      if (struct.isSetMaxMarginSideAlgorithm()) {
        optionals.set(25);
      }
      if (struct.isSetUnderlyingInstrID()) {
        optionals.set(26);
      }
      if (struct.isSetStrikePrice()) {
        optionals.set(27);
      }
      if (struct.isSetOptionsType()) {
        optionals.set(28);
      }
      if (struct.isSetUnderlyingMultiple()) {
        optionals.set(29);
      }
      if (struct.isSetCombinationType()) {
        optionals.set(30);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(31);
      }
      oprot.writeBitSet(optionals, 32);
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetInstrumentName()) {
        oprot.writeString(struct.instrumentName);
      }
      if (struct.isSetExchangeInstID()) {
        oprot.writeString(struct.exchangeInstID);
      }
      if (struct.isSetProductID()) {
        oprot.writeString(struct.productID);
      }
      if (struct.isSetProductClass()) {
        oprot.writeByte(struct.productClass);
      }
      if (struct.isSetDeliveryYear()) {
        oprot.writeI32(struct.deliveryYear);
      }
      if (struct.isSetDeliveryMonth()) {
        oprot.writeI32(struct.deliveryMonth);
      }
      if (struct.isSetMaxMarketOrderVolume()) {
        oprot.writeI32(struct.maxMarketOrderVolume);
      }
      if (struct.isSetMinMarketOrderVolume()) {
        oprot.writeI32(struct.minMarketOrderVolume);
      }
      if (struct.isSetMaxLimitOrderVolume()) {
        oprot.writeI32(struct.maxLimitOrderVolume);
      }
      if (struct.isSetMinLimitOrderVolume()) {
        oprot.writeI32(struct.minLimitOrderVolume);
      }
      if (struct.isSetVolumeMultiple()) {
        oprot.writeI32(struct.volumeMultiple);
      }
      if (struct.isSetPriceTick()) {
        oprot.writeDouble(struct.priceTick);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetOpenDate()) {
        oprot.writeString(struct.openDate);
      }
      if (struct.isSetExpireDate()) {
        oprot.writeString(struct.expireDate);
      }
      if (struct.isSetStartDelivDate()) {
        oprot.writeString(struct.startDelivDate);
      }
      if (struct.isSetEndDelivDate()) {
        oprot.writeString(struct.endDelivDate);
      }
      if (struct.isSetInstLifePhase()) {
        oprot.writeByte(struct.instLifePhase);
      }
      if (struct.isSetIsTrading()) {
        oprot.writeBool(struct.isTrading);
      }
      if (struct.isSetPositionType()) {
        oprot.writeByte(struct.positionType);
      }
      if (struct.isSetPositionDateType()) {
        oprot.writeByte(struct.positionDateType);
      }
      if (struct.isSetLongMarginRatio()) {
        oprot.writeDouble(struct.longMarginRatio);
      }
      if (struct.isSetShortMarginRatio()) {
        oprot.writeDouble(struct.shortMarginRatio);
      }
      if (struct.isSetMaxMarginSideAlgorithm()) {
        oprot.writeByte(struct.maxMarginSideAlgorithm);
      }
      if (struct.isSetUnderlyingInstrID()) {
        oprot.writeString(struct.underlyingInstrID);
      }
      if (struct.isSetStrikePrice()) {
        oprot.writeDouble(struct.strikePrice);
      }
      if (struct.isSetOptionsType()) {
        oprot.writeByte(struct.optionsType);
      }
      if (struct.isSetUnderlyingMultiple()) {
        oprot.writeDouble(struct.underlyingMultiple);
      }
      if (struct.isSetCombinationType()) {
        oprot.writeByte(struct.combinationType);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CtpInstrument struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(32);
      if (incoming.get(0)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.instrumentName = iprot.readString();
        struct.setInstrumentNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exchangeInstID = iprot.readString();
        struct.setExchangeInstIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.productID = iprot.readString();
        struct.setProductIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.productClass = iprot.readByte();
        struct.setProductClassIsSet(true);
      }
      if (incoming.get(6)) {
        struct.deliveryYear = iprot.readI32();
        struct.setDeliveryYearIsSet(true);
      }
      if (incoming.get(7)) {
        struct.deliveryMonth = iprot.readI32();
        struct.setDeliveryMonthIsSet(true);
      }
      if (incoming.get(8)) {
        struct.maxMarketOrderVolume = iprot.readI32();
        struct.setMaxMarketOrderVolumeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.minMarketOrderVolume = iprot.readI32();
        struct.setMinMarketOrderVolumeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.maxLimitOrderVolume = iprot.readI32();
        struct.setMaxLimitOrderVolumeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.minLimitOrderVolume = iprot.readI32();
        struct.setMinLimitOrderVolumeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.volumeMultiple = iprot.readI32();
        struct.setVolumeMultipleIsSet(true);
      }
      if (incoming.get(13)) {
        struct.priceTick = iprot.readDouble();
        struct.setPriceTickIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.openDate = iprot.readString();
        struct.setOpenDateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.expireDate = iprot.readString();
        struct.setExpireDateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.startDelivDate = iprot.readString();
        struct.setStartDelivDateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.endDelivDate = iprot.readString();
        struct.setEndDelivDateIsSet(true);
      }
      if (incoming.get(19)) {
        struct.instLifePhase = iprot.readByte();
        struct.setInstLifePhaseIsSet(true);
      }
      if (incoming.get(20)) {
        struct.isTrading = iprot.readBool();
        struct.setIsTradingIsSet(true);
      }
      if (incoming.get(21)) {
        struct.positionType = iprot.readByte();
        struct.setPositionTypeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.positionDateType = iprot.readByte();
        struct.setPositionDateTypeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.longMarginRatio = iprot.readDouble();
        struct.setLongMarginRatioIsSet(true);
      }
      if (incoming.get(24)) {
        struct.shortMarginRatio = iprot.readDouble();
        struct.setShortMarginRatioIsSet(true);
      }
      if (incoming.get(25)) {
        struct.maxMarginSideAlgorithm = iprot.readByte();
        struct.setMaxMarginSideAlgorithmIsSet(true);
      }
      if (incoming.get(26)) {
        struct.underlyingInstrID = iprot.readString();
        struct.setUnderlyingInstrIDIsSet(true);
      }
      if (incoming.get(27)) {
        struct.strikePrice = iprot.readDouble();
        struct.setStrikePriceIsSet(true);
      }
      if (incoming.get(28)) {
        struct.optionsType = iprot.readByte();
        struct.setOptionsTypeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.underlyingMultiple = iprot.readDouble();
        struct.setUnderlyingMultipleIsSet(true);
      }
      if (incoming.get(30)) {
        struct.combinationType = iprot.readByte();
        struct.setCombinationTypeIsSet(true);
      }
      if (incoming.get(31)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
    }
  }

}

