/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.ctp_service.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CtpFund implements org.apache.thrift.TBase<CtpFund, CtpFund._Fields>, java.io.Serializable, Cloneable, Comparable<CtpFund> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CtpFund");

  private static final org.apache.thrift.protocol.TField DYNAMIC_BENEFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("dynamicBenefit", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField AVAILABLE_FUND_FIELD_DESC = new org.apache.thrift.protocol.TField("availableFund", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField USE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("useMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField POSITION_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("positionProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("commission", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField FROZEN_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField RISK_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("riskRate", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CtpFundStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CtpFundTupleSchemeFactory());
  }

  public double dynamicBenefit; // optional
  public double availableFund; // optional
  public double useMargin; // optional
  public double closeProfit; // optional
  public double positionProfit; // optional
  public double commission; // optional
  public double frozenMargin; // optional
  public double riskRate; // optional
  public int sledAccountId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DYNAMIC_BENEFIT((short)1, "dynamicBenefit"),
    AVAILABLE_FUND((short)2, "availableFund"),
    USE_MARGIN((short)3, "useMargin"),
    CLOSE_PROFIT((short)4, "closeProfit"),
    POSITION_PROFIT((short)5, "positionProfit"),
    COMMISSION((short)6, "commission"),
    FROZEN_MARGIN((short)7, "frozenMargin"),
    RISK_RATE((short)8, "riskRate"),
    SLED_ACCOUNT_ID((short)10, "sledAccountId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DYNAMIC_BENEFIT
          return DYNAMIC_BENEFIT;
        case 2: // AVAILABLE_FUND
          return AVAILABLE_FUND;
        case 3: // USE_MARGIN
          return USE_MARGIN;
        case 4: // CLOSE_PROFIT
          return CLOSE_PROFIT;
        case 5: // POSITION_PROFIT
          return POSITION_PROFIT;
        case 6: // COMMISSION
          return COMMISSION;
        case 7: // FROZEN_MARGIN
          return FROZEN_MARGIN;
        case 8: // RISK_RATE
          return RISK_RATE;
        case 10: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DYNAMICBENEFIT_ISSET_ID = 0;
  private static final int __AVAILABLEFUND_ISSET_ID = 1;
  private static final int __USEMARGIN_ISSET_ID = 2;
  private static final int __CLOSEPROFIT_ISSET_ID = 3;
  private static final int __POSITIONPROFIT_ISSET_ID = 4;
  private static final int __COMMISSION_ISSET_ID = 5;
  private static final int __FROZENMARGIN_ISSET_ID = 6;
  private static final int __RISKRATE_ISSET_ID = 7;
  private static final int __SLEDACCOUNTID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DYNAMIC_BENEFIT,_Fields.AVAILABLE_FUND,_Fields.USE_MARGIN,_Fields.CLOSE_PROFIT,_Fields.POSITION_PROFIT,_Fields.COMMISSION,_Fields.FROZEN_MARGIN,_Fields.RISK_RATE,_Fields.SLED_ACCOUNT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DYNAMIC_BENEFIT, new org.apache.thrift.meta_data.FieldMetaData("dynamicBenefit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVAILABLE_FUND, new org.apache.thrift.meta_data.FieldMetaData("availableFund", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("useMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("closeProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("positionProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("commission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("frozenMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RISK_RATE, new org.apache.thrift.meta_data.FieldMetaData("riskRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CtpFund.class, metaDataMap);
  }

  public CtpFund() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CtpFund(CtpFund other) {
    __isset_bitfield = other.__isset_bitfield;
    this.dynamicBenefit = other.dynamicBenefit;
    this.availableFund = other.availableFund;
    this.useMargin = other.useMargin;
    this.closeProfit = other.closeProfit;
    this.positionProfit = other.positionProfit;
    this.commission = other.commission;
    this.frozenMargin = other.frozenMargin;
    this.riskRate = other.riskRate;
    this.sledAccountId = other.sledAccountId;
  }

  public CtpFund deepCopy() {
    return new CtpFund(this);
  }

  @Override
  public void clear() {
    setDynamicBenefitIsSet(false);
    this.dynamicBenefit = 0.0;
    setAvailableFundIsSet(false);
    this.availableFund = 0.0;
    setUseMarginIsSet(false);
    this.useMargin = 0.0;
    setCloseProfitIsSet(false);
    this.closeProfit = 0.0;
    setPositionProfitIsSet(false);
    this.positionProfit = 0.0;
    setCommissionIsSet(false);
    this.commission = 0.0;
    setFrozenMarginIsSet(false);
    this.frozenMargin = 0.0;
    setRiskRateIsSet(false);
    this.riskRate = 0.0;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
  }

  public double getDynamicBenefit() {
    return this.dynamicBenefit;
  }

  public CtpFund setDynamicBenefit(double dynamicBenefit) {
    this.dynamicBenefit = dynamicBenefit;
    setDynamicBenefitIsSet(true);
    return this;
  }

  public void unsetDynamicBenefit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DYNAMICBENEFIT_ISSET_ID);
  }

  /** Returns true if field dynamicBenefit is set (has been assigned a value) and false otherwise */
  public boolean isSetDynamicBenefit() {
    return EncodingUtils.testBit(__isset_bitfield, __DYNAMICBENEFIT_ISSET_ID);
  }

  public void setDynamicBenefitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DYNAMICBENEFIT_ISSET_ID, value);
  }

  public double getAvailableFund() {
    return this.availableFund;
  }

  public CtpFund setAvailableFund(double availableFund) {
    this.availableFund = availableFund;
    setAvailableFundIsSet(true);
    return this;
  }

  public void unsetAvailableFund() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLEFUND_ISSET_ID);
  }

  /** Returns true if field availableFund is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableFund() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLEFUND_ISSET_ID);
  }

  public void setAvailableFundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLEFUND_ISSET_ID, value);
  }

  public double getUseMargin() {
    return this.useMargin;
  }

  public CtpFund setUseMargin(double useMargin) {
    this.useMargin = useMargin;
    setUseMarginIsSet(true);
    return this;
  }

  public void unsetUseMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  /** Returns true if field useMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetUseMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  public void setUseMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEMARGIN_ISSET_ID, value);
  }

  public double getCloseProfit() {
    return this.closeProfit;
  }

  public CtpFund setCloseProfit(double closeProfit) {
    this.closeProfit = closeProfit;
    setCloseProfitIsSet(true);
    return this;
  }

  public void unsetCloseProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  /** Returns true if field closeProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  public void setCloseProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID, value);
  }

  public double getPositionProfit() {
    return this.positionProfit;
  }

  public CtpFund setPositionProfit(double positionProfit) {
    this.positionProfit = positionProfit;
    setPositionProfitIsSet(true);
    return this;
  }

  public void unsetPositionProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  /** Returns true if field positionProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  public void setPositionProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID, value);
  }

  public double getCommission() {
    return this.commission;
  }

  public CtpFund setCommission(double commission) {
    this.commission = commission;
    setCommissionIsSet(true);
    return this;
  }

  public void unsetCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  /** Returns true if field commission is set (has been assigned a value) and false otherwise */
  public boolean isSetCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  public void setCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMISSION_ISSET_ID, value);
  }

  public double getFrozenMargin() {
    return this.frozenMargin;
  }

  public CtpFund setFrozenMargin(double frozenMargin) {
    this.frozenMargin = frozenMargin;
    setFrozenMarginIsSet(true);
    return this;
  }

  public void unsetFrozenMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  /** Returns true if field frozenMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  public void setFrozenMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID, value);
  }

  public double getRiskRate() {
    return this.riskRate;
  }

  public CtpFund setRiskRate(double riskRate) {
    this.riskRate = riskRate;
    setRiskRateIsSet(true);
    return this;
  }

  public void unsetRiskRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RISKRATE_ISSET_ID);
  }

  /** Returns true if field riskRate is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskRate() {
    return EncodingUtils.testBit(__isset_bitfield, __RISKRATE_ISSET_ID);
  }

  public void setRiskRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RISKRATE_ISSET_ID, value);
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public CtpFund setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DYNAMIC_BENEFIT:
      if (value == null) {
        unsetDynamicBenefit();
      } else {
        setDynamicBenefit((Double)value);
      }
      break;

    case AVAILABLE_FUND:
      if (value == null) {
        unsetAvailableFund();
      } else {
        setAvailableFund((Double)value);
      }
      break;

    case USE_MARGIN:
      if (value == null) {
        unsetUseMargin();
      } else {
        setUseMargin((Double)value);
      }
      break;

    case CLOSE_PROFIT:
      if (value == null) {
        unsetCloseProfit();
      } else {
        setCloseProfit((Double)value);
      }
      break;

    case POSITION_PROFIT:
      if (value == null) {
        unsetPositionProfit();
      } else {
        setPositionProfit((Double)value);
      }
      break;

    case COMMISSION:
      if (value == null) {
        unsetCommission();
      } else {
        setCommission((Double)value);
      }
      break;

    case FROZEN_MARGIN:
      if (value == null) {
        unsetFrozenMargin();
      } else {
        setFrozenMargin((Double)value);
      }
      break;

    case RISK_RATE:
      if (value == null) {
        unsetRiskRate();
      } else {
        setRiskRate((Double)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DYNAMIC_BENEFIT:
      return Double.valueOf(getDynamicBenefit());

    case AVAILABLE_FUND:
      return Double.valueOf(getAvailableFund());

    case USE_MARGIN:
      return Double.valueOf(getUseMargin());

    case CLOSE_PROFIT:
      return Double.valueOf(getCloseProfit());

    case POSITION_PROFIT:
      return Double.valueOf(getPositionProfit());

    case COMMISSION:
      return Double.valueOf(getCommission());

    case FROZEN_MARGIN:
      return Double.valueOf(getFrozenMargin());

    case RISK_RATE:
      return Double.valueOf(getRiskRate());

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DYNAMIC_BENEFIT:
      return isSetDynamicBenefit();
    case AVAILABLE_FUND:
      return isSetAvailableFund();
    case USE_MARGIN:
      return isSetUseMargin();
    case CLOSE_PROFIT:
      return isSetCloseProfit();
    case POSITION_PROFIT:
      return isSetPositionProfit();
    case COMMISSION:
      return isSetCommission();
    case FROZEN_MARGIN:
      return isSetFrozenMargin();
    case RISK_RATE:
      return isSetRiskRate();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CtpFund)
      return this.equals((CtpFund)that);
    return false;
  }

  public boolean equals(CtpFund that) {
    if (that == null)
      return false;

    boolean this_present_dynamicBenefit = true && this.isSetDynamicBenefit();
    boolean that_present_dynamicBenefit = true && that.isSetDynamicBenefit();
    if (this_present_dynamicBenefit || that_present_dynamicBenefit) {
      if (!(this_present_dynamicBenefit && that_present_dynamicBenefit))
        return false;
      if (this.dynamicBenefit != that.dynamicBenefit)
        return false;
    }

    boolean this_present_availableFund = true && this.isSetAvailableFund();
    boolean that_present_availableFund = true && that.isSetAvailableFund();
    if (this_present_availableFund || that_present_availableFund) {
      if (!(this_present_availableFund && that_present_availableFund))
        return false;
      if (this.availableFund != that.availableFund)
        return false;
    }

    boolean this_present_useMargin = true && this.isSetUseMargin();
    boolean that_present_useMargin = true && that.isSetUseMargin();
    if (this_present_useMargin || that_present_useMargin) {
      if (!(this_present_useMargin && that_present_useMargin))
        return false;
      if (this.useMargin != that.useMargin)
        return false;
    }

    boolean this_present_closeProfit = true && this.isSetCloseProfit();
    boolean that_present_closeProfit = true && that.isSetCloseProfit();
    if (this_present_closeProfit || that_present_closeProfit) {
      if (!(this_present_closeProfit && that_present_closeProfit))
        return false;
      if (this.closeProfit != that.closeProfit)
        return false;
    }

    boolean this_present_positionProfit = true && this.isSetPositionProfit();
    boolean that_present_positionProfit = true && that.isSetPositionProfit();
    if (this_present_positionProfit || that_present_positionProfit) {
      if (!(this_present_positionProfit && that_present_positionProfit))
        return false;
      if (this.positionProfit != that.positionProfit)
        return false;
    }

    boolean this_present_commission = true && this.isSetCommission();
    boolean that_present_commission = true && that.isSetCommission();
    if (this_present_commission || that_present_commission) {
      if (!(this_present_commission && that_present_commission))
        return false;
      if (this.commission != that.commission)
        return false;
    }

    boolean this_present_frozenMargin = true && this.isSetFrozenMargin();
    boolean that_present_frozenMargin = true && that.isSetFrozenMargin();
    if (this_present_frozenMargin || that_present_frozenMargin) {
      if (!(this_present_frozenMargin && that_present_frozenMargin))
        return false;
      if (this.frozenMargin != that.frozenMargin)
        return false;
    }

    boolean this_present_riskRate = true && this.isSetRiskRate();
    boolean that_present_riskRate = true && that.isSetRiskRate();
    if (this_present_riskRate || that_present_riskRate) {
      if (!(this_present_riskRate && that_present_riskRate))
        return false;
      if (this.riskRate != that.riskRate)
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CtpFund other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDynamicBenefit()).compareTo(other.isSetDynamicBenefit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDynamicBenefit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dynamicBenefit, other.dynamicBenefit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableFund()).compareTo(other.isSetAvailableFund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableFund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableFund, other.availableFund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseMargin()).compareTo(other.isSetUseMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useMargin, other.useMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfit()).compareTo(other.isSetCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfit, other.closeProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionProfit()).compareTo(other.isSetPositionProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionProfit, other.positionProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommission()).compareTo(other.isSetCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commission, other.commission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenMargin()).compareTo(other.isSetFrozenMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenMargin, other.frozenMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskRate()).compareTo(other.isSetRiskRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskRate, other.riskRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CtpFund(");
    boolean first = true;

    if (isSetDynamicBenefit()) {
      sb.append("dynamicBenefit:");
      sb.append(this.dynamicBenefit);
      first = false;
    }
    if (isSetAvailableFund()) {
      if (!first) sb.append(", ");
      sb.append("availableFund:");
      sb.append(this.availableFund);
      first = false;
    }
    if (isSetUseMargin()) {
      if (!first) sb.append(", ");
      sb.append("useMargin:");
      sb.append(this.useMargin);
      first = false;
    }
    if (isSetCloseProfit()) {
      if (!first) sb.append(", ");
      sb.append("closeProfit:");
      sb.append(this.closeProfit);
      first = false;
    }
    if (isSetPositionProfit()) {
      if (!first) sb.append(", ");
      sb.append("positionProfit:");
      sb.append(this.positionProfit);
      first = false;
    }
    if (isSetCommission()) {
      if (!first) sb.append(", ");
      sb.append("commission:");
      sb.append(this.commission);
      first = false;
    }
    if (isSetFrozenMargin()) {
      if (!first) sb.append(", ");
      sb.append("frozenMargin:");
      sb.append(this.frozenMargin);
      first = false;
    }
    if (isSetRiskRate()) {
      if (!first) sb.append(", ");
      sb.append("riskRate:");
      sb.append(this.riskRate);
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CtpFundStandardSchemeFactory implements SchemeFactory {
    public CtpFundStandardScheme getScheme() {
      return new CtpFundStandardScheme();
    }
  }

  private static class CtpFundStandardScheme extends StandardScheme<CtpFund> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CtpFund struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DYNAMIC_BENEFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dynamicBenefit = iprot.readDouble();
              struct.setDynamicBenefitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AVAILABLE_FUND
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.availableFund = iprot.readDouble();
              struct.setAvailableFundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.useMargin = iprot.readDouble();
              struct.setUseMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfit = iprot.readDouble();
              struct.setCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POSITION_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionProfit = iprot.readDouble();
              struct.setPositionProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.commission = iprot.readDouble();
              struct.setCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FROZEN_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenMargin = iprot.readDouble();
              struct.setFrozenMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RISK_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.riskRate = iprot.readDouble();
              struct.setRiskRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CtpFund struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDynamicBenefit()) {
        oprot.writeFieldBegin(DYNAMIC_BENEFIT_FIELD_DESC);
        oprot.writeDouble(struct.dynamicBenefit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAvailableFund()) {
        oprot.writeFieldBegin(AVAILABLE_FUND_FIELD_DESC);
        oprot.writeDouble(struct.availableFund);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUseMargin()) {
        oprot.writeFieldBegin(USE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.useMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeFieldBegin(CLOSE_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.closeProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeFieldBegin(POSITION_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.positionProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommission()) {
        oprot.writeFieldBegin(COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.commission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeFieldBegin(FROZEN_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.frozenMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRiskRate()) {
        oprot.writeFieldBegin(RISK_RATE_FIELD_DESC);
        oprot.writeDouble(struct.riskRate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CtpFundTupleSchemeFactory implements SchemeFactory {
    public CtpFundTupleScheme getScheme() {
      return new CtpFundTupleScheme();
    }
  }

  private static class CtpFundTupleScheme extends TupleScheme<CtpFund> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CtpFund struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDynamicBenefit()) {
        optionals.set(0);
      }
      if (struct.isSetAvailableFund()) {
        optionals.set(1);
      }
      if (struct.isSetUseMargin()) {
        optionals.set(2);
      }
      if (struct.isSetCloseProfit()) {
        optionals.set(3);
      }
      if (struct.isSetPositionProfit()) {
        optionals.set(4);
      }
      if (struct.isSetCommission()) {
        optionals.set(5);
      }
      if (struct.isSetFrozenMargin()) {
        optionals.set(6);
      }
      if (struct.isSetRiskRate()) {
        optionals.set(7);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetDynamicBenefit()) {
        oprot.writeDouble(struct.dynamicBenefit);
      }
      if (struct.isSetAvailableFund()) {
        oprot.writeDouble(struct.availableFund);
      }
      if (struct.isSetUseMargin()) {
        oprot.writeDouble(struct.useMargin);
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeDouble(struct.closeProfit);
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeDouble(struct.positionProfit);
      }
      if (struct.isSetCommission()) {
        oprot.writeDouble(struct.commission);
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeDouble(struct.frozenMargin);
      }
      if (struct.isSetRiskRate()) {
        oprot.writeDouble(struct.riskRate);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CtpFund struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.dynamicBenefit = iprot.readDouble();
        struct.setDynamicBenefitIsSet(true);
      }
      if (incoming.get(1)) {
        struct.availableFund = iprot.readDouble();
        struct.setAvailableFundIsSet(true);
      }
      if (incoming.get(2)) {
        struct.useMargin = iprot.readDouble();
        struct.setUseMarginIsSet(true);
      }
      if (incoming.get(3)) {
        struct.closeProfit = iprot.readDouble();
        struct.setCloseProfitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.positionProfit = iprot.readDouble();
        struct.setPositionProfitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.commission = iprot.readDouble();
        struct.setCommissionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.frozenMargin = iprot.readDouble();
        struct.setFrozenMarginIsSet(true);
      }
      if (incoming.get(7)) {
        struct.riskRate = iprot.readDouble();
        struct.setRiskRateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
    }
  }

}

