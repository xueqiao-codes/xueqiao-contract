/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.common.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ContractTradeTime implements org.apache.thrift.TBase<ContractTradeTime, ContractTradeTime._Fields>, java.io.Serializable, Cloneable, Comparable<ContractTradeTime> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContractTradeTime");

  private static final org.apache.thrift.protocol.TField CONTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("contract", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TIME_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeZone", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REGION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("regionCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_REGIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeRegions", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContractTradeTimeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContractTradeTimeTupleSchemeFactory());
  }

  public Contract contract; // optional
  public String timeZone; // optional
  public int regionCount; // optional
  public List<ContractTradeRegion> timeRegions; // optional
  public int sledContractId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTRACT((short)1, "contract"),
    TIME_ZONE((short)2, "timeZone"),
    REGION_COUNT((short)3, "regionCount"),
    TIME_REGIONS((short)4, "timeRegions"),
    SLED_CONTRACT_ID((short)5, "sledContractId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTRACT
          return CONTRACT;
        case 2: // TIME_ZONE
          return TIME_ZONE;
        case 3: // REGION_COUNT
          return REGION_COUNT;
        case 4: // TIME_REGIONS
          return TIME_REGIONS;
        case 5: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REGIONCOUNT_ISSET_ID = 0;
  private static final int __SLEDCONTRACTID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONTRACT,_Fields.TIME_ZONE,_Fields.REGION_COUNT,_Fields.TIME_REGIONS,_Fields.SLED_CONTRACT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTRACT, new org.apache.thrift.meta_data.FieldMetaData("contract", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Contract.class)));
    tmpMap.put(_Fields.TIME_ZONE, new org.apache.thrift.meta_data.FieldMetaData("timeZone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("regionCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_REGIONS, new org.apache.thrift.meta_data.FieldMetaData("timeRegions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContractTradeRegion.class))));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContractTradeTime.class, metaDataMap);
  }

  public ContractTradeTime() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContractTradeTime(ContractTradeTime other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetContract()) {
      this.contract = new Contract(other.contract);
    }
    if (other.isSetTimeZone()) {
      this.timeZone = other.timeZone;
    }
    this.regionCount = other.regionCount;
    if (other.isSetTimeRegions()) {
      List<ContractTradeRegion> __this__timeRegions = new ArrayList<ContractTradeRegion>(other.timeRegions.size());
      for (ContractTradeRegion other_element : other.timeRegions) {
        __this__timeRegions.add(new ContractTradeRegion(other_element));
      }
      this.timeRegions = __this__timeRegions;
    }
    this.sledContractId = other.sledContractId;
  }

  public ContractTradeTime deepCopy() {
    return new ContractTradeTime(this);
  }

  @Override
  public void clear() {
    this.contract = null;
    this.timeZone = null;
    setRegionCountIsSet(false);
    this.regionCount = 0;
    this.timeRegions = null;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
  }

  public Contract getContract() {
    return this.contract;
  }

  public ContractTradeTime setContract(Contract contract) {
    this.contract = contract;
    return this;
  }

  public void unsetContract() {
    this.contract = null;
  }

  /** Returns true if field contract is set (has been assigned a value) and false otherwise */
  public boolean isSetContract() {
    return this.contract != null;
  }

  public void setContractIsSet(boolean value) {
    if (!value) {
      this.contract = null;
    }
  }

  public String getTimeZone() {
    return this.timeZone;
  }

  public ContractTradeTime setTimeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  public void unsetTimeZone() {
    this.timeZone = null;
  }

  /** Returns true if field timeZone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeZone() {
    return this.timeZone != null;
  }

  public void setTimeZoneIsSet(boolean value) {
    if (!value) {
      this.timeZone = null;
    }
  }

  public int getRegionCount() {
    return this.regionCount;
  }

  public ContractTradeTime setRegionCount(int regionCount) {
    this.regionCount = regionCount;
    setRegionCountIsSet(true);
    return this;
  }

  public void unsetRegionCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGIONCOUNT_ISSET_ID);
  }

  /** Returns true if field regionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionCount() {
    return EncodingUtils.testBit(__isset_bitfield, __REGIONCOUNT_ISSET_ID);
  }

  public void setRegionCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGIONCOUNT_ISSET_ID, value);
  }

  public int getTimeRegionsSize() {
    return (this.timeRegions == null) ? 0 : this.timeRegions.size();
  }

  public java.util.Iterator<ContractTradeRegion> getTimeRegionsIterator() {
    return (this.timeRegions == null) ? null : this.timeRegions.iterator();
  }

  public void addToTimeRegions(ContractTradeRegion elem) {
    if (this.timeRegions == null) {
      this.timeRegions = new ArrayList<ContractTradeRegion>();
    }
    this.timeRegions.add(elem);
  }

  public List<ContractTradeRegion> getTimeRegions() {
    return this.timeRegions;
  }

  public ContractTradeTime setTimeRegions(List<ContractTradeRegion> timeRegions) {
    this.timeRegions = timeRegions;
    return this;
  }

  public void unsetTimeRegions() {
    this.timeRegions = null;
  }

  /** Returns true if field timeRegions is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeRegions() {
    return this.timeRegions != null;
  }

  public void setTimeRegionsIsSet(boolean value) {
    if (!value) {
      this.timeRegions = null;
    }
  }

  public int getSledContractId() {
    return this.sledContractId;
  }

  public ContractTradeTime setSledContractId(int sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTRACT:
      if (value == null) {
        unsetContract();
      } else {
        setContract((Contract)value);
      }
      break;

    case TIME_ZONE:
      if (value == null) {
        unsetTimeZone();
      } else {
        setTimeZone((String)value);
      }
      break;

    case REGION_COUNT:
      if (value == null) {
        unsetRegionCount();
      } else {
        setRegionCount((Integer)value);
      }
      break;

    case TIME_REGIONS:
      if (value == null) {
        unsetTimeRegions();
      } else {
        setTimeRegions((List<ContractTradeRegion>)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTRACT:
      return getContract();

    case TIME_ZONE:
      return getTimeZone();

    case REGION_COUNT:
      return Integer.valueOf(getRegionCount());

    case TIME_REGIONS:
      return getTimeRegions();

    case SLED_CONTRACT_ID:
      return Integer.valueOf(getSledContractId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTRACT:
      return isSetContract();
    case TIME_ZONE:
      return isSetTimeZone();
    case REGION_COUNT:
      return isSetRegionCount();
    case TIME_REGIONS:
      return isSetTimeRegions();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContractTradeTime)
      return this.equals((ContractTradeTime)that);
    return false;
  }

  public boolean equals(ContractTradeTime that) {
    if (that == null)
      return false;

    boolean this_present_contract = true && this.isSetContract();
    boolean that_present_contract = true && that.isSetContract();
    if (this_present_contract || that_present_contract) {
      if (!(this_present_contract && that_present_contract))
        return false;
      if (!this.contract.equals(that.contract))
        return false;
    }

    boolean this_present_timeZone = true && this.isSetTimeZone();
    boolean that_present_timeZone = true && that.isSetTimeZone();
    if (this_present_timeZone || that_present_timeZone) {
      if (!(this_present_timeZone && that_present_timeZone))
        return false;
      if (!this.timeZone.equals(that.timeZone))
        return false;
    }

    boolean this_present_regionCount = true && this.isSetRegionCount();
    boolean that_present_regionCount = true && that.isSetRegionCount();
    if (this_present_regionCount || that_present_regionCount) {
      if (!(this_present_regionCount && that_present_regionCount))
        return false;
      if (this.regionCount != that.regionCount)
        return false;
    }

    boolean this_present_timeRegions = true && this.isSetTimeRegions();
    boolean that_present_timeRegions = true && that.isSetTimeRegions();
    if (this_present_timeRegions || that_present_timeRegions) {
      if (!(this_present_timeRegions && that_present_timeRegions))
        return false;
      if (!this.timeRegions.equals(that.timeRegions))
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ContractTradeTime other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContract()).compareTo(other.isSetContract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contract, other.contract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeZone()).compareTo(other.isSetTimeZone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeZone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeZone, other.timeZone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionCount()).compareTo(other.isSetRegionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionCount, other.regionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeRegions()).compareTo(other.isSetTimeRegions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeRegions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeRegions, other.timeRegions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContractTradeTime(");
    boolean first = true;

    if (isSetContract()) {
      sb.append("contract:");
      if (this.contract == null) {
        sb.append("null");
      } else {
        sb.append(this.contract);
      }
      first = false;
    }
    if (isSetTimeZone()) {
      if (!first) sb.append(", ");
      sb.append("timeZone:");
      if (this.timeZone == null) {
        sb.append("null");
      } else {
        sb.append(this.timeZone);
      }
      first = false;
    }
    if (isSetRegionCount()) {
      if (!first) sb.append(", ");
      sb.append("regionCount:");
      sb.append(this.regionCount);
      first = false;
    }
    if (isSetTimeRegions()) {
      if (!first) sb.append(", ");
      sb.append("timeRegions:");
      if (this.timeRegions == null) {
        sb.append("null");
      } else {
        sb.append(this.timeRegions);
      }
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (contract != null) {
      contract.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContractTradeTimeStandardSchemeFactory implements SchemeFactory {
    public ContractTradeTimeStandardScheme getScheme() {
      return new ContractTradeTimeStandardScheme();
    }
  }

  private static class ContractTradeTimeStandardScheme extends StandardScheme<ContractTradeTime> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContractTradeTime struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contract = new Contract();
              struct.contract.read(iprot);
              struct.setContractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIME_ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeZone = iprot.readString();
              struct.setTimeZoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REGION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.regionCount = iprot.readI32();
              struct.setRegionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME_REGIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                struct.timeRegions = new ArrayList<ContractTradeRegion>(_list168.size);
                for (int _i169 = 0; _i169 < _list168.size; ++_i169)
                {
                  ContractTradeRegion _elem170;
                  _elem170 = new ContractTradeRegion();
                  _elem170.read(iprot);
                  struct.timeRegions.add(_elem170);
                }
                iprot.readListEnd();
              }
              struct.setTimeRegionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledContractId = iprot.readI32();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContractTradeTime struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contract != null) {
        if (struct.isSetContract()) {
          oprot.writeFieldBegin(CONTRACT_FIELD_DESC);
          struct.contract.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeZone != null) {
        if (struct.isSetTimeZone()) {
          oprot.writeFieldBegin(TIME_ZONE_FIELD_DESC);
          oprot.writeString(struct.timeZone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRegionCount()) {
        oprot.writeFieldBegin(REGION_COUNT_FIELD_DESC);
        oprot.writeI32(struct.regionCount);
        oprot.writeFieldEnd();
      }
      if (struct.timeRegions != null) {
        if (struct.isSetTimeRegions()) {
          oprot.writeFieldBegin(TIME_REGIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.timeRegions.size()));
            for (ContractTradeRegion _iter171 : struct.timeRegions)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContractTradeTimeTupleSchemeFactory implements SchemeFactory {
    public ContractTradeTimeTupleScheme getScheme() {
      return new ContractTradeTimeTupleScheme();
    }
  }

  private static class ContractTradeTimeTupleScheme extends TupleScheme<ContractTradeTime> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContractTradeTime struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContract()) {
        optionals.set(0);
      }
      if (struct.isSetTimeZone()) {
        optionals.set(1);
      }
      if (struct.isSetRegionCount()) {
        optionals.set(2);
      }
      if (struct.isSetTimeRegions()) {
        optionals.set(3);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetContract()) {
        struct.contract.write(oprot);
      }
      if (struct.isSetTimeZone()) {
        oprot.writeString(struct.timeZone);
      }
      if (struct.isSetRegionCount()) {
        oprot.writeI32(struct.regionCount);
      }
      if (struct.isSetTimeRegions()) {
        {
          oprot.writeI32(struct.timeRegions.size());
          for (ContractTradeRegion _iter172 : struct.timeRegions)
          {
            _iter172.write(oprot);
          }
        }
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI32(struct.sledContractId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContractTradeTime struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.contract = new Contract();
        struct.contract.read(iprot);
        struct.setContractIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timeZone = iprot.readString();
        struct.setTimeZoneIsSet(true);
      }
      if (incoming.get(2)) {
        struct.regionCount = iprot.readI32();
        struct.setRegionCountIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.timeRegions = new ArrayList<ContractTradeRegion>(_list173.size);
          for (int _i174 = 0; _i174 < _list173.size; ++_i174)
          {
            ContractTradeRegion _elem175;
            _elem175 = new ContractTradeRegion();
            _elem175.read(iprot);
            struct.timeRegions.add(_elem175);
          }
        }
        struct.setTimeRegionsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sledContractId = iprot.readI32();
        struct.setSledContractIdIsSet(true);
      }
    }
  }

}

