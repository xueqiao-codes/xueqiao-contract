/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.common.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StdComposeField implements org.apache.thrift.TBase<StdComposeField, StdComposeField._Fields>, java.io.Serializable, Cloneable, Comparable<StdComposeField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StdComposeField");

  private static final org.apache.thrift.protocol.TField UKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("ukey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FORMULA_FIELD_DESC = new org.apache.thrift.protocol.TField("formula", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField UNIT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("unitList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField STOP_WIN_FIELD_DESC = new org.apache.thrift.protocol.TField("stopWin", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STOP_LOSS_FIELD_DESC = new org.apache.thrift.protocol.TField("stopLoss", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TIME_REGIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeRegions", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField SERIAL_VERSION_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("serialVersionUID", org.apache.thrift.protocol.TType.I64, (short)101);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StdComposeFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StdComposeFieldTupleSchemeFactory());
  }

  public String ukey; // required
  public String owner; // required
  public String name; // required
  public String formula; // required
  public List<StdCompUnitField> unitList; // required
  public int stopWin; // optional
  public int stopLoss; // optional
  public List<ContractTradeRegion> timeRegions; // optional
  public long serialVersionUID; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UKEY((short)1, "ukey"),
    OWNER((short)2, "owner"),
    NAME((short)3, "name"),
    FORMULA((short)4, "formula"),
    UNIT_LIST((short)5, "unitList"),
    STOP_WIN((short)6, "stopWin"),
    STOP_LOSS((short)7, "stopLoss"),
    TIME_REGIONS((short)8, "timeRegions"),
    SERIAL_VERSION_UID((short)101, "serialVersionUID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UKEY
          return UKEY;
        case 2: // OWNER
          return OWNER;
        case 3: // NAME
          return NAME;
        case 4: // FORMULA
          return FORMULA;
        case 5: // UNIT_LIST
          return UNIT_LIST;
        case 6: // STOP_WIN
          return STOP_WIN;
        case 7: // STOP_LOSS
          return STOP_LOSS;
        case 8: // TIME_REGIONS
          return TIME_REGIONS;
        case 101: // SERIAL_VERSION_UID
          return SERIAL_VERSION_UID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STOPWIN_ISSET_ID = 0;
  private static final int __STOPLOSS_ISSET_ID = 1;
  private static final int __SERIALVERSIONUID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.STOP_WIN,_Fields.STOP_LOSS,_Fields.TIME_REGIONS,_Fields.SERIAL_VERSION_UID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UKEY, new org.apache.thrift.meta_data.FieldMetaData("ukey", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORMULA, new org.apache.thrift.meta_data.FieldMetaData("formula", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIT_LIST, new org.apache.thrift.meta_data.FieldMetaData("unitList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StdCompUnitField.class))));
    tmpMap.put(_Fields.STOP_WIN, new org.apache.thrift.meta_data.FieldMetaData("stopWin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STOP_LOSS, new org.apache.thrift.meta_data.FieldMetaData("stopLoss", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_REGIONS, new org.apache.thrift.meta_data.FieldMetaData("timeRegions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContractTradeRegion.class))));
    tmpMap.put(_Fields.SERIAL_VERSION_UID, new org.apache.thrift.meta_data.FieldMetaData("serialVersionUID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StdComposeField.class, metaDataMap);
  }

  public StdComposeField() {
  }

  public StdComposeField(
    String ukey,
    String owner,
    String name,
    String formula,
    List<StdCompUnitField> unitList)
  {
    this();
    this.ukey = ukey;
    this.owner = owner;
    this.name = name;
    this.formula = formula;
    this.unitList = unitList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StdComposeField(StdComposeField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUkey()) {
      this.ukey = other.ukey;
    }
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetFormula()) {
      this.formula = other.formula;
    }
    if (other.isSetUnitList()) {
      List<StdCompUnitField> __this__unitList = new ArrayList<StdCompUnitField>(other.unitList.size());
      for (StdCompUnitField other_element : other.unitList) {
        __this__unitList.add(new StdCompUnitField(other_element));
      }
      this.unitList = __this__unitList;
    }
    this.stopWin = other.stopWin;
    this.stopLoss = other.stopLoss;
    if (other.isSetTimeRegions()) {
      List<ContractTradeRegion> __this__timeRegions = new ArrayList<ContractTradeRegion>(other.timeRegions.size());
      for (ContractTradeRegion other_element : other.timeRegions) {
        __this__timeRegions.add(new ContractTradeRegion(other_element));
      }
      this.timeRegions = __this__timeRegions;
    }
    this.serialVersionUID = other.serialVersionUID;
  }

  public StdComposeField deepCopy() {
    return new StdComposeField(this);
  }

  @Override
  public void clear() {
    this.ukey = null;
    this.owner = null;
    this.name = null;
    this.formula = null;
    this.unitList = null;
    setStopWinIsSet(false);
    this.stopWin = 0;
    setStopLossIsSet(false);
    this.stopLoss = 0;
    this.timeRegions = null;
    setSerialVersionUIDIsSet(false);
    this.serialVersionUID = 0;
  }

  public String getUkey() {
    return this.ukey;
  }

  public StdComposeField setUkey(String ukey) {
    this.ukey = ukey;
    return this;
  }

  public void unsetUkey() {
    this.ukey = null;
  }

  /** Returns true if field ukey is set (has been assigned a value) and false otherwise */
  public boolean isSetUkey() {
    return this.ukey != null;
  }

  public void setUkeyIsSet(boolean value) {
    if (!value) {
      this.ukey = null;
    }
  }

  public String getOwner() {
    return this.owner;
  }

  public StdComposeField setOwner(String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public StdComposeField setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getFormula() {
    return this.formula;
  }

  public StdComposeField setFormula(String formula) {
    this.formula = formula;
    return this;
  }

  public void unsetFormula() {
    this.formula = null;
  }

  /** Returns true if field formula is set (has been assigned a value) and false otherwise */
  public boolean isSetFormula() {
    return this.formula != null;
  }

  public void setFormulaIsSet(boolean value) {
    if (!value) {
      this.formula = null;
    }
  }

  public int getUnitListSize() {
    return (this.unitList == null) ? 0 : this.unitList.size();
  }

  public java.util.Iterator<StdCompUnitField> getUnitListIterator() {
    return (this.unitList == null) ? null : this.unitList.iterator();
  }

  public void addToUnitList(StdCompUnitField elem) {
    if (this.unitList == null) {
      this.unitList = new ArrayList<StdCompUnitField>();
    }
    this.unitList.add(elem);
  }

  public List<StdCompUnitField> getUnitList() {
    return this.unitList;
  }

  public StdComposeField setUnitList(List<StdCompUnitField> unitList) {
    this.unitList = unitList;
    return this;
  }

  public void unsetUnitList() {
    this.unitList = null;
  }

  /** Returns true if field unitList is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitList() {
    return this.unitList != null;
  }

  public void setUnitListIsSet(boolean value) {
    if (!value) {
      this.unitList = null;
    }
  }

  public int getStopWin() {
    return this.stopWin;
  }

  public StdComposeField setStopWin(int stopWin) {
    this.stopWin = stopWin;
    setStopWinIsSet(true);
    return this;
  }

  public void unsetStopWin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPWIN_ISSET_ID);
  }

  /** Returns true if field stopWin is set (has been assigned a value) and false otherwise */
  public boolean isSetStopWin() {
    return EncodingUtils.testBit(__isset_bitfield, __STOPWIN_ISSET_ID);
  }

  public void setStopWinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPWIN_ISSET_ID, value);
  }

  public int getStopLoss() {
    return this.stopLoss;
  }

  public StdComposeField setStopLoss(int stopLoss) {
    this.stopLoss = stopLoss;
    setStopLossIsSet(true);
    return this;
  }

  public void unsetStopLoss() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPLOSS_ISSET_ID);
  }

  /** Returns true if field stopLoss is set (has been assigned a value) and false otherwise */
  public boolean isSetStopLoss() {
    return EncodingUtils.testBit(__isset_bitfield, __STOPLOSS_ISSET_ID);
  }

  public void setStopLossIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPLOSS_ISSET_ID, value);
  }

  public int getTimeRegionsSize() {
    return (this.timeRegions == null) ? 0 : this.timeRegions.size();
  }

  public java.util.Iterator<ContractTradeRegion> getTimeRegionsIterator() {
    return (this.timeRegions == null) ? null : this.timeRegions.iterator();
  }

  public void addToTimeRegions(ContractTradeRegion elem) {
    if (this.timeRegions == null) {
      this.timeRegions = new ArrayList<ContractTradeRegion>();
    }
    this.timeRegions.add(elem);
  }

  public List<ContractTradeRegion> getTimeRegions() {
    return this.timeRegions;
  }

  public StdComposeField setTimeRegions(List<ContractTradeRegion> timeRegions) {
    this.timeRegions = timeRegions;
    return this;
  }

  public void unsetTimeRegions() {
    this.timeRegions = null;
  }

  /** Returns true if field timeRegions is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeRegions() {
    return this.timeRegions != null;
  }

  public void setTimeRegionsIsSet(boolean value) {
    if (!value) {
      this.timeRegions = null;
    }
  }

  public long getSerialVersionUID() {
    return this.serialVersionUID;
  }

  public StdComposeField setSerialVersionUID(long serialVersionUID) {
    this.serialVersionUID = serialVersionUID;
    setSerialVersionUIDIsSet(true);
    return this;
  }

  public void unsetSerialVersionUID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID);
  }

  /** Returns true if field serialVersionUID is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialVersionUID() {
    return EncodingUtils.testBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID);
  }

  public void setSerialVersionUIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UKEY:
      if (value == null) {
        unsetUkey();
      } else {
        setUkey((String)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case FORMULA:
      if (value == null) {
        unsetFormula();
      } else {
        setFormula((String)value);
      }
      break;

    case UNIT_LIST:
      if (value == null) {
        unsetUnitList();
      } else {
        setUnitList((List<StdCompUnitField>)value);
      }
      break;

    case STOP_WIN:
      if (value == null) {
        unsetStopWin();
      } else {
        setStopWin((Integer)value);
      }
      break;

    case STOP_LOSS:
      if (value == null) {
        unsetStopLoss();
      } else {
        setStopLoss((Integer)value);
      }
      break;

    case TIME_REGIONS:
      if (value == null) {
        unsetTimeRegions();
      } else {
        setTimeRegions((List<ContractTradeRegion>)value);
      }
      break;

    case SERIAL_VERSION_UID:
      if (value == null) {
        unsetSerialVersionUID();
      } else {
        setSerialVersionUID((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UKEY:
      return getUkey();

    case OWNER:
      return getOwner();

    case NAME:
      return getName();

    case FORMULA:
      return getFormula();

    case UNIT_LIST:
      return getUnitList();

    case STOP_WIN:
      return Integer.valueOf(getStopWin());

    case STOP_LOSS:
      return Integer.valueOf(getStopLoss());

    case TIME_REGIONS:
      return getTimeRegions();

    case SERIAL_VERSION_UID:
      return Long.valueOf(getSerialVersionUID());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UKEY:
      return isSetUkey();
    case OWNER:
      return isSetOwner();
    case NAME:
      return isSetName();
    case FORMULA:
      return isSetFormula();
    case UNIT_LIST:
      return isSetUnitList();
    case STOP_WIN:
      return isSetStopWin();
    case STOP_LOSS:
      return isSetStopLoss();
    case TIME_REGIONS:
      return isSetTimeRegions();
    case SERIAL_VERSION_UID:
      return isSetSerialVersionUID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StdComposeField)
      return this.equals((StdComposeField)that);
    return false;
  }

  public boolean equals(StdComposeField that) {
    if (that == null)
      return false;

    boolean this_present_ukey = true && this.isSetUkey();
    boolean that_present_ukey = true && that.isSetUkey();
    if (this_present_ukey || that_present_ukey) {
      if (!(this_present_ukey && that_present_ukey))
        return false;
      if (!this.ukey.equals(that.ukey))
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_formula = true && this.isSetFormula();
    boolean that_present_formula = true && that.isSetFormula();
    if (this_present_formula || that_present_formula) {
      if (!(this_present_formula && that_present_formula))
        return false;
      if (!this.formula.equals(that.formula))
        return false;
    }

    boolean this_present_unitList = true && this.isSetUnitList();
    boolean that_present_unitList = true && that.isSetUnitList();
    if (this_present_unitList || that_present_unitList) {
      if (!(this_present_unitList && that_present_unitList))
        return false;
      if (!this.unitList.equals(that.unitList))
        return false;
    }

    boolean this_present_stopWin = true && this.isSetStopWin();
    boolean that_present_stopWin = true && that.isSetStopWin();
    if (this_present_stopWin || that_present_stopWin) {
      if (!(this_present_stopWin && that_present_stopWin))
        return false;
      if (this.stopWin != that.stopWin)
        return false;
    }

    boolean this_present_stopLoss = true && this.isSetStopLoss();
    boolean that_present_stopLoss = true && that.isSetStopLoss();
    if (this_present_stopLoss || that_present_stopLoss) {
      if (!(this_present_stopLoss && that_present_stopLoss))
        return false;
      if (this.stopLoss != that.stopLoss)
        return false;
    }

    boolean this_present_timeRegions = true && this.isSetTimeRegions();
    boolean that_present_timeRegions = true && that.isSetTimeRegions();
    if (this_present_timeRegions || that_present_timeRegions) {
      if (!(this_present_timeRegions && that_present_timeRegions))
        return false;
      if (!this.timeRegions.equals(that.timeRegions))
        return false;
    }

    boolean this_present_serialVersionUID = true && this.isSetSerialVersionUID();
    boolean that_present_serialVersionUID = true && that.isSetSerialVersionUID();
    if (this_present_serialVersionUID || that_present_serialVersionUID) {
      if (!(this_present_serialVersionUID && that_present_serialVersionUID))
        return false;
      if (this.serialVersionUID != that.serialVersionUID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StdComposeField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUkey()).compareTo(other.isSetUkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ukey, other.ukey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFormula()).compareTo(other.isSetFormula());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormula()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formula, other.formula);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitList()).compareTo(other.isSetUnitList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitList, other.unitList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopWin()).compareTo(other.isSetStopWin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopWin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopWin, other.stopWin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopLoss()).compareTo(other.isSetStopLoss());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopLoss()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopLoss, other.stopLoss);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeRegions()).compareTo(other.isSetTimeRegions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeRegions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeRegions, other.timeRegions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialVersionUID()).compareTo(other.isSetSerialVersionUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialVersionUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialVersionUID, other.serialVersionUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StdComposeField(");
    boolean first = true;

    sb.append("ukey:");
    if (this.ukey == null) {
      sb.append("null");
    } else {
      sb.append(this.ukey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("formula:");
    if (this.formula == null) {
      sb.append("null");
    } else {
      sb.append(this.formula);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitList:");
    if (this.unitList == null) {
      sb.append("null");
    } else {
      sb.append(this.unitList);
    }
    first = false;
    if (isSetStopWin()) {
      if (!first) sb.append(", ");
      sb.append("stopWin:");
      sb.append(this.stopWin);
      first = false;
    }
    if (isSetStopLoss()) {
      if (!first) sb.append(", ");
      sb.append("stopLoss:");
      sb.append(this.stopLoss);
      first = false;
    }
    if (isSetTimeRegions()) {
      if (!first) sb.append(", ");
      sb.append("timeRegions:");
      if (this.timeRegions == null) {
        sb.append("null");
      } else {
        sb.append(this.timeRegions);
      }
      first = false;
    }
    if (isSetSerialVersionUID()) {
      if (!first) sb.append(", ");
      sb.append("serialVersionUID:");
      sb.append(this.serialVersionUID);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ukey == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ukey' was not present! Struct: " + toString());
    }
    if (owner == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'owner' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (formula == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'formula' was not present! Struct: " + toString());
    }
    if (unitList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unitList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StdComposeFieldStandardSchemeFactory implements SchemeFactory {
    public StdComposeFieldStandardScheme getScheme() {
      return new StdComposeFieldStandardScheme();
    }
  }

  private static class StdComposeFieldStandardScheme extends StandardScheme<StdComposeField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StdComposeField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ukey = iprot.readString();
              struct.setUkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FORMULA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.formula = iprot.readString();
              struct.setFormulaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UNIT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                struct.unitList = new ArrayList<StdCompUnitField>(_list96.size);
                for (int _i97 = 0; _i97 < _list96.size; ++_i97)
                {
                  StdCompUnitField _elem98;
                  _elem98 = new StdCompUnitField();
                  _elem98.read(iprot);
                  struct.unitList.add(_elem98);
                }
                iprot.readListEnd();
              }
              struct.setUnitListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STOP_WIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stopWin = iprot.readI32();
              struct.setStopWinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STOP_LOSS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stopLoss = iprot.readI32();
              struct.setStopLossIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TIME_REGIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list99 = iprot.readListBegin();
                struct.timeRegions = new ArrayList<ContractTradeRegion>(_list99.size);
                for (int _i100 = 0; _i100 < _list99.size; ++_i100)
                {
                  ContractTradeRegion _elem101;
                  _elem101 = new ContractTradeRegion();
                  _elem101.read(iprot);
                  struct.timeRegions.add(_elem101);
                }
                iprot.readListEnd();
              }
              struct.setTimeRegionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // SERIAL_VERSION_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serialVersionUID = iprot.readI64();
              struct.setSerialVersionUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StdComposeField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ukey != null) {
        oprot.writeFieldBegin(UKEY_FIELD_DESC);
        oprot.writeString(struct.ukey);
        oprot.writeFieldEnd();
      }
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(struct.owner);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.formula != null) {
        oprot.writeFieldBegin(FORMULA_FIELD_DESC);
        oprot.writeString(struct.formula);
        oprot.writeFieldEnd();
      }
      if (struct.unitList != null) {
        oprot.writeFieldBegin(UNIT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.unitList.size()));
          for (StdCompUnitField _iter102 : struct.unitList)
          {
            _iter102.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetStopWin()) {
        oprot.writeFieldBegin(STOP_WIN_FIELD_DESC);
        oprot.writeI32(struct.stopWin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStopLoss()) {
        oprot.writeFieldBegin(STOP_LOSS_FIELD_DESC);
        oprot.writeI32(struct.stopLoss);
        oprot.writeFieldEnd();
      }
      if (struct.timeRegions != null) {
        if (struct.isSetTimeRegions()) {
          oprot.writeFieldBegin(TIME_REGIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.timeRegions.size()));
            for (ContractTradeRegion _iter103 : struct.timeRegions)
            {
              _iter103.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSerialVersionUID()) {
        oprot.writeFieldBegin(SERIAL_VERSION_UID_FIELD_DESC);
        oprot.writeI64(struct.serialVersionUID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StdComposeFieldTupleSchemeFactory implements SchemeFactory {
    public StdComposeFieldTupleScheme getScheme() {
      return new StdComposeFieldTupleScheme();
    }
  }

  private static class StdComposeFieldTupleScheme extends TupleScheme<StdComposeField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StdComposeField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.ukey);
      oprot.writeString(struct.owner);
      oprot.writeString(struct.name);
      oprot.writeString(struct.formula);
      {
        oprot.writeI32(struct.unitList.size());
        for (StdCompUnitField _iter104 : struct.unitList)
        {
          _iter104.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetStopWin()) {
        optionals.set(0);
      }
      if (struct.isSetStopLoss()) {
        optionals.set(1);
      }
      if (struct.isSetTimeRegions()) {
        optionals.set(2);
      }
      if (struct.isSetSerialVersionUID()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStopWin()) {
        oprot.writeI32(struct.stopWin);
      }
      if (struct.isSetStopLoss()) {
        oprot.writeI32(struct.stopLoss);
      }
      if (struct.isSetTimeRegions()) {
        {
          oprot.writeI32(struct.timeRegions.size());
          for (ContractTradeRegion _iter105 : struct.timeRegions)
          {
            _iter105.write(oprot);
          }
        }
      }
      if (struct.isSetSerialVersionUID()) {
        oprot.writeI64(struct.serialVersionUID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StdComposeField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.ukey = iprot.readString();
      struct.setUkeyIsSet(true);
      struct.owner = iprot.readString();
      struct.setOwnerIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.formula = iprot.readString();
      struct.setFormulaIsSet(true);
      {
        org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.unitList = new ArrayList<StdCompUnitField>(_list106.size);
        for (int _i107 = 0; _i107 < _list106.size; ++_i107)
        {
          StdCompUnitField _elem108;
          _elem108 = new StdCompUnitField();
          _elem108.read(iprot);
          struct.unitList.add(_elem108);
        }
      }
      struct.setUnitListIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.stopWin = iprot.readI32();
        struct.setStopWinIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stopLoss = iprot.readI32();
        struct.setStopLossIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.timeRegions = new ArrayList<ContractTradeRegion>(_list109.size);
          for (int _i110 = 0; _i110 < _list109.size; ++_i110)
          {
            ContractTradeRegion _elem111;
            _elem111 = new ContractTradeRegion();
            _elem111.read(iprot);
            struct.timeRegions.add(_elem111);
          }
        }
        struct.setTimeRegionsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.serialVersionUID = iprot.readI64();
        struct.setSerialVersionUIDIsSet(true);
      }
    }
  }

}

