/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.common.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StdCompOrderLegStatusField implements org.apache.thrift.TBase<StdCompOrderLegStatusField, StdCompOrderLegStatusField._Fields>, java.io.Serializable, Cloneable, Comparable<StdCompOrderLegStatusField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StdCompOrderLegStatusField");

  private static final org.apache.thrift.protocol.TField COMP_UNIT_VAR_FIELD_DESC = new org.apache.thrift.protocol.TField("compUnitVar", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LEG_QTY_FIELD_DESC = new org.apache.thrift.protocol.TField("legQty", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LEG_DIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("legDirect", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LEG_TARGET_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("legTargetPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField LEG_AVG_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("legAvgPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField LEG_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("legState", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField OPEN_ORDER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("openOrderList", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField CLEAN_ORDER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("cleanOrderList", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField SERIAL_VERSION_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("serialVersionUID", org.apache.thrift.protocol.TType.I64, (short)101);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StdCompOrderLegStatusFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StdCompOrderLegStatusFieldTupleSchemeFactory());
  }

  public String compUnitVar; // required
  public int legQty; // required
  public int legDirect; // required
  public double legTargetPrice; // required
  public double legAvgPrice; // required
  public int legState; // required
  public List<StdOrderStatusAndTrade> openOrderList; // optional
  public List<StdOrderStatusAndTrade> cleanOrderList; // optional
  public long serialVersionUID; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMP_UNIT_VAR((short)1, "compUnitVar"),
    LEG_QTY((short)2, "legQty"),
    LEG_DIRECT((short)3, "legDirect"),
    LEG_TARGET_PRICE((short)4, "legTargetPrice"),
    LEG_AVG_PRICE((short)6, "legAvgPrice"),
    LEG_STATE((short)7, "legState"),
    OPEN_ORDER_LIST((short)8, "openOrderList"),
    CLEAN_ORDER_LIST((short)9, "cleanOrderList"),
    SERIAL_VERSION_UID((short)101, "serialVersionUID");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMP_UNIT_VAR
          return COMP_UNIT_VAR;
        case 2: // LEG_QTY
          return LEG_QTY;
        case 3: // LEG_DIRECT
          return LEG_DIRECT;
        case 4: // LEG_TARGET_PRICE
          return LEG_TARGET_PRICE;
        case 6: // LEG_AVG_PRICE
          return LEG_AVG_PRICE;
        case 7: // LEG_STATE
          return LEG_STATE;
        case 8: // OPEN_ORDER_LIST
          return OPEN_ORDER_LIST;
        case 9: // CLEAN_ORDER_LIST
          return CLEAN_ORDER_LIST;
        case 101: // SERIAL_VERSION_UID
          return SERIAL_VERSION_UID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEGQTY_ISSET_ID = 0;
  private static final int __LEGDIRECT_ISSET_ID = 1;
  private static final int __LEGTARGETPRICE_ISSET_ID = 2;
  private static final int __LEGAVGPRICE_ISSET_ID = 3;
  private static final int __LEGSTATE_ISSET_ID = 4;
  private static final int __SERIALVERSIONUID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.OPEN_ORDER_LIST,_Fields.CLEAN_ORDER_LIST,_Fields.SERIAL_VERSION_UID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMP_UNIT_VAR, new org.apache.thrift.meta_data.FieldMetaData("compUnitVar", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEG_QTY, new org.apache.thrift.meta_data.FieldMetaData("legQty", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEG_DIRECT, new org.apache.thrift.meta_data.FieldMetaData("legDirect", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEG_TARGET_PRICE, new org.apache.thrift.meta_data.FieldMetaData("legTargetPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LEG_AVG_PRICE, new org.apache.thrift.meta_data.FieldMetaData("legAvgPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LEG_STATE, new org.apache.thrift.meta_data.FieldMetaData("legState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN_ORDER_LIST, new org.apache.thrift.meta_data.FieldMetaData("openOrderList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StdOrderStatusAndTrade.class))));
    tmpMap.put(_Fields.CLEAN_ORDER_LIST, new org.apache.thrift.meta_data.FieldMetaData("cleanOrderList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StdOrderStatusAndTrade.class))));
    tmpMap.put(_Fields.SERIAL_VERSION_UID, new org.apache.thrift.meta_data.FieldMetaData("serialVersionUID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StdCompOrderLegStatusField.class, metaDataMap);
  }

  public StdCompOrderLegStatusField() {
  }

  public StdCompOrderLegStatusField(
    String compUnitVar,
    int legQty,
    int legDirect,
    double legTargetPrice,
    double legAvgPrice,
    int legState)
  {
    this();
    this.compUnitVar = compUnitVar;
    this.legQty = legQty;
    setLegQtyIsSet(true);
    this.legDirect = legDirect;
    setLegDirectIsSet(true);
    this.legTargetPrice = legTargetPrice;
    setLegTargetPriceIsSet(true);
    this.legAvgPrice = legAvgPrice;
    setLegAvgPriceIsSet(true);
    this.legState = legState;
    setLegStateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StdCompOrderLegStatusField(StdCompOrderLegStatusField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCompUnitVar()) {
      this.compUnitVar = other.compUnitVar;
    }
    this.legQty = other.legQty;
    this.legDirect = other.legDirect;
    this.legTargetPrice = other.legTargetPrice;
    this.legAvgPrice = other.legAvgPrice;
    this.legState = other.legState;
    if (other.isSetOpenOrderList()) {
      List<StdOrderStatusAndTrade> __this__openOrderList = new ArrayList<StdOrderStatusAndTrade>(other.openOrderList.size());
      for (StdOrderStatusAndTrade other_element : other.openOrderList) {
        __this__openOrderList.add(new StdOrderStatusAndTrade(other_element));
      }
      this.openOrderList = __this__openOrderList;
    }
    if (other.isSetCleanOrderList()) {
      List<StdOrderStatusAndTrade> __this__cleanOrderList = new ArrayList<StdOrderStatusAndTrade>(other.cleanOrderList.size());
      for (StdOrderStatusAndTrade other_element : other.cleanOrderList) {
        __this__cleanOrderList.add(new StdOrderStatusAndTrade(other_element));
      }
      this.cleanOrderList = __this__cleanOrderList;
    }
    this.serialVersionUID = other.serialVersionUID;
  }

  public StdCompOrderLegStatusField deepCopy() {
    return new StdCompOrderLegStatusField(this);
  }

  @Override
  public void clear() {
    this.compUnitVar = null;
    setLegQtyIsSet(false);
    this.legQty = 0;
    setLegDirectIsSet(false);
    this.legDirect = 0;
    setLegTargetPriceIsSet(false);
    this.legTargetPrice = 0.0;
    setLegAvgPriceIsSet(false);
    this.legAvgPrice = 0.0;
    setLegStateIsSet(false);
    this.legState = 0;
    this.openOrderList = null;
    this.cleanOrderList = null;
    setSerialVersionUIDIsSet(false);
    this.serialVersionUID = 0;
  }

  public String getCompUnitVar() {
    return this.compUnitVar;
  }

  public StdCompOrderLegStatusField setCompUnitVar(String compUnitVar) {
    this.compUnitVar = compUnitVar;
    return this;
  }

  public void unsetCompUnitVar() {
    this.compUnitVar = null;
  }

  /** Returns true if field compUnitVar is set (has been assigned a value) and false otherwise */
  public boolean isSetCompUnitVar() {
    return this.compUnitVar != null;
  }

  public void setCompUnitVarIsSet(boolean value) {
    if (!value) {
      this.compUnitVar = null;
    }
  }

  public int getLegQty() {
    return this.legQty;
  }

  public StdCompOrderLegStatusField setLegQty(int legQty) {
    this.legQty = legQty;
    setLegQtyIsSet(true);
    return this;
  }

  public void unsetLegQty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEGQTY_ISSET_ID);
  }

  /** Returns true if field legQty is set (has been assigned a value) and false otherwise */
  public boolean isSetLegQty() {
    return EncodingUtils.testBit(__isset_bitfield, __LEGQTY_ISSET_ID);
  }

  public void setLegQtyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEGQTY_ISSET_ID, value);
  }

  public int getLegDirect() {
    return this.legDirect;
  }

  public StdCompOrderLegStatusField setLegDirect(int legDirect) {
    this.legDirect = legDirect;
    setLegDirectIsSet(true);
    return this;
  }

  public void unsetLegDirect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEGDIRECT_ISSET_ID);
  }

  /** Returns true if field legDirect is set (has been assigned a value) and false otherwise */
  public boolean isSetLegDirect() {
    return EncodingUtils.testBit(__isset_bitfield, __LEGDIRECT_ISSET_ID);
  }

  public void setLegDirectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEGDIRECT_ISSET_ID, value);
  }

  public double getLegTargetPrice() {
    return this.legTargetPrice;
  }

  public StdCompOrderLegStatusField setLegTargetPrice(double legTargetPrice) {
    this.legTargetPrice = legTargetPrice;
    setLegTargetPriceIsSet(true);
    return this;
  }

  public void unsetLegTargetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEGTARGETPRICE_ISSET_ID);
  }

  /** Returns true if field legTargetPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLegTargetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LEGTARGETPRICE_ISSET_ID);
  }

  public void setLegTargetPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEGTARGETPRICE_ISSET_ID, value);
  }

  public double getLegAvgPrice() {
    return this.legAvgPrice;
  }

  public StdCompOrderLegStatusField setLegAvgPrice(double legAvgPrice) {
    this.legAvgPrice = legAvgPrice;
    setLegAvgPriceIsSet(true);
    return this;
  }

  public void unsetLegAvgPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEGAVGPRICE_ISSET_ID);
  }

  /** Returns true if field legAvgPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLegAvgPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LEGAVGPRICE_ISSET_ID);
  }

  public void setLegAvgPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEGAVGPRICE_ISSET_ID, value);
  }

  public int getLegState() {
    return this.legState;
  }

  public StdCompOrderLegStatusField setLegState(int legState) {
    this.legState = legState;
    setLegStateIsSet(true);
    return this;
  }

  public void unsetLegState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEGSTATE_ISSET_ID);
  }

  /** Returns true if field legState is set (has been assigned a value) and false otherwise */
  public boolean isSetLegState() {
    return EncodingUtils.testBit(__isset_bitfield, __LEGSTATE_ISSET_ID);
  }

  public void setLegStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEGSTATE_ISSET_ID, value);
  }

  public int getOpenOrderListSize() {
    return (this.openOrderList == null) ? 0 : this.openOrderList.size();
  }

  public java.util.Iterator<StdOrderStatusAndTrade> getOpenOrderListIterator() {
    return (this.openOrderList == null) ? null : this.openOrderList.iterator();
  }

  public void addToOpenOrderList(StdOrderStatusAndTrade elem) {
    if (this.openOrderList == null) {
      this.openOrderList = new ArrayList<StdOrderStatusAndTrade>();
    }
    this.openOrderList.add(elem);
  }

  public List<StdOrderStatusAndTrade> getOpenOrderList() {
    return this.openOrderList;
  }

  public StdCompOrderLegStatusField setOpenOrderList(List<StdOrderStatusAndTrade> openOrderList) {
    this.openOrderList = openOrderList;
    return this;
  }

  public void unsetOpenOrderList() {
    this.openOrderList = null;
  }

  /** Returns true if field openOrderList is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenOrderList() {
    return this.openOrderList != null;
  }

  public void setOpenOrderListIsSet(boolean value) {
    if (!value) {
      this.openOrderList = null;
    }
  }

  public int getCleanOrderListSize() {
    return (this.cleanOrderList == null) ? 0 : this.cleanOrderList.size();
  }

  public java.util.Iterator<StdOrderStatusAndTrade> getCleanOrderListIterator() {
    return (this.cleanOrderList == null) ? null : this.cleanOrderList.iterator();
  }

  public void addToCleanOrderList(StdOrderStatusAndTrade elem) {
    if (this.cleanOrderList == null) {
      this.cleanOrderList = new ArrayList<StdOrderStatusAndTrade>();
    }
    this.cleanOrderList.add(elem);
  }

  public List<StdOrderStatusAndTrade> getCleanOrderList() {
    return this.cleanOrderList;
  }

  public StdCompOrderLegStatusField setCleanOrderList(List<StdOrderStatusAndTrade> cleanOrderList) {
    this.cleanOrderList = cleanOrderList;
    return this;
  }

  public void unsetCleanOrderList() {
    this.cleanOrderList = null;
  }

  /** Returns true if field cleanOrderList is set (has been assigned a value) and false otherwise */
  public boolean isSetCleanOrderList() {
    return this.cleanOrderList != null;
  }

  public void setCleanOrderListIsSet(boolean value) {
    if (!value) {
      this.cleanOrderList = null;
    }
  }

  public long getSerialVersionUID() {
    return this.serialVersionUID;
  }

  public StdCompOrderLegStatusField setSerialVersionUID(long serialVersionUID) {
    this.serialVersionUID = serialVersionUID;
    setSerialVersionUIDIsSet(true);
    return this;
  }

  public void unsetSerialVersionUID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID);
  }

  /** Returns true if field serialVersionUID is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialVersionUID() {
    return EncodingUtils.testBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID);
  }

  public void setSerialVersionUIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERIALVERSIONUID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMP_UNIT_VAR:
      if (value == null) {
        unsetCompUnitVar();
      } else {
        setCompUnitVar((String)value);
      }
      break;

    case LEG_QTY:
      if (value == null) {
        unsetLegQty();
      } else {
        setLegQty((Integer)value);
      }
      break;

    case LEG_DIRECT:
      if (value == null) {
        unsetLegDirect();
      } else {
        setLegDirect((Integer)value);
      }
      break;

    case LEG_TARGET_PRICE:
      if (value == null) {
        unsetLegTargetPrice();
      } else {
        setLegTargetPrice((Double)value);
      }
      break;

    case LEG_AVG_PRICE:
      if (value == null) {
        unsetLegAvgPrice();
      } else {
        setLegAvgPrice((Double)value);
      }
      break;

    case LEG_STATE:
      if (value == null) {
        unsetLegState();
      } else {
        setLegState((Integer)value);
      }
      break;

    case OPEN_ORDER_LIST:
      if (value == null) {
        unsetOpenOrderList();
      } else {
        setOpenOrderList((List<StdOrderStatusAndTrade>)value);
      }
      break;

    case CLEAN_ORDER_LIST:
      if (value == null) {
        unsetCleanOrderList();
      } else {
        setCleanOrderList((List<StdOrderStatusAndTrade>)value);
      }
      break;

    case SERIAL_VERSION_UID:
      if (value == null) {
        unsetSerialVersionUID();
      } else {
        setSerialVersionUID((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMP_UNIT_VAR:
      return getCompUnitVar();

    case LEG_QTY:
      return Integer.valueOf(getLegQty());

    case LEG_DIRECT:
      return Integer.valueOf(getLegDirect());

    case LEG_TARGET_PRICE:
      return Double.valueOf(getLegTargetPrice());

    case LEG_AVG_PRICE:
      return Double.valueOf(getLegAvgPrice());

    case LEG_STATE:
      return Integer.valueOf(getLegState());

    case OPEN_ORDER_LIST:
      return getOpenOrderList();

    case CLEAN_ORDER_LIST:
      return getCleanOrderList();

    case SERIAL_VERSION_UID:
      return Long.valueOf(getSerialVersionUID());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMP_UNIT_VAR:
      return isSetCompUnitVar();
    case LEG_QTY:
      return isSetLegQty();
    case LEG_DIRECT:
      return isSetLegDirect();
    case LEG_TARGET_PRICE:
      return isSetLegTargetPrice();
    case LEG_AVG_PRICE:
      return isSetLegAvgPrice();
    case LEG_STATE:
      return isSetLegState();
    case OPEN_ORDER_LIST:
      return isSetOpenOrderList();
    case CLEAN_ORDER_LIST:
      return isSetCleanOrderList();
    case SERIAL_VERSION_UID:
      return isSetSerialVersionUID();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StdCompOrderLegStatusField)
      return this.equals((StdCompOrderLegStatusField)that);
    return false;
  }

  public boolean equals(StdCompOrderLegStatusField that) {
    if (that == null)
      return false;

    boolean this_present_compUnitVar = true && this.isSetCompUnitVar();
    boolean that_present_compUnitVar = true && that.isSetCompUnitVar();
    if (this_present_compUnitVar || that_present_compUnitVar) {
      if (!(this_present_compUnitVar && that_present_compUnitVar))
        return false;
      if (!this.compUnitVar.equals(that.compUnitVar))
        return false;
    }

    boolean this_present_legQty = true;
    boolean that_present_legQty = true;
    if (this_present_legQty || that_present_legQty) {
      if (!(this_present_legQty && that_present_legQty))
        return false;
      if (this.legQty != that.legQty)
        return false;
    }

    boolean this_present_legDirect = true;
    boolean that_present_legDirect = true;
    if (this_present_legDirect || that_present_legDirect) {
      if (!(this_present_legDirect && that_present_legDirect))
        return false;
      if (this.legDirect != that.legDirect)
        return false;
    }

    boolean this_present_legTargetPrice = true;
    boolean that_present_legTargetPrice = true;
    if (this_present_legTargetPrice || that_present_legTargetPrice) {
      if (!(this_present_legTargetPrice && that_present_legTargetPrice))
        return false;
      if (this.legTargetPrice != that.legTargetPrice)
        return false;
    }

    boolean this_present_legAvgPrice = true;
    boolean that_present_legAvgPrice = true;
    if (this_present_legAvgPrice || that_present_legAvgPrice) {
      if (!(this_present_legAvgPrice && that_present_legAvgPrice))
        return false;
      if (this.legAvgPrice != that.legAvgPrice)
        return false;
    }

    boolean this_present_legState = true;
    boolean that_present_legState = true;
    if (this_present_legState || that_present_legState) {
      if (!(this_present_legState && that_present_legState))
        return false;
      if (this.legState != that.legState)
        return false;
    }

    boolean this_present_openOrderList = true && this.isSetOpenOrderList();
    boolean that_present_openOrderList = true && that.isSetOpenOrderList();
    if (this_present_openOrderList || that_present_openOrderList) {
      if (!(this_present_openOrderList && that_present_openOrderList))
        return false;
      if (!this.openOrderList.equals(that.openOrderList))
        return false;
    }

    boolean this_present_cleanOrderList = true && this.isSetCleanOrderList();
    boolean that_present_cleanOrderList = true && that.isSetCleanOrderList();
    if (this_present_cleanOrderList || that_present_cleanOrderList) {
      if (!(this_present_cleanOrderList && that_present_cleanOrderList))
        return false;
      if (!this.cleanOrderList.equals(that.cleanOrderList))
        return false;
    }

    boolean this_present_serialVersionUID = true && this.isSetSerialVersionUID();
    boolean that_present_serialVersionUID = true && that.isSetSerialVersionUID();
    if (this_present_serialVersionUID || that_present_serialVersionUID) {
      if (!(this_present_serialVersionUID && that_present_serialVersionUID))
        return false;
      if (this.serialVersionUID != that.serialVersionUID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StdCompOrderLegStatusField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCompUnitVar()).compareTo(other.isSetCompUnitVar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompUnitVar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compUnitVar, other.compUnitVar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegQty()).compareTo(other.isSetLegQty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegQty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legQty, other.legQty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegDirect()).compareTo(other.isSetLegDirect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegDirect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legDirect, other.legDirect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegTargetPrice()).compareTo(other.isSetLegTargetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegTargetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legTargetPrice, other.legTargetPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegAvgPrice()).compareTo(other.isSetLegAvgPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegAvgPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legAvgPrice, other.legAvgPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegState()).compareTo(other.isSetLegState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legState, other.legState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenOrderList()).compareTo(other.isSetOpenOrderList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenOrderList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openOrderList, other.openOrderList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCleanOrderList()).compareTo(other.isSetCleanOrderList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCleanOrderList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cleanOrderList, other.cleanOrderList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialVersionUID()).compareTo(other.isSetSerialVersionUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialVersionUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialVersionUID, other.serialVersionUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StdCompOrderLegStatusField(");
    boolean first = true;

    sb.append("compUnitVar:");
    if (this.compUnitVar == null) {
      sb.append("null");
    } else {
      sb.append(this.compUnitVar);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("legQty:");
    sb.append(this.legQty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("legDirect:");
    sb.append(this.legDirect);
    first = false;
    if (!first) sb.append(", ");
    sb.append("legTargetPrice:");
    sb.append(this.legTargetPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("legAvgPrice:");
    sb.append(this.legAvgPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("legState:");
    sb.append(this.legState);
    first = false;
    if (isSetOpenOrderList()) {
      if (!first) sb.append(", ");
      sb.append("openOrderList:");
      if (this.openOrderList == null) {
        sb.append("null");
      } else {
        sb.append(this.openOrderList);
      }
      first = false;
    }
    if (isSetCleanOrderList()) {
      if (!first) sb.append(", ");
      sb.append("cleanOrderList:");
      if (this.cleanOrderList == null) {
        sb.append("null");
      } else {
        sb.append(this.cleanOrderList);
      }
      first = false;
    }
    if (isSetSerialVersionUID()) {
      if (!first) sb.append(", ");
      sb.append("serialVersionUID:");
      sb.append(this.serialVersionUID);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (compUnitVar == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'compUnitVar' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'legQty' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'legDirect' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'legTargetPrice' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'legAvgPrice' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'legState' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StdCompOrderLegStatusFieldStandardSchemeFactory implements SchemeFactory {
    public StdCompOrderLegStatusFieldStandardScheme getScheme() {
      return new StdCompOrderLegStatusFieldStandardScheme();
    }
  }

  private static class StdCompOrderLegStatusFieldStandardScheme extends StandardScheme<StdCompOrderLegStatusField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StdCompOrderLegStatusField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMP_UNIT_VAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compUnitVar = iprot.readString();
              struct.setCompUnitVarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEG_QTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.legQty = iprot.readI32();
              struct.setLegQtyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEG_DIRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.legDirect = iprot.readI32();
              struct.setLegDirectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEG_TARGET_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.legTargetPrice = iprot.readDouble();
              struct.setLegTargetPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LEG_AVG_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.legAvgPrice = iprot.readDouble();
              struct.setLegAvgPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LEG_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.legState = iprot.readI32();
              struct.setLegStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPEN_ORDER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                struct.openOrderList = new ArrayList<StdOrderStatusAndTrade>(_list128.size);
                for (int _i129 = 0; _i129 < _list128.size; ++_i129)
                {
                  StdOrderStatusAndTrade _elem130;
                  _elem130 = new StdOrderStatusAndTrade();
                  _elem130.read(iprot);
                  struct.openOrderList.add(_elem130);
                }
                iprot.readListEnd();
              }
              struct.setOpenOrderListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CLEAN_ORDER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list131 = iprot.readListBegin();
                struct.cleanOrderList = new ArrayList<StdOrderStatusAndTrade>(_list131.size);
                for (int _i132 = 0; _i132 < _list131.size; ++_i132)
                {
                  StdOrderStatusAndTrade _elem133;
                  _elem133 = new StdOrderStatusAndTrade();
                  _elem133.read(iprot);
                  struct.cleanOrderList.add(_elem133);
                }
                iprot.readListEnd();
              }
              struct.setCleanOrderListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // SERIAL_VERSION_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serialVersionUID = iprot.readI64();
              struct.setSerialVersionUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLegQty()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'legQty' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLegDirect()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'legDirect' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLegTargetPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'legTargetPrice' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLegAvgPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'legAvgPrice' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLegState()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'legState' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StdCompOrderLegStatusField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.compUnitVar != null) {
        oprot.writeFieldBegin(COMP_UNIT_VAR_FIELD_DESC);
        oprot.writeString(struct.compUnitVar);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEG_QTY_FIELD_DESC);
      oprot.writeI32(struct.legQty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEG_DIRECT_FIELD_DESC);
      oprot.writeI32(struct.legDirect);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEG_TARGET_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.legTargetPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEG_AVG_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.legAvgPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEG_STATE_FIELD_DESC);
      oprot.writeI32(struct.legState);
      oprot.writeFieldEnd();
      if (struct.openOrderList != null) {
        if (struct.isSetOpenOrderList()) {
          oprot.writeFieldBegin(OPEN_ORDER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.openOrderList.size()));
            for (StdOrderStatusAndTrade _iter134 : struct.openOrderList)
            {
              _iter134.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.cleanOrderList != null) {
        if (struct.isSetCleanOrderList()) {
          oprot.writeFieldBegin(CLEAN_ORDER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cleanOrderList.size()));
            for (StdOrderStatusAndTrade _iter135 : struct.cleanOrderList)
            {
              _iter135.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSerialVersionUID()) {
        oprot.writeFieldBegin(SERIAL_VERSION_UID_FIELD_DESC);
        oprot.writeI64(struct.serialVersionUID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StdCompOrderLegStatusFieldTupleSchemeFactory implements SchemeFactory {
    public StdCompOrderLegStatusFieldTupleScheme getScheme() {
      return new StdCompOrderLegStatusFieldTupleScheme();
    }
  }

  private static class StdCompOrderLegStatusFieldTupleScheme extends TupleScheme<StdCompOrderLegStatusField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StdCompOrderLegStatusField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.compUnitVar);
      oprot.writeI32(struct.legQty);
      oprot.writeI32(struct.legDirect);
      oprot.writeDouble(struct.legTargetPrice);
      oprot.writeDouble(struct.legAvgPrice);
      oprot.writeI32(struct.legState);
      BitSet optionals = new BitSet();
      if (struct.isSetOpenOrderList()) {
        optionals.set(0);
      }
      if (struct.isSetCleanOrderList()) {
        optionals.set(1);
      }
      if (struct.isSetSerialVersionUID()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetOpenOrderList()) {
        {
          oprot.writeI32(struct.openOrderList.size());
          for (StdOrderStatusAndTrade _iter136 : struct.openOrderList)
          {
            _iter136.write(oprot);
          }
        }
      }
      if (struct.isSetCleanOrderList()) {
        {
          oprot.writeI32(struct.cleanOrderList.size());
          for (StdOrderStatusAndTrade _iter137 : struct.cleanOrderList)
          {
            _iter137.write(oprot);
          }
        }
      }
      if (struct.isSetSerialVersionUID()) {
        oprot.writeI64(struct.serialVersionUID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StdCompOrderLegStatusField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.compUnitVar = iprot.readString();
      struct.setCompUnitVarIsSet(true);
      struct.legQty = iprot.readI32();
      struct.setLegQtyIsSet(true);
      struct.legDirect = iprot.readI32();
      struct.setLegDirectIsSet(true);
      struct.legTargetPrice = iprot.readDouble();
      struct.setLegTargetPriceIsSet(true);
      struct.legAvgPrice = iprot.readDouble();
      struct.setLegAvgPriceIsSet(true);
      struct.legState = iprot.readI32();
      struct.setLegStateIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list138 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.openOrderList = new ArrayList<StdOrderStatusAndTrade>(_list138.size);
          for (int _i139 = 0; _i139 < _list138.size; ++_i139)
          {
            StdOrderStatusAndTrade _elem140;
            _elem140 = new StdOrderStatusAndTrade();
            _elem140.read(iprot);
            struct.openOrderList.add(_elem140);
          }
        }
        struct.setOpenOrderListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cleanOrderList = new ArrayList<StdOrderStatusAndTrade>(_list141.size);
          for (int _i142 = 0; _i142 < _list141.size; ++_i142)
          {
            StdOrderStatusAndTrade _elem143;
            _elem143 = new StdOrderStatusAndTrade();
            _elem143.read(iprot);
            struct.cleanOrderList.add(_elem143);
          }
        }
        struct.setCleanOrderListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serialVersionUID = iprot.readI64();
        struct.setSerialVersionUIDIsSet(true);
      }
    }
  }

}

