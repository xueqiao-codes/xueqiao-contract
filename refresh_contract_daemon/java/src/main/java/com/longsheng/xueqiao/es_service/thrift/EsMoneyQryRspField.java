/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.es_service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EsMoneyQryRspField implements org.apache.thrift.TBase<EsMoneyQryRspField, EsMoneyQryRspField._Fields>, java.io.Serializable, Cloneable, Comparable<EsMoneyQryRspField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EsMoneyQryRspField");

  private static final org.apache.thrift.protocol.TField CURRENCY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField Y_AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("yAvailable", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField Y_CAN_CASH_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("yCanCashOut", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField Y_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("yMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField Y_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("yBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField Y_UN_EXPIRED_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("yUnExpiredProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField ADJUST_FIELD_DESC = new org.apache.thrift.protocol.TField("adjust", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField CASH_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("cashIn", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField CASH_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("cashOut", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fee", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField FROZEN_FIELD_DESC = new org.apache.thrift.protocol.TField("frozen", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField COVER_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("coverProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField DAY_COVER_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("dayCoverProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField FLOAT_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("floatProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField DAY_FLOAT_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("dayFloatProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField UN_EXPIRED_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("unExpiredProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField PREMIUM_FIELD_DESC = new org.apache.thrift.protocol.TField("premium", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField DEPOSIT_FIELD_DESC = new org.apache.thrift.protocol.TField("deposit", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField KEEP_DEPOSIT_FIELD_DESC = new org.apache.thrift.protocol.TField("keepDeposit", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField PLEDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("pledge", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField T_AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("tAvailable", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("discount", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField TRADE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeFee", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField DELIVERY_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryFee", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField EXCHANGE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeFee", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField FROZEN_DEPOSIT_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenDeposit", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField FROZEN_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenFee", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField NEW_FLOAT_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("newFloatProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField LME_FLOAT_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("lmeFloatProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)29);
  private static final org.apache.thrift.protocol.TField OPTION_MARKET_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("optionMarketValue", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField ORI_CASH_FIELD_DESC = new org.apache.thrift.protocol.TField("oriCash", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField T_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("tMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)32);
  private static final org.apache.thrift.protocol.TField T_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("tBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField T_CAN_CASH_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("tCanCashOut", org.apache.thrift.protocol.TType.DOUBLE, (short)34);
  private static final org.apache.thrift.protocol.TField RISK_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("riskRate", org.apache.thrift.protocol.TType.DOUBLE, (short)35);
  private static final org.apache.thrift.protocol.TField ACCOUNT_MARKET_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountMarketValue", org.apache.thrift.protocol.TType.DOUBLE, (short)36);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField CLIENT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientNo", org.apache.thrift.protocol.TType.STRING, (short)38);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EsMoneyQryRspFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EsMoneyQryRspFieldTupleSchemeFactory());
  }

  public String currencyNo; // optional
  public double yAvailable; // optional
  public double yCanCashOut; // optional
  public double yMoney; // optional
  public double yBalance; // optional
  public double yUnExpiredProfit; // optional
  public double adjust; // optional
  public double cashIn; // optional
  public double cashOut; // optional
  public double fee; // optional
  public double frozen; // optional
  public double coverProfit; // optional
  public double dayCoverProfit; // optional
  public double floatProfit; // optional
  public double dayFloatProfit; // optional
  public double unExpiredProfit; // optional
  public double premium; // optional
  public double deposit; // optional
  public double keepDeposit; // optional
  public double pledge; // optional
  public double tAvailable; // optional
  public double discount; // optional
  public double tradeFee; // optional
  public double deliveryFee; // optional
  public double exchangeFee; // optional
  public double frozenDeposit; // optional
  public double frozenFee; // optional
  public double newFloatProfit; // optional
  public double lmeFloatProfit; // optional
  public double optionMarketValue; // optional
  public double oriCash; // optional
  public double tMoney; // optional
  public double tBalance; // optional
  public double tCanCashOut; // optional
  public double riskRate; // optional
  public double accountMarketValue; // optional
  public int sledAccountId; // optional
  public String clientNo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CURRENCY_NO((short)1, "currencyNo"),
    Y_AVAILABLE((short)2, "yAvailable"),
    Y_CAN_CASH_OUT((short)3, "yCanCashOut"),
    Y_MONEY((short)4, "yMoney"),
    Y_BALANCE((short)5, "yBalance"),
    Y_UN_EXPIRED_PROFIT((short)6, "yUnExpiredProfit"),
    ADJUST((short)7, "adjust"),
    CASH_IN((short)8, "cashIn"),
    CASH_OUT((short)9, "cashOut"),
    FEE((short)10, "fee"),
    FROZEN((short)11, "frozen"),
    COVER_PROFIT((short)12, "coverProfit"),
    DAY_COVER_PROFIT((short)13, "dayCoverProfit"),
    FLOAT_PROFIT((short)14, "floatProfit"),
    DAY_FLOAT_PROFIT((short)15, "dayFloatProfit"),
    UN_EXPIRED_PROFIT((short)16, "unExpiredProfit"),
    PREMIUM((short)17, "premium"),
    DEPOSIT((short)18, "deposit"),
    KEEP_DEPOSIT((short)19, "keepDeposit"),
    PLEDGE((short)20, "pledge"),
    T_AVAILABLE((short)21, "tAvailable"),
    DISCOUNT((short)22, "discount"),
    TRADE_FEE((short)23, "tradeFee"),
    DELIVERY_FEE((short)24, "deliveryFee"),
    EXCHANGE_FEE((short)25, "exchangeFee"),
    FROZEN_DEPOSIT((short)26, "frozenDeposit"),
    FROZEN_FEE((short)27, "frozenFee"),
    NEW_FLOAT_PROFIT((short)28, "newFloatProfit"),
    LME_FLOAT_PROFIT((short)29, "lmeFloatProfit"),
    OPTION_MARKET_VALUE((short)30, "optionMarketValue"),
    ORI_CASH((short)31, "oriCash"),
    T_MONEY((short)32, "tMoney"),
    T_BALANCE((short)33, "tBalance"),
    T_CAN_CASH_OUT((short)34, "tCanCashOut"),
    RISK_RATE((short)35, "riskRate"),
    ACCOUNT_MARKET_VALUE((short)36, "accountMarketValue"),
    SLED_ACCOUNT_ID((short)37, "sledAccountId"),
    CLIENT_NO((short)38, "clientNo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURRENCY_NO
          return CURRENCY_NO;
        case 2: // Y_AVAILABLE
          return Y_AVAILABLE;
        case 3: // Y_CAN_CASH_OUT
          return Y_CAN_CASH_OUT;
        case 4: // Y_MONEY
          return Y_MONEY;
        case 5: // Y_BALANCE
          return Y_BALANCE;
        case 6: // Y_UN_EXPIRED_PROFIT
          return Y_UN_EXPIRED_PROFIT;
        case 7: // ADJUST
          return ADJUST;
        case 8: // CASH_IN
          return CASH_IN;
        case 9: // CASH_OUT
          return CASH_OUT;
        case 10: // FEE
          return FEE;
        case 11: // FROZEN
          return FROZEN;
        case 12: // COVER_PROFIT
          return COVER_PROFIT;
        case 13: // DAY_COVER_PROFIT
          return DAY_COVER_PROFIT;
        case 14: // FLOAT_PROFIT
          return FLOAT_PROFIT;
        case 15: // DAY_FLOAT_PROFIT
          return DAY_FLOAT_PROFIT;
        case 16: // UN_EXPIRED_PROFIT
          return UN_EXPIRED_PROFIT;
        case 17: // PREMIUM
          return PREMIUM;
        case 18: // DEPOSIT
          return DEPOSIT;
        case 19: // KEEP_DEPOSIT
          return KEEP_DEPOSIT;
        case 20: // PLEDGE
          return PLEDGE;
        case 21: // T_AVAILABLE
          return T_AVAILABLE;
        case 22: // DISCOUNT
          return DISCOUNT;
        case 23: // TRADE_FEE
          return TRADE_FEE;
        case 24: // DELIVERY_FEE
          return DELIVERY_FEE;
        case 25: // EXCHANGE_FEE
          return EXCHANGE_FEE;
        case 26: // FROZEN_DEPOSIT
          return FROZEN_DEPOSIT;
        case 27: // FROZEN_FEE
          return FROZEN_FEE;
        case 28: // NEW_FLOAT_PROFIT
          return NEW_FLOAT_PROFIT;
        case 29: // LME_FLOAT_PROFIT
          return LME_FLOAT_PROFIT;
        case 30: // OPTION_MARKET_VALUE
          return OPTION_MARKET_VALUE;
        case 31: // ORI_CASH
          return ORI_CASH;
        case 32: // T_MONEY
          return T_MONEY;
        case 33: // T_BALANCE
          return T_BALANCE;
        case 34: // T_CAN_CASH_OUT
          return T_CAN_CASH_OUT;
        case 35: // RISK_RATE
          return RISK_RATE;
        case 36: // ACCOUNT_MARKET_VALUE
          return ACCOUNT_MARKET_VALUE;
        case 37: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        case 38: // CLIENT_NO
          return CLIENT_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __YAVAILABLE_ISSET_ID = 0;
  private static final int __YCANCASHOUT_ISSET_ID = 1;
  private static final int __YMONEY_ISSET_ID = 2;
  private static final int __YBALANCE_ISSET_ID = 3;
  private static final int __YUNEXPIREDPROFIT_ISSET_ID = 4;
  private static final int __ADJUST_ISSET_ID = 5;
  private static final int __CASHIN_ISSET_ID = 6;
  private static final int __CASHOUT_ISSET_ID = 7;
  private static final int __FEE_ISSET_ID = 8;
  private static final int __FROZEN_ISSET_ID = 9;
  private static final int __COVERPROFIT_ISSET_ID = 10;
  private static final int __DAYCOVERPROFIT_ISSET_ID = 11;
  private static final int __FLOATPROFIT_ISSET_ID = 12;
  private static final int __DAYFLOATPROFIT_ISSET_ID = 13;
  private static final int __UNEXPIREDPROFIT_ISSET_ID = 14;
  private static final int __PREMIUM_ISSET_ID = 15;
  private static final int __DEPOSIT_ISSET_ID = 16;
  private static final int __KEEPDEPOSIT_ISSET_ID = 17;
  private static final int __PLEDGE_ISSET_ID = 18;
  private static final int __TAVAILABLE_ISSET_ID = 19;
  private static final int __DISCOUNT_ISSET_ID = 20;
  private static final int __TRADEFEE_ISSET_ID = 21;
  private static final int __DELIVERYFEE_ISSET_ID = 22;
  private static final int __EXCHANGEFEE_ISSET_ID = 23;
  private static final int __FROZENDEPOSIT_ISSET_ID = 24;
  private static final int __FROZENFEE_ISSET_ID = 25;
  private static final int __NEWFLOATPROFIT_ISSET_ID = 26;
  private static final int __LMEFLOATPROFIT_ISSET_ID = 27;
  private static final int __OPTIONMARKETVALUE_ISSET_ID = 28;
  private static final int __ORICASH_ISSET_ID = 29;
  private static final int __TMONEY_ISSET_ID = 30;
  private static final int __TBALANCE_ISSET_ID = 31;
  private static final int __TCANCASHOUT_ISSET_ID = 32;
  private static final int __RISKRATE_ISSET_ID = 33;
  private static final int __ACCOUNTMARKETVALUE_ISSET_ID = 34;
  private static final int __SLEDACCOUNTID_ISSET_ID = 35;
  private long __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CURRENCY_NO,_Fields.Y_AVAILABLE,_Fields.Y_CAN_CASH_OUT,_Fields.Y_MONEY,_Fields.Y_BALANCE,_Fields.Y_UN_EXPIRED_PROFIT,_Fields.ADJUST,_Fields.CASH_IN,_Fields.CASH_OUT,_Fields.FEE,_Fields.FROZEN,_Fields.COVER_PROFIT,_Fields.DAY_COVER_PROFIT,_Fields.FLOAT_PROFIT,_Fields.DAY_FLOAT_PROFIT,_Fields.UN_EXPIRED_PROFIT,_Fields.PREMIUM,_Fields.DEPOSIT,_Fields.KEEP_DEPOSIT,_Fields.PLEDGE,_Fields.T_AVAILABLE,_Fields.DISCOUNT,_Fields.TRADE_FEE,_Fields.DELIVERY_FEE,_Fields.EXCHANGE_FEE,_Fields.FROZEN_DEPOSIT,_Fields.FROZEN_FEE,_Fields.NEW_FLOAT_PROFIT,_Fields.LME_FLOAT_PROFIT,_Fields.OPTION_MARKET_VALUE,_Fields.ORI_CASH,_Fields.T_MONEY,_Fields.T_BALANCE,_Fields.T_CAN_CASH_OUT,_Fields.RISK_RATE,_Fields.ACCOUNT_MARKET_VALUE,_Fields.SLED_ACCOUNT_ID,_Fields.CLIENT_NO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURRENCY_NO, new org.apache.thrift.meta_data.FieldMetaData("currencyNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.Y_AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("yAvailable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.Y_CAN_CASH_OUT, new org.apache.thrift.meta_data.FieldMetaData("yCanCashOut", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.Y_MONEY, new org.apache.thrift.meta_data.FieldMetaData("yMoney", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.Y_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("yBalance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.Y_UN_EXPIRED_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("yUnExpiredProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ADJUST, new org.apache.thrift.meta_data.FieldMetaData("adjust", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASH_IN, new org.apache.thrift.meta_data.FieldMetaData("cashIn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASH_OUT, new org.apache.thrift.meta_data.FieldMetaData("cashOut", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FEE, new org.apache.thrift.meta_data.FieldMetaData("fee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN, new org.apache.thrift.meta_data.FieldMetaData("frozen", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COVER_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("coverProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DAY_COVER_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("dayCoverProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FLOAT_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("floatProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DAY_FLOAT_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("dayFloatProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UN_EXPIRED_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("unExpiredProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PREMIUM, new org.apache.thrift.meta_data.FieldMetaData("premium", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEPOSIT, new org.apache.thrift.meta_data.FieldMetaData("deposit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.KEEP_DEPOSIT, new org.apache.thrift.meta_data.FieldMetaData("keepDeposit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PLEDGE, new org.apache.thrift.meta_data.FieldMetaData("pledge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.T_AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("tAvailable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("discount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRADE_FEE, new org.apache.thrift.meta_data.FieldMetaData("tradeFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DELIVERY_FEE, new org.apache.thrift.meta_data.FieldMetaData("deliveryFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXCHANGE_FEE, new org.apache.thrift.meta_data.FieldMetaData("exchangeFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_DEPOSIT, new org.apache.thrift.meta_data.FieldMetaData("frozenDeposit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_FEE, new org.apache.thrift.meta_data.FieldMetaData("frozenFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NEW_FLOAT_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("newFloatProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LME_FLOAT_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("lmeFloatProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPTION_MARKET_VALUE, new org.apache.thrift.meta_data.FieldMetaData("optionMarketValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORI_CASH, new org.apache.thrift.meta_data.FieldMetaData("oriCash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.T_MONEY, new org.apache.thrift.meta_data.FieldMetaData("tMoney", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.T_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("tBalance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.T_CAN_CASH_OUT, new org.apache.thrift.meta_data.FieldMetaData("tCanCashOut", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RISK_RATE, new org.apache.thrift.meta_data.FieldMetaData("riskRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACCOUNT_MARKET_VALUE, new org.apache.thrift.meta_data.FieldMetaData("accountMarketValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLIENT_NO, new org.apache.thrift.meta_data.FieldMetaData("clientNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EsMoneyQryRspField.class, metaDataMap);
  }

  public EsMoneyQryRspField() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EsMoneyQryRspField(EsMoneyQryRspField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCurrencyNo()) {
      this.currencyNo = other.currencyNo;
    }
    this.yAvailable = other.yAvailable;
    this.yCanCashOut = other.yCanCashOut;
    this.yMoney = other.yMoney;
    this.yBalance = other.yBalance;
    this.yUnExpiredProfit = other.yUnExpiredProfit;
    this.adjust = other.adjust;
    this.cashIn = other.cashIn;
    this.cashOut = other.cashOut;
    this.fee = other.fee;
    this.frozen = other.frozen;
    this.coverProfit = other.coverProfit;
    this.dayCoverProfit = other.dayCoverProfit;
    this.floatProfit = other.floatProfit;
    this.dayFloatProfit = other.dayFloatProfit;
    this.unExpiredProfit = other.unExpiredProfit;
    this.premium = other.premium;
    this.deposit = other.deposit;
    this.keepDeposit = other.keepDeposit;
    this.pledge = other.pledge;
    this.tAvailable = other.tAvailable;
    this.discount = other.discount;
    this.tradeFee = other.tradeFee;
    this.deliveryFee = other.deliveryFee;
    this.exchangeFee = other.exchangeFee;
    this.frozenDeposit = other.frozenDeposit;
    this.frozenFee = other.frozenFee;
    this.newFloatProfit = other.newFloatProfit;
    this.lmeFloatProfit = other.lmeFloatProfit;
    this.optionMarketValue = other.optionMarketValue;
    this.oriCash = other.oriCash;
    this.tMoney = other.tMoney;
    this.tBalance = other.tBalance;
    this.tCanCashOut = other.tCanCashOut;
    this.riskRate = other.riskRate;
    this.accountMarketValue = other.accountMarketValue;
    this.sledAccountId = other.sledAccountId;
    if (other.isSetClientNo()) {
      this.clientNo = other.clientNo;
    }
  }

  public EsMoneyQryRspField deepCopy() {
    return new EsMoneyQryRspField(this);
  }

  @Override
  public void clear() {
    this.currencyNo = null;
    setYAvailableIsSet(false);
    this.yAvailable = 0.0;
    setYCanCashOutIsSet(false);
    this.yCanCashOut = 0.0;
    setYMoneyIsSet(false);
    this.yMoney = 0.0;
    setYBalanceIsSet(false);
    this.yBalance = 0.0;
    setYUnExpiredProfitIsSet(false);
    this.yUnExpiredProfit = 0.0;
    setAdjustIsSet(false);
    this.adjust = 0.0;
    setCashInIsSet(false);
    this.cashIn = 0.0;
    setCashOutIsSet(false);
    this.cashOut = 0.0;
    setFeeIsSet(false);
    this.fee = 0.0;
    setFrozenIsSet(false);
    this.frozen = 0.0;
    setCoverProfitIsSet(false);
    this.coverProfit = 0.0;
    setDayCoverProfitIsSet(false);
    this.dayCoverProfit = 0.0;
    setFloatProfitIsSet(false);
    this.floatProfit = 0.0;
    setDayFloatProfitIsSet(false);
    this.dayFloatProfit = 0.0;
    setUnExpiredProfitIsSet(false);
    this.unExpiredProfit = 0.0;
    setPremiumIsSet(false);
    this.premium = 0.0;
    setDepositIsSet(false);
    this.deposit = 0.0;
    setKeepDepositIsSet(false);
    this.keepDeposit = 0.0;
    setPledgeIsSet(false);
    this.pledge = 0.0;
    setTAvailableIsSet(false);
    this.tAvailable = 0.0;
    setDiscountIsSet(false);
    this.discount = 0.0;
    setTradeFeeIsSet(false);
    this.tradeFee = 0.0;
    setDeliveryFeeIsSet(false);
    this.deliveryFee = 0.0;
    setExchangeFeeIsSet(false);
    this.exchangeFee = 0.0;
    setFrozenDepositIsSet(false);
    this.frozenDeposit = 0.0;
    setFrozenFeeIsSet(false);
    this.frozenFee = 0.0;
    setNewFloatProfitIsSet(false);
    this.newFloatProfit = 0.0;
    setLmeFloatProfitIsSet(false);
    this.lmeFloatProfit = 0.0;
    setOptionMarketValueIsSet(false);
    this.optionMarketValue = 0.0;
    setOriCashIsSet(false);
    this.oriCash = 0.0;
    setTMoneyIsSet(false);
    this.tMoney = 0.0;
    setTBalanceIsSet(false);
    this.tBalance = 0.0;
    setTCanCashOutIsSet(false);
    this.tCanCashOut = 0.0;
    setRiskRateIsSet(false);
    this.riskRate = 0.0;
    setAccountMarketValueIsSet(false);
    this.accountMarketValue = 0.0;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
    this.clientNo = null;
  }

  public String getCurrencyNo() {
    return this.currencyNo;
  }

  public EsMoneyQryRspField setCurrencyNo(String currencyNo) {
    this.currencyNo = currencyNo;
    return this;
  }

  public void unsetCurrencyNo() {
    this.currencyNo = null;
  }

  /** Returns true if field currencyNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyNo() {
    return this.currencyNo != null;
  }

  public void setCurrencyNoIsSet(boolean value) {
    if (!value) {
      this.currencyNo = null;
    }
  }

  public double getYAvailable() {
    return this.yAvailable;
  }

  public EsMoneyQryRspField setYAvailable(double yAvailable) {
    this.yAvailable = yAvailable;
    setYAvailableIsSet(true);
    return this;
  }

  public void unsetYAvailable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YAVAILABLE_ISSET_ID);
  }

  /** Returns true if field yAvailable is set (has been assigned a value) and false otherwise */
  public boolean isSetYAvailable() {
    return EncodingUtils.testBit(__isset_bitfield, __YAVAILABLE_ISSET_ID);
  }

  public void setYAvailableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YAVAILABLE_ISSET_ID, value);
  }

  public double getYCanCashOut() {
    return this.yCanCashOut;
  }

  public EsMoneyQryRspField setYCanCashOut(double yCanCashOut) {
    this.yCanCashOut = yCanCashOut;
    setYCanCashOutIsSet(true);
    return this;
  }

  public void unsetYCanCashOut() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YCANCASHOUT_ISSET_ID);
  }

  /** Returns true if field yCanCashOut is set (has been assigned a value) and false otherwise */
  public boolean isSetYCanCashOut() {
    return EncodingUtils.testBit(__isset_bitfield, __YCANCASHOUT_ISSET_ID);
  }

  public void setYCanCashOutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YCANCASHOUT_ISSET_ID, value);
  }

  public double getYMoney() {
    return this.yMoney;
  }

  public EsMoneyQryRspField setYMoney(double yMoney) {
    this.yMoney = yMoney;
    setYMoneyIsSet(true);
    return this;
  }

  public void unsetYMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YMONEY_ISSET_ID);
  }

  /** Returns true if field yMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetYMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __YMONEY_ISSET_ID);
  }

  public void setYMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YMONEY_ISSET_ID, value);
  }

  public double getYBalance() {
    return this.yBalance;
  }

  public EsMoneyQryRspField setYBalance(double yBalance) {
    this.yBalance = yBalance;
    setYBalanceIsSet(true);
    return this;
  }

  public void unsetYBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YBALANCE_ISSET_ID);
  }

  /** Returns true if field yBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetYBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __YBALANCE_ISSET_ID);
  }

  public void setYBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YBALANCE_ISSET_ID, value);
  }

  public double getYUnExpiredProfit() {
    return this.yUnExpiredProfit;
  }

  public EsMoneyQryRspField setYUnExpiredProfit(double yUnExpiredProfit) {
    this.yUnExpiredProfit = yUnExpiredProfit;
    setYUnExpiredProfitIsSet(true);
    return this;
  }

  public void unsetYUnExpiredProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YUNEXPIREDPROFIT_ISSET_ID);
  }

  /** Returns true if field yUnExpiredProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetYUnExpiredProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __YUNEXPIREDPROFIT_ISSET_ID);
  }

  public void setYUnExpiredProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YUNEXPIREDPROFIT_ISSET_ID, value);
  }

  public double getAdjust() {
    return this.adjust;
  }

  public EsMoneyQryRspField setAdjust(double adjust) {
    this.adjust = adjust;
    setAdjustIsSet(true);
    return this;
  }

  public void unsetAdjust() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADJUST_ISSET_ID);
  }

  /** Returns true if field adjust is set (has been assigned a value) and false otherwise */
  public boolean isSetAdjust() {
    return EncodingUtils.testBit(__isset_bitfield, __ADJUST_ISSET_ID);
  }

  public void setAdjustIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADJUST_ISSET_ID, value);
  }

  public double getCashIn() {
    return this.cashIn;
  }

  public EsMoneyQryRspField setCashIn(double cashIn) {
    this.cashIn = cashIn;
    setCashInIsSet(true);
    return this;
  }

  public void unsetCashIn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHIN_ISSET_ID);
  }

  /** Returns true if field cashIn is set (has been assigned a value) and false otherwise */
  public boolean isSetCashIn() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHIN_ISSET_ID);
  }

  public void setCashInIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHIN_ISSET_ID, value);
  }

  public double getCashOut() {
    return this.cashOut;
  }

  public EsMoneyQryRspField setCashOut(double cashOut) {
    this.cashOut = cashOut;
    setCashOutIsSet(true);
    return this;
  }

  public void unsetCashOut() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHOUT_ISSET_ID);
  }

  /** Returns true if field cashOut is set (has been assigned a value) and false otherwise */
  public boolean isSetCashOut() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHOUT_ISSET_ID);
  }

  public void setCashOutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHOUT_ISSET_ID, value);
  }

  public double getFee() {
    return this.fee;
  }

  public EsMoneyQryRspField setFee(double fee) {
    this.fee = fee;
    setFeeIsSet(true);
    return this;
  }

  public void unsetFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEE_ISSET_ID);
  }

  /** Returns true if field fee is set (has been assigned a value) and false otherwise */
  public boolean isSetFee() {
    return EncodingUtils.testBit(__isset_bitfield, __FEE_ISSET_ID);
  }

  public void setFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEE_ISSET_ID, value);
  }

  public double getFrozen() {
    return this.frozen;
  }

  public EsMoneyQryRspField setFrozen(double frozen) {
    this.frozen = frozen;
    setFrozenIsSet(true);
    return this;
  }

  public void unsetFrozen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZEN_ISSET_ID);
  }

  /** Returns true if field frozen is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozen() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZEN_ISSET_ID);
  }

  public void setFrozenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZEN_ISSET_ID, value);
  }

  public double getCoverProfit() {
    return this.coverProfit;
  }

  public EsMoneyQryRspField setCoverProfit(double coverProfit) {
    this.coverProfit = coverProfit;
    setCoverProfitIsSet(true);
    return this;
  }

  public void unsetCoverProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COVERPROFIT_ISSET_ID);
  }

  /** Returns true if field coverProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetCoverProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __COVERPROFIT_ISSET_ID);
  }

  public void setCoverProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COVERPROFIT_ISSET_ID, value);
  }

  public double getDayCoverProfit() {
    return this.dayCoverProfit;
  }

  public EsMoneyQryRspField setDayCoverProfit(double dayCoverProfit) {
    this.dayCoverProfit = dayCoverProfit;
    setDayCoverProfitIsSet(true);
    return this;
  }

  public void unsetDayCoverProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYCOVERPROFIT_ISSET_ID);
  }

  /** Returns true if field dayCoverProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetDayCoverProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __DAYCOVERPROFIT_ISSET_ID);
  }

  public void setDayCoverProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYCOVERPROFIT_ISSET_ID, value);
  }

  public double getFloatProfit() {
    return this.floatProfit;
  }

  public EsMoneyQryRspField setFloatProfit(double floatProfit) {
    this.floatProfit = floatProfit;
    setFloatProfitIsSet(true);
    return this;
  }

  public void unsetFloatProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLOATPROFIT_ISSET_ID);
  }

  /** Returns true if field floatProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetFloatProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __FLOATPROFIT_ISSET_ID);
  }

  public void setFloatProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLOATPROFIT_ISSET_ID, value);
  }

  public double getDayFloatProfit() {
    return this.dayFloatProfit;
  }

  public EsMoneyQryRspField setDayFloatProfit(double dayFloatProfit) {
    this.dayFloatProfit = dayFloatProfit;
    setDayFloatProfitIsSet(true);
    return this;
  }

  public void unsetDayFloatProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYFLOATPROFIT_ISSET_ID);
  }

  /** Returns true if field dayFloatProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetDayFloatProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __DAYFLOATPROFIT_ISSET_ID);
  }

  public void setDayFloatProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYFLOATPROFIT_ISSET_ID, value);
  }

  public double getUnExpiredProfit() {
    return this.unExpiredProfit;
  }

  public EsMoneyQryRspField setUnExpiredProfit(double unExpiredProfit) {
    this.unExpiredProfit = unExpiredProfit;
    setUnExpiredProfitIsSet(true);
    return this;
  }

  public void unsetUnExpiredProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNEXPIREDPROFIT_ISSET_ID);
  }

  /** Returns true if field unExpiredProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetUnExpiredProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __UNEXPIREDPROFIT_ISSET_ID);
  }

  public void setUnExpiredProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNEXPIREDPROFIT_ISSET_ID, value);
  }

  public double getPremium() {
    return this.premium;
  }

  public EsMoneyQryRspField setPremium(double premium) {
    this.premium = premium;
    setPremiumIsSet(true);
    return this;
  }

  public void unsetPremium() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREMIUM_ISSET_ID);
  }

  /** Returns true if field premium is set (has been assigned a value) and false otherwise */
  public boolean isSetPremium() {
    return EncodingUtils.testBit(__isset_bitfield, __PREMIUM_ISSET_ID);
  }

  public void setPremiumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREMIUM_ISSET_ID, value);
  }

  public double getDeposit() {
    return this.deposit;
  }

  public EsMoneyQryRspField setDeposit(double deposit) {
    this.deposit = deposit;
    setDepositIsSet(true);
    return this;
  }

  public void unsetDeposit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPOSIT_ISSET_ID);
  }

  /** Returns true if field deposit is set (has been assigned a value) and false otherwise */
  public boolean isSetDeposit() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPOSIT_ISSET_ID);
  }

  public void setDepositIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPOSIT_ISSET_ID, value);
  }

  public double getKeepDeposit() {
    return this.keepDeposit;
  }

  public EsMoneyQryRspField setKeepDeposit(double keepDeposit) {
    this.keepDeposit = keepDeposit;
    setKeepDepositIsSet(true);
    return this;
  }

  public void unsetKeepDeposit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEEPDEPOSIT_ISSET_ID);
  }

  /** Returns true if field keepDeposit is set (has been assigned a value) and false otherwise */
  public boolean isSetKeepDeposit() {
    return EncodingUtils.testBit(__isset_bitfield, __KEEPDEPOSIT_ISSET_ID);
  }

  public void setKeepDepositIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEEPDEPOSIT_ISSET_ID, value);
  }

  public double getPledge() {
    return this.pledge;
  }

  public EsMoneyQryRspField setPledge(double pledge) {
    this.pledge = pledge;
    setPledgeIsSet(true);
    return this;
  }

  public void unsetPledge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLEDGE_ISSET_ID);
  }

  /** Returns true if field pledge is set (has been assigned a value) and false otherwise */
  public boolean isSetPledge() {
    return EncodingUtils.testBit(__isset_bitfield, __PLEDGE_ISSET_ID);
  }

  public void setPledgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLEDGE_ISSET_ID, value);
  }

  public double getTAvailable() {
    return this.tAvailable;
  }

  public EsMoneyQryRspField setTAvailable(double tAvailable) {
    this.tAvailable = tAvailable;
    setTAvailableIsSet(true);
    return this;
  }

  public void unsetTAvailable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAVAILABLE_ISSET_ID);
  }

  /** Returns true if field tAvailable is set (has been assigned a value) and false otherwise */
  public boolean isSetTAvailable() {
    return EncodingUtils.testBit(__isset_bitfield, __TAVAILABLE_ISSET_ID);
  }

  public void setTAvailableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAVAILABLE_ISSET_ID, value);
  }

  public double getDiscount() {
    return this.discount;
  }

  public EsMoneyQryRspField setDiscount(double discount) {
    this.discount = discount;
    setDiscountIsSet(true);
    return this;
  }

  public void unsetDiscount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  /** Returns true if field discount is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscount() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  public void setDiscountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCOUNT_ISSET_ID, value);
  }

  public double getTradeFee() {
    return this.tradeFee;
  }

  public EsMoneyQryRspField setTradeFee(double tradeFee) {
    this.tradeFee = tradeFee;
    setTradeFeeIsSet(true);
    return this;
  }

  public void unsetTradeFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEFEE_ISSET_ID);
  }

  /** Returns true if field tradeFee is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeFee() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEFEE_ISSET_ID);
  }

  public void setTradeFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEFEE_ISSET_ID, value);
  }

  public double getDeliveryFee() {
    return this.deliveryFee;
  }

  public EsMoneyQryRspField setDeliveryFee(double deliveryFee) {
    this.deliveryFee = deliveryFee;
    setDeliveryFeeIsSet(true);
    return this;
  }

  public void unsetDeliveryFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYFEE_ISSET_ID);
  }

  /** Returns true if field deliveryFee is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryFee() {
    return EncodingUtils.testBit(__isset_bitfield, __DELIVERYFEE_ISSET_ID);
  }

  public void setDeliveryFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYFEE_ISSET_ID, value);
  }

  public double getExchangeFee() {
    return this.exchangeFee;
  }

  public EsMoneyQryRspField setExchangeFee(double exchangeFee) {
    this.exchangeFee = exchangeFee;
    setExchangeFeeIsSet(true);
    return this;
  }

  public void unsetExchangeFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHANGEFEE_ISSET_ID);
  }

  /** Returns true if field exchangeFee is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeFee() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHANGEFEE_ISSET_ID);
  }

  public void setExchangeFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHANGEFEE_ISSET_ID, value);
  }

  public double getFrozenDeposit() {
    return this.frozenDeposit;
  }

  public EsMoneyQryRspField setFrozenDeposit(double frozenDeposit) {
    this.frozenDeposit = frozenDeposit;
    setFrozenDepositIsSet(true);
    return this;
  }

  public void unsetFrozenDeposit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENDEPOSIT_ISSET_ID);
  }

  /** Returns true if field frozenDeposit is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenDeposit() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENDEPOSIT_ISSET_ID);
  }

  public void setFrozenDepositIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENDEPOSIT_ISSET_ID, value);
  }

  public double getFrozenFee() {
    return this.frozenFee;
  }

  public EsMoneyQryRspField setFrozenFee(double frozenFee) {
    this.frozenFee = frozenFee;
    setFrozenFeeIsSet(true);
    return this;
  }

  public void unsetFrozenFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENFEE_ISSET_ID);
  }

  /** Returns true if field frozenFee is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenFee() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENFEE_ISSET_ID);
  }

  public void setFrozenFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENFEE_ISSET_ID, value);
  }

  public double getNewFloatProfit() {
    return this.newFloatProfit;
  }

  public EsMoneyQryRspField setNewFloatProfit(double newFloatProfit) {
    this.newFloatProfit = newFloatProfit;
    setNewFloatProfitIsSet(true);
    return this;
  }

  public void unsetNewFloatProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWFLOATPROFIT_ISSET_ID);
  }

  /** Returns true if field newFloatProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetNewFloatProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWFLOATPROFIT_ISSET_ID);
  }

  public void setNewFloatProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWFLOATPROFIT_ISSET_ID, value);
  }

  public double getLmeFloatProfit() {
    return this.lmeFloatProfit;
  }

  public EsMoneyQryRspField setLmeFloatProfit(double lmeFloatProfit) {
    this.lmeFloatProfit = lmeFloatProfit;
    setLmeFloatProfitIsSet(true);
    return this;
  }

  public void unsetLmeFloatProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LMEFLOATPROFIT_ISSET_ID);
  }

  /** Returns true if field lmeFloatProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetLmeFloatProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __LMEFLOATPROFIT_ISSET_ID);
  }

  public void setLmeFloatProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LMEFLOATPROFIT_ISSET_ID, value);
  }

  public double getOptionMarketValue() {
    return this.optionMarketValue;
  }

  public EsMoneyQryRspField setOptionMarketValue(double optionMarketValue) {
    this.optionMarketValue = optionMarketValue;
    setOptionMarketValueIsSet(true);
    return this;
  }

  public void unsetOptionMarketValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPTIONMARKETVALUE_ISSET_ID);
  }

  /** Returns true if field optionMarketValue is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionMarketValue() {
    return EncodingUtils.testBit(__isset_bitfield, __OPTIONMARKETVALUE_ISSET_ID);
  }

  public void setOptionMarketValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPTIONMARKETVALUE_ISSET_ID, value);
  }

  public double getOriCash() {
    return this.oriCash;
  }

  public EsMoneyQryRspField setOriCash(double oriCash) {
    this.oriCash = oriCash;
    setOriCashIsSet(true);
    return this;
  }

  public void unsetOriCash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORICASH_ISSET_ID);
  }

  /** Returns true if field oriCash is set (has been assigned a value) and false otherwise */
  public boolean isSetOriCash() {
    return EncodingUtils.testBit(__isset_bitfield, __ORICASH_ISSET_ID);
  }

  public void setOriCashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORICASH_ISSET_ID, value);
  }

  public double getTMoney() {
    return this.tMoney;
  }

  public EsMoneyQryRspField setTMoney(double tMoney) {
    this.tMoney = tMoney;
    setTMoneyIsSet(true);
    return this;
  }

  public void unsetTMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TMONEY_ISSET_ID);
  }

  /** Returns true if field tMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TMONEY_ISSET_ID);
  }

  public void setTMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TMONEY_ISSET_ID, value);
  }

  public double getTBalance() {
    return this.tBalance;
  }

  public EsMoneyQryRspField setTBalance(double tBalance) {
    this.tBalance = tBalance;
    setTBalanceIsSet(true);
    return this;
  }

  public void unsetTBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TBALANCE_ISSET_ID);
  }

  /** Returns true if field tBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetTBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __TBALANCE_ISSET_ID);
  }

  public void setTBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TBALANCE_ISSET_ID, value);
  }

  public double getTCanCashOut() {
    return this.tCanCashOut;
  }

  public EsMoneyQryRspField setTCanCashOut(double tCanCashOut) {
    this.tCanCashOut = tCanCashOut;
    setTCanCashOutIsSet(true);
    return this;
  }

  public void unsetTCanCashOut() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TCANCASHOUT_ISSET_ID);
  }

  /** Returns true if field tCanCashOut is set (has been assigned a value) and false otherwise */
  public boolean isSetTCanCashOut() {
    return EncodingUtils.testBit(__isset_bitfield, __TCANCASHOUT_ISSET_ID);
  }

  public void setTCanCashOutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TCANCASHOUT_ISSET_ID, value);
  }

  public double getRiskRate() {
    return this.riskRate;
  }

  public EsMoneyQryRspField setRiskRate(double riskRate) {
    this.riskRate = riskRate;
    setRiskRateIsSet(true);
    return this;
  }

  public void unsetRiskRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RISKRATE_ISSET_ID);
  }

  /** Returns true if field riskRate is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskRate() {
    return EncodingUtils.testBit(__isset_bitfield, __RISKRATE_ISSET_ID);
  }

  public void setRiskRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RISKRATE_ISSET_ID, value);
  }

  public double getAccountMarketValue() {
    return this.accountMarketValue;
  }

  public EsMoneyQryRspField setAccountMarketValue(double accountMarketValue) {
    this.accountMarketValue = accountMarketValue;
    setAccountMarketValueIsSet(true);
    return this;
  }

  public void unsetAccountMarketValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTMARKETVALUE_ISSET_ID);
  }

  /** Returns true if field accountMarketValue is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountMarketValue() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTMARKETVALUE_ISSET_ID);
  }

  public void setAccountMarketValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTMARKETVALUE_ISSET_ID, value);
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public EsMoneyQryRspField setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public String getClientNo() {
    return this.clientNo;
  }

  public EsMoneyQryRspField setClientNo(String clientNo) {
    this.clientNo = clientNo;
    return this;
  }

  public void unsetClientNo() {
    this.clientNo = null;
  }

  /** Returns true if field clientNo is set (has been assigned a value) and false otherwise */
  public boolean isSetClientNo() {
    return this.clientNo != null;
  }

  public void setClientNoIsSet(boolean value) {
    if (!value) {
      this.clientNo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CURRENCY_NO:
      if (value == null) {
        unsetCurrencyNo();
      } else {
        setCurrencyNo((String)value);
      }
      break;

    case Y_AVAILABLE:
      if (value == null) {
        unsetYAvailable();
      } else {
        setYAvailable((Double)value);
      }
      break;

    case Y_CAN_CASH_OUT:
      if (value == null) {
        unsetYCanCashOut();
      } else {
        setYCanCashOut((Double)value);
      }
      break;

    case Y_MONEY:
      if (value == null) {
        unsetYMoney();
      } else {
        setYMoney((Double)value);
      }
      break;

    case Y_BALANCE:
      if (value == null) {
        unsetYBalance();
      } else {
        setYBalance((Double)value);
      }
      break;

    case Y_UN_EXPIRED_PROFIT:
      if (value == null) {
        unsetYUnExpiredProfit();
      } else {
        setYUnExpiredProfit((Double)value);
      }
      break;

    case ADJUST:
      if (value == null) {
        unsetAdjust();
      } else {
        setAdjust((Double)value);
      }
      break;

    case CASH_IN:
      if (value == null) {
        unsetCashIn();
      } else {
        setCashIn((Double)value);
      }
      break;

    case CASH_OUT:
      if (value == null) {
        unsetCashOut();
      } else {
        setCashOut((Double)value);
      }
      break;

    case FEE:
      if (value == null) {
        unsetFee();
      } else {
        setFee((Double)value);
      }
      break;

    case FROZEN:
      if (value == null) {
        unsetFrozen();
      } else {
        setFrozen((Double)value);
      }
      break;

    case COVER_PROFIT:
      if (value == null) {
        unsetCoverProfit();
      } else {
        setCoverProfit((Double)value);
      }
      break;

    case DAY_COVER_PROFIT:
      if (value == null) {
        unsetDayCoverProfit();
      } else {
        setDayCoverProfit((Double)value);
      }
      break;

    case FLOAT_PROFIT:
      if (value == null) {
        unsetFloatProfit();
      } else {
        setFloatProfit((Double)value);
      }
      break;

    case DAY_FLOAT_PROFIT:
      if (value == null) {
        unsetDayFloatProfit();
      } else {
        setDayFloatProfit((Double)value);
      }
      break;

    case UN_EXPIRED_PROFIT:
      if (value == null) {
        unsetUnExpiredProfit();
      } else {
        setUnExpiredProfit((Double)value);
      }
      break;

    case PREMIUM:
      if (value == null) {
        unsetPremium();
      } else {
        setPremium((Double)value);
      }
      break;

    case DEPOSIT:
      if (value == null) {
        unsetDeposit();
      } else {
        setDeposit((Double)value);
      }
      break;

    case KEEP_DEPOSIT:
      if (value == null) {
        unsetKeepDeposit();
      } else {
        setKeepDeposit((Double)value);
      }
      break;

    case PLEDGE:
      if (value == null) {
        unsetPledge();
      } else {
        setPledge((Double)value);
      }
      break;

    case T_AVAILABLE:
      if (value == null) {
        unsetTAvailable();
      } else {
        setTAvailable((Double)value);
      }
      break;

    case DISCOUNT:
      if (value == null) {
        unsetDiscount();
      } else {
        setDiscount((Double)value);
      }
      break;

    case TRADE_FEE:
      if (value == null) {
        unsetTradeFee();
      } else {
        setTradeFee((Double)value);
      }
      break;

    case DELIVERY_FEE:
      if (value == null) {
        unsetDeliveryFee();
      } else {
        setDeliveryFee((Double)value);
      }
      break;

    case EXCHANGE_FEE:
      if (value == null) {
        unsetExchangeFee();
      } else {
        setExchangeFee((Double)value);
      }
      break;

    case FROZEN_DEPOSIT:
      if (value == null) {
        unsetFrozenDeposit();
      } else {
        setFrozenDeposit((Double)value);
      }
      break;

    case FROZEN_FEE:
      if (value == null) {
        unsetFrozenFee();
      } else {
        setFrozenFee((Double)value);
      }
      break;

    case NEW_FLOAT_PROFIT:
      if (value == null) {
        unsetNewFloatProfit();
      } else {
        setNewFloatProfit((Double)value);
      }
      break;

    case LME_FLOAT_PROFIT:
      if (value == null) {
        unsetLmeFloatProfit();
      } else {
        setLmeFloatProfit((Double)value);
      }
      break;

    case OPTION_MARKET_VALUE:
      if (value == null) {
        unsetOptionMarketValue();
      } else {
        setOptionMarketValue((Double)value);
      }
      break;

    case ORI_CASH:
      if (value == null) {
        unsetOriCash();
      } else {
        setOriCash((Double)value);
      }
      break;

    case T_MONEY:
      if (value == null) {
        unsetTMoney();
      } else {
        setTMoney((Double)value);
      }
      break;

    case T_BALANCE:
      if (value == null) {
        unsetTBalance();
      } else {
        setTBalance((Double)value);
      }
      break;

    case T_CAN_CASH_OUT:
      if (value == null) {
        unsetTCanCashOut();
      } else {
        setTCanCashOut((Double)value);
      }
      break;

    case RISK_RATE:
      if (value == null) {
        unsetRiskRate();
      } else {
        setRiskRate((Double)value);
      }
      break;

    case ACCOUNT_MARKET_VALUE:
      if (value == null) {
        unsetAccountMarketValue();
      } else {
        setAccountMarketValue((Double)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    case CLIENT_NO:
      if (value == null) {
        unsetClientNo();
      } else {
        setClientNo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CURRENCY_NO:
      return getCurrencyNo();

    case Y_AVAILABLE:
      return Double.valueOf(getYAvailable());

    case Y_CAN_CASH_OUT:
      return Double.valueOf(getYCanCashOut());

    case Y_MONEY:
      return Double.valueOf(getYMoney());

    case Y_BALANCE:
      return Double.valueOf(getYBalance());

    case Y_UN_EXPIRED_PROFIT:
      return Double.valueOf(getYUnExpiredProfit());

    case ADJUST:
      return Double.valueOf(getAdjust());

    case CASH_IN:
      return Double.valueOf(getCashIn());

    case CASH_OUT:
      return Double.valueOf(getCashOut());

    case FEE:
      return Double.valueOf(getFee());

    case FROZEN:
      return Double.valueOf(getFrozen());

    case COVER_PROFIT:
      return Double.valueOf(getCoverProfit());

    case DAY_COVER_PROFIT:
      return Double.valueOf(getDayCoverProfit());

    case FLOAT_PROFIT:
      return Double.valueOf(getFloatProfit());

    case DAY_FLOAT_PROFIT:
      return Double.valueOf(getDayFloatProfit());

    case UN_EXPIRED_PROFIT:
      return Double.valueOf(getUnExpiredProfit());

    case PREMIUM:
      return Double.valueOf(getPremium());

    case DEPOSIT:
      return Double.valueOf(getDeposit());

    case KEEP_DEPOSIT:
      return Double.valueOf(getKeepDeposit());

    case PLEDGE:
      return Double.valueOf(getPledge());

    case T_AVAILABLE:
      return Double.valueOf(getTAvailable());

    case DISCOUNT:
      return Double.valueOf(getDiscount());

    case TRADE_FEE:
      return Double.valueOf(getTradeFee());

    case DELIVERY_FEE:
      return Double.valueOf(getDeliveryFee());

    case EXCHANGE_FEE:
      return Double.valueOf(getExchangeFee());

    case FROZEN_DEPOSIT:
      return Double.valueOf(getFrozenDeposit());

    case FROZEN_FEE:
      return Double.valueOf(getFrozenFee());

    case NEW_FLOAT_PROFIT:
      return Double.valueOf(getNewFloatProfit());

    case LME_FLOAT_PROFIT:
      return Double.valueOf(getLmeFloatProfit());

    case OPTION_MARKET_VALUE:
      return Double.valueOf(getOptionMarketValue());

    case ORI_CASH:
      return Double.valueOf(getOriCash());

    case T_MONEY:
      return Double.valueOf(getTMoney());

    case T_BALANCE:
      return Double.valueOf(getTBalance());

    case T_CAN_CASH_OUT:
      return Double.valueOf(getTCanCashOut());

    case RISK_RATE:
      return Double.valueOf(getRiskRate());

    case ACCOUNT_MARKET_VALUE:
      return Double.valueOf(getAccountMarketValue());

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    case CLIENT_NO:
      return getClientNo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CURRENCY_NO:
      return isSetCurrencyNo();
    case Y_AVAILABLE:
      return isSetYAvailable();
    case Y_CAN_CASH_OUT:
      return isSetYCanCashOut();
    case Y_MONEY:
      return isSetYMoney();
    case Y_BALANCE:
      return isSetYBalance();
    case Y_UN_EXPIRED_PROFIT:
      return isSetYUnExpiredProfit();
    case ADJUST:
      return isSetAdjust();
    case CASH_IN:
      return isSetCashIn();
    case CASH_OUT:
      return isSetCashOut();
    case FEE:
      return isSetFee();
    case FROZEN:
      return isSetFrozen();
    case COVER_PROFIT:
      return isSetCoverProfit();
    case DAY_COVER_PROFIT:
      return isSetDayCoverProfit();
    case FLOAT_PROFIT:
      return isSetFloatProfit();
    case DAY_FLOAT_PROFIT:
      return isSetDayFloatProfit();
    case UN_EXPIRED_PROFIT:
      return isSetUnExpiredProfit();
    case PREMIUM:
      return isSetPremium();
    case DEPOSIT:
      return isSetDeposit();
    case KEEP_DEPOSIT:
      return isSetKeepDeposit();
    case PLEDGE:
      return isSetPledge();
    case T_AVAILABLE:
      return isSetTAvailable();
    case DISCOUNT:
      return isSetDiscount();
    case TRADE_FEE:
      return isSetTradeFee();
    case DELIVERY_FEE:
      return isSetDeliveryFee();
    case EXCHANGE_FEE:
      return isSetExchangeFee();
    case FROZEN_DEPOSIT:
      return isSetFrozenDeposit();
    case FROZEN_FEE:
      return isSetFrozenFee();
    case NEW_FLOAT_PROFIT:
      return isSetNewFloatProfit();
    case LME_FLOAT_PROFIT:
      return isSetLmeFloatProfit();
    case OPTION_MARKET_VALUE:
      return isSetOptionMarketValue();
    case ORI_CASH:
      return isSetOriCash();
    case T_MONEY:
      return isSetTMoney();
    case T_BALANCE:
      return isSetTBalance();
    case T_CAN_CASH_OUT:
      return isSetTCanCashOut();
    case RISK_RATE:
      return isSetRiskRate();
    case ACCOUNT_MARKET_VALUE:
      return isSetAccountMarketValue();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    case CLIENT_NO:
      return isSetClientNo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EsMoneyQryRspField)
      return this.equals((EsMoneyQryRspField)that);
    return false;
  }

  public boolean equals(EsMoneyQryRspField that) {
    if (that == null)
      return false;

    boolean this_present_currencyNo = true && this.isSetCurrencyNo();
    boolean that_present_currencyNo = true && that.isSetCurrencyNo();
    if (this_present_currencyNo || that_present_currencyNo) {
      if (!(this_present_currencyNo && that_present_currencyNo))
        return false;
      if (!this.currencyNo.equals(that.currencyNo))
        return false;
    }

    boolean this_present_yAvailable = true && this.isSetYAvailable();
    boolean that_present_yAvailable = true && that.isSetYAvailable();
    if (this_present_yAvailable || that_present_yAvailable) {
      if (!(this_present_yAvailable && that_present_yAvailable))
        return false;
      if (this.yAvailable != that.yAvailable)
        return false;
    }

    boolean this_present_yCanCashOut = true && this.isSetYCanCashOut();
    boolean that_present_yCanCashOut = true && that.isSetYCanCashOut();
    if (this_present_yCanCashOut || that_present_yCanCashOut) {
      if (!(this_present_yCanCashOut && that_present_yCanCashOut))
        return false;
      if (this.yCanCashOut != that.yCanCashOut)
        return false;
    }

    boolean this_present_yMoney = true && this.isSetYMoney();
    boolean that_present_yMoney = true && that.isSetYMoney();
    if (this_present_yMoney || that_present_yMoney) {
      if (!(this_present_yMoney && that_present_yMoney))
        return false;
      if (this.yMoney != that.yMoney)
        return false;
    }

    boolean this_present_yBalance = true && this.isSetYBalance();
    boolean that_present_yBalance = true && that.isSetYBalance();
    if (this_present_yBalance || that_present_yBalance) {
      if (!(this_present_yBalance && that_present_yBalance))
        return false;
      if (this.yBalance != that.yBalance)
        return false;
    }

    boolean this_present_yUnExpiredProfit = true && this.isSetYUnExpiredProfit();
    boolean that_present_yUnExpiredProfit = true && that.isSetYUnExpiredProfit();
    if (this_present_yUnExpiredProfit || that_present_yUnExpiredProfit) {
      if (!(this_present_yUnExpiredProfit && that_present_yUnExpiredProfit))
        return false;
      if (this.yUnExpiredProfit != that.yUnExpiredProfit)
        return false;
    }

    boolean this_present_adjust = true && this.isSetAdjust();
    boolean that_present_adjust = true && that.isSetAdjust();
    if (this_present_adjust || that_present_adjust) {
      if (!(this_present_adjust && that_present_adjust))
        return false;
      if (this.adjust != that.adjust)
        return false;
    }

    boolean this_present_cashIn = true && this.isSetCashIn();
    boolean that_present_cashIn = true && that.isSetCashIn();
    if (this_present_cashIn || that_present_cashIn) {
      if (!(this_present_cashIn && that_present_cashIn))
        return false;
      if (this.cashIn != that.cashIn)
        return false;
    }

    boolean this_present_cashOut = true && this.isSetCashOut();
    boolean that_present_cashOut = true && that.isSetCashOut();
    if (this_present_cashOut || that_present_cashOut) {
      if (!(this_present_cashOut && that_present_cashOut))
        return false;
      if (this.cashOut != that.cashOut)
        return false;
    }

    boolean this_present_fee = true && this.isSetFee();
    boolean that_present_fee = true && that.isSetFee();
    if (this_present_fee || that_present_fee) {
      if (!(this_present_fee && that_present_fee))
        return false;
      if (this.fee != that.fee)
        return false;
    }

    boolean this_present_frozen = true && this.isSetFrozen();
    boolean that_present_frozen = true && that.isSetFrozen();
    if (this_present_frozen || that_present_frozen) {
      if (!(this_present_frozen && that_present_frozen))
        return false;
      if (this.frozen != that.frozen)
        return false;
    }

    boolean this_present_coverProfit = true && this.isSetCoverProfit();
    boolean that_present_coverProfit = true && that.isSetCoverProfit();
    if (this_present_coverProfit || that_present_coverProfit) {
      if (!(this_present_coverProfit && that_present_coverProfit))
        return false;
      if (this.coverProfit != that.coverProfit)
        return false;
    }

    boolean this_present_dayCoverProfit = true && this.isSetDayCoverProfit();
    boolean that_present_dayCoverProfit = true && that.isSetDayCoverProfit();
    if (this_present_dayCoverProfit || that_present_dayCoverProfit) {
      if (!(this_present_dayCoverProfit && that_present_dayCoverProfit))
        return false;
      if (this.dayCoverProfit != that.dayCoverProfit)
        return false;
    }

    boolean this_present_floatProfit = true && this.isSetFloatProfit();
    boolean that_present_floatProfit = true && that.isSetFloatProfit();
    if (this_present_floatProfit || that_present_floatProfit) {
      if (!(this_present_floatProfit && that_present_floatProfit))
        return false;
      if (this.floatProfit != that.floatProfit)
        return false;
    }

    boolean this_present_dayFloatProfit = true && this.isSetDayFloatProfit();
    boolean that_present_dayFloatProfit = true && that.isSetDayFloatProfit();
    if (this_present_dayFloatProfit || that_present_dayFloatProfit) {
      if (!(this_present_dayFloatProfit && that_present_dayFloatProfit))
        return false;
      if (this.dayFloatProfit != that.dayFloatProfit)
        return false;
    }

    boolean this_present_unExpiredProfit = true && this.isSetUnExpiredProfit();
    boolean that_present_unExpiredProfit = true && that.isSetUnExpiredProfit();
    if (this_present_unExpiredProfit || that_present_unExpiredProfit) {
      if (!(this_present_unExpiredProfit && that_present_unExpiredProfit))
        return false;
      if (this.unExpiredProfit != that.unExpiredProfit)
        return false;
    }

    boolean this_present_premium = true && this.isSetPremium();
    boolean that_present_premium = true && that.isSetPremium();
    if (this_present_premium || that_present_premium) {
      if (!(this_present_premium && that_present_premium))
        return false;
      if (this.premium != that.premium)
        return false;
    }

    boolean this_present_deposit = true && this.isSetDeposit();
    boolean that_present_deposit = true && that.isSetDeposit();
    if (this_present_deposit || that_present_deposit) {
      if (!(this_present_deposit && that_present_deposit))
        return false;
      if (this.deposit != that.deposit)
        return false;
    }

    boolean this_present_keepDeposit = true && this.isSetKeepDeposit();
    boolean that_present_keepDeposit = true && that.isSetKeepDeposit();
    if (this_present_keepDeposit || that_present_keepDeposit) {
      if (!(this_present_keepDeposit && that_present_keepDeposit))
        return false;
      if (this.keepDeposit != that.keepDeposit)
        return false;
    }

    boolean this_present_pledge = true && this.isSetPledge();
    boolean that_present_pledge = true && that.isSetPledge();
    if (this_present_pledge || that_present_pledge) {
      if (!(this_present_pledge && that_present_pledge))
        return false;
      if (this.pledge != that.pledge)
        return false;
    }

    boolean this_present_tAvailable = true && this.isSetTAvailable();
    boolean that_present_tAvailable = true && that.isSetTAvailable();
    if (this_present_tAvailable || that_present_tAvailable) {
      if (!(this_present_tAvailable && that_present_tAvailable))
        return false;
      if (this.tAvailable != that.tAvailable)
        return false;
    }

    boolean this_present_discount = true && this.isSetDiscount();
    boolean that_present_discount = true && that.isSetDiscount();
    if (this_present_discount || that_present_discount) {
      if (!(this_present_discount && that_present_discount))
        return false;
      if (this.discount != that.discount)
        return false;
    }

    boolean this_present_tradeFee = true && this.isSetTradeFee();
    boolean that_present_tradeFee = true && that.isSetTradeFee();
    if (this_present_tradeFee || that_present_tradeFee) {
      if (!(this_present_tradeFee && that_present_tradeFee))
        return false;
      if (this.tradeFee != that.tradeFee)
        return false;
    }

    boolean this_present_deliveryFee = true && this.isSetDeliveryFee();
    boolean that_present_deliveryFee = true && that.isSetDeliveryFee();
    if (this_present_deliveryFee || that_present_deliveryFee) {
      if (!(this_present_deliveryFee && that_present_deliveryFee))
        return false;
      if (this.deliveryFee != that.deliveryFee)
        return false;
    }

    boolean this_present_exchangeFee = true && this.isSetExchangeFee();
    boolean that_present_exchangeFee = true && that.isSetExchangeFee();
    if (this_present_exchangeFee || that_present_exchangeFee) {
      if (!(this_present_exchangeFee && that_present_exchangeFee))
        return false;
      if (this.exchangeFee != that.exchangeFee)
        return false;
    }

    boolean this_present_frozenDeposit = true && this.isSetFrozenDeposit();
    boolean that_present_frozenDeposit = true && that.isSetFrozenDeposit();
    if (this_present_frozenDeposit || that_present_frozenDeposit) {
      if (!(this_present_frozenDeposit && that_present_frozenDeposit))
        return false;
      if (this.frozenDeposit != that.frozenDeposit)
        return false;
    }

    boolean this_present_frozenFee = true && this.isSetFrozenFee();
    boolean that_present_frozenFee = true && that.isSetFrozenFee();
    if (this_present_frozenFee || that_present_frozenFee) {
      if (!(this_present_frozenFee && that_present_frozenFee))
        return false;
      if (this.frozenFee != that.frozenFee)
        return false;
    }

    boolean this_present_newFloatProfit = true && this.isSetNewFloatProfit();
    boolean that_present_newFloatProfit = true && that.isSetNewFloatProfit();
    if (this_present_newFloatProfit || that_present_newFloatProfit) {
      if (!(this_present_newFloatProfit && that_present_newFloatProfit))
        return false;
      if (this.newFloatProfit != that.newFloatProfit)
        return false;
    }

    boolean this_present_lmeFloatProfit = true && this.isSetLmeFloatProfit();
    boolean that_present_lmeFloatProfit = true && that.isSetLmeFloatProfit();
    if (this_present_lmeFloatProfit || that_present_lmeFloatProfit) {
      if (!(this_present_lmeFloatProfit && that_present_lmeFloatProfit))
        return false;
      if (this.lmeFloatProfit != that.lmeFloatProfit)
        return false;
    }

    boolean this_present_optionMarketValue = true && this.isSetOptionMarketValue();
    boolean that_present_optionMarketValue = true && that.isSetOptionMarketValue();
    if (this_present_optionMarketValue || that_present_optionMarketValue) {
      if (!(this_present_optionMarketValue && that_present_optionMarketValue))
        return false;
      if (this.optionMarketValue != that.optionMarketValue)
        return false;
    }

    boolean this_present_oriCash = true && this.isSetOriCash();
    boolean that_present_oriCash = true && that.isSetOriCash();
    if (this_present_oriCash || that_present_oriCash) {
      if (!(this_present_oriCash && that_present_oriCash))
        return false;
      if (this.oriCash != that.oriCash)
        return false;
    }

    boolean this_present_tMoney = true && this.isSetTMoney();
    boolean that_present_tMoney = true && that.isSetTMoney();
    if (this_present_tMoney || that_present_tMoney) {
      if (!(this_present_tMoney && that_present_tMoney))
        return false;
      if (this.tMoney != that.tMoney)
        return false;
    }

    boolean this_present_tBalance = true && this.isSetTBalance();
    boolean that_present_tBalance = true && that.isSetTBalance();
    if (this_present_tBalance || that_present_tBalance) {
      if (!(this_present_tBalance && that_present_tBalance))
        return false;
      if (this.tBalance != that.tBalance)
        return false;
    }

    boolean this_present_tCanCashOut = true && this.isSetTCanCashOut();
    boolean that_present_tCanCashOut = true && that.isSetTCanCashOut();
    if (this_present_tCanCashOut || that_present_tCanCashOut) {
      if (!(this_present_tCanCashOut && that_present_tCanCashOut))
        return false;
      if (this.tCanCashOut != that.tCanCashOut)
        return false;
    }

    boolean this_present_riskRate = true && this.isSetRiskRate();
    boolean that_present_riskRate = true && that.isSetRiskRate();
    if (this_present_riskRate || that_present_riskRate) {
      if (!(this_present_riskRate && that_present_riskRate))
        return false;
      if (this.riskRate != that.riskRate)
        return false;
    }

    boolean this_present_accountMarketValue = true && this.isSetAccountMarketValue();
    boolean that_present_accountMarketValue = true && that.isSetAccountMarketValue();
    if (this_present_accountMarketValue || that_present_accountMarketValue) {
      if (!(this_present_accountMarketValue && that_present_accountMarketValue))
        return false;
      if (this.accountMarketValue != that.accountMarketValue)
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    boolean this_present_clientNo = true && this.isSetClientNo();
    boolean that_present_clientNo = true && that.isSetClientNo();
    if (this_present_clientNo || that_present_clientNo) {
      if (!(this_present_clientNo && that_present_clientNo))
        return false;
      if (!this.clientNo.equals(that.clientNo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EsMoneyQryRspField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCurrencyNo()).compareTo(other.isSetCurrencyNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyNo, other.currencyNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYAvailable()).compareTo(other.isSetYAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yAvailable, other.yAvailable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYCanCashOut()).compareTo(other.isSetYCanCashOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYCanCashOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yCanCashOut, other.yCanCashOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYMoney()).compareTo(other.isSetYMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yMoney, other.yMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYBalance()).compareTo(other.isSetYBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yBalance, other.yBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYUnExpiredProfit()).compareTo(other.isSetYUnExpiredProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYUnExpiredProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yUnExpiredProfit, other.yUnExpiredProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdjust()).compareTo(other.isSetAdjust());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdjust()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adjust, other.adjust);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashIn()).compareTo(other.isSetCashIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashIn, other.cashIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashOut()).compareTo(other.isSetCashOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashOut, other.cashOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFee()).compareTo(other.isSetFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fee, other.fee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozen()).compareTo(other.isSetFrozen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozen, other.frozen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoverProfit()).compareTo(other.isSetCoverProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoverProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coverProfit, other.coverProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayCoverProfit()).compareTo(other.isSetDayCoverProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayCoverProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayCoverProfit, other.dayCoverProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFloatProfit()).compareTo(other.isSetFloatProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloatProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.floatProfit, other.floatProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayFloatProfit()).compareTo(other.isSetDayFloatProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayFloatProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayFloatProfit, other.dayFloatProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnExpiredProfit()).compareTo(other.isSetUnExpiredProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnExpiredProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unExpiredProfit, other.unExpiredProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPremium()).compareTo(other.isSetPremium());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPremium()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.premium, other.premium);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeposit()).compareTo(other.isSetDeposit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeposit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deposit, other.deposit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeepDeposit()).compareTo(other.isSetKeepDeposit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeepDeposit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keepDeposit, other.keepDeposit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPledge()).compareTo(other.isSetPledge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPledge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pledge, other.pledge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTAvailable()).compareTo(other.isSetTAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tAvailable, other.tAvailable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscount()).compareTo(other.isSetDiscount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discount, other.discount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeFee()).compareTo(other.isSetTradeFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeFee, other.tradeFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryFee()).compareTo(other.isSetDeliveryFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryFee, other.deliveryFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeFee()).compareTo(other.isSetExchangeFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeFee, other.exchangeFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenDeposit()).compareTo(other.isSetFrozenDeposit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenDeposit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenDeposit, other.frozenDeposit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenFee()).compareTo(other.isSetFrozenFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenFee, other.frozenFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewFloatProfit()).compareTo(other.isSetNewFloatProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewFloatProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newFloatProfit, other.newFloatProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLmeFloatProfit()).compareTo(other.isSetLmeFloatProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLmeFloatProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lmeFloatProfit, other.lmeFloatProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptionMarketValue()).compareTo(other.isSetOptionMarketValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionMarketValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionMarketValue, other.optionMarketValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriCash()).compareTo(other.isSetOriCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriCash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oriCash, other.oriCash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTMoney()).compareTo(other.isSetTMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tMoney, other.tMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTBalance()).compareTo(other.isSetTBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tBalance, other.tBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTCanCashOut()).compareTo(other.isSetTCanCashOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTCanCashOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tCanCashOut, other.tCanCashOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskRate()).compareTo(other.isSetRiskRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskRate, other.riskRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountMarketValue()).compareTo(other.isSetAccountMarketValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountMarketValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountMarketValue, other.accountMarketValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientNo()).compareTo(other.isSetClientNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientNo, other.clientNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EsMoneyQryRspField(");
    boolean first = true;

    if (isSetCurrencyNo()) {
      sb.append("currencyNo:");
      if (this.currencyNo == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyNo);
      }
      first = false;
    }
    if (isSetYAvailable()) {
      if (!first) sb.append(", ");
      sb.append("yAvailable:");
      sb.append(this.yAvailable);
      first = false;
    }
    if (isSetYCanCashOut()) {
      if (!first) sb.append(", ");
      sb.append("yCanCashOut:");
      sb.append(this.yCanCashOut);
      first = false;
    }
    if (isSetYMoney()) {
      if (!first) sb.append(", ");
      sb.append("yMoney:");
      sb.append(this.yMoney);
      first = false;
    }
    if (isSetYBalance()) {
      if (!first) sb.append(", ");
      sb.append("yBalance:");
      sb.append(this.yBalance);
      first = false;
    }
    if (isSetYUnExpiredProfit()) {
      if (!first) sb.append(", ");
      sb.append("yUnExpiredProfit:");
      sb.append(this.yUnExpiredProfit);
      first = false;
    }
    if (isSetAdjust()) {
      if (!first) sb.append(", ");
      sb.append("adjust:");
      sb.append(this.adjust);
      first = false;
    }
    if (isSetCashIn()) {
      if (!first) sb.append(", ");
      sb.append("cashIn:");
      sb.append(this.cashIn);
      first = false;
    }
    if (isSetCashOut()) {
      if (!first) sb.append(", ");
      sb.append("cashOut:");
      sb.append(this.cashOut);
      first = false;
    }
    if (isSetFee()) {
      if (!first) sb.append(", ");
      sb.append("fee:");
      sb.append(this.fee);
      first = false;
    }
    if (isSetFrozen()) {
      if (!first) sb.append(", ");
      sb.append("frozen:");
      sb.append(this.frozen);
      first = false;
    }
    if (isSetCoverProfit()) {
      if (!first) sb.append(", ");
      sb.append("coverProfit:");
      sb.append(this.coverProfit);
      first = false;
    }
    if (isSetDayCoverProfit()) {
      if (!first) sb.append(", ");
      sb.append("dayCoverProfit:");
      sb.append(this.dayCoverProfit);
      first = false;
    }
    if (isSetFloatProfit()) {
      if (!first) sb.append(", ");
      sb.append("floatProfit:");
      sb.append(this.floatProfit);
      first = false;
    }
    if (isSetDayFloatProfit()) {
      if (!first) sb.append(", ");
      sb.append("dayFloatProfit:");
      sb.append(this.dayFloatProfit);
      first = false;
    }
    if (isSetUnExpiredProfit()) {
      if (!first) sb.append(", ");
      sb.append("unExpiredProfit:");
      sb.append(this.unExpiredProfit);
      first = false;
    }
    if (isSetPremium()) {
      if (!first) sb.append(", ");
      sb.append("premium:");
      sb.append(this.premium);
      first = false;
    }
    if (isSetDeposit()) {
      if (!first) sb.append(", ");
      sb.append("deposit:");
      sb.append(this.deposit);
      first = false;
    }
    if (isSetKeepDeposit()) {
      if (!first) sb.append(", ");
      sb.append("keepDeposit:");
      sb.append(this.keepDeposit);
      first = false;
    }
    if (isSetPledge()) {
      if (!first) sb.append(", ");
      sb.append("pledge:");
      sb.append(this.pledge);
      first = false;
    }
    if (isSetTAvailable()) {
      if (!first) sb.append(", ");
      sb.append("tAvailable:");
      sb.append(this.tAvailable);
      first = false;
    }
    if (isSetDiscount()) {
      if (!first) sb.append(", ");
      sb.append("discount:");
      sb.append(this.discount);
      first = false;
    }
    if (isSetTradeFee()) {
      if (!first) sb.append(", ");
      sb.append("tradeFee:");
      sb.append(this.tradeFee);
      first = false;
    }
    if (isSetDeliveryFee()) {
      if (!first) sb.append(", ");
      sb.append("deliveryFee:");
      sb.append(this.deliveryFee);
      first = false;
    }
    if (isSetExchangeFee()) {
      if (!first) sb.append(", ");
      sb.append("exchangeFee:");
      sb.append(this.exchangeFee);
      first = false;
    }
    if (isSetFrozenDeposit()) {
      if (!first) sb.append(", ");
      sb.append("frozenDeposit:");
      sb.append(this.frozenDeposit);
      first = false;
    }
    if (isSetFrozenFee()) {
      if (!first) sb.append(", ");
      sb.append("frozenFee:");
      sb.append(this.frozenFee);
      first = false;
    }
    if (isSetNewFloatProfit()) {
      if (!first) sb.append(", ");
      sb.append("newFloatProfit:");
      sb.append(this.newFloatProfit);
      first = false;
    }
    if (isSetLmeFloatProfit()) {
      if (!first) sb.append(", ");
      sb.append("lmeFloatProfit:");
      sb.append(this.lmeFloatProfit);
      first = false;
    }
    if (isSetOptionMarketValue()) {
      if (!first) sb.append(", ");
      sb.append("optionMarketValue:");
      sb.append(this.optionMarketValue);
      first = false;
    }
    if (isSetOriCash()) {
      if (!first) sb.append(", ");
      sb.append("oriCash:");
      sb.append(this.oriCash);
      first = false;
    }
    if (isSetTMoney()) {
      if (!first) sb.append(", ");
      sb.append("tMoney:");
      sb.append(this.tMoney);
      first = false;
    }
    if (isSetTBalance()) {
      if (!first) sb.append(", ");
      sb.append("tBalance:");
      sb.append(this.tBalance);
      first = false;
    }
    if (isSetTCanCashOut()) {
      if (!first) sb.append(", ");
      sb.append("tCanCashOut:");
      sb.append(this.tCanCashOut);
      first = false;
    }
    if (isSetRiskRate()) {
      if (!first) sb.append(", ");
      sb.append("riskRate:");
      sb.append(this.riskRate);
      first = false;
    }
    if (isSetAccountMarketValue()) {
      if (!first) sb.append(", ");
      sb.append("accountMarketValue:");
      sb.append(this.accountMarketValue);
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    if (isSetClientNo()) {
      if (!first) sb.append(", ");
      sb.append("clientNo:");
      if (this.clientNo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientNo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EsMoneyQryRspFieldStandardSchemeFactory implements SchemeFactory {
    public EsMoneyQryRspFieldStandardScheme getScheme() {
      return new EsMoneyQryRspFieldStandardScheme();
    }
  }

  private static class EsMoneyQryRspFieldStandardScheme extends StandardScheme<EsMoneyQryRspField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EsMoneyQryRspField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CURRENCY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyNo = iprot.readString();
              struct.setCurrencyNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // Y_AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yAvailable = iprot.readDouble();
              struct.setYAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // Y_CAN_CASH_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yCanCashOut = iprot.readDouble();
              struct.setYCanCashOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // Y_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yMoney = iprot.readDouble();
              struct.setYMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // Y_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yBalance = iprot.readDouble();
              struct.setYBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // Y_UN_EXPIRED_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yUnExpiredProfit = iprot.readDouble();
              struct.setYUnExpiredProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ADJUST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.adjust = iprot.readDouble();
              struct.setAdjustIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CASH_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashIn = iprot.readDouble();
              struct.setCashInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CASH_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashOut = iprot.readDouble();
              struct.setCashOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fee = iprot.readDouble();
              struct.setFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FROZEN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozen = iprot.readDouble();
              struct.setFrozenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COVER_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.coverProfit = iprot.readDouble();
              struct.setCoverProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DAY_COVER_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dayCoverProfit = iprot.readDouble();
              struct.setDayCoverProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FLOAT_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.floatProfit = iprot.readDouble();
              struct.setFloatProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DAY_FLOAT_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dayFloatProfit = iprot.readDouble();
              struct.setDayFloatProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UN_EXPIRED_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.unExpiredProfit = iprot.readDouble();
              struct.setUnExpiredProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PREMIUM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.premium = iprot.readDouble();
              struct.setPremiumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DEPOSIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deposit = iprot.readDouble();
              struct.setDepositIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // KEEP_DEPOSIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.keepDeposit = iprot.readDouble();
              struct.setKeepDepositIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PLEDGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pledge = iprot.readDouble();
              struct.setPledgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // T_AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tAvailable = iprot.readDouble();
              struct.setTAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // DISCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.discount = iprot.readDouble();
              struct.setDiscountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TRADE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tradeFee = iprot.readDouble();
              struct.setTradeFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // DELIVERY_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deliveryFee = iprot.readDouble();
              struct.setDeliveryFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // EXCHANGE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchangeFee = iprot.readDouble();
              struct.setExchangeFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // FROZEN_DEPOSIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenDeposit = iprot.readDouble();
              struct.setFrozenDepositIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // FROZEN_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenFee = iprot.readDouble();
              struct.setFrozenFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // NEW_FLOAT_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.newFloatProfit = iprot.readDouble();
              struct.setNewFloatProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // LME_FLOAT_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lmeFloatProfit = iprot.readDouble();
              struct.setLmeFloatProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // OPTION_MARKET_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.optionMarketValue = iprot.readDouble();
              struct.setOptionMarketValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // ORI_CASH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oriCash = iprot.readDouble();
              struct.setOriCashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // T_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tMoney = iprot.readDouble();
              struct.setTMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // T_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tBalance = iprot.readDouble();
              struct.setTBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // T_CAN_CASH_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tCanCashOut = iprot.readDouble();
              struct.setTCanCashOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // RISK_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.riskRate = iprot.readDouble();
              struct.setRiskRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // ACCOUNT_MARKET_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.accountMarketValue = iprot.readDouble();
              struct.setAccountMarketValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // CLIENT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientNo = iprot.readString();
              struct.setClientNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EsMoneyQryRspField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.currencyNo != null) {
        if (struct.isSetCurrencyNo()) {
          oprot.writeFieldBegin(CURRENCY_NO_FIELD_DESC);
          oprot.writeString(struct.currencyNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetYAvailable()) {
        oprot.writeFieldBegin(Y_AVAILABLE_FIELD_DESC);
        oprot.writeDouble(struct.yAvailable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYCanCashOut()) {
        oprot.writeFieldBegin(Y_CAN_CASH_OUT_FIELD_DESC);
        oprot.writeDouble(struct.yCanCashOut);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYMoney()) {
        oprot.writeFieldBegin(Y_MONEY_FIELD_DESC);
        oprot.writeDouble(struct.yMoney);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYBalance()) {
        oprot.writeFieldBegin(Y_BALANCE_FIELD_DESC);
        oprot.writeDouble(struct.yBalance);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYUnExpiredProfit()) {
        oprot.writeFieldBegin(Y_UN_EXPIRED_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.yUnExpiredProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAdjust()) {
        oprot.writeFieldBegin(ADJUST_FIELD_DESC);
        oprot.writeDouble(struct.adjust);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCashIn()) {
        oprot.writeFieldBegin(CASH_IN_FIELD_DESC);
        oprot.writeDouble(struct.cashIn);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCashOut()) {
        oprot.writeFieldBegin(CASH_OUT_FIELD_DESC);
        oprot.writeDouble(struct.cashOut);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFee()) {
        oprot.writeFieldBegin(FEE_FIELD_DESC);
        oprot.writeDouble(struct.fee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozen()) {
        oprot.writeFieldBegin(FROZEN_FIELD_DESC);
        oprot.writeDouble(struct.frozen);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCoverProfit()) {
        oprot.writeFieldBegin(COVER_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.coverProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDayCoverProfit()) {
        oprot.writeFieldBegin(DAY_COVER_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.dayCoverProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFloatProfit()) {
        oprot.writeFieldBegin(FLOAT_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.floatProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDayFloatProfit()) {
        oprot.writeFieldBegin(DAY_FLOAT_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.dayFloatProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUnExpiredProfit()) {
        oprot.writeFieldBegin(UN_EXPIRED_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.unExpiredProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPremium()) {
        oprot.writeFieldBegin(PREMIUM_FIELD_DESC);
        oprot.writeDouble(struct.premium);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeposit()) {
        oprot.writeFieldBegin(DEPOSIT_FIELD_DESC);
        oprot.writeDouble(struct.deposit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetKeepDeposit()) {
        oprot.writeFieldBegin(KEEP_DEPOSIT_FIELD_DESC);
        oprot.writeDouble(struct.keepDeposit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPledge()) {
        oprot.writeFieldBegin(PLEDGE_FIELD_DESC);
        oprot.writeDouble(struct.pledge);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTAvailable()) {
        oprot.writeFieldBegin(T_AVAILABLE_FIELD_DESC);
        oprot.writeDouble(struct.tAvailable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDiscount()) {
        oprot.writeFieldBegin(DISCOUNT_FIELD_DESC);
        oprot.writeDouble(struct.discount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradeFee()) {
        oprot.writeFieldBegin(TRADE_FEE_FIELD_DESC);
        oprot.writeDouble(struct.tradeFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeliveryFee()) {
        oprot.writeFieldBegin(DELIVERY_FEE_FIELD_DESC);
        oprot.writeDouble(struct.deliveryFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExchangeFee()) {
        oprot.writeFieldBegin(EXCHANGE_FEE_FIELD_DESC);
        oprot.writeDouble(struct.exchangeFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenDeposit()) {
        oprot.writeFieldBegin(FROZEN_DEPOSIT_FIELD_DESC);
        oprot.writeDouble(struct.frozenDeposit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenFee()) {
        oprot.writeFieldBegin(FROZEN_FEE_FIELD_DESC);
        oprot.writeDouble(struct.frozenFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNewFloatProfit()) {
        oprot.writeFieldBegin(NEW_FLOAT_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.newFloatProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLmeFloatProfit()) {
        oprot.writeFieldBegin(LME_FLOAT_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.lmeFloatProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOptionMarketValue()) {
        oprot.writeFieldBegin(OPTION_MARKET_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.optionMarketValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOriCash()) {
        oprot.writeFieldBegin(ORI_CASH_FIELD_DESC);
        oprot.writeDouble(struct.oriCash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTMoney()) {
        oprot.writeFieldBegin(T_MONEY_FIELD_DESC);
        oprot.writeDouble(struct.tMoney);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTBalance()) {
        oprot.writeFieldBegin(T_BALANCE_FIELD_DESC);
        oprot.writeDouble(struct.tBalance);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTCanCashOut()) {
        oprot.writeFieldBegin(T_CAN_CASH_OUT_FIELD_DESC);
        oprot.writeDouble(struct.tCanCashOut);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRiskRate()) {
        oprot.writeFieldBegin(RISK_RATE_FIELD_DESC);
        oprot.writeDouble(struct.riskRate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAccountMarketValue()) {
        oprot.writeFieldBegin(ACCOUNT_MARKET_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.accountMarketValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.clientNo != null) {
        if (struct.isSetClientNo()) {
          oprot.writeFieldBegin(CLIENT_NO_FIELD_DESC);
          oprot.writeString(struct.clientNo);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EsMoneyQryRspFieldTupleSchemeFactory implements SchemeFactory {
    public EsMoneyQryRspFieldTupleScheme getScheme() {
      return new EsMoneyQryRspFieldTupleScheme();
    }
  }

  private static class EsMoneyQryRspFieldTupleScheme extends TupleScheme<EsMoneyQryRspField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EsMoneyQryRspField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCurrencyNo()) {
        optionals.set(0);
      }
      if (struct.isSetYAvailable()) {
        optionals.set(1);
      }
      if (struct.isSetYCanCashOut()) {
        optionals.set(2);
      }
      if (struct.isSetYMoney()) {
        optionals.set(3);
      }
      if (struct.isSetYBalance()) {
        optionals.set(4);
      }
      if (struct.isSetYUnExpiredProfit()) {
        optionals.set(5);
      }
      if (struct.isSetAdjust()) {
        optionals.set(6);
      }
      if (struct.isSetCashIn()) {
        optionals.set(7);
      }
      if (struct.isSetCashOut()) {
        optionals.set(8);
      }
      if (struct.isSetFee()) {
        optionals.set(9);
      }
      if (struct.isSetFrozen()) {
        optionals.set(10);
      }
      if (struct.isSetCoverProfit()) {
        optionals.set(11);
      }
      if (struct.isSetDayCoverProfit()) {
        optionals.set(12);
      }
      if (struct.isSetFloatProfit()) {
        optionals.set(13);
      }
      if (struct.isSetDayFloatProfit()) {
        optionals.set(14);
      }
      if (struct.isSetUnExpiredProfit()) {
        optionals.set(15);
      }
      if (struct.isSetPremium()) {
        optionals.set(16);
      }
      if (struct.isSetDeposit()) {
        optionals.set(17);
      }
      if (struct.isSetKeepDeposit()) {
        optionals.set(18);
      }
      if (struct.isSetPledge()) {
        optionals.set(19);
      }
      if (struct.isSetTAvailable()) {
        optionals.set(20);
      }
      if (struct.isSetDiscount()) {
        optionals.set(21);
      }
      if (struct.isSetTradeFee()) {
        optionals.set(22);
      }
      if (struct.isSetDeliveryFee()) {
        optionals.set(23);
      }
      if (struct.isSetExchangeFee()) {
        optionals.set(24);
      }
      if (struct.isSetFrozenDeposit()) {
        optionals.set(25);
      }
      if (struct.isSetFrozenFee()) {
        optionals.set(26);
      }
      if (struct.isSetNewFloatProfit()) {
        optionals.set(27);
      }
      if (struct.isSetLmeFloatProfit()) {
        optionals.set(28);
      }
      if (struct.isSetOptionMarketValue()) {
        optionals.set(29);
      }
      if (struct.isSetOriCash()) {
        optionals.set(30);
      }
      if (struct.isSetTMoney()) {
        optionals.set(31);
      }
      if (struct.isSetTBalance()) {
        optionals.set(32);
      }
      if (struct.isSetTCanCashOut()) {
        optionals.set(33);
      }
      if (struct.isSetRiskRate()) {
        optionals.set(34);
      }
      if (struct.isSetAccountMarketValue()) {
        optionals.set(35);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(36);
      }
      if (struct.isSetClientNo()) {
        optionals.set(37);
      }
      oprot.writeBitSet(optionals, 38);
      if (struct.isSetCurrencyNo()) {
        oprot.writeString(struct.currencyNo);
      }
      if (struct.isSetYAvailable()) {
        oprot.writeDouble(struct.yAvailable);
      }
      if (struct.isSetYCanCashOut()) {
        oprot.writeDouble(struct.yCanCashOut);
      }
      if (struct.isSetYMoney()) {
        oprot.writeDouble(struct.yMoney);
      }
      if (struct.isSetYBalance()) {
        oprot.writeDouble(struct.yBalance);
      }
      if (struct.isSetYUnExpiredProfit()) {
        oprot.writeDouble(struct.yUnExpiredProfit);
      }
      if (struct.isSetAdjust()) {
        oprot.writeDouble(struct.adjust);
      }
      if (struct.isSetCashIn()) {
        oprot.writeDouble(struct.cashIn);
      }
      if (struct.isSetCashOut()) {
        oprot.writeDouble(struct.cashOut);
      }
      if (struct.isSetFee()) {
        oprot.writeDouble(struct.fee);
      }
      if (struct.isSetFrozen()) {
        oprot.writeDouble(struct.frozen);
      }
      if (struct.isSetCoverProfit()) {
        oprot.writeDouble(struct.coverProfit);
      }
      if (struct.isSetDayCoverProfit()) {
        oprot.writeDouble(struct.dayCoverProfit);
      }
      if (struct.isSetFloatProfit()) {
        oprot.writeDouble(struct.floatProfit);
      }
      if (struct.isSetDayFloatProfit()) {
        oprot.writeDouble(struct.dayFloatProfit);
      }
      if (struct.isSetUnExpiredProfit()) {
        oprot.writeDouble(struct.unExpiredProfit);
      }
      if (struct.isSetPremium()) {
        oprot.writeDouble(struct.premium);
      }
      if (struct.isSetDeposit()) {
        oprot.writeDouble(struct.deposit);
      }
      if (struct.isSetKeepDeposit()) {
        oprot.writeDouble(struct.keepDeposit);
      }
      if (struct.isSetPledge()) {
        oprot.writeDouble(struct.pledge);
      }
      if (struct.isSetTAvailable()) {
        oprot.writeDouble(struct.tAvailable);
      }
      if (struct.isSetDiscount()) {
        oprot.writeDouble(struct.discount);
      }
      if (struct.isSetTradeFee()) {
        oprot.writeDouble(struct.tradeFee);
      }
      if (struct.isSetDeliveryFee()) {
        oprot.writeDouble(struct.deliveryFee);
      }
      if (struct.isSetExchangeFee()) {
        oprot.writeDouble(struct.exchangeFee);
      }
      if (struct.isSetFrozenDeposit()) {
        oprot.writeDouble(struct.frozenDeposit);
      }
      if (struct.isSetFrozenFee()) {
        oprot.writeDouble(struct.frozenFee);
      }
      if (struct.isSetNewFloatProfit()) {
        oprot.writeDouble(struct.newFloatProfit);
      }
      if (struct.isSetLmeFloatProfit()) {
        oprot.writeDouble(struct.lmeFloatProfit);
      }
      if (struct.isSetOptionMarketValue()) {
        oprot.writeDouble(struct.optionMarketValue);
      }
      if (struct.isSetOriCash()) {
        oprot.writeDouble(struct.oriCash);
      }
      if (struct.isSetTMoney()) {
        oprot.writeDouble(struct.tMoney);
      }
      if (struct.isSetTBalance()) {
        oprot.writeDouble(struct.tBalance);
      }
      if (struct.isSetTCanCashOut()) {
        oprot.writeDouble(struct.tCanCashOut);
      }
      if (struct.isSetRiskRate()) {
        oprot.writeDouble(struct.riskRate);
      }
      if (struct.isSetAccountMarketValue()) {
        oprot.writeDouble(struct.accountMarketValue);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
      if (struct.isSetClientNo()) {
        oprot.writeString(struct.clientNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EsMoneyQryRspField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(38);
      if (incoming.get(0)) {
        struct.currencyNo = iprot.readString();
        struct.setCurrencyNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.yAvailable = iprot.readDouble();
        struct.setYAvailableIsSet(true);
      }
      if (incoming.get(2)) {
        struct.yCanCashOut = iprot.readDouble();
        struct.setYCanCashOutIsSet(true);
      }
      if (incoming.get(3)) {
        struct.yMoney = iprot.readDouble();
        struct.setYMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.yBalance = iprot.readDouble();
        struct.setYBalanceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.yUnExpiredProfit = iprot.readDouble();
        struct.setYUnExpiredProfitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.adjust = iprot.readDouble();
        struct.setAdjustIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cashIn = iprot.readDouble();
        struct.setCashInIsSet(true);
      }
      if (incoming.get(8)) {
        struct.cashOut = iprot.readDouble();
        struct.setCashOutIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fee = iprot.readDouble();
        struct.setFeeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.frozen = iprot.readDouble();
        struct.setFrozenIsSet(true);
      }
      if (incoming.get(11)) {
        struct.coverProfit = iprot.readDouble();
        struct.setCoverProfitIsSet(true);
      }
      if (incoming.get(12)) {
        struct.dayCoverProfit = iprot.readDouble();
        struct.setDayCoverProfitIsSet(true);
      }
      if (incoming.get(13)) {
        struct.floatProfit = iprot.readDouble();
        struct.setFloatProfitIsSet(true);
      }
      if (incoming.get(14)) {
        struct.dayFloatProfit = iprot.readDouble();
        struct.setDayFloatProfitIsSet(true);
      }
      if (incoming.get(15)) {
        struct.unExpiredProfit = iprot.readDouble();
        struct.setUnExpiredProfitIsSet(true);
      }
      if (incoming.get(16)) {
        struct.premium = iprot.readDouble();
        struct.setPremiumIsSet(true);
      }
      if (incoming.get(17)) {
        struct.deposit = iprot.readDouble();
        struct.setDepositIsSet(true);
      }
      if (incoming.get(18)) {
        struct.keepDeposit = iprot.readDouble();
        struct.setKeepDepositIsSet(true);
      }
      if (incoming.get(19)) {
        struct.pledge = iprot.readDouble();
        struct.setPledgeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.tAvailable = iprot.readDouble();
        struct.setTAvailableIsSet(true);
      }
      if (incoming.get(21)) {
        struct.discount = iprot.readDouble();
        struct.setDiscountIsSet(true);
      }
      if (incoming.get(22)) {
        struct.tradeFee = iprot.readDouble();
        struct.setTradeFeeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.deliveryFee = iprot.readDouble();
        struct.setDeliveryFeeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.exchangeFee = iprot.readDouble();
        struct.setExchangeFeeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.frozenDeposit = iprot.readDouble();
        struct.setFrozenDepositIsSet(true);
      }
      if (incoming.get(26)) {
        struct.frozenFee = iprot.readDouble();
        struct.setFrozenFeeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.newFloatProfit = iprot.readDouble();
        struct.setNewFloatProfitIsSet(true);
      }
      if (incoming.get(28)) {
        struct.lmeFloatProfit = iprot.readDouble();
        struct.setLmeFloatProfitIsSet(true);
      }
      if (incoming.get(29)) {
        struct.optionMarketValue = iprot.readDouble();
        struct.setOptionMarketValueIsSet(true);
      }
      if (incoming.get(30)) {
        struct.oriCash = iprot.readDouble();
        struct.setOriCashIsSet(true);
      }
      if (incoming.get(31)) {
        struct.tMoney = iprot.readDouble();
        struct.setTMoneyIsSet(true);
      }
      if (incoming.get(32)) {
        struct.tBalance = iprot.readDouble();
        struct.setTBalanceIsSet(true);
      }
      if (incoming.get(33)) {
        struct.tCanCashOut = iprot.readDouble();
        struct.setTCanCashOutIsSet(true);
      }
      if (incoming.get(34)) {
        struct.riskRate = iprot.readDouble();
        struct.setRiskRateIsSet(true);
      }
      if (incoming.get(35)) {
        struct.accountMarketValue = iprot.readDouble();
        struct.setAccountMarketValueIsSet(true);
      }
      if (incoming.get(36)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
      if (incoming.get(37)) {
        struct.clientNo = iprot.readString();
        struct.setClientNoIsSet(true);
      }
    }
  }

}

