/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.common.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CommodityBase implements org.apache.thrift.TBase<CommodityBase, CommodityBase._Fields>, java.io.Serializable, Cloneable, Comparable<CommodityBase> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommodityBase");

  private static final org.apache.thrift.protocol.TField COMMODITY_FIELD_DESC = new org.apache.thrift.protocol.TField("commodity", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField VOLUME_MULTIPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeMultiple", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PRICE_TICK_FIELD_DESC = new org.apache.thrift.protocol.TField("priceTick", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ENG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("engName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cnName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tcName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommodityBaseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommodityBaseTupleSchemeFactory());
  }

  public Commodity commodity; // optional
  public int volumeMultiple; // optional
  public double priceTick; // optional
  /**
   * 
   * @see Currency
   */
  public Currency currency; // optional
  public String engName; // optional
  public String cnName; // optional
  public String tcName; // optional
  /**
   * 
   * @see CommonStatus
   */
  public CommonStatus status; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMODITY((short)1, "commodity"),
    VOLUME_MULTIPLE((short)2, "volumeMultiple"),
    PRICE_TICK((short)3, "priceTick"),
    /**
     * 
     * @see Currency
     */
    CURRENCY((short)4, "currency"),
    ENG_NAME((short)5, "engName"),
    CN_NAME((short)6, "cnName"),
    TC_NAME((short)7, "tcName"),
    /**
     * 
     * @see CommonStatus
     */
    STATUS((short)8, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMODITY
          return COMMODITY;
        case 2: // VOLUME_MULTIPLE
          return VOLUME_MULTIPLE;
        case 3: // PRICE_TICK
          return PRICE_TICK;
        case 4: // CURRENCY
          return CURRENCY;
        case 5: // ENG_NAME
          return ENG_NAME;
        case 6: // CN_NAME
          return CN_NAME;
        case 7: // TC_NAME
          return TC_NAME;
        case 8: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VOLUMEMULTIPLE_ISSET_ID = 0;
  private static final int __PRICETICK_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.COMMODITY,_Fields.VOLUME_MULTIPLE,_Fields.PRICE_TICK,_Fields.CURRENCY,_Fields.ENG_NAME,_Fields.CN_NAME,_Fields.TC_NAME,_Fields.STATUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMODITY, new org.apache.thrift.meta_data.FieldMetaData("commodity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Commodity.class)));
    tmpMap.put(_Fields.VOLUME_MULTIPLE, new org.apache.thrift.meta_data.FieldMetaData("volumeMultiple", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRICE_TICK, new org.apache.thrift.meta_data.FieldMetaData("priceTick", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Currency.class)));
    tmpMap.put(_Fields.ENG_NAME, new org.apache.thrift.meta_data.FieldMetaData("engName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CN_NAME, new org.apache.thrift.meta_data.FieldMetaData("cnName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TC_NAME, new org.apache.thrift.meta_data.FieldMetaData("tcName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CommonStatus.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommodityBase.class, metaDataMap);
  }

  public CommodityBase() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommodityBase(CommodityBase other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCommodity()) {
      this.commodity = new Commodity(other.commodity);
    }
    this.volumeMultiple = other.volumeMultiple;
    this.priceTick = other.priceTick;
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    if (other.isSetEngName()) {
      this.engName = other.engName;
    }
    if (other.isSetCnName()) {
      this.cnName = other.cnName;
    }
    if (other.isSetTcName()) {
      this.tcName = other.tcName;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
  }

  public CommodityBase deepCopy() {
    return new CommodityBase(this);
  }

  @Override
  public void clear() {
    this.commodity = null;
    setVolumeMultipleIsSet(false);
    this.volumeMultiple = 0;
    setPriceTickIsSet(false);
    this.priceTick = 0.0;
    this.currency = null;
    this.engName = null;
    this.cnName = null;
    this.tcName = null;
    this.status = null;
  }

  public Commodity getCommodity() {
    return this.commodity;
  }

  public CommodityBase setCommodity(Commodity commodity) {
    this.commodity = commodity;
    return this;
  }

  public void unsetCommodity() {
    this.commodity = null;
  }

  /** Returns true if field commodity is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodity() {
    return this.commodity != null;
  }

  public void setCommodityIsSet(boolean value) {
    if (!value) {
      this.commodity = null;
    }
  }

  public int getVolumeMultiple() {
    return this.volumeMultiple;
  }

  public CommodityBase setVolumeMultiple(int volumeMultiple) {
    this.volumeMultiple = volumeMultiple;
    setVolumeMultipleIsSet(true);
    return this;
  }

  public void unsetVolumeMultiple() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMEMULTIPLE_ISSET_ID);
  }

  /** Returns true if field volumeMultiple is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeMultiple() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMEMULTIPLE_ISSET_ID);
  }

  public void setVolumeMultipleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMEMULTIPLE_ISSET_ID, value);
  }

  public double getPriceTick() {
    return this.priceTick;
  }

  public CommodityBase setPriceTick(double priceTick) {
    this.priceTick = priceTick;
    setPriceTickIsSet(true);
    return this;
  }

  public void unsetPriceTick() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICETICK_ISSET_ID);
  }

  /** Returns true if field priceTick is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceTick() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICETICK_ISSET_ID);
  }

  public void setPriceTickIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICETICK_ISSET_ID, value);
  }

  /**
   * 
   * @see Currency
   */
  public Currency getCurrency() {
    return this.currency;
  }

  /**
   * 
   * @see Currency
   */
  public CommodityBase setCurrency(Currency currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public String getEngName() {
    return this.engName;
  }

  public CommodityBase setEngName(String engName) {
    this.engName = engName;
    return this;
  }

  public void unsetEngName() {
    this.engName = null;
  }

  /** Returns true if field engName is set (has been assigned a value) and false otherwise */
  public boolean isSetEngName() {
    return this.engName != null;
  }

  public void setEngNameIsSet(boolean value) {
    if (!value) {
      this.engName = null;
    }
  }

  public String getCnName() {
    return this.cnName;
  }

  public CommodityBase setCnName(String cnName) {
    this.cnName = cnName;
    return this;
  }

  public void unsetCnName() {
    this.cnName = null;
  }

  /** Returns true if field cnName is set (has been assigned a value) and false otherwise */
  public boolean isSetCnName() {
    return this.cnName != null;
  }

  public void setCnNameIsSet(boolean value) {
    if (!value) {
      this.cnName = null;
    }
  }

  public String getTcName() {
    return this.tcName;
  }

  public CommodityBase setTcName(String tcName) {
    this.tcName = tcName;
    return this;
  }

  public void unsetTcName() {
    this.tcName = null;
  }

  /** Returns true if field tcName is set (has been assigned a value) and false otherwise */
  public boolean isSetTcName() {
    return this.tcName != null;
  }

  public void setTcNameIsSet(boolean value) {
    if (!value) {
      this.tcName = null;
    }
  }

  /**
   * 
   * @see CommonStatus
   */
  public CommonStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see CommonStatus
   */
  public CommodityBase setStatus(CommonStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMODITY:
      if (value == null) {
        unsetCommodity();
      } else {
        setCommodity((Commodity)value);
      }
      break;

    case VOLUME_MULTIPLE:
      if (value == null) {
        unsetVolumeMultiple();
      } else {
        setVolumeMultiple((Integer)value);
      }
      break;

    case PRICE_TICK:
      if (value == null) {
        unsetPriceTick();
      } else {
        setPriceTick((Double)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((Currency)value);
      }
      break;

    case ENG_NAME:
      if (value == null) {
        unsetEngName();
      } else {
        setEngName((String)value);
      }
      break;

    case CN_NAME:
      if (value == null) {
        unsetCnName();
      } else {
        setCnName((String)value);
      }
      break;

    case TC_NAME:
      if (value == null) {
        unsetTcName();
      } else {
        setTcName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((CommonStatus)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMODITY:
      return getCommodity();

    case VOLUME_MULTIPLE:
      return Integer.valueOf(getVolumeMultiple());

    case PRICE_TICK:
      return Double.valueOf(getPriceTick());

    case CURRENCY:
      return getCurrency();

    case ENG_NAME:
      return getEngName();

    case CN_NAME:
      return getCnName();

    case TC_NAME:
      return getTcName();

    case STATUS:
      return getStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMODITY:
      return isSetCommodity();
    case VOLUME_MULTIPLE:
      return isSetVolumeMultiple();
    case PRICE_TICK:
      return isSetPriceTick();
    case CURRENCY:
      return isSetCurrency();
    case ENG_NAME:
      return isSetEngName();
    case CN_NAME:
      return isSetCnName();
    case TC_NAME:
      return isSetTcName();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommodityBase)
      return this.equals((CommodityBase)that);
    return false;
  }

  public boolean equals(CommodityBase that) {
    if (that == null)
      return false;

    boolean this_present_commodity = true && this.isSetCommodity();
    boolean that_present_commodity = true && that.isSetCommodity();
    if (this_present_commodity || that_present_commodity) {
      if (!(this_present_commodity && that_present_commodity))
        return false;
      if (!this.commodity.equals(that.commodity))
        return false;
    }

    boolean this_present_volumeMultiple = true && this.isSetVolumeMultiple();
    boolean that_present_volumeMultiple = true && that.isSetVolumeMultiple();
    if (this_present_volumeMultiple || that_present_volumeMultiple) {
      if (!(this_present_volumeMultiple && that_present_volumeMultiple))
        return false;
      if (this.volumeMultiple != that.volumeMultiple)
        return false;
    }

    boolean this_present_priceTick = true && this.isSetPriceTick();
    boolean that_present_priceTick = true && that.isSetPriceTick();
    if (this_present_priceTick || that_present_priceTick) {
      if (!(this_present_priceTick && that_present_priceTick))
        return false;
      if (this.priceTick != that.priceTick)
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_engName = true && this.isSetEngName();
    boolean that_present_engName = true && that.isSetEngName();
    if (this_present_engName || that_present_engName) {
      if (!(this_present_engName && that_present_engName))
        return false;
      if (!this.engName.equals(that.engName))
        return false;
    }

    boolean this_present_cnName = true && this.isSetCnName();
    boolean that_present_cnName = true && that.isSetCnName();
    if (this_present_cnName || that_present_cnName) {
      if (!(this_present_cnName && that_present_cnName))
        return false;
      if (!this.cnName.equals(that.cnName))
        return false;
    }

    boolean this_present_tcName = true && this.isSetTcName();
    boolean that_present_tcName = true && that.isSetTcName();
    if (this_present_tcName || that_present_tcName) {
      if (!(this_present_tcName && that_present_tcName))
        return false;
      if (!this.tcName.equals(that.tcName))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CommodityBase other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCommodity()).compareTo(other.isSetCommodity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodity, other.commodity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeMultiple()).compareTo(other.isSetVolumeMultiple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeMultiple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeMultiple, other.volumeMultiple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceTick()).compareTo(other.isSetPriceTick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceTick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceTick, other.priceTick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngName()).compareTo(other.isSetEngName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engName, other.engName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnName()).compareTo(other.isSetCnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnName, other.cnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTcName()).compareTo(other.isSetTcName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTcName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tcName, other.tcName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommodityBase(");
    boolean first = true;

    if (isSetCommodity()) {
      sb.append("commodity:");
      if (this.commodity == null) {
        sb.append("null");
      } else {
        sb.append(this.commodity);
      }
      first = false;
    }
    if (isSetVolumeMultiple()) {
      if (!first) sb.append(", ");
      sb.append("volumeMultiple:");
      sb.append(this.volumeMultiple);
      first = false;
    }
    if (isSetPriceTick()) {
      if (!first) sb.append(", ");
      sb.append("priceTick:");
      sb.append(this.priceTick);
      first = false;
    }
    if (isSetCurrency()) {
      if (!first) sb.append(", ");
      sb.append("currency:");
      if (this.currency == null) {
        sb.append("null");
      } else {
        sb.append(this.currency);
      }
      first = false;
    }
    if (isSetEngName()) {
      if (!first) sb.append(", ");
      sb.append("engName:");
      if (this.engName == null) {
        sb.append("null");
      } else {
        sb.append(this.engName);
      }
      first = false;
    }
    if (isSetCnName()) {
      if (!first) sb.append(", ");
      sb.append("cnName:");
      if (this.cnName == null) {
        sb.append("null");
      } else {
        sb.append(this.cnName);
      }
      first = false;
    }
    if (isSetTcName()) {
      if (!first) sb.append(", ");
      sb.append("tcName:");
      if (this.tcName == null) {
        sb.append("null");
      } else {
        sb.append(this.tcName);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (commodity != null) {
      commodity.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommodityBaseStandardSchemeFactory implements SchemeFactory {
    public CommodityBaseStandardScheme getScheme() {
      return new CommodityBaseStandardScheme();
    }
  }

  private static class CommodityBaseStandardScheme extends StandardScheme<CommodityBase> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommodityBase struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMODITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commodity = new Commodity();
              struct.commodity.read(iprot);
              struct.setCommodityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VOLUME_MULTIPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volumeMultiple = iprot.readI32();
              struct.setVolumeMultipleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRICE_TICK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priceTick = iprot.readDouble();
              struct.setPriceTickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currency = Currency.findByValue(iprot.readI32());
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engName = iprot.readString();
              struct.setEngNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnName = iprot.readString();
              struct.setCnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tcName = iprot.readString();
              struct.setTcNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = CommonStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommodityBase struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.commodity != null) {
        if (struct.isSetCommodity()) {
          oprot.writeFieldBegin(COMMODITY_FIELD_DESC);
          struct.commodity.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVolumeMultiple()) {
        oprot.writeFieldBegin(VOLUME_MULTIPLE_FIELD_DESC);
        oprot.writeI32(struct.volumeMultiple);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPriceTick()) {
        oprot.writeFieldBegin(PRICE_TICK_FIELD_DESC);
        oprot.writeDouble(struct.priceTick);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        if (struct.isSetCurrency()) {
          oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
          oprot.writeI32(struct.currency.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.engName != null) {
        if (struct.isSetEngName()) {
          oprot.writeFieldBegin(ENG_NAME_FIELD_DESC);
          oprot.writeString(struct.engName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cnName != null) {
        if (struct.isSetCnName()) {
          oprot.writeFieldBegin(CN_NAME_FIELD_DESC);
          oprot.writeString(struct.cnName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tcName != null) {
        if (struct.isSetTcName()) {
          oprot.writeFieldBegin(TC_NAME_FIELD_DESC);
          oprot.writeString(struct.tcName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommodityBaseTupleSchemeFactory implements SchemeFactory {
    public CommodityBaseTupleScheme getScheme() {
      return new CommodityBaseTupleScheme();
    }
  }

  private static class CommodityBaseTupleScheme extends TupleScheme<CommodityBase> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommodityBase struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCommodity()) {
        optionals.set(0);
      }
      if (struct.isSetVolumeMultiple()) {
        optionals.set(1);
      }
      if (struct.isSetPriceTick()) {
        optionals.set(2);
      }
      if (struct.isSetCurrency()) {
        optionals.set(3);
      }
      if (struct.isSetEngName()) {
        optionals.set(4);
      }
      if (struct.isSetCnName()) {
        optionals.set(5);
      }
      if (struct.isSetTcName()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetCommodity()) {
        struct.commodity.write(oprot);
      }
      if (struct.isSetVolumeMultiple()) {
        oprot.writeI32(struct.volumeMultiple);
      }
      if (struct.isSetPriceTick()) {
        oprot.writeDouble(struct.priceTick);
      }
      if (struct.isSetCurrency()) {
        oprot.writeI32(struct.currency.getValue());
      }
      if (struct.isSetEngName()) {
        oprot.writeString(struct.engName);
      }
      if (struct.isSetCnName()) {
        oprot.writeString(struct.cnName);
      }
      if (struct.isSetTcName()) {
        oprot.writeString(struct.tcName);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommodityBase struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.commodity = new Commodity();
        struct.commodity.read(iprot);
        struct.setCommodityIsSet(true);
      }
      if (incoming.get(1)) {
        struct.volumeMultiple = iprot.readI32();
        struct.setVolumeMultipleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.priceTick = iprot.readDouble();
        struct.setPriceTickIsSet(true);
      }
      if (incoming.get(3)) {
        struct.currency = Currency.findByValue(iprot.readI32());
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.engName = iprot.readString();
        struct.setEngNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cnName = iprot.readString();
        struct.setCnNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tcName = iprot.readString();
        struct.setTcNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = CommonStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
    }
  }

}

