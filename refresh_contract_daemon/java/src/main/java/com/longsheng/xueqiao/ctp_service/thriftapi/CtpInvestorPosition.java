/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.ctp_service.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CtpInvestorPosition implements org.apache.thrift.TBase<CtpInvestorPosition, CtpInvestorPosition._Fields>, java.io.Serializable, Cloneable, Comparable<CtpInvestorPosition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CtpInvestorPosition");

  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INVESTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("investorID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField POSI_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("posiDirection", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("hedgeFlag", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField POSITION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionDate", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField YD_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("ydPosition", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LONG_FROZEN_FIELD_DESC = new org.apache.thrift.protocol.TField("longFrozen", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SHORT_FROZEN_FIELD_DESC = new org.apache.thrift.protocol.TField("shortFrozen", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LONG_FROZEN_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("longFrozenAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField SHORT_FROZEN_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("shortFrozenAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField OPEN_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("openVolume", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CLOSE_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("closeVolume", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField OPEN_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("openAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField CLOSE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("closeAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField POSITION_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("positionCost", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField PRE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("preMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField USE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("useMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField FROZEN_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField FROZEN_CASH_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenCash", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField FROZEN_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenCommission", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField CASH_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("cashIn", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("commission", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField POSITION_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("positionProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField PRE_SETTLEMENT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("preSettlementPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField TRADING_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradingDay", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementID", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField OPEN_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("openCost", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField EXCHANGE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)32);
  private static final org.apache.thrift.protocol.TField COMB_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("combPosition", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField COMB_LONG_FROZEN_FIELD_DESC = new org.apache.thrift.protocol.TField("combLongFrozen", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField COMB_SHORT_FROZEN_FIELD_DESC = new org.apache.thrift.protocol.TField("combShortFrozen", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_BY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfitByDate", org.apache.thrift.protocol.TType.DOUBLE, (short)36);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_BY_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfitByTrade", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField TODAY_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("todayPosition", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField MARGIN_RATE_BY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("marginRateByMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)39);
  private static final org.apache.thrift.protocol.TField MARGIN_RATE_BY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("marginRateByVolume", org.apache.thrift.protocol.TType.DOUBLE, (short)40);
  private static final org.apache.thrift.protocol.TField STRIKE_FROZEN_FIELD_DESC = new org.apache.thrift.protocol.TField("strikeFrozen", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField STRIKE_FROZEN_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("strikeFrozenAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)42);
  private static final org.apache.thrift.protocol.TField ABANDON_FROZEN_FIELD_DESC = new org.apache.thrift.protocol.TField("abandonFrozen", org.apache.thrift.protocol.TType.I32, (short)43);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)44);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CtpInvestorPositionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CtpInvestorPositionTupleSchemeFactory());
  }

  public String instrumentID; // optional
  public String brokerID; // optional
  public String investorID; // optional
  public byte posiDirection; // optional
  public byte hedgeFlag; // optional
  public byte positionDate; // optional
  public int ydPosition; // optional
  public int position; // optional
  public int longFrozen; // optional
  public int shortFrozen; // optional
  public double longFrozenAmount; // optional
  public double shortFrozenAmount; // optional
  public int openVolume; // optional
  public int closeVolume; // optional
  public double openAmount; // optional
  public double closeAmount; // optional
  public double positionCost; // optional
  public double preMargin; // optional
  public double useMargin; // optional
  public double frozenMargin; // optional
  public double frozenCash; // optional
  public double frozenCommission; // optional
  public double cashIn; // optional
  public double commission; // optional
  public double closeProfit; // optional
  public double positionProfit; // optional
  public double preSettlementPrice; // optional
  public double settlementPrice; // optional
  public String tradingDay; // optional
  public int settlementID; // optional
  public double openCost; // optional
  public double exchangeMargin; // optional
  public int combPosition; // optional
  public int combLongFrozen; // optional
  public int combShortFrozen; // optional
  public double closeProfitByDate; // optional
  public double closeProfitByTrade; // optional
  public int todayPosition; // optional
  public double marginRateByMoney; // optional
  public double marginRateByVolume; // optional
  public int strikeFrozen; // optional
  public double strikeFrozenAmount; // optional
  public int abandonFrozen; // optional
  public int sledAccountId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTRUMENT_ID((short)1, "instrumentID"),
    BROKER_ID((short)2, "brokerID"),
    INVESTOR_ID((short)3, "investorID"),
    POSI_DIRECTION((short)4, "posiDirection"),
    HEDGE_FLAG((short)5, "hedgeFlag"),
    POSITION_DATE((short)6, "positionDate"),
    YD_POSITION((short)7, "ydPosition"),
    POSITION((short)8, "position"),
    LONG_FROZEN((short)9, "longFrozen"),
    SHORT_FROZEN((short)10, "shortFrozen"),
    LONG_FROZEN_AMOUNT((short)11, "longFrozenAmount"),
    SHORT_FROZEN_AMOUNT((short)12, "shortFrozenAmount"),
    OPEN_VOLUME((short)13, "openVolume"),
    CLOSE_VOLUME((short)14, "closeVolume"),
    OPEN_AMOUNT((short)15, "openAmount"),
    CLOSE_AMOUNT((short)16, "closeAmount"),
    POSITION_COST((short)17, "positionCost"),
    PRE_MARGIN((short)18, "preMargin"),
    USE_MARGIN((short)19, "useMargin"),
    FROZEN_MARGIN((short)20, "frozenMargin"),
    FROZEN_CASH((short)21, "frozenCash"),
    FROZEN_COMMISSION((short)22, "frozenCommission"),
    CASH_IN((short)23, "cashIn"),
    COMMISSION((short)24, "commission"),
    CLOSE_PROFIT((short)25, "closeProfit"),
    POSITION_PROFIT((short)26, "positionProfit"),
    PRE_SETTLEMENT_PRICE((short)27, "preSettlementPrice"),
    SETTLEMENT_PRICE((short)28, "settlementPrice"),
    TRADING_DAY((short)29, "tradingDay"),
    SETTLEMENT_ID((short)30, "settlementID"),
    OPEN_COST((short)31, "openCost"),
    EXCHANGE_MARGIN((short)32, "exchangeMargin"),
    COMB_POSITION((short)33, "combPosition"),
    COMB_LONG_FROZEN((short)34, "combLongFrozen"),
    COMB_SHORT_FROZEN((short)35, "combShortFrozen"),
    CLOSE_PROFIT_BY_DATE((short)36, "closeProfitByDate"),
    CLOSE_PROFIT_BY_TRADE((short)37, "closeProfitByTrade"),
    TODAY_POSITION((short)38, "todayPosition"),
    MARGIN_RATE_BY_MONEY((short)39, "marginRateByMoney"),
    MARGIN_RATE_BY_VOLUME((short)40, "marginRateByVolume"),
    STRIKE_FROZEN((short)41, "strikeFrozen"),
    STRIKE_FROZEN_AMOUNT((short)42, "strikeFrozenAmount"),
    ABANDON_FROZEN((short)43, "abandonFrozen"),
    SLED_ACCOUNT_ID((short)44, "sledAccountId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 2: // BROKER_ID
          return BROKER_ID;
        case 3: // INVESTOR_ID
          return INVESTOR_ID;
        case 4: // POSI_DIRECTION
          return POSI_DIRECTION;
        case 5: // HEDGE_FLAG
          return HEDGE_FLAG;
        case 6: // POSITION_DATE
          return POSITION_DATE;
        case 7: // YD_POSITION
          return YD_POSITION;
        case 8: // POSITION
          return POSITION;
        case 9: // LONG_FROZEN
          return LONG_FROZEN;
        case 10: // SHORT_FROZEN
          return SHORT_FROZEN;
        case 11: // LONG_FROZEN_AMOUNT
          return LONG_FROZEN_AMOUNT;
        case 12: // SHORT_FROZEN_AMOUNT
          return SHORT_FROZEN_AMOUNT;
        case 13: // OPEN_VOLUME
          return OPEN_VOLUME;
        case 14: // CLOSE_VOLUME
          return CLOSE_VOLUME;
        case 15: // OPEN_AMOUNT
          return OPEN_AMOUNT;
        case 16: // CLOSE_AMOUNT
          return CLOSE_AMOUNT;
        case 17: // POSITION_COST
          return POSITION_COST;
        case 18: // PRE_MARGIN
          return PRE_MARGIN;
        case 19: // USE_MARGIN
          return USE_MARGIN;
        case 20: // FROZEN_MARGIN
          return FROZEN_MARGIN;
        case 21: // FROZEN_CASH
          return FROZEN_CASH;
        case 22: // FROZEN_COMMISSION
          return FROZEN_COMMISSION;
        case 23: // CASH_IN
          return CASH_IN;
        case 24: // COMMISSION
          return COMMISSION;
        case 25: // CLOSE_PROFIT
          return CLOSE_PROFIT;
        case 26: // POSITION_PROFIT
          return POSITION_PROFIT;
        case 27: // PRE_SETTLEMENT_PRICE
          return PRE_SETTLEMENT_PRICE;
        case 28: // SETTLEMENT_PRICE
          return SETTLEMENT_PRICE;
        case 29: // TRADING_DAY
          return TRADING_DAY;
        case 30: // SETTLEMENT_ID
          return SETTLEMENT_ID;
        case 31: // OPEN_COST
          return OPEN_COST;
        case 32: // EXCHANGE_MARGIN
          return EXCHANGE_MARGIN;
        case 33: // COMB_POSITION
          return COMB_POSITION;
        case 34: // COMB_LONG_FROZEN
          return COMB_LONG_FROZEN;
        case 35: // COMB_SHORT_FROZEN
          return COMB_SHORT_FROZEN;
        case 36: // CLOSE_PROFIT_BY_DATE
          return CLOSE_PROFIT_BY_DATE;
        case 37: // CLOSE_PROFIT_BY_TRADE
          return CLOSE_PROFIT_BY_TRADE;
        case 38: // TODAY_POSITION
          return TODAY_POSITION;
        case 39: // MARGIN_RATE_BY_MONEY
          return MARGIN_RATE_BY_MONEY;
        case 40: // MARGIN_RATE_BY_VOLUME
          return MARGIN_RATE_BY_VOLUME;
        case 41: // STRIKE_FROZEN
          return STRIKE_FROZEN;
        case 42: // STRIKE_FROZEN_AMOUNT
          return STRIKE_FROZEN_AMOUNT;
        case 43: // ABANDON_FROZEN
          return ABANDON_FROZEN;
        case 44: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POSIDIRECTION_ISSET_ID = 0;
  private static final int __HEDGEFLAG_ISSET_ID = 1;
  private static final int __POSITIONDATE_ISSET_ID = 2;
  private static final int __YDPOSITION_ISSET_ID = 3;
  private static final int __POSITION_ISSET_ID = 4;
  private static final int __LONGFROZEN_ISSET_ID = 5;
  private static final int __SHORTFROZEN_ISSET_ID = 6;
  private static final int __LONGFROZENAMOUNT_ISSET_ID = 7;
  private static final int __SHORTFROZENAMOUNT_ISSET_ID = 8;
  private static final int __OPENVOLUME_ISSET_ID = 9;
  private static final int __CLOSEVOLUME_ISSET_ID = 10;
  private static final int __OPENAMOUNT_ISSET_ID = 11;
  private static final int __CLOSEAMOUNT_ISSET_ID = 12;
  private static final int __POSITIONCOST_ISSET_ID = 13;
  private static final int __PREMARGIN_ISSET_ID = 14;
  private static final int __USEMARGIN_ISSET_ID = 15;
  private static final int __FROZENMARGIN_ISSET_ID = 16;
  private static final int __FROZENCASH_ISSET_ID = 17;
  private static final int __FROZENCOMMISSION_ISSET_ID = 18;
  private static final int __CASHIN_ISSET_ID = 19;
  private static final int __COMMISSION_ISSET_ID = 20;
  private static final int __CLOSEPROFIT_ISSET_ID = 21;
  private static final int __POSITIONPROFIT_ISSET_ID = 22;
  private static final int __PRESETTLEMENTPRICE_ISSET_ID = 23;
  private static final int __SETTLEMENTPRICE_ISSET_ID = 24;
  private static final int __SETTLEMENTID_ISSET_ID = 25;
  private static final int __OPENCOST_ISSET_ID = 26;
  private static final int __EXCHANGEMARGIN_ISSET_ID = 27;
  private static final int __COMBPOSITION_ISSET_ID = 28;
  private static final int __COMBLONGFROZEN_ISSET_ID = 29;
  private static final int __COMBSHORTFROZEN_ISSET_ID = 30;
  private static final int __CLOSEPROFITBYDATE_ISSET_ID = 31;
  private static final int __CLOSEPROFITBYTRADE_ISSET_ID = 32;
  private static final int __TODAYPOSITION_ISSET_ID = 33;
  private static final int __MARGINRATEBYMONEY_ISSET_ID = 34;
  private static final int __MARGINRATEBYVOLUME_ISSET_ID = 35;
  private static final int __STRIKEFROZEN_ISSET_ID = 36;
  private static final int __STRIKEFROZENAMOUNT_ISSET_ID = 37;
  private static final int __ABANDONFROZEN_ISSET_ID = 38;
  private static final int __SLEDACCOUNTID_ISSET_ID = 39;
  private long __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.INSTRUMENT_ID,_Fields.BROKER_ID,_Fields.INVESTOR_ID,_Fields.POSI_DIRECTION,_Fields.HEDGE_FLAG,_Fields.POSITION_DATE,_Fields.YD_POSITION,_Fields.POSITION,_Fields.LONG_FROZEN,_Fields.SHORT_FROZEN,_Fields.LONG_FROZEN_AMOUNT,_Fields.SHORT_FROZEN_AMOUNT,_Fields.OPEN_VOLUME,_Fields.CLOSE_VOLUME,_Fields.OPEN_AMOUNT,_Fields.CLOSE_AMOUNT,_Fields.POSITION_COST,_Fields.PRE_MARGIN,_Fields.USE_MARGIN,_Fields.FROZEN_MARGIN,_Fields.FROZEN_CASH,_Fields.FROZEN_COMMISSION,_Fields.CASH_IN,_Fields.COMMISSION,_Fields.CLOSE_PROFIT,_Fields.POSITION_PROFIT,_Fields.PRE_SETTLEMENT_PRICE,_Fields.SETTLEMENT_PRICE,_Fields.TRADING_DAY,_Fields.SETTLEMENT_ID,_Fields.OPEN_COST,_Fields.EXCHANGE_MARGIN,_Fields.COMB_POSITION,_Fields.COMB_LONG_FROZEN,_Fields.COMB_SHORT_FROZEN,_Fields.CLOSE_PROFIT_BY_DATE,_Fields.CLOSE_PROFIT_BY_TRADE,_Fields.TODAY_POSITION,_Fields.MARGIN_RATE_BY_MONEY,_Fields.MARGIN_RATE_BY_VOLUME,_Fields.STRIKE_FROZEN,_Fields.STRIKE_FROZEN_AMOUNT,_Fields.ABANDON_FROZEN,_Fields.SLED_ACCOUNT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVESTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("investorID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSI_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("posiDirection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("hedgeFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.POSITION_DATE, new org.apache.thrift.meta_data.FieldMetaData("positionDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.YD_POSITION, new org.apache.thrift.meta_data.FieldMetaData("ydPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LONG_FROZEN, new org.apache.thrift.meta_data.FieldMetaData("longFrozen", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHORT_FROZEN, new org.apache.thrift.meta_data.FieldMetaData("shortFrozen", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LONG_FROZEN_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("longFrozenAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHORT_FROZEN_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("shortFrozenAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPEN_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("openVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLOSE_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("closeVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("openAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("closeAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_COST, new org.apache.thrift.meta_data.FieldMetaData("positionCost", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("preMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("useMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("frozenMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_CASH, new org.apache.thrift.meta_data.FieldMetaData("frozenCash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("frozenCommission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASH_IN, new org.apache.thrift.meta_data.FieldMetaData("cashIn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("commission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("closeProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("positionProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRE_SETTLEMENT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("preSettlementPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SETTLEMENT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("settlementPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRADING_DAY, new org.apache.thrift.meta_data.FieldMetaData("tradingDay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("settlementID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN_COST, new org.apache.thrift.meta_data.FieldMetaData("openCost", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXCHANGE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("exchangeMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMB_POSITION, new org.apache.thrift.meta_data.FieldMetaData("combPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMB_LONG_FROZEN, new org.apache.thrift.meta_data.FieldMetaData("combLongFrozen", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMB_SHORT_FROZEN, new org.apache.thrift.meta_data.FieldMetaData("combShortFrozen", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLOSE_PROFIT_BY_DATE, new org.apache.thrift.meta_data.FieldMetaData("closeProfitByDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_PROFIT_BY_TRADE, new org.apache.thrift.meta_data.FieldMetaData("closeProfitByTrade", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TODAY_POSITION, new org.apache.thrift.meta_data.FieldMetaData("todayPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MARGIN_RATE_BY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("marginRateByMoney", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MARGIN_RATE_BY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("marginRateByVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRIKE_FROZEN, new org.apache.thrift.meta_data.FieldMetaData("strikeFrozen", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRIKE_FROZEN_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("strikeFrozenAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ABANDON_FROZEN, new org.apache.thrift.meta_data.FieldMetaData("abandonFrozen", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CtpInvestorPosition.class, metaDataMap);
  }

  public CtpInvestorPosition() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CtpInvestorPosition(CtpInvestorPosition other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetBrokerID()) {
      this.brokerID = other.brokerID;
    }
    if (other.isSetInvestorID()) {
      this.investorID = other.investorID;
    }
    this.posiDirection = other.posiDirection;
    this.hedgeFlag = other.hedgeFlag;
    this.positionDate = other.positionDate;
    this.ydPosition = other.ydPosition;
    this.position = other.position;
    this.longFrozen = other.longFrozen;
    this.shortFrozen = other.shortFrozen;
    this.longFrozenAmount = other.longFrozenAmount;
    this.shortFrozenAmount = other.shortFrozenAmount;
    this.openVolume = other.openVolume;
    this.closeVolume = other.closeVolume;
    this.openAmount = other.openAmount;
    this.closeAmount = other.closeAmount;
    this.positionCost = other.positionCost;
    this.preMargin = other.preMargin;
    this.useMargin = other.useMargin;
    this.frozenMargin = other.frozenMargin;
    this.frozenCash = other.frozenCash;
    this.frozenCommission = other.frozenCommission;
    this.cashIn = other.cashIn;
    this.commission = other.commission;
    this.closeProfit = other.closeProfit;
    this.positionProfit = other.positionProfit;
    this.preSettlementPrice = other.preSettlementPrice;
    this.settlementPrice = other.settlementPrice;
    if (other.isSetTradingDay()) {
      this.tradingDay = other.tradingDay;
    }
    this.settlementID = other.settlementID;
    this.openCost = other.openCost;
    this.exchangeMargin = other.exchangeMargin;
    this.combPosition = other.combPosition;
    this.combLongFrozen = other.combLongFrozen;
    this.combShortFrozen = other.combShortFrozen;
    this.closeProfitByDate = other.closeProfitByDate;
    this.closeProfitByTrade = other.closeProfitByTrade;
    this.todayPosition = other.todayPosition;
    this.marginRateByMoney = other.marginRateByMoney;
    this.marginRateByVolume = other.marginRateByVolume;
    this.strikeFrozen = other.strikeFrozen;
    this.strikeFrozenAmount = other.strikeFrozenAmount;
    this.abandonFrozen = other.abandonFrozen;
    this.sledAccountId = other.sledAccountId;
  }

  public CtpInvestorPosition deepCopy() {
    return new CtpInvestorPosition(this);
  }

  @Override
  public void clear() {
    this.instrumentID = null;
    this.brokerID = null;
    this.investorID = null;
    setPosiDirectionIsSet(false);
    this.posiDirection = 0;
    setHedgeFlagIsSet(false);
    this.hedgeFlag = 0;
    setPositionDateIsSet(false);
    this.positionDate = 0;
    setYdPositionIsSet(false);
    this.ydPosition = 0;
    setPositionIsSet(false);
    this.position = 0;
    setLongFrozenIsSet(false);
    this.longFrozen = 0;
    setShortFrozenIsSet(false);
    this.shortFrozen = 0;
    setLongFrozenAmountIsSet(false);
    this.longFrozenAmount = 0.0;
    setShortFrozenAmountIsSet(false);
    this.shortFrozenAmount = 0.0;
    setOpenVolumeIsSet(false);
    this.openVolume = 0;
    setCloseVolumeIsSet(false);
    this.closeVolume = 0;
    setOpenAmountIsSet(false);
    this.openAmount = 0.0;
    setCloseAmountIsSet(false);
    this.closeAmount = 0.0;
    setPositionCostIsSet(false);
    this.positionCost = 0.0;
    setPreMarginIsSet(false);
    this.preMargin = 0.0;
    setUseMarginIsSet(false);
    this.useMargin = 0.0;
    setFrozenMarginIsSet(false);
    this.frozenMargin = 0.0;
    setFrozenCashIsSet(false);
    this.frozenCash = 0.0;
    setFrozenCommissionIsSet(false);
    this.frozenCommission = 0.0;
    setCashInIsSet(false);
    this.cashIn = 0.0;
    setCommissionIsSet(false);
    this.commission = 0.0;
    setCloseProfitIsSet(false);
    this.closeProfit = 0.0;
    setPositionProfitIsSet(false);
    this.positionProfit = 0.0;
    setPreSettlementPriceIsSet(false);
    this.preSettlementPrice = 0.0;
    setSettlementPriceIsSet(false);
    this.settlementPrice = 0.0;
    this.tradingDay = null;
    setSettlementIDIsSet(false);
    this.settlementID = 0;
    setOpenCostIsSet(false);
    this.openCost = 0.0;
    setExchangeMarginIsSet(false);
    this.exchangeMargin = 0.0;
    setCombPositionIsSet(false);
    this.combPosition = 0;
    setCombLongFrozenIsSet(false);
    this.combLongFrozen = 0;
    setCombShortFrozenIsSet(false);
    this.combShortFrozen = 0;
    setCloseProfitByDateIsSet(false);
    this.closeProfitByDate = 0.0;
    setCloseProfitByTradeIsSet(false);
    this.closeProfitByTrade = 0.0;
    setTodayPositionIsSet(false);
    this.todayPosition = 0;
    setMarginRateByMoneyIsSet(false);
    this.marginRateByMoney = 0.0;
    setMarginRateByVolumeIsSet(false);
    this.marginRateByVolume = 0.0;
    setStrikeFrozenIsSet(false);
    this.strikeFrozen = 0;
    setStrikeFrozenAmountIsSet(false);
    this.strikeFrozenAmount = 0.0;
    setAbandonFrozenIsSet(false);
    this.abandonFrozen = 0;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CtpInvestorPosition setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  public String getBrokerID() {
    return this.brokerID;
  }

  public CtpInvestorPosition setBrokerID(String brokerID) {
    this.brokerID = brokerID;
    return this;
  }

  public void unsetBrokerID() {
    this.brokerID = null;
  }

  /** Returns true if field brokerID is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerID() {
    return this.brokerID != null;
  }

  public void setBrokerIDIsSet(boolean value) {
    if (!value) {
      this.brokerID = null;
    }
  }

  public String getInvestorID() {
    return this.investorID;
  }

  public CtpInvestorPosition setInvestorID(String investorID) {
    this.investorID = investorID;
    return this;
  }

  public void unsetInvestorID() {
    this.investorID = null;
  }

  /** Returns true if field investorID is set (has been assigned a value) and false otherwise */
  public boolean isSetInvestorID() {
    return this.investorID != null;
  }

  public void setInvestorIDIsSet(boolean value) {
    if (!value) {
      this.investorID = null;
    }
  }

  public byte getPosiDirection() {
    return this.posiDirection;
  }

  public CtpInvestorPosition setPosiDirection(byte posiDirection) {
    this.posiDirection = posiDirection;
    setPosiDirectionIsSet(true);
    return this;
  }

  public void unsetPosiDirection() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSIDIRECTION_ISSET_ID);
  }

  /** Returns true if field posiDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetPosiDirection() {
    return EncodingUtils.testBit(__isset_bitfield, __POSIDIRECTION_ISSET_ID);
  }

  public void setPosiDirectionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSIDIRECTION_ISSET_ID, value);
  }

  public byte getHedgeFlag() {
    return this.hedgeFlag;
  }

  public CtpInvestorPosition setHedgeFlag(byte hedgeFlag) {
    this.hedgeFlag = hedgeFlag;
    setHedgeFlagIsSet(true);
    return this;
  }

  public void unsetHedgeFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEDGEFLAG_ISSET_ID);
  }

  /** Returns true if field hedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetHedgeFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __HEDGEFLAG_ISSET_ID);
  }

  public void setHedgeFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEDGEFLAG_ISSET_ID, value);
  }

  public byte getPositionDate() {
    return this.positionDate;
  }

  public CtpInvestorPosition setPositionDate(byte positionDate) {
    this.positionDate = positionDate;
    setPositionDateIsSet(true);
    return this;
  }

  public void unsetPositionDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONDATE_ISSET_ID);
  }

  /** Returns true if field positionDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionDate() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONDATE_ISSET_ID);
  }

  public void setPositionDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONDATE_ISSET_ID, value);
  }

  public int getYdPosition() {
    return this.ydPosition;
  }

  public CtpInvestorPosition setYdPosition(int ydPosition) {
    this.ydPosition = ydPosition;
    setYdPositionIsSet(true);
    return this;
  }

  public void unsetYdPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YDPOSITION_ISSET_ID);
  }

  /** Returns true if field ydPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetYdPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __YDPOSITION_ISSET_ID);
  }

  public void setYdPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YDPOSITION_ISSET_ID, value);
  }

  public int getPosition() {
    return this.position;
  }

  public CtpInvestorPosition setPosition(int position) {
    this.position = position;
    setPositionIsSet(true);
    return this;
  }

  public void unsetPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  public void setPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
  }

  public int getLongFrozen() {
    return this.longFrozen;
  }

  public CtpInvestorPosition setLongFrozen(int longFrozen) {
    this.longFrozen = longFrozen;
    setLongFrozenIsSet(true);
    return this;
  }

  public void unsetLongFrozen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGFROZEN_ISSET_ID);
  }

  /** Returns true if field longFrozen is set (has been assigned a value) and false otherwise */
  public boolean isSetLongFrozen() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGFROZEN_ISSET_ID);
  }

  public void setLongFrozenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGFROZEN_ISSET_ID, value);
  }

  public int getShortFrozen() {
    return this.shortFrozen;
  }

  public CtpInvestorPosition setShortFrozen(int shortFrozen) {
    this.shortFrozen = shortFrozen;
    setShortFrozenIsSet(true);
    return this;
  }

  public void unsetShortFrozen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHORTFROZEN_ISSET_ID);
  }

  /** Returns true if field shortFrozen is set (has been assigned a value) and false otherwise */
  public boolean isSetShortFrozen() {
    return EncodingUtils.testBit(__isset_bitfield, __SHORTFROZEN_ISSET_ID);
  }

  public void setShortFrozenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHORTFROZEN_ISSET_ID, value);
  }

  public double getLongFrozenAmount() {
    return this.longFrozenAmount;
  }

  public CtpInvestorPosition setLongFrozenAmount(double longFrozenAmount) {
    this.longFrozenAmount = longFrozenAmount;
    setLongFrozenAmountIsSet(true);
    return this;
  }

  public void unsetLongFrozenAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGFROZENAMOUNT_ISSET_ID);
  }

  /** Returns true if field longFrozenAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetLongFrozenAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGFROZENAMOUNT_ISSET_ID);
  }

  public void setLongFrozenAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGFROZENAMOUNT_ISSET_ID, value);
  }

  public double getShortFrozenAmount() {
    return this.shortFrozenAmount;
  }

  public CtpInvestorPosition setShortFrozenAmount(double shortFrozenAmount) {
    this.shortFrozenAmount = shortFrozenAmount;
    setShortFrozenAmountIsSet(true);
    return this;
  }

  public void unsetShortFrozenAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHORTFROZENAMOUNT_ISSET_ID);
  }

  /** Returns true if field shortFrozenAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetShortFrozenAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __SHORTFROZENAMOUNT_ISSET_ID);
  }

  public void setShortFrozenAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHORTFROZENAMOUNT_ISSET_ID, value);
  }

  public int getOpenVolume() {
    return this.openVolume;
  }

  public CtpInvestorPosition setOpenVolume(int openVolume) {
    this.openVolume = openVolume;
    setOpenVolumeIsSet(true);
    return this;
  }

  public void unsetOpenVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENVOLUME_ISSET_ID);
  }

  /** Returns true if field openVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENVOLUME_ISSET_ID);
  }

  public void setOpenVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENVOLUME_ISSET_ID, value);
  }

  public int getCloseVolume() {
    return this.closeVolume;
  }

  public CtpInvestorPosition setCloseVolume(int closeVolume) {
    this.closeVolume = closeVolume;
    setCloseVolumeIsSet(true);
    return this;
  }

  public void unsetCloseVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEVOLUME_ISSET_ID);
  }

  /** Returns true if field closeVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEVOLUME_ISSET_ID);
  }

  public void setCloseVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEVOLUME_ISSET_ID, value);
  }

  public double getOpenAmount() {
    return this.openAmount;
  }

  public CtpInvestorPosition setOpenAmount(double openAmount) {
    this.openAmount = openAmount;
    setOpenAmountIsSet(true);
    return this;
  }

  public void unsetOpenAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENAMOUNT_ISSET_ID);
  }

  /** Returns true if field openAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENAMOUNT_ISSET_ID);
  }

  public void setOpenAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENAMOUNT_ISSET_ID, value);
  }

  public double getCloseAmount() {
    return this.closeAmount;
  }

  public CtpInvestorPosition setCloseAmount(double closeAmount) {
    this.closeAmount = closeAmount;
    setCloseAmountIsSet(true);
    return this;
  }

  public void unsetCloseAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEAMOUNT_ISSET_ID);
  }

  /** Returns true if field closeAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEAMOUNT_ISSET_ID);
  }

  public void setCloseAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEAMOUNT_ISSET_ID, value);
  }

  public double getPositionCost() {
    return this.positionCost;
  }

  public CtpInvestorPosition setPositionCost(double positionCost) {
    this.positionCost = positionCost;
    setPositionCostIsSet(true);
    return this;
  }

  public void unsetPositionCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONCOST_ISSET_ID);
  }

  /** Returns true if field positionCost is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionCost() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONCOST_ISSET_ID);
  }

  public void setPositionCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONCOST_ISSET_ID, value);
  }

  public double getPreMargin() {
    return this.preMargin;
  }

  public CtpInvestorPosition setPreMargin(double preMargin) {
    this.preMargin = preMargin;
    setPreMarginIsSet(true);
    return this;
  }

  public void unsetPreMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREMARGIN_ISSET_ID);
  }

  /** Returns true if field preMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetPreMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __PREMARGIN_ISSET_ID);
  }

  public void setPreMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREMARGIN_ISSET_ID, value);
  }

  public double getUseMargin() {
    return this.useMargin;
  }

  public CtpInvestorPosition setUseMargin(double useMargin) {
    this.useMargin = useMargin;
    setUseMarginIsSet(true);
    return this;
  }

  public void unsetUseMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  /** Returns true if field useMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetUseMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  public void setUseMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEMARGIN_ISSET_ID, value);
  }

  public double getFrozenMargin() {
    return this.frozenMargin;
  }

  public CtpInvestorPosition setFrozenMargin(double frozenMargin) {
    this.frozenMargin = frozenMargin;
    setFrozenMarginIsSet(true);
    return this;
  }

  public void unsetFrozenMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  /** Returns true if field frozenMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  public void setFrozenMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID, value);
  }

  public double getFrozenCash() {
    return this.frozenCash;
  }

  public CtpInvestorPosition setFrozenCash(double frozenCash) {
    this.frozenCash = frozenCash;
    setFrozenCashIsSet(true);
    return this;
  }

  public void unsetFrozenCash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENCASH_ISSET_ID);
  }

  /** Returns true if field frozenCash is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenCash() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENCASH_ISSET_ID);
  }

  public void setFrozenCashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENCASH_ISSET_ID, value);
  }

  public double getFrozenCommission() {
    return this.frozenCommission;
  }

  public CtpInvestorPosition setFrozenCommission(double frozenCommission) {
    this.frozenCommission = frozenCommission;
    setFrozenCommissionIsSet(true);
    return this;
  }

  public void unsetFrozenCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID);
  }

  /** Returns true if field frozenCommission is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID);
  }

  public void setFrozenCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID, value);
  }

  public double getCashIn() {
    return this.cashIn;
  }

  public CtpInvestorPosition setCashIn(double cashIn) {
    this.cashIn = cashIn;
    setCashInIsSet(true);
    return this;
  }

  public void unsetCashIn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHIN_ISSET_ID);
  }

  /** Returns true if field cashIn is set (has been assigned a value) and false otherwise */
  public boolean isSetCashIn() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHIN_ISSET_ID);
  }

  public void setCashInIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHIN_ISSET_ID, value);
  }

  public double getCommission() {
    return this.commission;
  }

  public CtpInvestorPosition setCommission(double commission) {
    this.commission = commission;
    setCommissionIsSet(true);
    return this;
  }

  public void unsetCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  /** Returns true if field commission is set (has been assigned a value) and false otherwise */
  public boolean isSetCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  public void setCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMISSION_ISSET_ID, value);
  }

  public double getCloseProfit() {
    return this.closeProfit;
  }

  public CtpInvestorPosition setCloseProfit(double closeProfit) {
    this.closeProfit = closeProfit;
    setCloseProfitIsSet(true);
    return this;
  }

  public void unsetCloseProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  /** Returns true if field closeProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  public void setCloseProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID, value);
  }

  public double getPositionProfit() {
    return this.positionProfit;
  }

  public CtpInvestorPosition setPositionProfit(double positionProfit) {
    this.positionProfit = positionProfit;
    setPositionProfitIsSet(true);
    return this;
  }

  public void unsetPositionProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  /** Returns true if field positionProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  public void setPositionProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID, value);
  }

  public double getPreSettlementPrice() {
    return this.preSettlementPrice;
  }

  public CtpInvestorPosition setPreSettlementPrice(double preSettlementPrice) {
    this.preSettlementPrice = preSettlementPrice;
    setPreSettlementPriceIsSet(true);
    return this;
  }

  public void unsetPreSettlementPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRESETTLEMENTPRICE_ISSET_ID);
  }

  /** Returns true if field preSettlementPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetPreSettlementPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRESETTLEMENTPRICE_ISSET_ID);
  }

  public void setPreSettlementPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRESETTLEMENTPRICE_ISSET_ID, value);
  }

  public double getSettlementPrice() {
    return this.settlementPrice;
  }

  public CtpInvestorPosition setSettlementPrice(double settlementPrice) {
    this.settlementPrice = settlementPrice;
    setSettlementPriceIsSet(true);
    return this;
  }

  public void unsetSettlementPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTPRICE_ISSET_ID);
  }

  /** Returns true if field settlementPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTPRICE_ISSET_ID);
  }

  public void setSettlementPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTPRICE_ISSET_ID, value);
  }

  public String getTradingDay() {
    return this.tradingDay;
  }

  public CtpInvestorPosition setTradingDay(String tradingDay) {
    this.tradingDay = tradingDay;
    return this;
  }

  public void unsetTradingDay() {
    this.tradingDay = null;
  }

  /** Returns true if field tradingDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTradingDay() {
    return this.tradingDay != null;
  }

  public void setTradingDayIsSet(boolean value) {
    if (!value) {
      this.tradingDay = null;
    }
  }

  public int getSettlementID() {
    return this.settlementID;
  }

  public CtpInvestorPosition setSettlementID(int settlementID) {
    this.settlementID = settlementID;
    setSettlementIDIsSet(true);
    return this;
  }

  public void unsetSettlementID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  /** Returns true if field settlementID is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementID() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  public void setSettlementIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID, value);
  }

  public double getOpenCost() {
    return this.openCost;
  }

  public CtpInvestorPosition setOpenCost(double openCost) {
    this.openCost = openCost;
    setOpenCostIsSet(true);
    return this;
  }

  public void unsetOpenCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENCOST_ISSET_ID);
  }

  /** Returns true if field openCost is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenCost() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENCOST_ISSET_ID);
  }

  public void setOpenCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENCOST_ISSET_ID, value);
  }

  public double getExchangeMargin() {
    return this.exchangeMargin;
  }

  public CtpInvestorPosition setExchangeMargin(double exchangeMargin) {
    this.exchangeMargin = exchangeMargin;
    setExchangeMarginIsSet(true);
    return this;
  }

  public void unsetExchangeMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHANGEMARGIN_ISSET_ID);
  }

  /** Returns true if field exchangeMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHANGEMARGIN_ISSET_ID);
  }

  public void setExchangeMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHANGEMARGIN_ISSET_ID, value);
  }

  public int getCombPosition() {
    return this.combPosition;
  }

  public CtpInvestorPosition setCombPosition(int combPosition) {
    this.combPosition = combPosition;
    setCombPositionIsSet(true);
    return this;
  }

  public void unsetCombPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMBPOSITION_ISSET_ID);
  }

  /** Returns true if field combPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetCombPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __COMBPOSITION_ISSET_ID);
  }

  public void setCombPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMBPOSITION_ISSET_ID, value);
  }

  public int getCombLongFrozen() {
    return this.combLongFrozen;
  }

  public CtpInvestorPosition setCombLongFrozen(int combLongFrozen) {
    this.combLongFrozen = combLongFrozen;
    setCombLongFrozenIsSet(true);
    return this;
  }

  public void unsetCombLongFrozen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMBLONGFROZEN_ISSET_ID);
  }

  /** Returns true if field combLongFrozen is set (has been assigned a value) and false otherwise */
  public boolean isSetCombLongFrozen() {
    return EncodingUtils.testBit(__isset_bitfield, __COMBLONGFROZEN_ISSET_ID);
  }

  public void setCombLongFrozenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMBLONGFROZEN_ISSET_ID, value);
  }

  public int getCombShortFrozen() {
    return this.combShortFrozen;
  }

  public CtpInvestorPosition setCombShortFrozen(int combShortFrozen) {
    this.combShortFrozen = combShortFrozen;
    setCombShortFrozenIsSet(true);
    return this;
  }

  public void unsetCombShortFrozen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMBSHORTFROZEN_ISSET_ID);
  }

  /** Returns true if field combShortFrozen is set (has been assigned a value) and false otherwise */
  public boolean isSetCombShortFrozen() {
    return EncodingUtils.testBit(__isset_bitfield, __COMBSHORTFROZEN_ISSET_ID);
  }

  public void setCombShortFrozenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMBSHORTFROZEN_ISSET_ID, value);
  }

  public double getCloseProfitByDate() {
    return this.closeProfitByDate;
  }

  public CtpInvestorPosition setCloseProfitByDate(double closeProfitByDate) {
    this.closeProfitByDate = closeProfitByDate;
    setCloseProfitByDateIsSet(true);
    return this;
  }

  public void unsetCloseProfitByDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFITBYDATE_ISSET_ID);
  }

  /** Returns true if field closeProfitByDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfitByDate() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFITBYDATE_ISSET_ID);
  }

  public void setCloseProfitByDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFITBYDATE_ISSET_ID, value);
  }

  public double getCloseProfitByTrade() {
    return this.closeProfitByTrade;
  }

  public CtpInvestorPosition setCloseProfitByTrade(double closeProfitByTrade) {
    this.closeProfitByTrade = closeProfitByTrade;
    setCloseProfitByTradeIsSet(true);
    return this;
  }

  public void unsetCloseProfitByTrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFITBYTRADE_ISSET_ID);
  }

  /** Returns true if field closeProfitByTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfitByTrade() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFITBYTRADE_ISSET_ID);
  }

  public void setCloseProfitByTradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFITBYTRADE_ISSET_ID, value);
  }

  public int getTodayPosition() {
    return this.todayPosition;
  }

  public CtpInvestorPosition setTodayPosition(int todayPosition) {
    this.todayPosition = todayPosition;
    setTodayPositionIsSet(true);
    return this;
  }

  public void unsetTodayPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TODAYPOSITION_ISSET_ID);
  }

  /** Returns true if field todayPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetTodayPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __TODAYPOSITION_ISSET_ID);
  }

  public void setTodayPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TODAYPOSITION_ISSET_ID, value);
  }

  public double getMarginRateByMoney() {
    return this.marginRateByMoney;
  }

  public CtpInvestorPosition setMarginRateByMoney(double marginRateByMoney) {
    this.marginRateByMoney = marginRateByMoney;
    setMarginRateByMoneyIsSet(true);
    return this;
  }

  public void unsetMarginRateByMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARGINRATEBYMONEY_ISSET_ID);
  }

  /** Returns true if field marginRateByMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetMarginRateByMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MARGINRATEBYMONEY_ISSET_ID);
  }

  public void setMarginRateByMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARGINRATEBYMONEY_ISSET_ID, value);
  }

  public double getMarginRateByVolume() {
    return this.marginRateByVolume;
  }

  public CtpInvestorPosition setMarginRateByVolume(double marginRateByVolume) {
    this.marginRateByVolume = marginRateByVolume;
    setMarginRateByVolumeIsSet(true);
    return this;
  }

  public void unsetMarginRateByVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARGINRATEBYVOLUME_ISSET_ID);
  }

  /** Returns true if field marginRateByVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMarginRateByVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MARGINRATEBYVOLUME_ISSET_ID);
  }

  public void setMarginRateByVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARGINRATEBYVOLUME_ISSET_ID, value);
  }

  public int getStrikeFrozen() {
    return this.strikeFrozen;
  }

  public CtpInvestorPosition setStrikeFrozen(int strikeFrozen) {
    this.strikeFrozen = strikeFrozen;
    setStrikeFrozenIsSet(true);
    return this;
  }

  public void unsetStrikeFrozen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRIKEFROZEN_ISSET_ID);
  }

  /** Returns true if field strikeFrozen is set (has been assigned a value) and false otherwise */
  public boolean isSetStrikeFrozen() {
    return EncodingUtils.testBit(__isset_bitfield, __STRIKEFROZEN_ISSET_ID);
  }

  public void setStrikeFrozenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRIKEFROZEN_ISSET_ID, value);
  }

  public double getStrikeFrozenAmount() {
    return this.strikeFrozenAmount;
  }

  public CtpInvestorPosition setStrikeFrozenAmount(double strikeFrozenAmount) {
    this.strikeFrozenAmount = strikeFrozenAmount;
    setStrikeFrozenAmountIsSet(true);
    return this;
  }

  public void unsetStrikeFrozenAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRIKEFROZENAMOUNT_ISSET_ID);
  }

  /** Returns true if field strikeFrozenAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetStrikeFrozenAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __STRIKEFROZENAMOUNT_ISSET_ID);
  }

  public void setStrikeFrozenAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRIKEFROZENAMOUNT_ISSET_ID, value);
  }

  public int getAbandonFrozen() {
    return this.abandonFrozen;
  }

  public CtpInvestorPosition setAbandonFrozen(int abandonFrozen) {
    this.abandonFrozen = abandonFrozen;
    setAbandonFrozenIsSet(true);
    return this;
  }

  public void unsetAbandonFrozen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ABANDONFROZEN_ISSET_ID);
  }

  /** Returns true if field abandonFrozen is set (has been assigned a value) and false otherwise */
  public boolean isSetAbandonFrozen() {
    return EncodingUtils.testBit(__isset_bitfield, __ABANDONFROZEN_ISSET_ID);
  }

  public void setAbandonFrozenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ABANDONFROZEN_ISSET_ID, value);
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public CtpInvestorPosition setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerID();
      } else {
        setBrokerID((String)value);
      }
      break;

    case INVESTOR_ID:
      if (value == null) {
        unsetInvestorID();
      } else {
        setInvestorID((String)value);
      }
      break;

    case POSI_DIRECTION:
      if (value == null) {
        unsetPosiDirection();
      } else {
        setPosiDirection((Byte)value);
      }
      break;

    case HEDGE_FLAG:
      if (value == null) {
        unsetHedgeFlag();
      } else {
        setHedgeFlag((Byte)value);
      }
      break;

    case POSITION_DATE:
      if (value == null) {
        unsetPositionDate();
      } else {
        setPositionDate((Byte)value);
      }
      break;

    case YD_POSITION:
      if (value == null) {
        unsetYdPosition();
      } else {
        setYdPosition((Integer)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((Integer)value);
      }
      break;

    case LONG_FROZEN:
      if (value == null) {
        unsetLongFrozen();
      } else {
        setLongFrozen((Integer)value);
      }
      break;

    case SHORT_FROZEN:
      if (value == null) {
        unsetShortFrozen();
      } else {
        setShortFrozen((Integer)value);
      }
      break;

    case LONG_FROZEN_AMOUNT:
      if (value == null) {
        unsetLongFrozenAmount();
      } else {
        setLongFrozenAmount((Double)value);
      }
      break;

    case SHORT_FROZEN_AMOUNT:
      if (value == null) {
        unsetShortFrozenAmount();
      } else {
        setShortFrozenAmount((Double)value);
      }
      break;

    case OPEN_VOLUME:
      if (value == null) {
        unsetOpenVolume();
      } else {
        setOpenVolume((Integer)value);
      }
      break;

    case CLOSE_VOLUME:
      if (value == null) {
        unsetCloseVolume();
      } else {
        setCloseVolume((Integer)value);
      }
      break;

    case OPEN_AMOUNT:
      if (value == null) {
        unsetOpenAmount();
      } else {
        setOpenAmount((Double)value);
      }
      break;

    case CLOSE_AMOUNT:
      if (value == null) {
        unsetCloseAmount();
      } else {
        setCloseAmount((Double)value);
      }
      break;

    case POSITION_COST:
      if (value == null) {
        unsetPositionCost();
      } else {
        setPositionCost((Double)value);
      }
      break;

    case PRE_MARGIN:
      if (value == null) {
        unsetPreMargin();
      } else {
        setPreMargin((Double)value);
      }
      break;

    case USE_MARGIN:
      if (value == null) {
        unsetUseMargin();
      } else {
        setUseMargin((Double)value);
      }
      break;

    case FROZEN_MARGIN:
      if (value == null) {
        unsetFrozenMargin();
      } else {
        setFrozenMargin((Double)value);
      }
      break;

    case FROZEN_CASH:
      if (value == null) {
        unsetFrozenCash();
      } else {
        setFrozenCash((Double)value);
      }
      break;

    case FROZEN_COMMISSION:
      if (value == null) {
        unsetFrozenCommission();
      } else {
        setFrozenCommission((Double)value);
      }
      break;

    case CASH_IN:
      if (value == null) {
        unsetCashIn();
      } else {
        setCashIn((Double)value);
      }
      break;

    case COMMISSION:
      if (value == null) {
        unsetCommission();
      } else {
        setCommission((Double)value);
      }
      break;

    case CLOSE_PROFIT:
      if (value == null) {
        unsetCloseProfit();
      } else {
        setCloseProfit((Double)value);
      }
      break;

    case POSITION_PROFIT:
      if (value == null) {
        unsetPositionProfit();
      } else {
        setPositionProfit((Double)value);
      }
      break;

    case PRE_SETTLEMENT_PRICE:
      if (value == null) {
        unsetPreSettlementPrice();
      } else {
        setPreSettlementPrice((Double)value);
      }
      break;

    case SETTLEMENT_PRICE:
      if (value == null) {
        unsetSettlementPrice();
      } else {
        setSettlementPrice((Double)value);
      }
      break;

    case TRADING_DAY:
      if (value == null) {
        unsetTradingDay();
      } else {
        setTradingDay((String)value);
      }
      break;

    case SETTLEMENT_ID:
      if (value == null) {
        unsetSettlementID();
      } else {
        setSettlementID((Integer)value);
      }
      break;

    case OPEN_COST:
      if (value == null) {
        unsetOpenCost();
      } else {
        setOpenCost((Double)value);
      }
      break;

    case EXCHANGE_MARGIN:
      if (value == null) {
        unsetExchangeMargin();
      } else {
        setExchangeMargin((Double)value);
      }
      break;

    case COMB_POSITION:
      if (value == null) {
        unsetCombPosition();
      } else {
        setCombPosition((Integer)value);
      }
      break;

    case COMB_LONG_FROZEN:
      if (value == null) {
        unsetCombLongFrozen();
      } else {
        setCombLongFrozen((Integer)value);
      }
      break;

    case COMB_SHORT_FROZEN:
      if (value == null) {
        unsetCombShortFrozen();
      } else {
        setCombShortFrozen((Integer)value);
      }
      break;

    case CLOSE_PROFIT_BY_DATE:
      if (value == null) {
        unsetCloseProfitByDate();
      } else {
        setCloseProfitByDate((Double)value);
      }
      break;

    case CLOSE_PROFIT_BY_TRADE:
      if (value == null) {
        unsetCloseProfitByTrade();
      } else {
        setCloseProfitByTrade((Double)value);
      }
      break;

    case TODAY_POSITION:
      if (value == null) {
        unsetTodayPosition();
      } else {
        setTodayPosition((Integer)value);
      }
      break;

    case MARGIN_RATE_BY_MONEY:
      if (value == null) {
        unsetMarginRateByMoney();
      } else {
        setMarginRateByMoney((Double)value);
      }
      break;

    case MARGIN_RATE_BY_VOLUME:
      if (value == null) {
        unsetMarginRateByVolume();
      } else {
        setMarginRateByVolume((Double)value);
      }
      break;

    case STRIKE_FROZEN:
      if (value == null) {
        unsetStrikeFrozen();
      } else {
        setStrikeFrozen((Integer)value);
      }
      break;

    case STRIKE_FROZEN_AMOUNT:
      if (value == null) {
        unsetStrikeFrozenAmount();
      } else {
        setStrikeFrozenAmount((Double)value);
      }
      break;

    case ABANDON_FROZEN:
      if (value == null) {
        unsetAbandonFrozen();
      } else {
        setAbandonFrozen((Integer)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTRUMENT_ID:
      return getInstrumentID();

    case BROKER_ID:
      return getBrokerID();

    case INVESTOR_ID:
      return getInvestorID();

    case POSI_DIRECTION:
      return Byte.valueOf(getPosiDirection());

    case HEDGE_FLAG:
      return Byte.valueOf(getHedgeFlag());

    case POSITION_DATE:
      return Byte.valueOf(getPositionDate());

    case YD_POSITION:
      return Integer.valueOf(getYdPosition());

    case POSITION:
      return Integer.valueOf(getPosition());

    case LONG_FROZEN:
      return Integer.valueOf(getLongFrozen());

    case SHORT_FROZEN:
      return Integer.valueOf(getShortFrozen());

    case LONG_FROZEN_AMOUNT:
      return Double.valueOf(getLongFrozenAmount());

    case SHORT_FROZEN_AMOUNT:
      return Double.valueOf(getShortFrozenAmount());

    case OPEN_VOLUME:
      return Integer.valueOf(getOpenVolume());

    case CLOSE_VOLUME:
      return Integer.valueOf(getCloseVolume());

    case OPEN_AMOUNT:
      return Double.valueOf(getOpenAmount());

    case CLOSE_AMOUNT:
      return Double.valueOf(getCloseAmount());

    case POSITION_COST:
      return Double.valueOf(getPositionCost());

    case PRE_MARGIN:
      return Double.valueOf(getPreMargin());

    case USE_MARGIN:
      return Double.valueOf(getUseMargin());

    case FROZEN_MARGIN:
      return Double.valueOf(getFrozenMargin());

    case FROZEN_CASH:
      return Double.valueOf(getFrozenCash());

    case FROZEN_COMMISSION:
      return Double.valueOf(getFrozenCommission());

    case CASH_IN:
      return Double.valueOf(getCashIn());

    case COMMISSION:
      return Double.valueOf(getCommission());

    case CLOSE_PROFIT:
      return Double.valueOf(getCloseProfit());

    case POSITION_PROFIT:
      return Double.valueOf(getPositionProfit());

    case PRE_SETTLEMENT_PRICE:
      return Double.valueOf(getPreSettlementPrice());

    case SETTLEMENT_PRICE:
      return Double.valueOf(getSettlementPrice());

    case TRADING_DAY:
      return getTradingDay();

    case SETTLEMENT_ID:
      return Integer.valueOf(getSettlementID());

    case OPEN_COST:
      return Double.valueOf(getOpenCost());

    case EXCHANGE_MARGIN:
      return Double.valueOf(getExchangeMargin());

    case COMB_POSITION:
      return Integer.valueOf(getCombPosition());

    case COMB_LONG_FROZEN:
      return Integer.valueOf(getCombLongFrozen());

    case COMB_SHORT_FROZEN:
      return Integer.valueOf(getCombShortFrozen());

    case CLOSE_PROFIT_BY_DATE:
      return Double.valueOf(getCloseProfitByDate());

    case CLOSE_PROFIT_BY_TRADE:
      return Double.valueOf(getCloseProfitByTrade());

    case TODAY_POSITION:
      return Integer.valueOf(getTodayPosition());

    case MARGIN_RATE_BY_MONEY:
      return Double.valueOf(getMarginRateByMoney());

    case MARGIN_RATE_BY_VOLUME:
      return Double.valueOf(getMarginRateByVolume());

    case STRIKE_FROZEN:
      return Integer.valueOf(getStrikeFrozen());

    case STRIKE_FROZEN_AMOUNT:
      return Double.valueOf(getStrikeFrozenAmount());

    case ABANDON_FROZEN:
      return Integer.valueOf(getAbandonFrozen());

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case BROKER_ID:
      return isSetBrokerID();
    case INVESTOR_ID:
      return isSetInvestorID();
    case POSI_DIRECTION:
      return isSetPosiDirection();
    case HEDGE_FLAG:
      return isSetHedgeFlag();
    case POSITION_DATE:
      return isSetPositionDate();
    case YD_POSITION:
      return isSetYdPosition();
    case POSITION:
      return isSetPosition();
    case LONG_FROZEN:
      return isSetLongFrozen();
    case SHORT_FROZEN:
      return isSetShortFrozen();
    case LONG_FROZEN_AMOUNT:
      return isSetLongFrozenAmount();
    case SHORT_FROZEN_AMOUNT:
      return isSetShortFrozenAmount();
    case OPEN_VOLUME:
      return isSetOpenVolume();
    case CLOSE_VOLUME:
      return isSetCloseVolume();
    case OPEN_AMOUNT:
      return isSetOpenAmount();
    case CLOSE_AMOUNT:
      return isSetCloseAmount();
    case POSITION_COST:
      return isSetPositionCost();
    case PRE_MARGIN:
      return isSetPreMargin();
    case USE_MARGIN:
      return isSetUseMargin();
    case FROZEN_MARGIN:
      return isSetFrozenMargin();
    case FROZEN_CASH:
      return isSetFrozenCash();
    case FROZEN_COMMISSION:
      return isSetFrozenCommission();
    case CASH_IN:
      return isSetCashIn();
    case COMMISSION:
      return isSetCommission();
    case CLOSE_PROFIT:
      return isSetCloseProfit();
    case POSITION_PROFIT:
      return isSetPositionProfit();
    case PRE_SETTLEMENT_PRICE:
      return isSetPreSettlementPrice();
    case SETTLEMENT_PRICE:
      return isSetSettlementPrice();
    case TRADING_DAY:
      return isSetTradingDay();
    case SETTLEMENT_ID:
      return isSetSettlementID();
    case OPEN_COST:
      return isSetOpenCost();
    case EXCHANGE_MARGIN:
      return isSetExchangeMargin();
    case COMB_POSITION:
      return isSetCombPosition();
    case COMB_LONG_FROZEN:
      return isSetCombLongFrozen();
    case COMB_SHORT_FROZEN:
      return isSetCombShortFrozen();
    case CLOSE_PROFIT_BY_DATE:
      return isSetCloseProfitByDate();
    case CLOSE_PROFIT_BY_TRADE:
      return isSetCloseProfitByTrade();
    case TODAY_POSITION:
      return isSetTodayPosition();
    case MARGIN_RATE_BY_MONEY:
      return isSetMarginRateByMoney();
    case MARGIN_RATE_BY_VOLUME:
      return isSetMarginRateByVolume();
    case STRIKE_FROZEN:
      return isSetStrikeFrozen();
    case STRIKE_FROZEN_AMOUNT:
      return isSetStrikeFrozenAmount();
    case ABANDON_FROZEN:
      return isSetAbandonFrozen();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CtpInvestorPosition)
      return this.equals((CtpInvestorPosition)that);
    return false;
  }

  public boolean equals(CtpInvestorPosition that) {
    if (that == null)
      return false;

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_brokerID = true && this.isSetBrokerID();
    boolean that_present_brokerID = true && that.isSetBrokerID();
    if (this_present_brokerID || that_present_brokerID) {
      if (!(this_present_brokerID && that_present_brokerID))
        return false;
      if (!this.brokerID.equals(that.brokerID))
        return false;
    }

    boolean this_present_investorID = true && this.isSetInvestorID();
    boolean that_present_investorID = true && that.isSetInvestorID();
    if (this_present_investorID || that_present_investorID) {
      if (!(this_present_investorID && that_present_investorID))
        return false;
      if (!this.investorID.equals(that.investorID))
        return false;
    }

    boolean this_present_posiDirection = true && this.isSetPosiDirection();
    boolean that_present_posiDirection = true && that.isSetPosiDirection();
    if (this_present_posiDirection || that_present_posiDirection) {
      if (!(this_present_posiDirection && that_present_posiDirection))
        return false;
      if (this.posiDirection != that.posiDirection)
        return false;
    }

    boolean this_present_hedgeFlag = true && this.isSetHedgeFlag();
    boolean that_present_hedgeFlag = true && that.isSetHedgeFlag();
    if (this_present_hedgeFlag || that_present_hedgeFlag) {
      if (!(this_present_hedgeFlag && that_present_hedgeFlag))
        return false;
      if (this.hedgeFlag != that.hedgeFlag)
        return false;
    }

    boolean this_present_positionDate = true && this.isSetPositionDate();
    boolean that_present_positionDate = true && that.isSetPositionDate();
    if (this_present_positionDate || that_present_positionDate) {
      if (!(this_present_positionDate && that_present_positionDate))
        return false;
      if (this.positionDate != that.positionDate)
        return false;
    }

    boolean this_present_ydPosition = true && this.isSetYdPosition();
    boolean that_present_ydPosition = true && that.isSetYdPosition();
    if (this_present_ydPosition || that_present_ydPosition) {
      if (!(this_present_ydPosition && that_present_ydPosition))
        return false;
      if (this.ydPosition != that.ydPosition)
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (this.position != that.position)
        return false;
    }

    boolean this_present_longFrozen = true && this.isSetLongFrozen();
    boolean that_present_longFrozen = true && that.isSetLongFrozen();
    if (this_present_longFrozen || that_present_longFrozen) {
      if (!(this_present_longFrozen && that_present_longFrozen))
        return false;
      if (this.longFrozen != that.longFrozen)
        return false;
    }

    boolean this_present_shortFrozen = true && this.isSetShortFrozen();
    boolean that_present_shortFrozen = true && that.isSetShortFrozen();
    if (this_present_shortFrozen || that_present_shortFrozen) {
      if (!(this_present_shortFrozen && that_present_shortFrozen))
        return false;
      if (this.shortFrozen != that.shortFrozen)
        return false;
    }

    boolean this_present_longFrozenAmount = true && this.isSetLongFrozenAmount();
    boolean that_present_longFrozenAmount = true && that.isSetLongFrozenAmount();
    if (this_present_longFrozenAmount || that_present_longFrozenAmount) {
      if (!(this_present_longFrozenAmount && that_present_longFrozenAmount))
        return false;
      if (this.longFrozenAmount != that.longFrozenAmount)
        return false;
    }

    boolean this_present_shortFrozenAmount = true && this.isSetShortFrozenAmount();
    boolean that_present_shortFrozenAmount = true && that.isSetShortFrozenAmount();
    if (this_present_shortFrozenAmount || that_present_shortFrozenAmount) {
      if (!(this_present_shortFrozenAmount && that_present_shortFrozenAmount))
        return false;
      if (this.shortFrozenAmount != that.shortFrozenAmount)
        return false;
    }

    boolean this_present_openVolume = true && this.isSetOpenVolume();
    boolean that_present_openVolume = true && that.isSetOpenVolume();
    if (this_present_openVolume || that_present_openVolume) {
      if (!(this_present_openVolume && that_present_openVolume))
        return false;
      if (this.openVolume != that.openVolume)
        return false;
    }

    boolean this_present_closeVolume = true && this.isSetCloseVolume();
    boolean that_present_closeVolume = true && that.isSetCloseVolume();
    if (this_present_closeVolume || that_present_closeVolume) {
      if (!(this_present_closeVolume && that_present_closeVolume))
        return false;
      if (this.closeVolume != that.closeVolume)
        return false;
    }

    boolean this_present_openAmount = true && this.isSetOpenAmount();
    boolean that_present_openAmount = true && that.isSetOpenAmount();
    if (this_present_openAmount || that_present_openAmount) {
      if (!(this_present_openAmount && that_present_openAmount))
        return false;
      if (this.openAmount != that.openAmount)
        return false;
    }

    boolean this_present_closeAmount = true && this.isSetCloseAmount();
    boolean that_present_closeAmount = true && that.isSetCloseAmount();
    if (this_present_closeAmount || that_present_closeAmount) {
      if (!(this_present_closeAmount && that_present_closeAmount))
        return false;
      if (this.closeAmount != that.closeAmount)
        return false;
    }

    boolean this_present_positionCost = true && this.isSetPositionCost();
    boolean that_present_positionCost = true && that.isSetPositionCost();
    if (this_present_positionCost || that_present_positionCost) {
      if (!(this_present_positionCost && that_present_positionCost))
        return false;
      if (this.positionCost != that.positionCost)
        return false;
    }

    boolean this_present_preMargin = true && this.isSetPreMargin();
    boolean that_present_preMargin = true && that.isSetPreMargin();
    if (this_present_preMargin || that_present_preMargin) {
      if (!(this_present_preMargin && that_present_preMargin))
        return false;
      if (this.preMargin != that.preMargin)
        return false;
    }

    boolean this_present_useMargin = true && this.isSetUseMargin();
    boolean that_present_useMargin = true && that.isSetUseMargin();
    if (this_present_useMargin || that_present_useMargin) {
      if (!(this_present_useMargin && that_present_useMargin))
        return false;
      if (this.useMargin != that.useMargin)
        return false;
    }

    boolean this_present_frozenMargin = true && this.isSetFrozenMargin();
    boolean that_present_frozenMargin = true && that.isSetFrozenMargin();
    if (this_present_frozenMargin || that_present_frozenMargin) {
      if (!(this_present_frozenMargin && that_present_frozenMargin))
        return false;
      if (this.frozenMargin != that.frozenMargin)
        return false;
    }

    boolean this_present_frozenCash = true && this.isSetFrozenCash();
    boolean that_present_frozenCash = true && that.isSetFrozenCash();
    if (this_present_frozenCash || that_present_frozenCash) {
      if (!(this_present_frozenCash && that_present_frozenCash))
        return false;
      if (this.frozenCash != that.frozenCash)
        return false;
    }

    boolean this_present_frozenCommission = true && this.isSetFrozenCommission();
    boolean that_present_frozenCommission = true && that.isSetFrozenCommission();
    if (this_present_frozenCommission || that_present_frozenCommission) {
      if (!(this_present_frozenCommission && that_present_frozenCommission))
        return false;
      if (this.frozenCommission != that.frozenCommission)
        return false;
    }

    boolean this_present_cashIn = true && this.isSetCashIn();
    boolean that_present_cashIn = true && that.isSetCashIn();
    if (this_present_cashIn || that_present_cashIn) {
      if (!(this_present_cashIn && that_present_cashIn))
        return false;
      if (this.cashIn != that.cashIn)
        return false;
    }

    boolean this_present_commission = true && this.isSetCommission();
    boolean that_present_commission = true && that.isSetCommission();
    if (this_present_commission || that_present_commission) {
      if (!(this_present_commission && that_present_commission))
        return false;
      if (this.commission != that.commission)
        return false;
    }

    boolean this_present_closeProfit = true && this.isSetCloseProfit();
    boolean that_present_closeProfit = true && that.isSetCloseProfit();
    if (this_present_closeProfit || that_present_closeProfit) {
      if (!(this_present_closeProfit && that_present_closeProfit))
        return false;
      if (this.closeProfit != that.closeProfit)
        return false;
    }

    boolean this_present_positionProfit = true && this.isSetPositionProfit();
    boolean that_present_positionProfit = true && that.isSetPositionProfit();
    if (this_present_positionProfit || that_present_positionProfit) {
      if (!(this_present_positionProfit && that_present_positionProfit))
        return false;
      if (this.positionProfit != that.positionProfit)
        return false;
    }

    boolean this_present_preSettlementPrice = true && this.isSetPreSettlementPrice();
    boolean that_present_preSettlementPrice = true && that.isSetPreSettlementPrice();
    if (this_present_preSettlementPrice || that_present_preSettlementPrice) {
      if (!(this_present_preSettlementPrice && that_present_preSettlementPrice))
        return false;
      if (this.preSettlementPrice != that.preSettlementPrice)
        return false;
    }

    boolean this_present_settlementPrice = true && this.isSetSettlementPrice();
    boolean that_present_settlementPrice = true && that.isSetSettlementPrice();
    if (this_present_settlementPrice || that_present_settlementPrice) {
      if (!(this_present_settlementPrice && that_present_settlementPrice))
        return false;
      if (this.settlementPrice != that.settlementPrice)
        return false;
    }

    boolean this_present_tradingDay = true && this.isSetTradingDay();
    boolean that_present_tradingDay = true && that.isSetTradingDay();
    if (this_present_tradingDay || that_present_tradingDay) {
      if (!(this_present_tradingDay && that_present_tradingDay))
        return false;
      if (!this.tradingDay.equals(that.tradingDay))
        return false;
    }

    boolean this_present_settlementID = true && this.isSetSettlementID();
    boolean that_present_settlementID = true && that.isSetSettlementID();
    if (this_present_settlementID || that_present_settlementID) {
      if (!(this_present_settlementID && that_present_settlementID))
        return false;
      if (this.settlementID != that.settlementID)
        return false;
    }

    boolean this_present_openCost = true && this.isSetOpenCost();
    boolean that_present_openCost = true && that.isSetOpenCost();
    if (this_present_openCost || that_present_openCost) {
      if (!(this_present_openCost && that_present_openCost))
        return false;
      if (this.openCost != that.openCost)
        return false;
    }

    boolean this_present_exchangeMargin = true && this.isSetExchangeMargin();
    boolean that_present_exchangeMargin = true && that.isSetExchangeMargin();
    if (this_present_exchangeMargin || that_present_exchangeMargin) {
      if (!(this_present_exchangeMargin && that_present_exchangeMargin))
        return false;
      if (this.exchangeMargin != that.exchangeMargin)
        return false;
    }

    boolean this_present_combPosition = true && this.isSetCombPosition();
    boolean that_present_combPosition = true && that.isSetCombPosition();
    if (this_present_combPosition || that_present_combPosition) {
      if (!(this_present_combPosition && that_present_combPosition))
        return false;
      if (this.combPosition != that.combPosition)
        return false;
    }

    boolean this_present_combLongFrozen = true && this.isSetCombLongFrozen();
    boolean that_present_combLongFrozen = true && that.isSetCombLongFrozen();
    if (this_present_combLongFrozen || that_present_combLongFrozen) {
      if (!(this_present_combLongFrozen && that_present_combLongFrozen))
        return false;
      if (this.combLongFrozen != that.combLongFrozen)
        return false;
    }

    boolean this_present_combShortFrozen = true && this.isSetCombShortFrozen();
    boolean that_present_combShortFrozen = true && that.isSetCombShortFrozen();
    if (this_present_combShortFrozen || that_present_combShortFrozen) {
      if (!(this_present_combShortFrozen && that_present_combShortFrozen))
        return false;
      if (this.combShortFrozen != that.combShortFrozen)
        return false;
    }

    boolean this_present_closeProfitByDate = true && this.isSetCloseProfitByDate();
    boolean that_present_closeProfitByDate = true && that.isSetCloseProfitByDate();
    if (this_present_closeProfitByDate || that_present_closeProfitByDate) {
      if (!(this_present_closeProfitByDate && that_present_closeProfitByDate))
        return false;
      if (this.closeProfitByDate != that.closeProfitByDate)
        return false;
    }

    boolean this_present_closeProfitByTrade = true && this.isSetCloseProfitByTrade();
    boolean that_present_closeProfitByTrade = true && that.isSetCloseProfitByTrade();
    if (this_present_closeProfitByTrade || that_present_closeProfitByTrade) {
      if (!(this_present_closeProfitByTrade && that_present_closeProfitByTrade))
        return false;
      if (this.closeProfitByTrade != that.closeProfitByTrade)
        return false;
    }

    boolean this_present_todayPosition = true && this.isSetTodayPosition();
    boolean that_present_todayPosition = true && that.isSetTodayPosition();
    if (this_present_todayPosition || that_present_todayPosition) {
      if (!(this_present_todayPosition && that_present_todayPosition))
        return false;
      if (this.todayPosition != that.todayPosition)
        return false;
    }

    boolean this_present_marginRateByMoney = true && this.isSetMarginRateByMoney();
    boolean that_present_marginRateByMoney = true && that.isSetMarginRateByMoney();
    if (this_present_marginRateByMoney || that_present_marginRateByMoney) {
      if (!(this_present_marginRateByMoney && that_present_marginRateByMoney))
        return false;
      if (this.marginRateByMoney != that.marginRateByMoney)
        return false;
    }

    boolean this_present_marginRateByVolume = true && this.isSetMarginRateByVolume();
    boolean that_present_marginRateByVolume = true && that.isSetMarginRateByVolume();
    if (this_present_marginRateByVolume || that_present_marginRateByVolume) {
      if (!(this_present_marginRateByVolume && that_present_marginRateByVolume))
        return false;
      if (this.marginRateByVolume != that.marginRateByVolume)
        return false;
    }

    boolean this_present_strikeFrozen = true && this.isSetStrikeFrozen();
    boolean that_present_strikeFrozen = true && that.isSetStrikeFrozen();
    if (this_present_strikeFrozen || that_present_strikeFrozen) {
      if (!(this_present_strikeFrozen && that_present_strikeFrozen))
        return false;
      if (this.strikeFrozen != that.strikeFrozen)
        return false;
    }

    boolean this_present_strikeFrozenAmount = true && this.isSetStrikeFrozenAmount();
    boolean that_present_strikeFrozenAmount = true && that.isSetStrikeFrozenAmount();
    if (this_present_strikeFrozenAmount || that_present_strikeFrozenAmount) {
      if (!(this_present_strikeFrozenAmount && that_present_strikeFrozenAmount))
        return false;
      if (this.strikeFrozenAmount != that.strikeFrozenAmount)
        return false;
    }

    boolean this_present_abandonFrozen = true && this.isSetAbandonFrozen();
    boolean that_present_abandonFrozen = true && that.isSetAbandonFrozen();
    if (this_present_abandonFrozen || that_present_abandonFrozen) {
      if (!(this_present_abandonFrozen && that_present_abandonFrozen))
        return false;
      if (this.abandonFrozen != that.abandonFrozen)
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CtpInvestorPosition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerID()).compareTo(other.isSetBrokerID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerID, other.brokerID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvestorID()).compareTo(other.isSetInvestorID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvestorID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.investorID, other.investorID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosiDirection()).compareTo(other.isSetPosiDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosiDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posiDirection, other.posiDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHedgeFlag()).compareTo(other.isSetHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hedgeFlag, other.hedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionDate()).compareTo(other.isSetPositionDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionDate, other.positionDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYdPosition()).compareTo(other.isSetYdPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYdPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ydPosition, other.ydPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongFrozen()).compareTo(other.isSetLongFrozen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongFrozen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longFrozen, other.longFrozen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortFrozen()).compareTo(other.isSetShortFrozen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortFrozen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortFrozen, other.shortFrozen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongFrozenAmount()).compareTo(other.isSetLongFrozenAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongFrozenAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longFrozenAmount, other.longFrozenAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortFrozenAmount()).compareTo(other.isSetShortFrozenAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortFrozenAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortFrozenAmount, other.shortFrozenAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenVolume()).compareTo(other.isSetOpenVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openVolume, other.openVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseVolume()).compareTo(other.isSetCloseVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeVolume, other.closeVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenAmount()).compareTo(other.isSetOpenAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openAmount, other.openAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseAmount()).compareTo(other.isSetCloseAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeAmount, other.closeAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionCost()).compareTo(other.isSetPositionCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionCost, other.positionCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreMargin()).compareTo(other.isSetPreMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preMargin, other.preMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseMargin()).compareTo(other.isSetUseMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useMargin, other.useMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenMargin()).compareTo(other.isSetFrozenMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenMargin, other.frozenMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenCash()).compareTo(other.isSetFrozenCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenCash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenCash, other.frozenCash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenCommission()).compareTo(other.isSetFrozenCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenCommission, other.frozenCommission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashIn()).compareTo(other.isSetCashIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashIn, other.cashIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommission()).compareTo(other.isSetCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commission, other.commission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfit()).compareTo(other.isSetCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfit, other.closeProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionProfit()).compareTo(other.isSetPositionProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionProfit, other.positionProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreSettlementPrice()).compareTo(other.isSetPreSettlementPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreSettlementPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preSettlementPrice, other.preSettlementPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementPrice()).compareTo(other.isSetSettlementPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementPrice, other.settlementPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradingDay()).compareTo(other.isSetTradingDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradingDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradingDay, other.tradingDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementID()).compareTo(other.isSetSettlementID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementID, other.settlementID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenCost()).compareTo(other.isSetOpenCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openCost, other.openCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeMargin()).compareTo(other.isSetExchangeMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeMargin, other.exchangeMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombPosition()).compareTo(other.isSetCombPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combPosition, other.combPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombLongFrozen()).compareTo(other.isSetCombLongFrozen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombLongFrozen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combLongFrozen, other.combLongFrozen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombShortFrozen()).compareTo(other.isSetCombShortFrozen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombShortFrozen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combShortFrozen, other.combShortFrozen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfitByDate()).compareTo(other.isSetCloseProfitByDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfitByDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfitByDate, other.closeProfitByDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfitByTrade()).compareTo(other.isSetCloseProfitByTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfitByTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfitByTrade, other.closeProfitByTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTodayPosition()).compareTo(other.isSetTodayPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTodayPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todayPosition, other.todayPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarginRateByMoney()).compareTo(other.isSetMarginRateByMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarginRateByMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marginRateByMoney, other.marginRateByMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarginRateByVolume()).compareTo(other.isSetMarginRateByVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarginRateByVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marginRateByVolume, other.marginRateByVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrikeFrozen()).compareTo(other.isSetStrikeFrozen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrikeFrozen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strikeFrozen, other.strikeFrozen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrikeFrozenAmount()).compareTo(other.isSetStrikeFrozenAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrikeFrozenAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strikeFrozenAmount, other.strikeFrozenAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAbandonFrozen()).compareTo(other.isSetAbandonFrozen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbandonFrozen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abandonFrozen, other.abandonFrozen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CtpInvestorPosition(");
    boolean first = true;

    if (isSetInstrumentID()) {
      sb.append("instrumentID:");
      if (this.instrumentID == null) {
        sb.append("null");
      } else {
        sb.append(this.instrumentID);
      }
      first = false;
    }
    if (isSetBrokerID()) {
      if (!first) sb.append(", ");
      sb.append("brokerID:");
      if (this.brokerID == null) {
        sb.append("null");
      } else {
        sb.append(this.brokerID);
      }
      first = false;
    }
    if (isSetInvestorID()) {
      if (!first) sb.append(", ");
      sb.append("investorID:");
      if (this.investorID == null) {
        sb.append("null");
      } else {
        sb.append(this.investorID);
      }
      first = false;
    }
    if (isSetPosiDirection()) {
      if (!first) sb.append(", ");
      sb.append("posiDirection:");
      sb.append(this.posiDirection);
      first = false;
    }
    if (isSetHedgeFlag()) {
      if (!first) sb.append(", ");
      sb.append("hedgeFlag:");
      sb.append(this.hedgeFlag);
      first = false;
    }
    if (isSetPositionDate()) {
      if (!first) sb.append(", ");
      sb.append("positionDate:");
      sb.append(this.positionDate);
      first = false;
    }
    if (isSetYdPosition()) {
      if (!first) sb.append(", ");
      sb.append("ydPosition:");
      sb.append(this.ydPosition);
      first = false;
    }
    if (isSetPosition()) {
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
    }
    if (isSetLongFrozen()) {
      if (!first) sb.append(", ");
      sb.append("longFrozen:");
      sb.append(this.longFrozen);
      first = false;
    }
    if (isSetShortFrozen()) {
      if (!first) sb.append(", ");
      sb.append("shortFrozen:");
      sb.append(this.shortFrozen);
      first = false;
    }
    if (isSetLongFrozenAmount()) {
      if (!first) sb.append(", ");
      sb.append("longFrozenAmount:");
      sb.append(this.longFrozenAmount);
      first = false;
    }
    if (isSetShortFrozenAmount()) {
      if (!first) sb.append(", ");
      sb.append("shortFrozenAmount:");
      sb.append(this.shortFrozenAmount);
      first = false;
    }
    if (isSetOpenVolume()) {
      if (!first) sb.append(", ");
      sb.append("openVolume:");
      sb.append(this.openVolume);
      first = false;
    }
    if (isSetCloseVolume()) {
      if (!first) sb.append(", ");
      sb.append("closeVolume:");
      sb.append(this.closeVolume);
      first = false;
    }
    if (isSetOpenAmount()) {
      if (!first) sb.append(", ");
      sb.append("openAmount:");
      sb.append(this.openAmount);
      first = false;
    }
    if (isSetCloseAmount()) {
      if (!first) sb.append(", ");
      sb.append("closeAmount:");
      sb.append(this.closeAmount);
      first = false;
    }
    if (isSetPositionCost()) {
      if (!first) sb.append(", ");
      sb.append("positionCost:");
      sb.append(this.positionCost);
      first = false;
    }
    if (isSetPreMargin()) {
      if (!first) sb.append(", ");
      sb.append("preMargin:");
      sb.append(this.preMargin);
      first = false;
    }
    if (isSetUseMargin()) {
      if (!first) sb.append(", ");
      sb.append("useMargin:");
      sb.append(this.useMargin);
      first = false;
    }
    if (isSetFrozenMargin()) {
      if (!first) sb.append(", ");
      sb.append("frozenMargin:");
      sb.append(this.frozenMargin);
      first = false;
    }
    if (isSetFrozenCash()) {
      if (!first) sb.append(", ");
      sb.append("frozenCash:");
      sb.append(this.frozenCash);
      first = false;
    }
    if (isSetFrozenCommission()) {
      if (!first) sb.append(", ");
      sb.append("frozenCommission:");
      sb.append(this.frozenCommission);
      first = false;
    }
    if (isSetCashIn()) {
      if (!first) sb.append(", ");
      sb.append("cashIn:");
      sb.append(this.cashIn);
      first = false;
    }
    if (isSetCommission()) {
      if (!first) sb.append(", ");
      sb.append("commission:");
      sb.append(this.commission);
      first = false;
    }
    if (isSetCloseProfit()) {
      if (!first) sb.append(", ");
      sb.append("closeProfit:");
      sb.append(this.closeProfit);
      first = false;
    }
    if (isSetPositionProfit()) {
      if (!first) sb.append(", ");
      sb.append("positionProfit:");
      sb.append(this.positionProfit);
      first = false;
    }
    if (isSetPreSettlementPrice()) {
      if (!first) sb.append(", ");
      sb.append("preSettlementPrice:");
      sb.append(this.preSettlementPrice);
      first = false;
    }
    if (isSetSettlementPrice()) {
      if (!first) sb.append(", ");
      sb.append("settlementPrice:");
      sb.append(this.settlementPrice);
      first = false;
    }
    if (isSetTradingDay()) {
      if (!first) sb.append(", ");
      sb.append("tradingDay:");
      if (this.tradingDay == null) {
        sb.append("null");
      } else {
        sb.append(this.tradingDay);
      }
      first = false;
    }
    if (isSetSettlementID()) {
      if (!first) sb.append(", ");
      sb.append("settlementID:");
      sb.append(this.settlementID);
      first = false;
    }
    if (isSetOpenCost()) {
      if (!first) sb.append(", ");
      sb.append("openCost:");
      sb.append(this.openCost);
      first = false;
    }
    if (isSetExchangeMargin()) {
      if (!first) sb.append(", ");
      sb.append("exchangeMargin:");
      sb.append(this.exchangeMargin);
      first = false;
    }
    if (isSetCombPosition()) {
      if (!first) sb.append(", ");
      sb.append("combPosition:");
      sb.append(this.combPosition);
      first = false;
    }
    if (isSetCombLongFrozen()) {
      if (!first) sb.append(", ");
      sb.append("combLongFrozen:");
      sb.append(this.combLongFrozen);
      first = false;
    }
    if (isSetCombShortFrozen()) {
      if (!first) sb.append(", ");
      sb.append("combShortFrozen:");
      sb.append(this.combShortFrozen);
      first = false;
    }
    if (isSetCloseProfitByDate()) {
      if (!first) sb.append(", ");
      sb.append("closeProfitByDate:");
      sb.append(this.closeProfitByDate);
      first = false;
    }
    if (isSetCloseProfitByTrade()) {
      if (!first) sb.append(", ");
      sb.append("closeProfitByTrade:");
      sb.append(this.closeProfitByTrade);
      first = false;
    }
    if (isSetTodayPosition()) {
      if (!first) sb.append(", ");
      sb.append("todayPosition:");
      sb.append(this.todayPosition);
      first = false;
    }
    if (isSetMarginRateByMoney()) {
      if (!first) sb.append(", ");
      sb.append("marginRateByMoney:");
      sb.append(this.marginRateByMoney);
      first = false;
    }
    if (isSetMarginRateByVolume()) {
      if (!first) sb.append(", ");
      sb.append("marginRateByVolume:");
      sb.append(this.marginRateByVolume);
      first = false;
    }
    if (isSetStrikeFrozen()) {
      if (!first) sb.append(", ");
      sb.append("strikeFrozen:");
      sb.append(this.strikeFrozen);
      first = false;
    }
    if (isSetStrikeFrozenAmount()) {
      if (!first) sb.append(", ");
      sb.append("strikeFrozenAmount:");
      sb.append(this.strikeFrozenAmount);
      first = false;
    }
    if (isSetAbandonFrozen()) {
      if (!first) sb.append(", ");
      sb.append("abandonFrozen:");
      sb.append(this.abandonFrozen);
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CtpInvestorPositionStandardSchemeFactory implements SchemeFactory {
    public CtpInvestorPositionStandardScheme getScheme() {
      return new CtpInvestorPositionStandardScheme();
    }
  }

  private static class CtpInvestorPositionStandardScheme extends StandardScheme<CtpInvestorPosition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CtpInvestorPosition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brokerID = iprot.readString();
              struct.setBrokerIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INVESTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.investorID = iprot.readString();
              struct.setInvestorIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POSI_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.posiDirection = iprot.readByte();
              struct.setPosiDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.hedgeFlag = iprot.readByte();
              struct.setHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POSITION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.positionDate = iprot.readByte();
              struct.setPositionDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // YD_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ydPosition = iprot.readI32();
              struct.setYdPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.position = iprot.readI32();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LONG_FROZEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.longFrozen = iprot.readI32();
              struct.setLongFrozenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SHORT_FROZEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shortFrozen = iprot.readI32();
              struct.setShortFrozenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LONG_FROZEN_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longFrozenAmount = iprot.readDouble();
              struct.setLongFrozenAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SHORT_FROZEN_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shortFrozenAmount = iprot.readDouble();
              struct.setShortFrozenAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OPEN_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.openVolume = iprot.readI32();
              struct.setOpenVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CLOSE_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.closeVolume = iprot.readI32();
              struct.setCloseVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OPEN_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openAmount = iprot.readDouble();
              struct.setOpenAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CLOSE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeAmount = iprot.readDouble();
              struct.setCloseAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // POSITION_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionCost = iprot.readDouble();
              struct.setPositionCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PRE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preMargin = iprot.readDouble();
              struct.setPreMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // USE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.useMargin = iprot.readDouble();
              struct.setUseMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // FROZEN_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenMargin = iprot.readDouble();
              struct.setFrozenMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // FROZEN_CASH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenCash = iprot.readDouble();
              struct.setFrozenCashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // FROZEN_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenCommission = iprot.readDouble();
              struct.setFrozenCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CASH_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashIn = iprot.readDouble();
              struct.setCashInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.commission = iprot.readDouble();
              struct.setCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfit = iprot.readDouble();
              struct.setCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // POSITION_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionProfit = iprot.readDouble();
              struct.setPositionProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PRE_SETTLEMENT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preSettlementPrice = iprot.readDouble();
              struct.setPreSettlementPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // SETTLEMENT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.settlementPrice = iprot.readDouble();
              struct.setSettlementPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // TRADING_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradingDay = iprot.readString();
              struct.setTradingDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // SETTLEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.settlementID = iprot.readI32();
              struct.setSettlementIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // OPEN_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openCost = iprot.readDouble();
              struct.setOpenCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // EXCHANGE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchangeMargin = iprot.readDouble();
              struct.setExchangeMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // COMB_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.combPosition = iprot.readI32();
              struct.setCombPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // COMB_LONG_FROZEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.combLongFrozen = iprot.readI32();
              struct.setCombLongFrozenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // COMB_SHORT_FROZEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.combShortFrozen = iprot.readI32();
              struct.setCombShortFrozenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // CLOSE_PROFIT_BY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfitByDate = iprot.readDouble();
              struct.setCloseProfitByDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // CLOSE_PROFIT_BY_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfitByTrade = iprot.readDouble();
              struct.setCloseProfitByTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // TODAY_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.todayPosition = iprot.readI32();
              struct.setTodayPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // MARGIN_RATE_BY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.marginRateByMoney = iprot.readDouble();
              struct.setMarginRateByMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // MARGIN_RATE_BY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.marginRateByVolume = iprot.readDouble();
              struct.setMarginRateByVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // STRIKE_FROZEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.strikeFrozen = iprot.readI32();
              struct.setStrikeFrozenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // STRIKE_FROZEN_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.strikeFrozenAmount = iprot.readDouble();
              struct.setStrikeFrozenAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // ABANDON_FROZEN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.abandonFrozen = iprot.readI32();
              struct.setAbandonFrozenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CtpInvestorPosition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instrumentID != null) {
        if (struct.isSetInstrumentID()) {
          oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
          oprot.writeString(struct.instrumentID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.brokerID != null) {
        if (struct.isSetBrokerID()) {
          oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
          oprot.writeString(struct.brokerID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.investorID != null) {
        if (struct.isSetInvestorID()) {
          oprot.writeFieldBegin(INVESTOR_ID_FIELD_DESC);
          oprot.writeString(struct.investorID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPosiDirection()) {
        oprot.writeFieldBegin(POSI_DIRECTION_FIELD_DESC);
        oprot.writeByte(struct.posiDirection);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHedgeFlag()) {
        oprot.writeFieldBegin(HEDGE_FLAG_FIELD_DESC);
        oprot.writeByte(struct.hedgeFlag);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionDate()) {
        oprot.writeFieldBegin(POSITION_DATE_FIELD_DESC);
        oprot.writeByte(struct.positionDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYdPosition()) {
        oprot.writeFieldBegin(YD_POSITION_FIELD_DESC);
        oprot.writeI32(struct.ydPosition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPosition()) {
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLongFrozen()) {
        oprot.writeFieldBegin(LONG_FROZEN_FIELD_DESC);
        oprot.writeI32(struct.longFrozen);
        oprot.writeFieldEnd();
      }
      if (struct.isSetShortFrozen()) {
        oprot.writeFieldBegin(SHORT_FROZEN_FIELD_DESC);
        oprot.writeI32(struct.shortFrozen);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLongFrozenAmount()) {
        oprot.writeFieldBegin(LONG_FROZEN_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.longFrozenAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetShortFrozenAmount()) {
        oprot.writeFieldBegin(SHORT_FROZEN_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.shortFrozenAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOpenVolume()) {
        oprot.writeFieldBegin(OPEN_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.openVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseVolume()) {
        oprot.writeFieldBegin(CLOSE_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.closeVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOpenAmount()) {
        oprot.writeFieldBegin(OPEN_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.openAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseAmount()) {
        oprot.writeFieldBegin(CLOSE_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.closeAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionCost()) {
        oprot.writeFieldBegin(POSITION_COST_FIELD_DESC);
        oprot.writeDouble(struct.positionCost);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreMargin()) {
        oprot.writeFieldBegin(PRE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.preMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUseMargin()) {
        oprot.writeFieldBegin(USE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.useMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeFieldBegin(FROZEN_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.frozenMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenCash()) {
        oprot.writeFieldBegin(FROZEN_CASH_FIELD_DESC);
        oprot.writeDouble(struct.frozenCash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenCommission()) {
        oprot.writeFieldBegin(FROZEN_COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.frozenCommission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCashIn()) {
        oprot.writeFieldBegin(CASH_IN_FIELD_DESC);
        oprot.writeDouble(struct.cashIn);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommission()) {
        oprot.writeFieldBegin(COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.commission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeFieldBegin(CLOSE_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.closeProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeFieldBegin(POSITION_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.positionProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreSettlementPrice()) {
        oprot.writeFieldBegin(PRE_SETTLEMENT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.preSettlementPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSettlementPrice()) {
        oprot.writeFieldBegin(SETTLEMENT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.settlementPrice);
        oprot.writeFieldEnd();
      }
      if (struct.tradingDay != null) {
        if (struct.isSetTradingDay()) {
          oprot.writeFieldBegin(TRADING_DAY_FIELD_DESC);
          oprot.writeString(struct.tradingDay);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSettlementID()) {
        oprot.writeFieldBegin(SETTLEMENT_ID_FIELD_DESC);
        oprot.writeI32(struct.settlementID);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOpenCost()) {
        oprot.writeFieldBegin(OPEN_COST_FIELD_DESC);
        oprot.writeDouble(struct.openCost);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExchangeMargin()) {
        oprot.writeFieldBegin(EXCHANGE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.exchangeMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCombPosition()) {
        oprot.writeFieldBegin(COMB_POSITION_FIELD_DESC);
        oprot.writeI32(struct.combPosition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCombLongFrozen()) {
        oprot.writeFieldBegin(COMB_LONG_FROZEN_FIELD_DESC);
        oprot.writeI32(struct.combLongFrozen);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCombShortFrozen()) {
        oprot.writeFieldBegin(COMB_SHORT_FROZEN_FIELD_DESC);
        oprot.writeI32(struct.combShortFrozen);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseProfitByDate()) {
        oprot.writeFieldBegin(CLOSE_PROFIT_BY_DATE_FIELD_DESC);
        oprot.writeDouble(struct.closeProfitByDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseProfitByTrade()) {
        oprot.writeFieldBegin(CLOSE_PROFIT_BY_TRADE_FIELD_DESC);
        oprot.writeDouble(struct.closeProfitByTrade);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTodayPosition()) {
        oprot.writeFieldBegin(TODAY_POSITION_FIELD_DESC);
        oprot.writeI32(struct.todayPosition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMarginRateByMoney()) {
        oprot.writeFieldBegin(MARGIN_RATE_BY_MONEY_FIELD_DESC);
        oprot.writeDouble(struct.marginRateByMoney);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMarginRateByVolume()) {
        oprot.writeFieldBegin(MARGIN_RATE_BY_VOLUME_FIELD_DESC);
        oprot.writeDouble(struct.marginRateByVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStrikeFrozen()) {
        oprot.writeFieldBegin(STRIKE_FROZEN_FIELD_DESC);
        oprot.writeI32(struct.strikeFrozen);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStrikeFrozenAmount()) {
        oprot.writeFieldBegin(STRIKE_FROZEN_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.strikeFrozenAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAbandonFrozen()) {
        oprot.writeFieldBegin(ABANDON_FROZEN_FIELD_DESC);
        oprot.writeI32(struct.abandonFrozen);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CtpInvestorPositionTupleSchemeFactory implements SchemeFactory {
    public CtpInvestorPositionTupleScheme getScheme() {
      return new CtpInvestorPositionTupleScheme();
    }
  }

  private static class CtpInvestorPositionTupleScheme extends TupleScheme<CtpInvestorPosition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CtpInvestorPosition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstrumentID()) {
        optionals.set(0);
      }
      if (struct.isSetBrokerID()) {
        optionals.set(1);
      }
      if (struct.isSetInvestorID()) {
        optionals.set(2);
      }
      if (struct.isSetPosiDirection()) {
        optionals.set(3);
      }
      if (struct.isSetHedgeFlag()) {
        optionals.set(4);
      }
      if (struct.isSetPositionDate()) {
        optionals.set(5);
      }
      if (struct.isSetYdPosition()) {
        optionals.set(6);
      }
      if (struct.isSetPosition()) {
        optionals.set(7);
      }
      if (struct.isSetLongFrozen()) {
        optionals.set(8);
      }
      if (struct.isSetShortFrozen()) {
        optionals.set(9);
      }
      if (struct.isSetLongFrozenAmount()) {
        optionals.set(10);
      }
      if (struct.isSetShortFrozenAmount()) {
        optionals.set(11);
      }
      if (struct.isSetOpenVolume()) {
        optionals.set(12);
      }
      if (struct.isSetCloseVolume()) {
        optionals.set(13);
      }
      if (struct.isSetOpenAmount()) {
        optionals.set(14);
      }
      if (struct.isSetCloseAmount()) {
        optionals.set(15);
      }
      if (struct.isSetPositionCost()) {
        optionals.set(16);
      }
      if (struct.isSetPreMargin()) {
        optionals.set(17);
      }
      if (struct.isSetUseMargin()) {
        optionals.set(18);
      }
      if (struct.isSetFrozenMargin()) {
        optionals.set(19);
      }
      if (struct.isSetFrozenCash()) {
        optionals.set(20);
      }
      if (struct.isSetFrozenCommission()) {
        optionals.set(21);
      }
      if (struct.isSetCashIn()) {
        optionals.set(22);
      }
      if (struct.isSetCommission()) {
        optionals.set(23);
      }
      if (struct.isSetCloseProfit()) {
        optionals.set(24);
      }
      if (struct.isSetPositionProfit()) {
        optionals.set(25);
      }
      if (struct.isSetPreSettlementPrice()) {
        optionals.set(26);
      }
      if (struct.isSetSettlementPrice()) {
        optionals.set(27);
      }
      if (struct.isSetTradingDay()) {
        optionals.set(28);
      }
      if (struct.isSetSettlementID()) {
        optionals.set(29);
      }
      if (struct.isSetOpenCost()) {
        optionals.set(30);
      }
      if (struct.isSetExchangeMargin()) {
        optionals.set(31);
      }
      if (struct.isSetCombPosition()) {
        optionals.set(32);
      }
      if (struct.isSetCombLongFrozen()) {
        optionals.set(33);
      }
      if (struct.isSetCombShortFrozen()) {
        optionals.set(34);
      }
      if (struct.isSetCloseProfitByDate()) {
        optionals.set(35);
      }
      if (struct.isSetCloseProfitByTrade()) {
        optionals.set(36);
      }
      if (struct.isSetTodayPosition()) {
        optionals.set(37);
      }
      if (struct.isSetMarginRateByMoney()) {
        optionals.set(38);
      }
      if (struct.isSetMarginRateByVolume()) {
        optionals.set(39);
      }
      if (struct.isSetStrikeFrozen()) {
        optionals.set(40);
      }
      if (struct.isSetStrikeFrozenAmount()) {
        optionals.set(41);
      }
      if (struct.isSetAbandonFrozen()) {
        optionals.set(42);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(43);
      }
      oprot.writeBitSet(optionals, 44);
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetBrokerID()) {
        oprot.writeString(struct.brokerID);
      }
      if (struct.isSetInvestorID()) {
        oprot.writeString(struct.investorID);
      }
      if (struct.isSetPosiDirection()) {
        oprot.writeByte(struct.posiDirection);
      }
      if (struct.isSetHedgeFlag()) {
        oprot.writeByte(struct.hedgeFlag);
      }
      if (struct.isSetPositionDate()) {
        oprot.writeByte(struct.positionDate);
      }
      if (struct.isSetYdPosition()) {
        oprot.writeI32(struct.ydPosition);
      }
      if (struct.isSetPosition()) {
        oprot.writeI32(struct.position);
      }
      if (struct.isSetLongFrozen()) {
        oprot.writeI32(struct.longFrozen);
      }
      if (struct.isSetShortFrozen()) {
        oprot.writeI32(struct.shortFrozen);
      }
      if (struct.isSetLongFrozenAmount()) {
        oprot.writeDouble(struct.longFrozenAmount);
      }
      if (struct.isSetShortFrozenAmount()) {
        oprot.writeDouble(struct.shortFrozenAmount);
      }
      if (struct.isSetOpenVolume()) {
        oprot.writeI32(struct.openVolume);
      }
      if (struct.isSetCloseVolume()) {
        oprot.writeI32(struct.closeVolume);
      }
      if (struct.isSetOpenAmount()) {
        oprot.writeDouble(struct.openAmount);
      }
      if (struct.isSetCloseAmount()) {
        oprot.writeDouble(struct.closeAmount);
      }
      if (struct.isSetPositionCost()) {
        oprot.writeDouble(struct.positionCost);
      }
      if (struct.isSetPreMargin()) {
        oprot.writeDouble(struct.preMargin);
      }
      if (struct.isSetUseMargin()) {
        oprot.writeDouble(struct.useMargin);
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeDouble(struct.frozenMargin);
      }
      if (struct.isSetFrozenCash()) {
        oprot.writeDouble(struct.frozenCash);
      }
      if (struct.isSetFrozenCommission()) {
        oprot.writeDouble(struct.frozenCommission);
      }
      if (struct.isSetCashIn()) {
        oprot.writeDouble(struct.cashIn);
      }
      if (struct.isSetCommission()) {
        oprot.writeDouble(struct.commission);
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeDouble(struct.closeProfit);
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeDouble(struct.positionProfit);
      }
      if (struct.isSetPreSettlementPrice()) {
        oprot.writeDouble(struct.preSettlementPrice);
      }
      if (struct.isSetSettlementPrice()) {
        oprot.writeDouble(struct.settlementPrice);
      }
      if (struct.isSetTradingDay()) {
        oprot.writeString(struct.tradingDay);
      }
      if (struct.isSetSettlementID()) {
        oprot.writeI32(struct.settlementID);
      }
      if (struct.isSetOpenCost()) {
        oprot.writeDouble(struct.openCost);
      }
      if (struct.isSetExchangeMargin()) {
        oprot.writeDouble(struct.exchangeMargin);
      }
      if (struct.isSetCombPosition()) {
        oprot.writeI32(struct.combPosition);
      }
      if (struct.isSetCombLongFrozen()) {
        oprot.writeI32(struct.combLongFrozen);
      }
      if (struct.isSetCombShortFrozen()) {
        oprot.writeI32(struct.combShortFrozen);
      }
      if (struct.isSetCloseProfitByDate()) {
        oprot.writeDouble(struct.closeProfitByDate);
      }
      if (struct.isSetCloseProfitByTrade()) {
        oprot.writeDouble(struct.closeProfitByTrade);
      }
      if (struct.isSetTodayPosition()) {
        oprot.writeI32(struct.todayPosition);
      }
      if (struct.isSetMarginRateByMoney()) {
        oprot.writeDouble(struct.marginRateByMoney);
      }
      if (struct.isSetMarginRateByVolume()) {
        oprot.writeDouble(struct.marginRateByVolume);
      }
      if (struct.isSetStrikeFrozen()) {
        oprot.writeI32(struct.strikeFrozen);
      }
      if (struct.isSetStrikeFrozenAmount()) {
        oprot.writeDouble(struct.strikeFrozenAmount);
      }
      if (struct.isSetAbandonFrozen()) {
        oprot.writeI32(struct.abandonFrozen);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CtpInvestorPosition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(44);
      if (incoming.get(0)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.brokerID = iprot.readString();
        struct.setBrokerIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.investorID = iprot.readString();
        struct.setInvestorIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.posiDirection = iprot.readByte();
        struct.setPosiDirectionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hedgeFlag = iprot.readByte();
        struct.setHedgeFlagIsSet(true);
      }
      if (incoming.get(5)) {
        struct.positionDate = iprot.readByte();
        struct.setPositionDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ydPosition = iprot.readI32();
        struct.setYdPositionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.position = iprot.readI32();
        struct.setPositionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.longFrozen = iprot.readI32();
        struct.setLongFrozenIsSet(true);
      }
      if (incoming.get(9)) {
        struct.shortFrozen = iprot.readI32();
        struct.setShortFrozenIsSet(true);
      }
      if (incoming.get(10)) {
        struct.longFrozenAmount = iprot.readDouble();
        struct.setLongFrozenAmountIsSet(true);
      }
      if (incoming.get(11)) {
        struct.shortFrozenAmount = iprot.readDouble();
        struct.setShortFrozenAmountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.openVolume = iprot.readI32();
        struct.setOpenVolumeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.closeVolume = iprot.readI32();
        struct.setCloseVolumeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.openAmount = iprot.readDouble();
        struct.setOpenAmountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.closeAmount = iprot.readDouble();
        struct.setCloseAmountIsSet(true);
      }
      if (incoming.get(16)) {
        struct.positionCost = iprot.readDouble();
        struct.setPositionCostIsSet(true);
      }
      if (incoming.get(17)) {
        struct.preMargin = iprot.readDouble();
        struct.setPreMarginIsSet(true);
      }
      if (incoming.get(18)) {
        struct.useMargin = iprot.readDouble();
        struct.setUseMarginIsSet(true);
      }
      if (incoming.get(19)) {
        struct.frozenMargin = iprot.readDouble();
        struct.setFrozenMarginIsSet(true);
      }
      if (incoming.get(20)) {
        struct.frozenCash = iprot.readDouble();
        struct.setFrozenCashIsSet(true);
      }
      if (incoming.get(21)) {
        struct.frozenCommission = iprot.readDouble();
        struct.setFrozenCommissionIsSet(true);
      }
      if (incoming.get(22)) {
        struct.cashIn = iprot.readDouble();
        struct.setCashInIsSet(true);
      }
      if (incoming.get(23)) {
        struct.commission = iprot.readDouble();
        struct.setCommissionIsSet(true);
      }
      if (incoming.get(24)) {
        struct.closeProfit = iprot.readDouble();
        struct.setCloseProfitIsSet(true);
      }
      if (incoming.get(25)) {
        struct.positionProfit = iprot.readDouble();
        struct.setPositionProfitIsSet(true);
      }
      if (incoming.get(26)) {
        struct.preSettlementPrice = iprot.readDouble();
        struct.setPreSettlementPriceIsSet(true);
      }
      if (incoming.get(27)) {
        struct.settlementPrice = iprot.readDouble();
        struct.setSettlementPriceIsSet(true);
      }
      if (incoming.get(28)) {
        struct.tradingDay = iprot.readString();
        struct.setTradingDayIsSet(true);
      }
      if (incoming.get(29)) {
        struct.settlementID = iprot.readI32();
        struct.setSettlementIDIsSet(true);
      }
      if (incoming.get(30)) {
        struct.openCost = iprot.readDouble();
        struct.setOpenCostIsSet(true);
      }
      if (incoming.get(31)) {
        struct.exchangeMargin = iprot.readDouble();
        struct.setExchangeMarginIsSet(true);
      }
      if (incoming.get(32)) {
        struct.combPosition = iprot.readI32();
        struct.setCombPositionIsSet(true);
      }
      if (incoming.get(33)) {
        struct.combLongFrozen = iprot.readI32();
        struct.setCombLongFrozenIsSet(true);
      }
      if (incoming.get(34)) {
        struct.combShortFrozen = iprot.readI32();
        struct.setCombShortFrozenIsSet(true);
      }
      if (incoming.get(35)) {
        struct.closeProfitByDate = iprot.readDouble();
        struct.setCloseProfitByDateIsSet(true);
      }
      if (incoming.get(36)) {
        struct.closeProfitByTrade = iprot.readDouble();
        struct.setCloseProfitByTradeIsSet(true);
      }
      if (incoming.get(37)) {
        struct.todayPosition = iprot.readI32();
        struct.setTodayPositionIsSet(true);
      }
      if (incoming.get(38)) {
        struct.marginRateByMoney = iprot.readDouble();
        struct.setMarginRateByMoneyIsSet(true);
      }
      if (incoming.get(39)) {
        struct.marginRateByVolume = iprot.readDouble();
        struct.setMarginRateByVolumeIsSet(true);
      }
      if (incoming.get(40)) {
        struct.strikeFrozen = iprot.readI32();
        struct.setStrikeFrozenIsSet(true);
      }
      if (incoming.get(41)) {
        struct.strikeFrozenAmount = iprot.readDouble();
        struct.setStrikeFrozenAmountIsSet(true);
      }
      if (incoming.get(42)) {
        struct.abandonFrozen = iprot.readI32();
        struct.setAbandonFrozenIsSet(true);
      }
      if (incoming.get(43)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
    }
  }

}

