/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.es_service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EsOrderStatusField implements org.apache.thrift.TBase<EsOrderStatusField, EsOrderStatusField._Fields>, java.io.Serializable, Cloneable, Comparable<EsOrderStatusField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EsOrderStatusField");

  private static final org.apache.thrift.protocol.TField SLED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField HEDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("hedge", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ORDER_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField TRIGGER_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField ORDER_VOL_FIELD_DESC = new org.apache.thrift.protocol.TField("orderVol", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ORDER_STREAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStreamId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField LOCAL_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("localNo", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SYSTEM_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("systemNo", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField UPDATE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("updateNo", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDateTime", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField ORDER_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderState", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField MATCH_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("matchPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField MATCH_VOL_FIELD_DESC = new org.apache.thrift.protocol.TField("matchVol", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField ACTION_LOCAL_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("actionLocalNo", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField EXCHANGE_SYSTEM_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeSystemNo", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ERROR_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("errorText", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField INSERT_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("insertDateTime", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField ORDER_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderInput", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("deleted", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField ADD_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("addOne", org.apache.thrift.protocol.TType.BOOL, (short)26);
  private static final org.apache.thrift.protocol.TField PARENT_SYSTEM_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("parentSystemNo", org.apache.thrift.protocol.TType.STRING, (short)27);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EsOrderStatusFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EsOrderStatusFieldTupleSchemeFactory());
  }

  public String sledId; // required
  public int sledAccountId; // optional
  public int userId; // optional
  /**
   * 
   * @see EsOrderType
   */
  public EsOrderType orderType; // optional
  /**
   * 
   * @see EsOffsetType
   */
  public EsOffsetType offset; // optional
  /**
   * 
   * @see EsHedgeType
   */
  public EsHedgeType hedge; // optional
  public double orderPrice; // optional
  public double triggerPrice; // optional
  public int orderVol; // optional
  public int orderStreamId; // optional
  public int orderId; // optional
  public String localNo; // optional
  public String systemNo; // optional
  public String updateNo; // optional
  public long updateDateTime; // optional
  /**
   * 
   * @see EsOrderStateType
   */
  public EsOrderStateType orderState; // optional
  public double matchPrice; // optional
  public int matchVol; // optional
  public int errorCode; // optional
  public String actionLocalNo; // optional
  public String exchangeSystemNo; // optional
  public String errorText; // optional
  public long insertDateTime; // optional
  public boolean orderInput; // optional
  /**
   * 
   * @see EsDeletedType
   */
  public EsDeletedType deleted; // optional
  public boolean addOne; // optional
  public String parentSystemNo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_ID((short)1, "sledId"),
    SLED_ACCOUNT_ID((short)2, "sledAccountId"),
    USER_ID((short)3, "userId"),
    /**
     * 
     * @see EsOrderType
     */
    ORDER_TYPE((short)4, "orderType"),
    /**
     * 
     * @see EsOffsetType
     */
    OFFSET((short)5, "offset"),
    /**
     * 
     * @see EsHedgeType
     */
    HEDGE((short)6, "hedge"),
    ORDER_PRICE((short)7, "orderPrice"),
    TRIGGER_PRICE((short)8, "triggerPrice"),
    ORDER_VOL((short)9, "orderVol"),
    ORDER_STREAM_ID((short)10, "orderStreamId"),
    ORDER_ID((short)11, "orderId"),
    LOCAL_NO((short)12, "localNo"),
    SYSTEM_NO((short)13, "systemNo"),
    UPDATE_NO((short)14, "updateNo"),
    UPDATE_DATE_TIME((short)15, "updateDateTime"),
    /**
     * 
     * @see EsOrderStateType
     */
    ORDER_STATE((short)16, "orderState"),
    MATCH_PRICE((short)17, "matchPrice"),
    MATCH_VOL((short)18, "matchVol"),
    ERROR_CODE((short)19, "errorCode"),
    ACTION_LOCAL_NO((short)20, "actionLocalNo"),
    EXCHANGE_SYSTEM_NO((short)21, "exchangeSystemNo"),
    ERROR_TEXT((short)22, "errorText"),
    INSERT_DATE_TIME((short)23, "insertDateTime"),
    ORDER_INPUT((short)24, "orderInput"),
    /**
     * 
     * @see EsDeletedType
     */
    DELETED((short)25, "deleted"),
    ADD_ONE((short)26, "addOne"),
    PARENT_SYSTEM_NO((short)27, "parentSystemNo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_ID
          return SLED_ID;
        case 2: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // ORDER_TYPE
          return ORDER_TYPE;
        case 5: // OFFSET
          return OFFSET;
        case 6: // HEDGE
          return HEDGE;
        case 7: // ORDER_PRICE
          return ORDER_PRICE;
        case 8: // TRIGGER_PRICE
          return TRIGGER_PRICE;
        case 9: // ORDER_VOL
          return ORDER_VOL;
        case 10: // ORDER_STREAM_ID
          return ORDER_STREAM_ID;
        case 11: // ORDER_ID
          return ORDER_ID;
        case 12: // LOCAL_NO
          return LOCAL_NO;
        case 13: // SYSTEM_NO
          return SYSTEM_NO;
        case 14: // UPDATE_NO
          return UPDATE_NO;
        case 15: // UPDATE_DATE_TIME
          return UPDATE_DATE_TIME;
        case 16: // ORDER_STATE
          return ORDER_STATE;
        case 17: // MATCH_PRICE
          return MATCH_PRICE;
        case 18: // MATCH_VOL
          return MATCH_VOL;
        case 19: // ERROR_CODE
          return ERROR_CODE;
        case 20: // ACTION_LOCAL_NO
          return ACTION_LOCAL_NO;
        case 21: // EXCHANGE_SYSTEM_NO
          return EXCHANGE_SYSTEM_NO;
        case 22: // ERROR_TEXT
          return ERROR_TEXT;
        case 23: // INSERT_DATE_TIME
          return INSERT_DATE_TIME;
        case 24: // ORDER_INPUT
          return ORDER_INPUT;
        case 25: // DELETED
          return DELETED;
        case 26: // ADD_ONE
          return ADD_ONE;
        case 27: // PARENT_SYSTEM_NO
          return PARENT_SYSTEM_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDACCOUNTID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __ORDERPRICE_ISSET_ID = 2;
  private static final int __TRIGGERPRICE_ISSET_ID = 3;
  private static final int __ORDERVOL_ISSET_ID = 4;
  private static final int __ORDERSTREAMID_ISSET_ID = 5;
  private static final int __ORDERID_ISSET_ID = 6;
  private static final int __UPDATEDATETIME_ISSET_ID = 7;
  private static final int __MATCHPRICE_ISSET_ID = 8;
  private static final int __MATCHVOL_ISSET_ID = 9;
  private static final int __ERRORCODE_ISSET_ID = 10;
  private static final int __INSERTDATETIME_ISSET_ID = 11;
  private static final int __ORDERINPUT_ISSET_ID = 12;
  private static final int __ADDONE_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_ACCOUNT_ID,_Fields.USER_ID,_Fields.ORDER_TYPE,_Fields.OFFSET,_Fields.HEDGE,_Fields.ORDER_PRICE,_Fields.TRIGGER_PRICE,_Fields.ORDER_VOL,_Fields.ORDER_STREAM_ID,_Fields.ORDER_ID,_Fields.LOCAL_NO,_Fields.SYSTEM_NO,_Fields.UPDATE_NO,_Fields.UPDATE_DATE_TIME,_Fields.ORDER_STATE,_Fields.MATCH_PRICE,_Fields.MATCH_VOL,_Fields.ERROR_CODE,_Fields.ACTION_LOCAL_NO,_Fields.EXCHANGE_SYSTEM_NO,_Fields.ERROR_TEXT,_Fields.INSERT_DATE_TIME,_Fields.ORDER_INPUT,_Fields.DELETED,_Fields.ADD_ONE,_Fields.PARENT_SYSTEM_NO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_ID, new org.apache.thrift.meta_data.FieldMetaData("sledId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsOrderType.class)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsOffsetType.class)));
    tmpMap.put(_Fields.HEDGE, new org.apache.thrift.meta_data.FieldMetaData("hedge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsHedgeType.class)));
    tmpMap.put(_Fields.ORDER_PRICE, new org.apache.thrift.meta_data.FieldMetaData("orderPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRIGGER_PRICE, new org.apache.thrift.meta_data.FieldMetaData("triggerPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORDER_VOL, new org.apache.thrift.meta_data.FieldMetaData("orderVol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_STREAM_ID, new org.apache.thrift.meta_data.FieldMetaData("orderStreamId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCAL_NO, new org.apache.thrift.meta_data.FieldMetaData("localNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYSTEM_NO, new org.apache.thrift.meta_data.FieldMetaData("systemNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_NO, new org.apache.thrift.meta_data.FieldMetaData("updateNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_STATE, new org.apache.thrift.meta_data.FieldMetaData("orderState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsOrderStateType.class)));
    tmpMap.put(_Fields.MATCH_PRICE, new org.apache.thrift.meta_data.FieldMetaData("matchPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MATCH_VOL, new org.apache.thrift.meta_data.FieldMetaData("matchVol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION_LOCAL_NO, new org.apache.thrift.meta_data.FieldMetaData("actionLocalNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCHANGE_SYSTEM_NO, new org.apache.thrift.meta_data.FieldMetaData("exchangeSystemNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR_TEXT, new org.apache.thrift.meta_data.FieldMetaData("errorText", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSERT_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("insertDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_INPUT, new org.apache.thrift.meta_data.FieldMetaData("orderInput", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DELETED, new org.apache.thrift.meta_data.FieldMetaData("deleted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsDeletedType.class)));
    tmpMap.put(_Fields.ADD_ONE, new org.apache.thrift.meta_data.FieldMetaData("addOne", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARENT_SYSTEM_NO, new org.apache.thrift.meta_data.FieldMetaData("parentSystemNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EsOrderStatusField.class, metaDataMap);
  }

  public EsOrderStatusField() {
  }

  public EsOrderStatusField(
    String sledId)
  {
    this();
    this.sledId = sledId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EsOrderStatusField(EsOrderStatusField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSledId()) {
      this.sledId = other.sledId;
    }
    this.sledAccountId = other.sledAccountId;
    this.userId = other.userId;
    if (other.isSetOrderType()) {
      this.orderType = other.orderType;
    }
    if (other.isSetOffset()) {
      this.offset = other.offset;
    }
    if (other.isSetHedge()) {
      this.hedge = other.hedge;
    }
    this.orderPrice = other.orderPrice;
    this.triggerPrice = other.triggerPrice;
    this.orderVol = other.orderVol;
    this.orderStreamId = other.orderStreamId;
    this.orderId = other.orderId;
    if (other.isSetLocalNo()) {
      this.localNo = other.localNo;
    }
    if (other.isSetSystemNo()) {
      this.systemNo = other.systemNo;
    }
    if (other.isSetUpdateNo()) {
      this.updateNo = other.updateNo;
    }
    this.updateDateTime = other.updateDateTime;
    if (other.isSetOrderState()) {
      this.orderState = other.orderState;
    }
    this.matchPrice = other.matchPrice;
    this.matchVol = other.matchVol;
    this.errorCode = other.errorCode;
    if (other.isSetActionLocalNo()) {
      this.actionLocalNo = other.actionLocalNo;
    }
    if (other.isSetExchangeSystemNo()) {
      this.exchangeSystemNo = other.exchangeSystemNo;
    }
    if (other.isSetErrorText()) {
      this.errorText = other.errorText;
    }
    this.insertDateTime = other.insertDateTime;
    this.orderInput = other.orderInput;
    if (other.isSetDeleted()) {
      this.deleted = other.deleted;
    }
    this.addOne = other.addOne;
    if (other.isSetParentSystemNo()) {
      this.parentSystemNo = other.parentSystemNo;
    }
  }

  public EsOrderStatusField deepCopy() {
    return new EsOrderStatusField(this);
  }

  @Override
  public void clear() {
    this.sledId = null;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.orderType = null;
    this.offset = null;
    this.hedge = null;
    setOrderPriceIsSet(false);
    this.orderPrice = 0.0;
    setTriggerPriceIsSet(false);
    this.triggerPrice = 0.0;
    setOrderVolIsSet(false);
    this.orderVol = 0;
    setOrderStreamIdIsSet(false);
    this.orderStreamId = 0;
    setOrderIdIsSet(false);
    this.orderId = 0;
    this.localNo = null;
    this.systemNo = null;
    this.updateNo = null;
    setUpdateDateTimeIsSet(false);
    this.updateDateTime = 0;
    this.orderState = null;
    setMatchPriceIsSet(false);
    this.matchPrice = 0.0;
    setMatchVolIsSet(false);
    this.matchVol = 0;
    setErrorCodeIsSet(false);
    this.errorCode = 0;
    this.actionLocalNo = null;
    this.exchangeSystemNo = null;
    this.errorText = null;
    setInsertDateTimeIsSet(false);
    this.insertDateTime = 0;
    setOrderInputIsSet(false);
    this.orderInput = false;
    this.deleted = null;
    setAddOneIsSet(false);
    this.addOne = false;
    this.parentSystemNo = null;
  }

  public String getSledId() {
    return this.sledId;
  }

  public EsOrderStatusField setSledId(String sledId) {
    this.sledId = sledId;
    return this;
  }

  public void unsetSledId() {
    this.sledId = null;
  }

  /** Returns true if field sledId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledId() {
    return this.sledId != null;
  }

  public void setSledIdIsSet(boolean value) {
    if (!value) {
      this.sledId = null;
    }
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public EsOrderStatusField setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public EsOrderStatusField setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  /**
   * 
   * @see EsOrderType
   */
  public EsOrderType getOrderType() {
    return this.orderType;
  }

  /**
   * 
   * @see EsOrderType
   */
  public EsOrderStatusField setOrderType(EsOrderType orderType) {
    this.orderType = orderType;
    return this;
  }

  public void unsetOrderType() {
    this.orderType = null;
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return this.orderType != null;
  }

  public void setOrderTypeIsSet(boolean value) {
    if (!value) {
      this.orderType = null;
    }
  }

  /**
   * 
   * @see EsOffsetType
   */
  public EsOffsetType getOffset() {
    return this.offset;
  }

  /**
   * 
   * @see EsOffsetType
   */
  public EsOrderStatusField setOffset(EsOffsetType offset) {
    this.offset = offset;
    return this;
  }

  public void unsetOffset() {
    this.offset = null;
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return this.offset != null;
  }

  public void setOffsetIsSet(boolean value) {
    if (!value) {
      this.offset = null;
    }
  }

  /**
   * 
   * @see EsHedgeType
   */
  public EsHedgeType getHedge() {
    return this.hedge;
  }

  /**
   * 
   * @see EsHedgeType
   */
  public EsOrderStatusField setHedge(EsHedgeType hedge) {
    this.hedge = hedge;
    return this;
  }

  public void unsetHedge() {
    this.hedge = null;
  }

  /** Returns true if field hedge is set (has been assigned a value) and false otherwise */
  public boolean isSetHedge() {
    return this.hedge != null;
  }

  public void setHedgeIsSet(boolean value) {
    if (!value) {
      this.hedge = null;
    }
  }

  public double getOrderPrice() {
    return this.orderPrice;
  }

  public EsOrderStatusField setOrderPrice(double orderPrice) {
    this.orderPrice = orderPrice;
    setOrderPriceIsSet(true);
    return this;
  }

  public void unsetOrderPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERPRICE_ISSET_ID);
  }

  /** Returns true if field orderPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERPRICE_ISSET_ID);
  }

  public void setOrderPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERPRICE_ISSET_ID, value);
  }

  public double getTriggerPrice() {
    return this.triggerPrice;
  }

  public EsOrderStatusField setTriggerPrice(double triggerPrice) {
    this.triggerPrice = triggerPrice;
    setTriggerPriceIsSet(true);
    return this;
  }

  public void unsetTriggerPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRIGGERPRICE_ISSET_ID);
  }

  /** Returns true if field triggerPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggerPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TRIGGERPRICE_ISSET_ID);
  }

  public void setTriggerPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRIGGERPRICE_ISSET_ID, value);
  }

  public int getOrderVol() {
    return this.orderVol;
  }

  public EsOrderStatusField setOrderVol(int orderVol) {
    this.orderVol = orderVol;
    setOrderVolIsSet(true);
    return this;
  }

  public void unsetOrderVol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERVOL_ISSET_ID);
  }

  /** Returns true if field orderVol is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderVol() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERVOL_ISSET_ID);
  }

  public void setOrderVolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERVOL_ISSET_ID, value);
  }

  public int getOrderStreamId() {
    return this.orderStreamId;
  }

  public EsOrderStatusField setOrderStreamId(int orderStreamId) {
    this.orderStreamId = orderStreamId;
    setOrderStreamIdIsSet(true);
    return this;
  }

  public void unsetOrderStreamId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERSTREAMID_ISSET_ID);
  }

  /** Returns true if field orderStreamId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStreamId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERSTREAMID_ISSET_ID);
  }

  public void setOrderStreamIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERSTREAMID_ISSET_ID, value);
  }

  public int getOrderId() {
    return this.orderId;
  }

  public EsOrderStatusField setOrderId(int orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  public String getLocalNo() {
    return this.localNo;
  }

  public EsOrderStatusField setLocalNo(String localNo) {
    this.localNo = localNo;
    return this;
  }

  public void unsetLocalNo() {
    this.localNo = null;
  }

  /** Returns true if field localNo is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalNo() {
    return this.localNo != null;
  }

  public void setLocalNoIsSet(boolean value) {
    if (!value) {
      this.localNo = null;
    }
  }

  public String getSystemNo() {
    return this.systemNo;
  }

  public EsOrderStatusField setSystemNo(String systemNo) {
    this.systemNo = systemNo;
    return this;
  }

  public void unsetSystemNo() {
    this.systemNo = null;
  }

  /** Returns true if field systemNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemNo() {
    return this.systemNo != null;
  }

  public void setSystemNoIsSet(boolean value) {
    if (!value) {
      this.systemNo = null;
    }
  }

  public String getUpdateNo() {
    return this.updateNo;
  }

  public EsOrderStatusField setUpdateNo(String updateNo) {
    this.updateNo = updateNo;
    return this;
  }

  public void unsetUpdateNo() {
    this.updateNo = null;
  }

  /** Returns true if field updateNo is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateNo() {
    return this.updateNo != null;
  }

  public void setUpdateNoIsSet(boolean value) {
    if (!value) {
      this.updateNo = null;
    }
  }

  public long getUpdateDateTime() {
    return this.updateDateTime;
  }

  public EsOrderStatusField setUpdateDateTime(long updateDateTime) {
    this.updateDateTime = updateDateTime;
    setUpdateDateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEDATETIME_ISSET_ID);
  }

  /** Returns true if field updateDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEDATETIME_ISSET_ID);
  }

  public void setUpdateDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEDATETIME_ISSET_ID, value);
  }

  /**
   * 
   * @see EsOrderStateType
   */
  public EsOrderStateType getOrderState() {
    return this.orderState;
  }

  /**
   * 
   * @see EsOrderStateType
   */
  public EsOrderStatusField setOrderState(EsOrderStateType orderState) {
    this.orderState = orderState;
    return this;
  }

  public void unsetOrderState() {
    this.orderState = null;
  }

  /** Returns true if field orderState is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderState() {
    return this.orderState != null;
  }

  public void setOrderStateIsSet(boolean value) {
    if (!value) {
      this.orderState = null;
    }
  }

  public double getMatchPrice() {
    return this.matchPrice;
  }

  public EsOrderStatusField setMatchPrice(double matchPrice) {
    this.matchPrice = matchPrice;
    setMatchPriceIsSet(true);
    return this;
  }

  public void unsetMatchPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHPRICE_ISSET_ID);
  }

  /** Returns true if field matchPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHPRICE_ISSET_ID);
  }

  public void setMatchPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHPRICE_ISSET_ID, value);
  }

  public int getMatchVol() {
    return this.matchVol;
  }

  public EsOrderStatusField setMatchVol(int matchVol) {
    this.matchVol = matchVol;
    setMatchVolIsSet(true);
    return this;
  }

  public void unsetMatchVol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHVOL_ISSET_ID);
  }

  /** Returns true if field matchVol is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchVol() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHVOL_ISSET_ID);
  }

  public void setMatchVolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHVOL_ISSET_ID, value);
  }

  public int getErrorCode() {
    return this.errorCode;
  }

  public EsOrderStatusField setErrorCode(int errorCode) {
    this.errorCode = errorCode;
    setErrorCodeIsSet(true);
    return this;
  }

  public void unsetErrorCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
  }

  /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorCode() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
  }

  public void setErrorCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRORCODE_ISSET_ID, value);
  }

  public String getActionLocalNo() {
    return this.actionLocalNo;
  }

  public EsOrderStatusField setActionLocalNo(String actionLocalNo) {
    this.actionLocalNo = actionLocalNo;
    return this;
  }

  public void unsetActionLocalNo() {
    this.actionLocalNo = null;
  }

  /** Returns true if field actionLocalNo is set (has been assigned a value) and false otherwise */
  public boolean isSetActionLocalNo() {
    return this.actionLocalNo != null;
  }

  public void setActionLocalNoIsSet(boolean value) {
    if (!value) {
      this.actionLocalNo = null;
    }
  }

  public String getExchangeSystemNo() {
    return this.exchangeSystemNo;
  }

  public EsOrderStatusField setExchangeSystemNo(String exchangeSystemNo) {
    this.exchangeSystemNo = exchangeSystemNo;
    return this;
  }

  public void unsetExchangeSystemNo() {
    this.exchangeSystemNo = null;
  }

  /** Returns true if field exchangeSystemNo is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeSystemNo() {
    return this.exchangeSystemNo != null;
  }

  public void setExchangeSystemNoIsSet(boolean value) {
    if (!value) {
      this.exchangeSystemNo = null;
    }
  }

  public String getErrorText() {
    return this.errorText;
  }

  public EsOrderStatusField setErrorText(String errorText) {
    this.errorText = errorText;
    return this;
  }

  public void unsetErrorText() {
    this.errorText = null;
  }

  /** Returns true if field errorText is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorText() {
    return this.errorText != null;
  }

  public void setErrorTextIsSet(boolean value) {
    if (!value) {
      this.errorText = null;
    }
  }

  public long getInsertDateTime() {
    return this.insertDateTime;
  }

  public EsOrderStatusField setInsertDateTime(long insertDateTime) {
    this.insertDateTime = insertDateTime;
    setInsertDateTimeIsSet(true);
    return this;
  }

  public void unsetInsertDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSERTDATETIME_ISSET_ID);
  }

  /** Returns true if field insertDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __INSERTDATETIME_ISSET_ID);
  }

  public void setInsertDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSERTDATETIME_ISSET_ID, value);
  }

  public boolean isOrderInput() {
    return this.orderInput;
  }

  public EsOrderStatusField setOrderInput(boolean orderInput) {
    this.orderInput = orderInput;
    setOrderInputIsSet(true);
    return this;
  }

  public void unsetOrderInput() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERINPUT_ISSET_ID);
  }

  /** Returns true if field orderInput is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderInput() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERINPUT_ISSET_ID);
  }

  public void setOrderInputIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERINPUT_ISSET_ID, value);
  }

  /**
   * 
   * @see EsDeletedType
   */
  public EsDeletedType getDeleted() {
    return this.deleted;
  }

  /**
   * 
   * @see EsDeletedType
   */
  public EsOrderStatusField setDeleted(EsDeletedType deleted) {
    this.deleted = deleted;
    return this;
  }

  public void unsetDeleted() {
    this.deleted = null;
  }

  /** Returns true if field deleted is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return this.deleted != null;
  }

  public void setDeletedIsSet(boolean value) {
    if (!value) {
      this.deleted = null;
    }
  }

  public boolean isAddOne() {
    return this.addOne;
  }

  public EsOrderStatusField setAddOne(boolean addOne) {
    this.addOne = addOne;
    setAddOneIsSet(true);
    return this;
  }

  public void unsetAddOne() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADDONE_ISSET_ID);
  }

  /** Returns true if field addOne is set (has been assigned a value) and false otherwise */
  public boolean isSetAddOne() {
    return EncodingUtils.testBit(__isset_bitfield, __ADDONE_ISSET_ID);
  }

  public void setAddOneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADDONE_ISSET_ID, value);
  }

  public String getParentSystemNo() {
    return this.parentSystemNo;
  }

  public EsOrderStatusField setParentSystemNo(String parentSystemNo) {
    this.parentSystemNo = parentSystemNo;
    return this;
  }

  public void unsetParentSystemNo() {
    this.parentSystemNo = null;
  }

  /** Returns true if field parentSystemNo is set (has been assigned a value) and false otherwise */
  public boolean isSetParentSystemNo() {
    return this.parentSystemNo != null;
  }

  public void setParentSystemNoIsSet(boolean value) {
    if (!value) {
      this.parentSystemNo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_ID:
      if (value == null) {
        unsetSledId();
      } else {
        setSledId((String)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((EsOrderType)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((EsOffsetType)value);
      }
      break;

    case HEDGE:
      if (value == null) {
        unsetHedge();
      } else {
        setHedge((EsHedgeType)value);
      }
      break;

    case ORDER_PRICE:
      if (value == null) {
        unsetOrderPrice();
      } else {
        setOrderPrice((Double)value);
      }
      break;

    case TRIGGER_PRICE:
      if (value == null) {
        unsetTriggerPrice();
      } else {
        setTriggerPrice((Double)value);
      }
      break;

    case ORDER_VOL:
      if (value == null) {
        unsetOrderVol();
      } else {
        setOrderVol((Integer)value);
      }
      break;

    case ORDER_STREAM_ID:
      if (value == null) {
        unsetOrderStreamId();
      } else {
        setOrderStreamId((Integer)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Integer)value);
      }
      break;

    case LOCAL_NO:
      if (value == null) {
        unsetLocalNo();
      } else {
        setLocalNo((String)value);
      }
      break;

    case SYSTEM_NO:
      if (value == null) {
        unsetSystemNo();
      } else {
        setSystemNo((String)value);
      }
      break;

    case UPDATE_NO:
      if (value == null) {
        unsetUpdateNo();
      } else {
        setUpdateNo((String)value);
      }
      break;

    case UPDATE_DATE_TIME:
      if (value == null) {
        unsetUpdateDateTime();
      } else {
        setUpdateDateTime((Long)value);
      }
      break;

    case ORDER_STATE:
      if (value == null) {
        unsetOrderState();
      } else {
        setOrderState((EsOrderStateType)value);
      }
      break;

    case MATCH_PRICE:
      if (value == null) {
        unsetMatchPrice();
      } else {
        setMatchPrice((Double)value);
      }
      break;

    case MATCH_VOL:
      if (value == null) {
        unsetMatchVol();
      } else {
        setMatchVol((Integer)value);
      }
      break;

    case ERROR_CODE:
      if (value == null) {
        unsetErrorCode();
      } else {
        setErrorCode((Integer)value);
      }
      break;

    case ACTION_LOCAL_NO:
      if (value == null) {
        unsetActionLocalNo();
      } else {
        setActionLocalNo((String)value);
      }
      break;

    case EXCHANGE_SYSTEM_NO:
      if (value == null) {
        unsetExchangeSystemNo();
      } else {
        setExchangeSystemNo((String)value);
      }
      break;

    case ERROR_TEXT:
      if (value == null) {
        unsetErrorText();
      } else {
        setErrorText((String)value);
      }
      break;

    case INSERT_DATE_TIME:
      if (value == null) {
        unsetInsertDateTime();
      } else {
        setInsertDateTime((Long)value);
      }
      break;

    case ORDER_INPUT:
      if (value == null) {
        unsetOrderInput();
      } else {
        setOrderInput((Boolean)value);
      }
      break;

    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((EsDeletedType)value);
      }
      break;

    case ADD_ONE:
      if (value == null) {
        unsetAddOne();
      } else {
        setAddOne((Boolean)value);
      }
      break;

    case PARENT_SYSTEM_NO:
      if (value == null) {
        unsetParentSystemNo();
      } else {
        setParentSystemNo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_ID:
      return getSledId();

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case ORDER_TYPE:
      return getOrderType();

    case OFFSET:
      return getOffset();

    case HEDGE:
      return getHedge();

    case ORDER_PRICE:
      return Double.valueOf(getOrderPrice());

    case TRIGGER_PRICE:
      return Double.valueOf(getTriggerPrice());

    case ORDER_VOL:
      return Integer.valueOf(getOrderVol());

    case ORDER_STREAM_ID:
      return Integer.valueOf(getOrderStreamId());

    case ORDER_ID:
      return Integer.valueOf(getOrderId());

    case LOCAL_NO:
      return getLocalNo();

    case SYSTEM_NO:
      return getSystemNo();

    case UPDATE_NO:
      return getUpdateNo();

    case UPDATE_DATE_TIME:
      return Long.valueOf(getUpdateDateTime());

    case ORDER_STATE:
      return getOrderState();

    case MATCH_PRICE:
      return Double.valueOf(getMatchPrice());

    case MATCH_VOL:
      return Integer.valueOf(getMatchVol());

    case ERROR_CODE:
      return Integer.valueOf(getErrorCode());

    case ACTION_LOCAL_NO:
      return getActionLocalNo();

    case EXCHANGE_SYSTEM_NO:
      return getExchangeSystemNo();

    case ERROR_TEXT:
      return getErrorText();

    case INSERT_DATE_TIME:
      return Long.valueOf(getInsertDateTime());

    case ORDER_INPUT:
      return Boolean.valueOf(isOrderInput());

    case DELETED:
      return getDeleted();

    case ADD_ONE:
      return Boolean.valueOf(isAddOne());

    case PARENT_SYSTEM_NO:
      return getParentSystemNo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_ID:
      return isSetSledId();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    case USER_ID:
      return isSetUserId();
    case ORDER_TYPE:
      return isSetOrderType();
    case OFFSET:
      return isSetOffset();
    case HEDGE:
      return isSetHedge();
    case ORDER_PRICE:
      return isSetOrderPrice();
    case TRIGGER_PRICE:
      return isSetTriggerPrice();
    case ORDER_VOL:
      return isSetOrderVol();
    case ORDER_STREAM_ID:
      return isSetOrderStreamId();
    case ORDER_ID:
      return isSetOrderId();
    case LOCAL_NO:
      return isSetLocalNo();
    case SYSTEM_NO:
      return isSetSystemNo();
    case UPDATE_NO:
      return isSetUpdateNo();
    case UPDATE_DATE_TIME:
      return isSetUpdateDateTime();
    case ORDER_STATE:
      return isSetOrderState();
    case MATCH_PRICE:
      return isSetMatchPrice();
    case MATCH_VOL:
      return isSetMatchVol();
    case ERROR_CODE:
      return isSetErrorCode();
    case ACTION_LOCAL_NO:
      return isSetActionLocalNo();
    case EXCHANGE_SYSTEM_NO:
      return isSetExchangeSystemNo();
    case ERROR_TEXT:
      return isSetErrorText();
    case INSERT_DATE_TIME:
      return isSetInsertDateTime();
    case ORDER_INPUT:
      return isSetOrderInput();
    case DELETED:
      return isSetDeleted();
    case ADD_ONE:
      return isSetAddOne();
    case PARENT_SYSTEM_NO:
      return isSetParentSystemNo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EsOrderStatusField)
      return this.equals((EsOrderStatusField)that);
    return false;
  }

  public boolean equals(EsOrderStatusField that) {
    if (that == null)
      return false;

    boolean this_present_sledId = true && this.isSetSledId();
    boolean that_present_sledId = true && that.isSetSledId();
    if (this_present_sledId || that_present_sledId) {
      if (!(this_present_sledId && that_present_sledId))
        return false;
      if (!this.sledId.equals(that.sledId))
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_orderType = true && this.isSetOrderType();
    boolean that_present_orderType = true && that.isSetOrderType();
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (!this.orderType.equals(that.orderType))
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (!this.offset.equals(that.offset))
        return false;
    }

    boolean this_present_hedge = true && this.isSetHedge();
    boolean that_present_hedge = true && that.isSetHedge();
    if (this_present_hedge || that_present_hedge) {
      if (!(this_present_hedge && that_present_hedge))
        return false;
      if (!this.hedge.equals(that.hedge))
        return false;
    }

    boolean this_present_orderPrice = true && this.isSetOrderPrice();
    boolean that_present_orderPrice = true && that.isSetOrderPrice();
    if (this_present_orderPrice || that_present_orderPrice) {
      if (!(this_present_orderPrice && that_present_orderPrice))
        return false;
      if (this.orderPrice != that.orderPrice)
        return false;
    }

    boolean this_present_triggerPrice = true && this.isSetTriggerPrice();
    boolean that_present_triggerPrice = true && that.isSetTriggerPrice();
    if (this_present_triggerPrice || that_present_triggerPrice) {
      if (!(this_present_triggerPrice && that_present_triggerPrice))
        return false;
      if (this.triggerPrice != that.triggerPrice)
        return false;
    }

    boolean this_present_orderVol = true && this.isSetOrderVol();
    boolean that_present_orderVol = true && that.isSetOrderVol();
    if (this_present_orderVol || that_present_orderVol) {
      if (!(this_present_orderVol && that_present_orderVol))
        return false;
      if (this.orderVol != that.orderVol)
        return false;
    }

    boolean this_present_orderStreamId = true && this.isSetOrderStreamId();
    boolean that_present_orderStreamId = true && that.isSetOrderStreamId();
    if (this_present_orderStreamId || that_present_orderStreamId) {
      if (!(this_present_orderStreamId && that_present_orderStreamId))
        return false;
      if (this.orderStreamId != that.orderStreamId)
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_localNo = true && this.isSetLocalNo();
    boolean that_present_localNo = true && that.isSetLocalNo();
    if (this_present_localNo || that_present_localNo) {
      if (!(this_present_localNo && that_present_localNo))
        return false;
      if (!this.localNo.equals(that.localNo))
        return false;
    }

    boolean this_present_systemNo = true && this.isSetSystemNo();
    boolean that_present_systemNo = true && that.isSetSystemNo();
    if (this_present_systemNo || that_present_systemNo) {
      if (!(this_present_systemNo && that_present_systemNo))
        return false;
      if (!this.systemNo.equals(that.systemNo))
        return false;
    }

    boolean this_present_updateNo = true && this.isSetUpdateNo();
    boolean that_present_updateNo = true && that.isSetUpdateNo();
    if (this_present_updateNo || that_present_updateNo) {
      if (!(this_present_updateNo && that_present_updateNo))
        return false;
      if (!this.updateNo.equals(that.updateNo))
        return false;
    }

    boolean this_present_updateDateTime = true && this.isSetUpdateDateTime();
    boolean that_present_updateDateTime = true && that.isSetUpdateDateTime();
    if (this_present_updateDateTime || that_present_updateDateTime) {
      if (!(this_present_updateDateTime && that_present_updateDateTime))
        return false;
      if (this.updateDateTime != that.updateDateTime)
        return false;
    }

    boolean this_present_orderState = true && this.isSetOrderState();
    boolean that_present_orderState = true && that.isSetOrderState();
    if (this_present_orderState || that_present_orderState) {
      if (!(this_present_orderState && that_present_orderState))
        return false;
      if (!this.orderState.equals(that.orderState))
        return false;
    }

    boolean this_present_matchPrice = true && this.isSetMatchPrice();
    boolean that_present_matchPrice = true && that.isSetMatchPrice();
    if (this_present_matchPrice || that_present_matchPrice) {
      if (!(this_present_matchPrice && that_present_matchPrice))
        return false;
      if (this.matchPrice != that.matchPrice)
        return false;
    }

    boolean this_present_matchVol = true && this.isSetMatchVol();
    boolean that_present_matchVol = true && that.isSetMatchVol();
    if (this_present_matchVol || that_present_matchVol) {
      if (!(this_present_matchVol && that_present_matchVol))
        return false;
      if (this.matchVol != that.matchVol)
        return false;
    }

    boolean this_present_errorCode = true && this.isSetErrorCode();
    boolean that_present_errorCode = true && that.isSetErrorCode();
    if (this_present_errorCode || that_present_errorCode) {
      if (!(this_present_errorCode && that_present_errorCode))
        return false;
      if (this.errorCode != that.errorCode)
        return false;
    }

    boolean this_present_actionLocalNo = true && this.isSetActionLocalNo();
    boolean that_present_actionLocalNo = true && that.isSetActionLocalNo();
    if (this_present_actionLocalNo || that_present_actionLocalNo) {
      if (!(this_present_actionLocalNo && that_present_actionLocalNo))
        return false;
      if (!this.actionLocalNo.equals(that.actionLocalNo))
        return false;
    }

    boolean this_present_exchangeSystemNo = true && this.isSetExchangeSystemNo();
    boolean that_present_exchangeSystemNo = true && that.isSetExchangeSystemNo();
    if (this_present_exchangeSystemNo || that_present_exchangeSystemNo) {
      if (!(this_present_exchangeSystemNo && that_present_exchangeSystemNo))
        return false;
      if (!this.exchangeSystemNo.equals(that.exchangeSystemNo))
        return false;
    }

    boolean this_present_errorText = true && this.isSetErrorText();
    boolean that_present_errorText = true && that.isSetErrorText();
    if (this_present_errorText || that_present_errorText) {
      if (!(this_present_errorText && that_present_errorText))
        return false;
      if (!this.errorText.equals(that.errorText))
        return false;
    }

    boolean this_present_insertDateTime = true && this.isSetInsertDateTime();
    boolean that_present_insertDateTime = true && that.isSetInsertDateTime();
    if (this_present_insertDateTime || that_present_insertDateTime) {
      if (!(this_present_insertDateTime && that_present_insertDateTime))
        return false;
      if (this.insertDateTime != that.insertDateTime)
        return false;
    }

    boolean this_present_orderInput = true && this.isSetOrderInput();
    boolean that_present_orderInput = true && that.isSetOrderInput();
    if (this_present_orderInput || that_present_orderInput) {
      if (!(this_present_orderInput && that_present_orderInput))
        return false;
      if (this.orderInput != that.orderInput)
        return false;
    }

    boolean this_present_deleted = true && this.isSetDeleted();
    boolean that_present_deleted = true && that.isSetDeleted();
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (!this.deleted.equals(that.deleted))
        return false;
    }

    boolean this_present_addOne = true && this.isSetAddOne();
    boolean that_present_addOne = true && that.isSetAddOne();
    if (this_present_addOne || that_present_addOne) {
      if (!(this_present_addOne && that_present_addOne))
        return false;
      if (this.addOne != that.addOne)
        return false;
    }

    boolean this_present_parentSystemNo = true && this.isSetParentSystemNo();
    boolean that_present_parentSystemNo = true && that.isSetParentSystemNo();
    if (this_present_parentSystemNo || that_present_parentSystemNo) {
      if (!(this_present_parentSystemNo && that_present_parentSystemNo))
        return false;
      if (!this.parentSystemNo.equals(that.parentSystemNo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EsOrderStatusField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledId()).compareTo(other.isSetSledId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledId, other.sledId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHedge()).compareTo(other.isSetHedge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHedge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hedge, other.hedge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderPrice()).compareTo(other.isSetOrderPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderPrice, other.orderPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggerPrice()).compareTo(other.isSetTriggerPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggerPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerPrice, other.triggerPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderVol()).compareTo(other.isSetOrderVol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderVol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderVol, other.orderVol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStreamId()).compareTo(other.isSetOrderStreamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStreamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStreamId, other.orderStreamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalNo()).compareTo(other.isSetLocalNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localNo, other.localNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemNo()).compareTo(other.isSetSystemNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemNo, other.systemNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateNo()).compareTo(other.isSetUpdateNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateNo, other.updateNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDateTime()).compareTo(other.isSetUpdateDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDateTime, other.updateDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderState()).compareTo(other.isSetOrderState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderState, other.orderState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchPrice()).compareTo(other.isSetMatchPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchPrice, other.matchPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchVol()).compareTo(other.isSetMatchVol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchVol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchVol, other.matchVol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorCode()).compareTo(other.isSetErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionLocalNo()).compareTo(other.isSetActionLocalNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionLocalNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionLocalNo, other.actionLocalNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeSystemNo()).compareTo(other.isSetExchangeSystemNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeSystemNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeSystemNo, other.exchangeSystemNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrorText()).compareTo(other.isSetErrorText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorText, other.errorText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertDateTime()).compareTo(other.isSetInsertDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertDateTime, other.insertDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderInput()).compareTo(other.isSetOrderInput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderInput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderInput, other.orderInput);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted()).compareTo(other.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleted, other.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddOne()).compareTo(other.isSetAddOne());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddOne()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addOne, other.addOne);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentSystemNo()).compareTo(other.isSetParentSystemNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentSystemNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentSystemNo, other.parentSystemNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EsOrderStatusField(");
    boolean first = true;

    sb.append("sledId:");
    if (this.sledId == null) {
      sb.append("null");
    } else {
      sb.append(this.sledId);
    }
    first = false;
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetOrderType()) {
      if (!first) sb.append(", ");
      sb.append("orderType:");
      if (this.orderType == null) {
        sb.append("null");
      } else {
        sb.append(this.orderType);
      }
      first = false;
    }
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      if (this.offset == null) {
        sb.append("null");
      } else {
        sb.append(this.offset);
      }
      first = false;
    }
    if (isSetHedge()) {
      if (!first) sb.append(", ");
      sb.append("hedge:");
      if (this.hedge == null) {
        sb.append("null");
      } else {
        sb.append(this.hedge);
      }
      first = false;
    }
    if (isSetOrderPrice()) {
      if (!first) sb.append(", ");
      sb.append("orderPrice:");
      sb.append(this.orderPrice);
      first = false;
    }
    if (isSetTriggerPrice()) {
      if (!first) sb.append(", ");
      sb.append("triggerPrice:");
      sb.append(this.triggerPrice);
      first = false;
    }
    if (isSetOrderVol()) {
      if (!first) sb.append(", ");
      sb.append("orderVol:");
      sb.append(this.orderVol);
      first = false;
    }
    if (isSetOrderStreamId()) {
      if (!first) sb.append(", ");
      sb.append("orderStreamId:");
      sb.append(this.orderStreamId);
      first = false;
    }
    if (isSetOrderId()) {
      if (!first) sb.append(", ");
      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
    }
    if (isSetLocalNo()) {
      if (!first) sb.append(", ");
      sb.append("localNo:");
      if (this.localNo == null) {
        sb.append("null");
      } else {
        sb.append(this.localNo);
      }
      first = false;
    }
    if (isSetSystemNo()) {
      if (!first) sb.append(", ");
      sb.append("systemNo:");
      if (this.systemNo == null) {
        sb.append("null");
      } else {
        sb.append(this.systemNo);
      }
      first = false;
    }
    if (isSetUpdateNo()) {
      if (!first) sb.append(", ");
      sb.append("updateNo:");
      if (this.updateNo == null) {
        sb.append("null");
      } else {
        sb.append(this.updateNo);
      }
      first = false;
    }
    if (isSetUpdateDateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateDateTime:");
      sb.append(this.updateDateTime);
      first = false;
    }
    if (isSetOrderState()) {
      if (!first) sb.append(", ");
      sb.append("orderState:");
      if (this.orderState == null) {
        sb.append("null");
      } else {
        sb.append(this.orderState);
      }
      first = false;
    }
    if (isSetMatchPrice()) {
      if (!first) sb.append(", ");
      sb.append("matchPrice:");
      sb.append(this.matchPrice);
      first = false;
    }
    if (isSetMatchVol()) {
      if (!first) sb.append(", ");
      sb.append("matchVol:");
      sb.append(this.matchVol);
      first = false;
    }
    if (isSetErrorCode()) {
      if (!first) sb.append(", ");
      sb.append("errorCode:");
      sb.append(this.errorCode);
      first = false;
    }
    if (isSetActionLocalNo()) {
      if (!first) sb.append(", ");
      sb.append("actionLocalNo:");
      if (this.actionLocalNo == null) {
        sb.append("null");
      } else {
        sb.append(this.actionLocalNo);
      }
      first = false;
    }
    if (isSetExchangeSystemNo()) {
      if (!first) sb.append(", ");
      sb.append("exchangeSystemNo:");
      if (this.exchangeSystemNo == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeSystemNo);
      }
      first = false;
    }
    if (isSetErrorText()) {
      if (!first) sb.append(", ");
      sb.append("errorText:");
      if (this.errorText == null) {
        sb.append("null");
      } else {
        sb.append(this.errorText);
      }
      first = false;
    }
    if (isSetInsertDateTime()) {
      if (!first) sb.append(", ");
      sb.append("insertDateTime:");
      sb.append(this.insertDateTime);
      first = false;
    }
    if (isSetOrderInput()) {
      if (!first) sb.append(", ");
      sb.append("orderInput:");
      sb.append(this.orderInput);
      first = false;
    }
    if (isSetDeleted()) {
      if (!first) sb.append(", ");
      sb.append("deleted:");
      if (this.deleted == null) {
        sb.append("null");
      } else {
        sb.append(this.deleted);
      }
      first = false;
    }
    if (isSetAddOne()) {
      if (!first) sb.append(", ");
      sb.append("addOne:");
      sb.append(this.addOne);
      first = false;
    }
    if (isSetParentSystemNo()) {
      if (!first) sb.append(", ");
      sb.append("parentSystemNo:");
      if (this.parentSystemNo == null) {
        sb.append("null");
      } else {
        sb.append(this.parentSystemNo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sledId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sledId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EsOrderStatusFieldStandardSchemeFactory implements SchemeFactory {
    public EsOrderStatusFieldStandardScheme getScheme() {
      return new EsOrderStatusFieldStandardScheme();
    }
  }

  private static class EsOrderStatusFieldStandardScheme extends StandardScheme<EsOrderStatusField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EsOrderStatusField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledId = iprot.readString();
              struct.setSledIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderType = EsOrderType.findByValue(iprot.readI32());
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = EsOffsetType.findByValue(iprot.readI32());
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HEDGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hedge = EsHedgeType.findByValue(iprot.readI32());
              struct.setHedgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDER_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.orderPrice = iprot.readDouble();
              struct.setOrderPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TRIGGER_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.triggerPrice = iprot.readDouble();
              struct.setTriggerPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORDER_VOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderVol = iprot.readI32();
              struct.setOrderVolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORDER_STREAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderStreamId = iprot.readI32();
              struct.setOrderStreamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderId = iprot.readI32();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOCAL_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.localNo = iprot.readString();
              struct.setLocalNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SYSTEM_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.systemNo = iprot.readString();
              struct.setSystemNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UPDATE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateNo = iprot.readString();
              struct.setUpdateNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // UPDATE_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateDateTime = iprot.readI64();
              struct.setUpdateDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ORDER_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderState = EsOrderStateType.findByValue(iprot.readI32());
              struct.setOrderStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MATCH_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.matchPrice = iprot.readDouble();
              struct.setMatchPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MATCH_VOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchVol = iprot.readI32();
              struct.setMatchVolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errorCode = iprot.readI32();
              struct.setErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ACTION_LOCAL_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionLocalNo = iprot.readString();
              struct.setActionLocalNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // EXCHANGE_SYSTEM_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeSystemNo = iprot.readString();
              struct.setExchangeSystemNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ERROR_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorText = iprot.readString();
              struct.setErrorTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // INSERT_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.insertDateTime = iprot.readI64();
              struct.setInsertDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ORDER_INPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.orderInput = iprot.readBool();
              struct.setOrderInputIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deleted = EsDeletedType.findByValue(iprot.readI32());
              struct.setDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ADD_ONE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.addOne = iprot.readBool();
              struct.setAddOneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PARENT_SYSTEM_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentSystemNo = iprot.readString();
              struct.setParentSystemNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EsOrderStatusField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledId != null) {
        oprot.writeFieldBegin(SLED_ID_FIELD_DESC);
        oprot.writeString(struct.sledId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.orderType != null) {
        if (struct.isSetOrderType()) {
          oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.orderType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.offset != null) {
        if (struct.isSetOffset()) {
          oprot.writeFieldBegin(OFFSET_FIELD_DESC);
          oprot.writeI32(struct.offset.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.hedge != null) {
        if (struct.isSetHedge()) {
          oprot.writeFieldBegin(HEDGE_FIELD_DESC);
          oprot.writeI32(struct.hedge.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderPrice()) {
        oprot.writeFieldBegin(ORDER_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.orderPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTriggerPrice()) {
        oprot.writeFieldBegin(TRIGGER_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.triggerPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderVol()) {
        oprot.writeFieldBegin(ORDER_VOL_FIELD_DESC);
        oprot.writeI32(struct.orderVol);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderStreamId()) {
        oprot.writeFieldBegin(ORDER_STREAM_ID_FIELD_DESC);
        oprot.writeI32(struct.orderStreamId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderId()) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI32(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.localNo != null) {
        if (struct.isSetLocalNo()) {
          oprot.writeFieldBegin(LOCAL_NO_FIELD_DESC);
          oprot.writeString(struct.localNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.systemNo != null) {
        if (struct.isSetSystemNo()) {
          oprot.writeFieldBegin(SYSTEM_NO_FIELD_DESC);
          oprot.writeString(struct.systemNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateNo != null) {
        if (struct.isSetUpdateNo()) {
          oprot.writeFieldBegin(UPDATE_NO_FIELD_DESC);
          oprot.writeString(struct.updateNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUpdateDateTime()) {
        oprot.writeFieldBegin(UPDATE_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.updateDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.orderState != null) {
        if (struct.isSetOrderState()) {
          oprot.writeFieldBegin(ORDER_STATE_FIELD_DESC);
          oprot.writeI32(struct.orderState.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMatchPrice()) {
        oprot.writeFieldBegin(MATCH_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.matchPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMatchVol()) {
        oprot.writeFieldBegin(MATCH_VOL_FIELD_DESC);
        oprot.writeI32(struct.matchVol);
        oprot.writeFieldEnd();
      }
      if (struct.isSetErrorCode()) {
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.errorCode);
        oprot.writeFieldEnd();
      }
      if (struct.actionLocalNo != null) {
        if (struct.isSetActionLocalNo()) {
          oprot.writeFieldBegin(ACTION_LOCAL_NO_FIELD_DESC);
          oprot.writeString(struct.actionLocalNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchangeSystemNo != null) {
        if (struct.isSetExchangeSystemNo()) {
          oprot.writeFieldBegin(EXCHANGE_SYSTEM_NO_FIELD_DESC);
          oprot.writeString(struct.exchangeSystemNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.errorText != null) {
        if (struct.isSetErrorText()) {
          oprot.writeFieldBegin(ERROR_TEXT_FIELD_DESC);
          oprot.writeString(struct.errorText);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInsertDateTime()) {
        oprot.writeFieldBegin(INSERT_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.insertDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderInput()) {
        oprot.writeFieldBegin(ORDER_INPUT_FIELD_DESC);
        oprot.writeBool(struct.orderInput);
        oprot.writeFieldEnd();
      }
      if (struct.deleted != null) {
        if (struct.isSetDeleted()) {
          oprot.writeFieldBegin(DELETED_FIELD_DESC);
          oprot.writeI32(struct.deleted.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAddOne()) {
        oprot.writeFieldBegin(ADD_ONE_FIELD_DESC);
        oprot.writeBool(struct.addOne);
        oprot.writeFieldEnd();
      }
      if (struct.parentSystemNo != null) {
        if (struct.isSetParentSystemNo()) {
          oprot.writeFieldBegin(PARENT_SYSTEM_NO_FIELD_DESC);
          oprot.writeString(struct.parentSystemNo);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EsOrderStatusFieldTupleSchemeFactory implements SchemeFactory {
    public EsOrderStatusFieldTupleScheme getScheme() {
      return new EsOrderStatusFieldTupleScheme();
    }
  }

  private static class EsOrderStatusFieldTupleScheme extends TupleScheme<EsOrderStatusField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EsOrderStatusField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sledId);
      BitSet optionals = new BitSet();
      if (struct.isSetSledAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetOrderType()) {
        optionals.set(2);
      }
      if (struct.isSetOffset()) {
        optionals.set(3);
      }
      if (struct.isSetHedge()) {
        optionals.set(4);
      }
      if (struct.isSetOrderPrice()) {
        optionals.set(5);
      }
      if (struct.isSetTriggerPrice()) {
        optionals.set(6);
      }
      if (struct.isSetOrderVol()) {
        optionals.set(7);
      }
      if (struct.isSetOrderStreamId()) {
        optionals.set(8);
      }
      if (struct.isSetOrderId()) {
        optionals.set(9);
      }
      if (struct.isSetLocalNo()) {
        optionals.set(10);
      }
      if (struct.isSetSystemNo()) {
        optionals.set(11);
      }
      if (struct.isSetUpdateNo()) {
        optionals.set(12);
      }
      if (struct.isSetUpdateDateTime()) {
        optionals.set(13);
      }
      if (struct.isSetOrderState()) {
        optionals.set(14);
      }
      if (struct.isSetMatchPrice()) {
        optionals.set(15);
      }
      if (struct.isSetMatchVol()) {
        optionals.set(16);
      }
      if (struct.isSetErrorCode()) {
        optionals.set(17);
      }
      if (struct.isSetActionLocalNo()) {
        optionals.set(18);
      }
      if (struct.isSetExchangeSystemNo()) {
        optionals.set(19);
      }
      if (struct.isSetErrorText()) {
        optionals.set(20);
      }
      if (struct.isSetInsertDateTime()) {
        optionals.set(21);
      }
      if (struct.isSetOrderInput()) {
        optionals.set(22);
      }
      if (struct.isSetDeleted()) {
        optionals.set(23);
      }
      if (struct.isSetAddOne()) {
        optionals.set(24);
      }
      if (struct.isSetParentSystemNo()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetOrderType()) {
        oprot.writeI32(struct.orderType.getValue());
      }
      if (struct.isSetOffset()) {
        oprot.writeI32(struct.offset.getValue());
      }
      if (struct.isSetHedge()) {
        oprot.writeI32(struct.hedge.getValue());
      }
      if (struct.isSetOrderPrice()) {
        oprot.writeDouble(struct.orderPrice);
      }
      if (struct.isSetTriggerPrice()) {
        oprot.writeDouble(struct.triggerPrice);
      }
      if (struct.isSetOrderVol()) {
        oprot.writeI32(struct.orderVol);
      }
      if (struct.isSetOrderStreamId()) {
        oprot.writeI32(struct.orderStreamId);
      }
      if (struct.isSetOrderId()) {
        oprot.writeI32(struct.orderId);
      }
      if (struct.isSetLocalNo()) {
        oprot.writeString(struct.localNo);
      }
      if (struct.isSetSystemNo()) {
        oprot.writeString(struct.systemNo);
      }
      if (struct.isSetUpdateNo()) {
        oprot.writeString(struct.updateNo);
      }
      if (struct.isSetUpdateDateTime()) {
        oprot.writeI64(struct.updateDateTime);
      }
      if (struct.isSetOrderState()) {
        oprot.writeI32(struct.orderState.getValue());
      }
      if (struct.isSetMatchPrice()) {
        oprot.writeDouble(struct.matchPrice);
      }
      if (struct.isSetMatchVol()) {
        oprot.writeI32(struct.matchVol);
      }
      if (struct.isSetErrorCode()) {
        oprot.writeI32(struct.errorCode);
      }
      if (struct.isSetActionLocalNo()) {
        oprot.writeString(struct.actionLocalNo);
      }
      if (struct.isSetExchangeSystemNo()) {
        oprot.writeString(struct.exchangeSystemNo);
      }
      if (struct.isSetErrorText()) {
        oprot.writeString(struct.errorText);
      }
      if (struct.isSetInsertDateTime()) {
        oprot.writeI64(struct.insertDateTime);
      }
      if (struct.isSetOrderInput()) {
        oprot.writeBool(struct.orderInput);
      }
      if (struct.isSetDeleted()) {
        oprot.writeI32(struct.deleted.getValue());
      }
      if (struct.isSetAddOne()) {
        oprot.writeBool(struct.addOne);
      }
      if (struct.isSetParentSystemNo()) {
        oprot.writeString(struct.parentSystemNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EsOrderStatusField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sledId = iprot.readString();
      struct.setSledIdIsSet(true);
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orderType = EsOrderType.findByValue(iprot.readI32());
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.offset = EsOffsetType.findByValue(iprot.readI32());
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hedge = EsHedgeType.findByValue(iprot.readI32());
        struct.setHedgeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orderPrice = iprot.readDouble();
        struct.setOrderPriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.triggerPrice = iprot.readDouble();
        struct.setTriggerPriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orderVol = iprot.readI32();
        struct.setOrderVolIsSet(true);
      }
      if (incoming.get(8)) {
        struct.orderStreamId = iprot.readI32();
        struct.setOrderStreamIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.orderId = iprot.readI32();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.localNo = iprot.readString();
        struct.setLocalNoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.systemNo = iprot.readString();
        struct.setSystemNoIsSet(true);
      }
      if (incoming.get(12)) {
        struct.updateNo = iprot.readString();
        struct.setUpdateNoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.updateDateTime = iprot.readI64();
        struct.setUpdateDateTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.orderState = EsOrderStateType.findByValue(iprot.readI32());
        struct.setOrderStateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.matchPrice = iprot.readDouble();
        struct.setMatchPriceIsSet(true);
      }
      if (incoming.get(16)) {
        struct.matchVol = iprot.readI32();
        struct.setMatchVolIsSet(true);
      }
      if (incoming.get(17)) {
        struct.errorCode = iprot.readI32();
        struct.setErrorCodeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.actionLocalNo = iprot.readString();
        struct.setActionLocalNoIsSet(true);
      }
      if (incoming.get(19)) {
        struct.exchangeSystemNo = iprot.readString();
        struct.setExchangeSystemNoIsSet(true);
      }
      if (incoming.get(20)) {
        struct.errorText = iprot.readString();
        struct.setErrorTextIsSet(true);
      }
      if (incoming.get(21)) {
        struct.insertDateTime = iprot.readI64();
        struct.setInsertDateTimeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.orderInput = iprot.readBool();
        struct.setOrderInputIsSet(true);
      }
      if (incoming.get(23)) {
        struct.deleted = EsDeletedType.findByValue(iprot.readI32());
        struct.setDeletedIsSet(true);
      }
      if (incoming.get(24)) {
        struct.addOne = iprot.readBool();
        struct.setAddOneIsSet(true);
      }
      if (incoming.get(25)) {
        struct.parentSystemNo = iprot.readString();
        struct.setParentSystemNoIsSet(true);
      }
    }
  }

}

