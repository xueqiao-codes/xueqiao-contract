/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.standard.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Es9Contract implements org.apache.thrift.TBase<Es9Contract, Es9Contract._Fields>, java.io.Serializable, Cloneable, Comparable<Es9Contract> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Es9Contract");

  private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXCHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchange", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMMODITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTRACT_CODE1_FIELD_DESC = new org.apache.thrift.protocol.TField("contractCode1", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONTRACT_CODE2_FIELD_DESC = new org.apache.thrift.protocol.TField("contractCode2", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CALL_PUT_FLAG1_FIELD_DESC = new org.apache.thrift.protocol.TField("callPutFlag1", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CALL_PUT_FLAG2_FIELD_DESC = new org.apache.thrift.protocol.TField("callPutFlag2", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STRIKE_PRICE1_FIELD_DESC = new org.apache.thrift.protocol.TField("strikePrice1", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField STRIKE_PRICE2_FIELD_DESC = new org.apache.thrift.protocol.TField("strikePrice2", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField PLATFORM_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("platformEnv", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Es9ContractStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Es9ContractTupleSchemeFactory());
  }

  public int contractId; // optional
  public String exchange; // optional
  public String commodityType; // optional
  public String commodityCode; // optional
  public String contractCode1; // optional
  public String contractCode2; // optional
  public String callPutFlag1; // optional
  public String callPutFlag2; // optional
  public double strikePrice1; // optional
  public double strikePrice2; // optional
  /**
   * 
   * @see PlatformEnv
   */
  public PlatformEnv platformEnv; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTRACT_ID((short)1, "contractId"),
    EXCHANGE((short)2, "exchange"),
    COMMODITY_TYPE((short)3, "commodityType"),
    COMMODITY_CODE((short)4, "commodityCode"),
    CONTRACT_CODE1((short)5, "contractCode1"),
    CONTRACT_CODE2((short)6, "contractCode2"),
    CALL_PUT_FLAG1((short)7, "callPutFlag1"),
    CALL_PUT_FLAG2((short)8, "callPutFlag2"),
    STRIKE_PRICE1((short)9, "strikePrice1"),
    STRIKE_PRICE2((short)10, "strikePrice2"),
    /**
     * 
     * @see PlatformEnv
     */
    PLATFORM_ENV((short)11, "platformEnv");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTRACT_ID
          return CONTRACT_ID;
        case 2: // EXCHANGE
          return EXCHANGE;
        case 3: // COMMODITY_TYPE
          return COMMODITY_TYPE;
        case 4: // COMMODITY_CODE
          return COMMODITY_CODE;
        case 5: // CONTRACT_CODE1
          return CONTRACT_CODE1;
        case 6: // CONTRACT_CODE2
          return CONTRACT_CODE2;
        case 7: // CALL_PUT_FLAG1
          return CALL_PUT_FLAG1;
        case 8: // CALL_PUT_FLAG2
          return CALL_PUT_FLAG2;
        case 9: // STRIKE_PRICE1
          return STRIKE_PRICE1;
        case 10: // STRIKE_PRICE2
          return STRIKE_PRICE2;
        case 11: // PLATFORM_ENV
          return PLATFORM_ENV;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONTRACTID_ISSET_ID = 0;
  private static final int __STRIKEPRICE1_ISSET_ID = 1;
  private static final int __STRIKEPRICE2_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONTRACT_ID,_Fields.EXCHANGE,_Fields.COMMODITY_TYPE,_Fields.COMMODITY_CODE,_Fields.CONTRACT_CODE1,_Fields.CONTRACT_CODE2,_Fields.CALL_PUT_FLAG1,_Fields.CALL_PUT_FLAG2,_Fields.STRIKE_PRICE1,_Fields.STRIKE_PRICE2,_Fields.PLATFORM_ENV};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCHANGE, new org.apache.thrift.meta_data.FieldMetaData("exchange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("commodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("commodityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_CODE1, new org.apache.thrift.meta_data.FieldMetaData("contractCode1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_CODE2, new org.apache.thrift.meta_data.FieldMetaData("contractCode2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALL_PUT_FLAG1, new org.apache.thrift.meta_data.FieldMetaData("callPutFlag1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALL_PUT_FLAG2, new org.apache.thrift.meta_data.FieldMetaData("callPutFlag2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRIKE_PRICE1, new org.apache.thrift.meta_data.FieldMetaData("strikePrice1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRIKE_PRICE2, new org.apache.thrift.meta_data.FieldMetaData("strikePrice2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PLATFORM_ENV, new org.apache.thrift.meta_data.FieldMetaData("platformEnv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PlatformEnv.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Es9Contract.class, metaDataMap);
  }

  public Es9Contract() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Es9Contract(Es9Contract other) {
    __isset_bitfield = other.__isset_bitfield;
    this.contractId = other.contractId;
    if (other.isSetExchange()) {
      this.exchange = other.exchange;
    }
    if (other.isSetCommodityType()) {
      this.commodityType = other.commodityType;
    }
    if (other.isSetCommodityCode()) {
      this.commodityCode = other.commodityCode;
    }
    if (other.isSetContractCode1()) {
      this.contractCode1 = other.contractCode1;
    }
    if (other.isSetContractCode2()) {
      this.contractCode2 = other.contractCode2;
    }
    if (other.isSetCallPutFlag1()) {
      this.callPutFlag1 = other.callPutFlag1;
    }
    if (other.isSetCallPutFlag2()) {
      this.callPutFlag2 = other.callPutFlag2;
    }
    this.strikePrice1 = other.strikePrice1;
    this.strikePrice2 = other.strikePrice2;
    if (other.isSetPlatformEnv()) {
      this.platformEnv = other.platformEnv;
    }
  }

  public Es9Contract deepCopy() {
    return new Es9Contract(this);
  }

  @Override
  public void clear() {
    setContractIdIsSet(false);
    this.contractId = 0;
    this.exchange = null;
    this.commodityType = null;
    this.commodityCode = null;
    this.contractCode1 = null;
    this.contractCode2 = null;
    this.callPutFlag1 = null;
    this.callPutFlag2 = null;
    setStrikePrice1IsSet(false);
    this.strikePrice1 = 0.0;
    setStrikePrice2IsSet(false);
    this.strikePrice2 = 0.0;
    this.platformEnv = null;
  }

  public int getContractId() {
    return this.contractId;
  }

  public Es9Contract setContractId(int contractId) {
    this.contractId = contractId;
    setContractIdIsSet(true);
    return this;
  }

  public void unsetContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  /** Returns true if field contractId is set (has been assigned a value) and false otherwise */
  public boolean isSetContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  public void setContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTID_ISSET_ID, value);
  }

  public String getExchange() {
    return this.exchange;
  }

  public Es9Contract setExchange(String exchange) {
    this.exchange = exchange;
    return this;
  }

  public void unsetExchange() {
    this.exchange = null;
  }

  /** Returns true if field exchange is set (has been assigned a value) and false otherwise */
  public boolean isSetExchange() {
    return this.exchange != null;
  }

  public void setExchangeIsSet(boolean value) {
    if (!value) {
      this.exchange = null;
    }
  }

  public String getCommodityType() {
    return this.commodityType;
  }

  public Es9Contract setCommodityType(String commodityType) {
    this.commodityType = commodityType;
    return this;
  }

  public void unsetCommodityType() {
    this.commodityType = null;
  }

  /** Returns true if field commodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityType() {
    return this.commodityType != null;
  }

  public void setCommodityTypeIsSet(boolean value) {
    if (!value) {
      this.commodityType = null;
    }
  }

  public String getCommodityCode() {
    return this.commodityCode;
  }

  public Es9Contract setCommodityCode(String commodityCode) {
    this.commodityCode = commodityCode;
    return this;
  }

  public void unsetCommodityCode() {
    this.commodityCode = null;
  }

  /** Returns true if field commodityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityCode() {
    return this.commodityCode != null;
  }

  public void setCommodityCodeIsSet(boolean value) {
    if (!value) {
      this.commodityCode = null;
    }
  }

  public String getContractCode1() {
    return this.contractCode1;
  }

  public Es9Contract setContractCode1(String contractCode1) {
    this.contractCode1 = contractCode1;
    return this;
  }

  public void unsetContractCode1() {
    this.contractCode1 = null;
  }

  /** Returns true if field contractCode1 is set (has been assigned a value) and false otherwise */
  public boolean isSetContractCode1() {
    return this.contractCode1 != null;
  }

  public void setContractCode1IsSet(boolean value) {
    if (!value) {
      this.contractCode1 = null;
    }
  }

  public String getContractCode2() {
    return this.contractCode2;
  }

  public Es9Contract setContractCode2(String contractCode2) {
    this.contractCode2 = contractCode2;
    return this;
  }

  public void unsetContractCode2() {
    this.contractCode2 = null;
  }

  /** Returns true if field contractCode2 is set (has been assigned a value) and false otherwise */
  public boolean isSetContractCode2() {
    return this.contractCode2 != null;
  }

  public void setContractCode2IsSet(boolean value) {
    if (!value) {
      this.contractCode2 = null;
    }
  }

  public String getCallPutFlag1() {
    return this.callPutFlag1;
  }

  public Es9Contract setCallPutFlag1(String callPutFlag1) {
    this.callPutFlag1 = callPutFlag1;
    return this;
  }

  public void unsetCallPutFlag1() {
    this.callPutFlag1 = null;
  }

  /** Returns true if field callPutFlag1 is set (has been assigned a value) and false otherwise */
  public boolean isSetCallPutFlag1() {
    return this.callPutFlag1 != null;
  }

  public void setCallPutFlag1IsSet(boolean value) {
    if (!value) {
      this.callPutFlag1 = null;
    }
  }

  public String getCallPutFlag2() {
    return this.callPutFlag2;
  }

  public Es9Contract setCallPutFlag2(String callPutFlag2) {
    this.callPutFlag2 = callPutFlag2;
    return this;
  }

  public void unsetCallPutFlag2() {
    this.callPutFlag2 = null;
  }

  /** Returns true if field callPutFlag2 is set (has been assigned a value) and false otherwise */
  public boolean isSetCallPutFlag2() {
    return this.callPutFlag2 != null;
  }

  public void setCallPutFlag2IsSet(boolean value) {
    if (!value) {
      this.callPutFlag2 = null;
    }
  }

  public double getStrikePrice1() {
    return this.strikePrice1;
  }

  public Es9Contract setStrikePrice1(double strikePrice1) {
    this.strikePrice1 = strikePrice1;
    setStrikePrice1IsSet(true);
    return this;
  }

  public void unsetStrikePrice1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRIKEPRICE1_ISSET_ID);
  }

  /** Returns true if field strikePrice1 is set (has been assigned a value) and false otherwise */
  public boolean isSetStrikePrice1() {
    return EncodingUtils.testBit(__isset_bitfield, __STRIKEPRICE1_ISSET_ID);
  }

  public void setStrikePrice1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRIKEPRICE1_ISSET_ID, value);
  }

  public double getStrikePrice2() {
    return this.strikePrice2;
  }

  public Es9Contract setStrikePrice2(double strikePrice2) {
    this.strikePrice2 = strikePrice2;
    setStrikePrice2IsSet(true);
    return this;
  }

  public void unsetStrikePrice2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRIKEPRICE2_ISSET_ID);
  }

  /** Returns true if field strikePrice2 is set (has been assigned a value) and false otherwise */
  public boolean isSetStrikePrice2() {
    return EncodingUtils.testBit(__isset_bitfield, __STRIKEPRICE2_ISSET_ID);
  }

  public void setStrikePrice2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRIKEPRICE2_ISSET_ID, value);
  }

  /**
   * 
   * @see PlatformEnv
   */
  public PlatformEnv getPlatformEnv() {
    return this.platformEnv;
  }

  /**
   * 
   * @see PlatformEnv
   */
  public Es9Contract setPlatformEnv(PlatformEnv platformEnv) {
    this.platformEnv = platformEnv;
    return this;
  }

  public void unsetPlatformEnv() {
    this.platformEnv = null;
  }

  /** Returns true if field platformEnv is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformEnv() {
    return this.platformEnv != null;
  }

  public void setPlatformEnvIsSet(boolean value) {
    if (!value) {
      this.platformEnv = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTRACT_ID:
      if (value == null) {
        unsetContractId();
      } else {
        setContractId((Integer)value);
      }
      break;

    case EXCHANGE:
      if (value == null) {
        unsetExchange();
      } else {
        setExchange((String)value);
      }
      break;

    case COMMODITY_TYPE:
      if (value == null) {
        unsetCommodityType();
      } else {
        setCommodityType((String)value);
      }
      break;

    case COMMODITY_CODE:
      if (value == null) {
        unsetCommodityCode();
      } else {
        setCommodityCode((String)value);
      }
      break;

    case CONTRACT_CODE1:
      if (value == null) {
        unsetContractCode1();
      } else {
        setContractCode1((String)value);
      }
      break;

    case CONTRACT_CODE2:
      if (value == null) {
        unsetContractCode2();
      } else {
        setContractCode2((String)value);
      }
      break;

    case CALL_PUT_FLAG1:
      if (value == null) {
        unsetCallPutFlag1();
      } else {
        setCallPutFlag1((String)value);
      }
      break;

    case CALL_PUT_FLAG2:
      if (value == null) {
        unsetCallPutFlag2();
      } else {
        setCallPutFlag2((String)value);
      }
      break;

    case STRIKE_PRICE1:
      if (value == null) {
        unsetStrikePrice1();
      } else {
        setStrikePrice1((Double)value);
      }
      break;

    case STRIKE_PRICE2:
      if (value == null) {
        unsetStrikePrice2();
      } else {
        setStrikePrice2((Double)value);
      }
      break;

    case PLATFORM_ENV:
      if (value == null) {
        unsetPlatformEnv();
      } else {
        setPlatformEnv((PlatformEnv)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTRACT_ID:
      return Integer.valueOf(getContractId());

    case EXCHANGE:
      return getExchange();

    case COMMODITY_TYPE:
      return getCommodityType();

    case COMMODITY_CODE:
      return getCommodityCode();

    case CONTRACT_CODE1:
      return getContractCode1();

    case CONTRACT_CODE2:
      return getContractCode2();

    case CALL_PUT_FLAG1:
      return getCallPutFlag1();

    case CALL_PUT_FLAG2:
      return getCallPutFlag2();

    case STRIKE_PRICE1:
      return Double.valueOf(getStrikePrice1());

    case STRIKE_PRICE2:
      return Double.valueOf(getStrikePrice2());

    case PLATFORM_ENV:
      return getPlatformEnv();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTRACT_ID:
      return isSetContractId();
    case EXCHANGE:
      return isSetExchange();
    case COMMODITY_TYPE:
      return isSetCommodityType();
    case COMMODITY_CODE:
      return isSetCommodityCode();
    case CONTRACT_CODE1:
      return isSetContractCode1();
    case CONTRACT_CODE2:
      return isSetContractCode2();
    case CALL_PUT_FLAG1:
      return isSetCallPutFlag1();
    case CALL_PUT_FLAG2:
      return isSetCallPutFlag2();
    case STRIKE_PRICE1:
      return isSetStrikePrice1();
    case STRIKE_PRICE2:
      return isSetStrikePrice2();
    case PLATFORM_ENV:
      return isSetPlatformEnv();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Es9Contract)
      return this.equals((Es9Contract)that);
    return false;
  }

  public boolean equals(Es9Contract that) {
    if (that == null)
      return false;

    boolean this_present_contractId = true && this.isSetContractId();
    boolean that_present_contractId = true && that.isSetContractId();
    if (this_present_contractId || that_present_contractId) {
      if (!(this_present_contractId && that_present_contractId))
        return false;
      if (this.contractId != that.contractId)
        return false;
    }

    boolean this_present_exchange = true && this.isSetExchange();
    boolean that_present_exchange = true && that.isSetExchange();
    if (this_present_exchange || that_present_exchange) {
      if (!(this_present_exchange && that_present_exchange))
        return false;
      if (!this.exchange.equals(that.exchange))
        return false;
    }

    boolean this_present_commodityType = true && this.isSetCommodityType();
    boolean that_present_commodityType = true && that.isSetCommodityType();
    if (this_present_commodityType || that_present_commodityType) {
      if (!(this_present_commodityType && that_present_commodityType))
        return false;
      if (!this.commodityType.equals(that.commodityType))
        return false;
    }

    boolean this_present_commodityCode = true && this.isSetCommodityCode();
    boolean that_present_commodityCode = true && that.isSetCommodityCode();
    if (this_present_commodityCode || that_present_commodityCode) {
      if (!(this_present_commodityCode && that_present_commodityCode))
        return false;
      if (!this.commodityCode.equals(that.commodityCode))
        return false;
    }

    boolean this_present_contractCode1 = true && this.isSetContractCode1();
    boolean that_present_contractCode1 = true && that.isSetContractCode1();
    if (this_present_contractCode1 || that_present_contractCode1) {
      if (!(this_present_contractCode1 && that_present_contractCode1))
        return false;
      if (!this.contractCode1.equals(that.contractCode1))
        return false;
    }

    boolean this_present_contractCode2 = true && this.isSetContractCode2();
    boolean that_present_contractCode2 = true && that.isSetContractCode2();
    if (this_present_contractCode2 || that_present_contractCode2) {
      if (!(this_present_contractCode2 && that_present_contractCode2))
        return false;
      if (!this.contractCode2.equals(that.contractCode2))
        return false;
    }

    boolean this_present_callPutFlag1 = true && this.isSetCallPutFlag1();
    boolean that_present_callPutFlag1 = true && that.isSetCallPutFlag1();
    if (this_present_callPutFlag1 || that_present_callPutFlag1) {
      if (!(this_present_callPutFlag1 && that_present_callPutFlag1))
        return false;
      if (!this.callPutFlag1.equals(that.callPutFlag1))
        return false;
    }

    boolean this_present_callPutFlag2 = true && this.isSetCallPutFlag2();
    boolean that_present_callPutFlag2 = true && that.isSetCallPutFlag2();
    if (this_present_callPutFlag2 || that_present_callPutFlag2) {
      if (!(this_present_callPutFlag2 && that_present_callPutFlag2))
        return false;
      if (!this.callPutFlag2.equals(that.callPutFlag2))
        return false;
    }

    boolean this_present_strikePrice1 = true && this.isSetStrikePrice1();
    boolean that_present_strikePrice1 = true && that.isSetStrikePrice1();
    if (this_present_strikePrice1 || that_present_strikePrice1) {
      if (!(this_present_strikePrice1 && that_present_strikePrice1))
        return false;
      if (this.strikePrice1 != that.strikePrice1)
        return false;
    }

    boolean this_present_strikePrice2 = true && this.isSetStrikePrice2();
    boolean that_present_strikePrice2 = true && that.isSetStrikePrice2();
    if (this_present_strikePrice2 || that_present_strikePrice2) {
      if (!(this_present_strikePrice2 && that_present_strikePrice2))
        return false;
      if (this.strikePrice2 != that.strikePrice2)
        return false;
    }

    boolean this_present_platformEnv = true && this.isSetPlatformEnv();
    boolean that_present_platformEnv = true && that.isSetPlatformEnv();
    if (this_present_platformEnv || that_present_platformEnv) {
      if (!(this_present_platformEnv && that_present_platformEnv))
        return false;
      if (!this.platformEnv.equals(that.platformEnv))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Es9Contract other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContractId()).compareTo(other.isSetContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractId, other.contractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchange()).compareTo(other.isSetExchange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchange, other.exchange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityType()).compareTo(other.isSetCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityType, other.commodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityCode()).compareTo(other.isSetCommodityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityCode, other.commodityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractCode1()).compareTo(other.isSetContractCode1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractCode1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractCode1, other.contractCode1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractCode2()).compareTo(other.isSetContractCode2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractCode2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractCode2, other.contractCode2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallPutFlag1()).compareTo(other.isSetCallPutFlag1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallPutFlag1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callPutFlag1, other.callPutFlag1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallPutFlag2()).compareTo(other.isSetCallPutFlag2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallPutFlag2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callPutFlag2, other.callPutFlag2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrikePrice1()).compareTo(other.isSetStrikePrice1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrikePrice1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strikePrice1, other.strikePrice1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrikePrice2()).compareTo(other.isSetStrikePrice2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrikePrice2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strikePrice2, other.strikePrice2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformEnv()).compareTo(other.isSetPlatformEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformEnv, other.platformEnv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Es9Contract(");
    boolean first = true;

    if (isSetContractId()) {
      sb.append("contractId:");
      sb.append(this.contractId);
      first = false;
    }
    if (isSetExchange()) {
      if (!first) sb.append(", ");
      sb.append("exchange:");
      if (this.exchange == null) {
        sb.append("null");
      } else {
        sb.append(this.exchange);
      }
      first = false;
    }
    if (isSetCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("commodityType:");
      if (this.commodityType == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityType);
      }
      first = false;
    }
    if (isSetCommodityCode()) {
      if (!first) sb.append(", ");
      sb.append("commodityCode:");
      if (this.commodityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityCode);
      }
      first = false;
    }
    if (isSetContractCode1()) {
      if (!first) sb.append(", ");
      sb.append("contractCode1:");
      if (this.contractCode1 == null) {
        sb.append("null");
      } else {
        sb.append(this.contractCode1);
      }
      first = false;
    }
    if (isSetContractCode2()) {
      if (!first) sb.append(", ");
      sb.append("contractCode2:");
      if (this.contractCode2 == null) {
        sb.append("null");
      } else {
        sb.append(this.contractCode2);
      }
      first = false;
    }
    if (isSetCallPutFlag1()) {
      if (!first) sb.append(", ");
      sb.append("callPutFlag1:");
      if (this.callPutFlag1 == null) {
        sb.append("null");
      } else {
        sb.append(this.callPutFlag1);
      }
      first = false;
    }
    if (isSetCallPutFlag2()) {
      if (!first) sb.append(", ");
      sb.append("callPutFlag2:");
      if (this.callPutFlag2 == null) {
        sb.append("null");
      } else {
        sb.append(this.callPutFlag2);
      }
      first = false;
    }
    if (isSetStrikePrice1()) {
      if (!first) sb.append(", ");
      sb.append("strikePrice1:");
      sb.append(this.strikePrice1);
      first = false;
    }
    if (isSetStrikePrice2()) {
      if (!first) sb.append(", ");
      sb.append("strikePrice2:");
      sb.append(this.strikePrice2);
      first = false;
    }
    if (isSetPlatformEnv()) {
      if (!first) sb.append(", ");
      sb.append("platformEnv:");
      if (this.platformEnv == null) {
        sb.append("null");
      } else {
        sb.append(this.platformEnv);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Es9ContractStandardSchemeFactory implements SchemeFactory {
    public Es9ContractStandardScheme getScheme() {
      return new Es9ContractStandardScheme();
    }
  }

  private static class Es9ContractStandardScheme extends StandardScheme<Es9Contract> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Es9Contract struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractId = iprot.readI32();
              struct.setContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchange = iprot.readString();
              struct.setExchangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityType = iprot.readString();
              struct.setCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMODITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityCode = iprot.readString();
              struct.setCommodityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTRACT_CODE1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractCode1 = iprot.readString();
              struct.setContractCode1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTRACT_CODE2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractCode2 = iprot.readString();
              struct.setContractCode2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CALL_PUT_FLAG1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.callPutFlag1 = iprot.readString();
              struct.setCallPutFlag1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CALL_PUT_FLAG2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.callPutFlag2 = iprot.readString();
              struct.setCallPutFlag2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STRIKE_PRICE1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.strikePrice1 = iprot.readDouble();
              struct.setStrikePrice1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STRIKE_PRICE2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.strikePrice2 = iprot.readDouble();
              struct.setStrikePrice2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PLATFORM_ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platformEnv = PlatformEnv.findByValue(iprot.readI32());
              struct.setPlatformEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Es9Contract struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetContractId()) {
        oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
        oprot.writeI32(struct.contractId);
        oprot.writeFieldEnd();
      }
      if (struct.exchange != null) {
        if (struct.isSetExchange()) {
          oprot.writeFieldBegin(EXCHANGE_FIELD_DESC);
          oprot.writeString(struct.exchange);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityType != null) {
        if (struct.isSetCommodityType()) {
          oprot.writeFieldBegin(COMMODITY_TYPE_FIELD_DESC);
          oprot.writeString(struct.commodityType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityCode != null) {
        if (struct.isSetCommodityCode()) {
          oprot.writeFieldBegin(COMMODITY_CODE_FIELD_DESC);
          oprot.writeString(struct.commodityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractCode1 != null) {
        if (struct.isSetContractCode1()) {
          oprot.writeFieldBegin(CONTRACT_CODE1_FIELD_DESC);
          oprot.writeString(struct.contractCode1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractCode2 != null) {
        if (struct.isSetContractCode2()) {
          oprot.writeFieldBegin(CONTRACT_CODE2_FIELD_DESC);
          oprot.writeString(struct.contractCode2);
          oprot.writeFieldEnd();
        }
      }
      if (struct.callPutFlag1 != null) {
        if (struct.isSetCallPutFlag1()) {
          oprot.writeFieldBegin(CALL_PUT_FLAG1_FIELD_DESC);
          oprot.writeString(struct.callPutFlag1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.callPutFlag2 != null) {
        if (struct.isSetCallPutFlag2()) {
          oprot.writeFieldBegin(CALL_PUT_FLAG2_FIELD_DESC);
          oprot.writeString(struct.callPutFlag2);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStrikePrice1()) {
        oprot.writeFieldBegin(STRIKE_PRICE1_FIELD_DESC);
        oprot.writeDouble(struct.strikePrice1);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStrikePrice2()) {
        oprot.writeFieldBegin(STRIKE_PRICE2_FIELD_DESC);
        oprot.writeDouble(struct.strikePrice2);
        oprot.writeFieldEnd();
      }
      if (struct.platformEnv != null) {
        if (struct.isSetPlatformEnv()) {
          oprot.writeFieldBegin(PLATFORM_ENV_FIELD_DESC);
          oprot.writeI32(struct.platformEnv.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Es9ContractTupleSchemeFactory implements SchemeFactory {
    public Es9ContractTupleScheme getScheme() {
      return new Es9ContractTupleScheme();
    }
  }

  private static class Es9ContractTupleScheme extends TupleScheme<Es9Contract> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Es9Contract struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContractId()) {
        optionals.set(0);
      }
      if (struct.isSetExchange()) {
        optionals.set(1);
      }
      if (struct.isSetCommodityType()) {
        optionals.set(2);
      }
      if (struct.isSetCommodityCode()) {
        optionals.set(3);
      }
      if (struct.isSetContractCode1()) {
        optionals.set(4);
      }
      if (struct.isSetContractCode2()) {
        optionals.set(5);
      }
      if (struct.isSetCallPutFlag1()) {
        optionals.set(6);
      }
      if (struct.isSetCallPutFlag2()) {
        optionals.set(7);
      }
      if (struct.isSetStrikePrice1()) {
        optionals.set(8);
      }
      if (struct.isSetStrikePrice2()) {
        optionals.set(9);
      }
      if (struct.isSetPlatformEnv()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetContractId()) {
        oprot.writeI32(struct.contractId);
      }
      if (struct.isSetExchange()) {
        oprot.writeString(struct.exchange);
      }
      if (struct.isSetCommodityType()) {
        oprot.writeString(struct.commodityType);
      }
      if (struct.isSetCommodityCode()) {
        oprot.writeString(struct.commodityCode);
      }
      if (struct.isSetContractCode1()) {
        oprot.writeString(struct.contractCode1);
      }
      if (struct.isSetContractCode2()) {
        oprot.writeString(struct.contractCode2);
      }
      if (struct.isSetCallPutFlag1()) {
        oprot.writeString(struct.callPutFlag1);
      }
      if (struct.isSetCallPutFlag2()) {
        oprot.writeString(struct.callPutFlag2);
      }
      if (struct.isSetStrikePrice1()) {
        oprot.writeDouble(struct.strikePrice1);
      }
      if (struct.isSetStrikePrice2()) {
        oprot.writeDouble(struct.strikePrice2);
      }
      if (struct.isSetPlatformEnv()) {
        oprot.writeI32(struct.platformEnv.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Es9Contract struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.contractId = iprot.readI32();
        struct.setContractIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exchange = iprot.readString();
        struct.setExchangeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commodityType = iprot.readString();
        struct.setCommodityTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.commodityCode = iprot.readString();
        struct.setCommodityCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.contractCode1 = iprot.readString();
        struct.setContractCode1IsSet(true);
      }
      if (incoming.get(5)) {
        struct.contractCode2 = iprot.readString();
        struct.setContractCode2IsSet(true);
      }
      if (incoming.get(6)) {
        struct.callPutFlag1 = iprot.readString();
        struct.setCallPutFlag1IsSet(true);
      }
      if (incoming.get(7)) {
        struct.callPutFlag2 = iprot.readString();
        struct.setCallPutFlag2IsSet(true);
      }
      if (incoming.get(8)) {
        struct.strikePrice1 = iprot.readDouble();
        struct.setStrikePrice1IsSet(true);
      }
      if (incoming.get(9)) {
        struct.strikePrice2 = iprot.readDouble();
        struct.setStrikePrice2IsSet(true);
      }
      if (incoming.get(10)) {
        struct.platformEnv = PlatformEnv.findByValue(iprot.readI32());
        struct.setPlatformEnvIsSet(true);
      }
    }
  }

}

