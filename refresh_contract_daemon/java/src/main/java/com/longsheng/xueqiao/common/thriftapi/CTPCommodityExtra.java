/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.common.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CTPCommodityExtra implements org.apache.thrift.TBase<CTPCommodityExtra, CTPCommodityExtra._Fields>, java.io.Serializable, Cloneable, Comparable<CTPCommodityExtra> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CTPCommodityExtra");

  private static final org.apache.thrift.protocol.TField MAX_MARKET_ORDER_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxMarketOrderVolume", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MIN_MARKET_ORDER_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("minMarketOrderVolume", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_LIMIT_ORDER_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxLimitOrderVolume", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MIN_LIMIT_ORDER_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("minLimitOrderVolume", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField POSITION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField POSITION_DATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionDateType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CLOSE_DEAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("closeDealType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MORTGAGE_FUND_USE_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageFundUseRange", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField EXCHANGE_PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeProductId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UNDERLYING_MULTIPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("underlyingMultiple", org.apache.thrift.protocol.TType.DOUBLE, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CTPCommodityExtraStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CTPCommodityExtraTupleSchemeFactory());
  }

  public int maxMarketOrderVolume; // optional
  public int minMarketOrderVolume; // optional
  public int maxLimitOrderVolume; // optional
  public int minLimitOrderVolume; // optional
  /**
   * 
   * @see PositionType
   */
  public PositionType positionType; // optional
  /**
   * 
   * @see PositionDateType
   */
  public PositionDateType positionDateType; // optional
  /**
   * 
   * @see CloseDealType
   */
  public CloseDealType closeDealType; // optional
  /**
   * 
   * @see MortgageFundUseRangeType
   */
  public MortgageFundUseRangeType mortgageFundUseRange; // optional
  public String exchangeProductId; // optional
  public double underlyingMultiple; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAX_MARKET_ORDER_VOLUME((short)1, "maxMarketOrderVolume"),
    MIN_MARKET_ORDER_VOLUME((short)2, "minMarketOrderVolume"),
    MAX_LIMIT_ORDER_VOLUME((short)3, "maxLimitOrderVolume"),
    MIN_LIMIT_ORDER_VOLUME((short)4, "minLimitOrderVolume"),
    /**
     * 
     * @see PositionType
     */
    POSITION_TYPE((short)5, "positionType"),
    /**
     * 
     * @see PositionDateType
     */
    POSITION_DATE_TYPE((short)6, "positionDateType"),
    /**
     * 
     * @see CloseDealType
     */
    CLOSE_DEAL_TYPE((short)7, "closeDealType"),
    /**
     * 
     * @see MortgageFundUseRangeType
     */
    MORTGAGE_FUND_USE_RANGE((short)8, "mortgageFundUseRange"),
    EXCHANGE_PRODUCT_ID((short)9, "exchangeProductId"),
    UNDERLYING_MULTIPLE((short)10, "underlyingMultiple");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAX_MARKET_ORDER_VOLUME
          return MAX_MARKET_ORDER_VOLUME;
        case 2: // MIN_MARKET_ORDER_VOLUME
          return MIN_MARKET_ORDER_VOLUME;
        case 3: // MAX_LIMIT_ORDER_VOLUME
          return MAX_LIMIT_ORDER_VOLUME;
        case 4: // MIN_LIMIT_ORDER_VOLUME
          return MIN_LIMIT_ORDER_VOLUME;
        case 5: // POSITION_TYPE
          return POSITION_TYPE;
        case 6: // POSITION_DATE_TYPE
          return POSITION_DATE_TYPE;
        case 7: // CLOSE_DEAL_TYPE
          return CLOSE_DEAL_TYPE;
        case 8: // MORTGAGE_FUND_USE_RANGE
          return MORTGAGE_FUND_USE_RANGE;
        case 9: // EXCHANGE_PRODUCT_ID
          return EXCHANGE_PRODUCT_ID;
        case 10: // UNDERLYING_MULTIPLE
          return UNDERLYING_MULTIPLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXMARKETORDERVOLUME_ISSET_ID = 0;
  private static final int __MINMARKETORDERVOLUME_ISSET_ID = 1;
  private static final int __MAXLIMITORDERVOLUME_ISSET_ID = 2;
  private static final int __MINLIMITORDERVOLUME_ISSET_ID = 3;
  private static final int __UNDERLYINGMULTIPLE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MAX_MARKET_ORDER_VOLUME,_Fields.MIN_MARKET_ORDER_VOLUME,_Fields.MAX_LIMIT_ORDER_VOLUME,_Fields.MIN_LIMIT_ORDER_VOLUME,_Fields.POSITION_TYPE,_Fields.POSITION_DATE_TYPE,_Fields.CLOSE_DEAL_TYPE,_Fields.MORTGAGE_FUND_USE_RANGE,_Fields.EXCHANGE_PRODUCT_ID,_Fields.UNDERLYING_MULTIPLE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAX_MARKET_ORDER_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("maxMarketOrderVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_MARKET_ORDER_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("minMarketOrderVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_LIMIT_ORDER_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("maxLimitOrderVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_LIMIT_ORDER_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("minLimitOrderVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("positionType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PositionType.class)));
    tmpMap.put(_Fields.POSITION_DATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("positionDateType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PositionDateType.class)));
    tmpMap.put(_Fields.CLOSE_DEAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("closeDealType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CloseDealType.class)));
    tmpMap.put(_Fields.MORTGAGE_FUND_USE_RANGE, new org.apache.thrift.meta_data.FieldMetaData("mortgageFundUseRange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MortgageFundUseRangeType.class)));
    tmpMap.put(_Fields.EXCHANGE_PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeProductId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNDERLYING_MULTIPLE, new org.apache.thrift.meta_data.FieldMetaData("underlyingMultiple", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CTPCommodityExtra.class, metaDataMap);
  }

  public CTPCommodityExtra() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CTPCommodityExtra(CTPCommodityExtra other) {
    __isset_bitfield = other.__isset_bitfield;
    this.maxMarketOrderVolume = other.maxMarketOrderVolume;
    this.minMarketOrderVolume = other.minMarketOrderVolume;
    this.maxLimitOrderVolume = other.maxLimitOrderVolume;
    this.minLimitOrderVolume = other.minLimitOrderVolume;
    if (other.isSetPositionType()) {
      this.positionType = other.positionType;
    }
    if (other.isSetPositionDateType()) {
      this.positionDateType = other.positionDateType;
    }
    if (other.isSetCloseDealType()) {
      this.closeDealType = other.closeDealType;
    }
    if (other.isSetMortgageFundUseRange()) {
      this.mortgageFundUseRange = other.mortgageFundUseRange;
    }
    if (other.isSetExchangeProductId()) {
      this.exchangeProductId = other.exchangeProductId;
    }
    this.underlyingMultiple = other.underlyingMultiple;
  }

  public CTPCommodityExtra deepCopy() {
    return new CTPCommodityExtra(this);
  }

  @Override
  public void clear() {
    setMaxMarketOrderVolumeIsSet(false);
    this.maxMarketOrderVolume = 0;
    setMinMarketOrderVolumeIsSet(false);
    this.minMarketOrderVolume = 0;
    setMaxLimitOrderVolumeIsSet(false);
    this.maxLimitOrderVolume = 0;
    setMinLimitOrderVolumeIsSet(false);
    this.minLimitOrderVolume = 0;
    this.positionType = null;
    this.positionDateType = null;
    this.closeDealType = null;
    this.mortgageFundUseRange = null;
    this.exchangeProductId = null;
    setUnderlyingMultipleIsSet(false);
    this.underlyingMultiple = 0.0;
  }

  public int getMaxMarketOrderVolume() {
    return this.maxMarketOrderVolume;
  }

  public CTPCommodityExtra setMaxMarketOrderVolume(int maxMarketOrderVolume) {
    this.maxMarketOrderVolume = maxMarketOrderVolume;
    setMaxMarketOrderVolumeIsSet(true);
    return this;
  }

  public void unsetMaxMarketOrderVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXMARKETORDERVOLUME_ISSET_ID);
  }

  /** Returns true if field maxMarketOrderVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxMarketOrderVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXMARKETORDERVOLUME_ISSET_ID);
  }

  public void setMaxMarketOrderVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXMARKETORDERVOLUME_ISSET_ID, value);
  }

  public int getMinMarketOrderVolume() {
    return this.minMarketOrderVolume;
  }

  public CTPCommodityExtra setMinMarketOrderVolume(int minMarketOrderVolume) {
    this.minMarketOrderVolume = minMarketOrderVolume;
    setMinMarketOrderVolumeIsSet(true);
    return this;
  }

  public void unsetMinMarketOrderVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINMARKETORDERVOLUME_ISSET_ID);
  }

  /** Returns true if field minMarketOrderVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMinMarketOrderVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MINMARKETORDERVOLUME_ISSET_ID);
  }

  public void setMinMarketOrderVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINMARKETORDERVOLUME_ISSET_ID, value);
  }

  public int getMaxLimitOrderVolume() {
    return this.maxLimitOrderVolume;
  }

  public CTPCommodityExtra setMaxLimitOrderVolume(int maxLimitOrderVolume) {
    this.maxLimitOrderVolume = maxLimitOrderVolume;
    setMaxLimitOrderVolumeIsSet(true);
    return this;
  }

  public void unsetMaxLimitOrderVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXLIMITORDERVOLUME_ISSET_ID);
  }

  /** Returns true if field maxLimitOrderVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxLimitOrderVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXLIMITORDERVOLUME_ISSET_ID);
  }

  public void setMaxLimitOrderVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXLIMITORDERVOLUME_ISSET_ID, value);
  }

  public int getMinLimitOrderVolume() {
    return this.minLimitOrderVolume;
  }

  public CTPCommodityExtra setMinLimitOrderVolume(int minLimitOrderVolume) {
    this.minLimitOrderVolume = minLimitOrderVolume;
    setMinLimitOrderVolumeIsSet(true);
    return this;
  }

  public void unsetMinLimitOrderVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINLIMITORDERVOLUME_ISSET_ID);
  }

  /** Returns true if field minLimitOrderVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMinLimitOrderVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MINLIMITORDERVOLUME_ISSET_ID);
  }

  public void setMinLimitOrderVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINLIMITORDERVOLUME_ISSET_ID, value);
  }

  /**
   * 
   * @see PositionType
   */
  public PositionType getPositionType() {
    return this.positionType;
  }

  /**
   * 
   * @see PositionType
   */
  public CTPCommodityExtra setPositionType(PositionType positionType) {
    this.positionType = positionType;
    return this;
  }

  public void unsetPositionType() {
    this.positionType = null;
  }

  /** Returns true if field positionType is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionType() {
    return this.positionType != null;
  }

  public void setPositionTypeIsSet(boolean value) {
    if (!value) {
      this.positionType = null;
    }
  }

  /**
   * 
   * @see PositionDateType
   */
  public PositionDateType getPositionDateType() {
    return this.positionDateType;
  }

  /**
   * 
   * @see PositionDateType
   */
  public CTPCommodityExtra setPositionDateType(PositionDateType positionDateType) {
    this.positionDateType = positionDateType;
    return this;
  }

  public void unsetPositionDateType() {
    this.positionDateType = null;
  }

  /** Returns true if field positionDateType is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionDateType() {
    return this.positionDateType != null;
  }

  public void setPositionDateTypeIsSet(boolean value) {
    if (!value) {
      this.positionDateType = null;
    }
  }

  /**
   * 
   * @see CloseDealType
   */
  public CloseDealType getCloseDealType() {
    return this.closeDealType;
  }

  /**
   * 
   * @see CloseDealType
   */
  public CTPCommodityExtra setCloseDealType(CloseDealType closeDealType) {
    this.closeDealType = closeDealType;
    return this;
  }

  public void unsetCloseDealType() {
    this.closeDealType = null;
  }

  /** Returns true if field closeDealType is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseDealType() {
    return this.closeDealType != null;
  }

  public void setCloseDealTypeIsSet(boolean value) {
    if (!value) {
      this.closeDealType = null;
    }
  }

  /**
   * 
   * @see MortgageFundUseRangeType
   */
  public MortgageFundUseRangeType getMortgageFundUseRange() {
    return this.mortgageFundUseRange;
  }

  /**
   * 
   * @see MortgageFundUseRangeType
   */
  public CTPCommodityExtra setMortgageFundUseRange(MortgageFundUseRangeType mortgageFundUseRange) {
    this.mortgageFundUseRange = mortgageFundUseRange;
    return this;
  }

  public void unsetMortgageFundUseRange() {
    this.mortgageFundUseRange = null;
  }

  /** Returns true if field mortgageFundUseRange is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageFundUseRange() {
    return this.mortgageFundUseRange != null;
  }

  public void setMortgageFundUseRangeIsSet(boolean value) {
    if (!value) {
      this.mortgageFundUseRange = null;
    }
  }

  public String getExchangeProductId() {
    return this.exchangeProductId;
  }

  public CTPCommodityExtra setExchangeProductId(String exchangeProductId) {
    this.exchangeProductId = exchangeProductId;
    return this;
  }

  public void unsetExchangeProductId() {
    this.exchangeProductId = null;
  }

  /** Returns true if field exchangeProductId is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeProductId() {
    return this.exchangeProductId != null;
  }

  public void setExchangeProductIdIsSet(boolean value) {
    if (!value) {
      this.exchangeProductId = null;
    }
  }

  public double getUnderlyingMultiple() {
    return this.underlyingMultiple;
  }

  public CTPCommodityExtra setUnderlyingMultiple(double underlyingMultiple) {
    this.underlyingMultiple = underlyingMultiple;
    setUnderlyingMultipleIsSet(true);
    return this;
  }

  public void unsetUnderlyingMultiple() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNDERLYINGMULTIPLE_ISSET_ID);
  }

  /** Returns true if field underlyingMultiple is set (has been assigned a value) and false otherwise */
  public boolean isSetUnderlyingMultiple() {
    return EncodingUtils.testBit(__isset_bitfield, __UNDERLYINGMULTIPLE_ISSET_ID);
  }

  public void setUnderlyingMultipleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNDERLYINGMULTIPLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAX_MARKET_ORDER_VOLUME:
      if (value == null) {
        unsetMaxMarketOrderVolume();
      } else {
        setMaxMarketOrderVolume((Integer)value);
      }
      break;

    case MIN_MARKET_ORDER_VOLUME:
      if (value == null) {
        unsetMinMarketOrderVolume();
      } else {
        setMinMarketOrderVolume((Integer)value);
      }
      break;

    case MAX_LIMIT_ORDER_VOLUME:
      if (value == null) {
        unsetMaxLimitOrderVolume();
      } else {
        setMaxLimitOrderVolume((Integer)value);
      }
      break;

    case MIN_LIMIT_ORDER_VOLUME:
      if (value == null) {
        unsetMinLimitOrderVolume();
      } else {
        setMinLimitOrderVolume((Integer)value);
      }
      break;

    case POSITION_TYPE:
      if (value == null) {
        unsetPositionType();
      } else {
        setPositionType((PositionType)value);
      }
      break;

    case POSITION_DATE_TYPE:
      if (value == null) {
        unsetPositionDateType();
      } else {
        setPositionDateType((PositionDateType)value);
      }
      break;

    case CLOSE_DEAL_TYPE:
      if (value == null) {
        unsetCloseDealType();
      } else {
        setCloseDealType((CloseDealType)value);
      }
      break;

    case MORTGAGE_FUND_USE_RANGE:
      if (value == null) {
        unsetMortgageFundUseRange();
      } else {
        setMortgageFundUseRange((MortgageFundUseRangeType)value);
      }
      break;

    case EXCHANGE_PRODUCT_ID:
      if (value == null) {
        unsetExchangeProductId();
      } else {
        setExchangeProductId((String)value);
      }
      break;

    case UNDERLYING_MULTIPLE:
      if (value == null) {
        unsetUnderlyingMultiple();
      } else {
        setUnderlyingMultiple((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAX_MARKET_ORDER_VOLUME:
      return Integer.valueOf(getMaxMarketOrderVolume());

    case MIN_MARKET_ORDER_VOLUME:
      return Integer.valueOf(getMinMarketOrderVolume());

    case MAX_LIMIT_ORDER_VOLUME:
      return Integer.valueOf(getMaxLimitOrderVolume());

    case MIN_LIMIT_ORDER_VOLUME:
      return Integer.valueOf(getMinLimitOrderVolume());

    case POSITION_TYPE:
      return getPositionType();

    case POSITION_DATE_TYPE:
      return getPositionDateType();

    case CLOSE_DEAL_TYPE:
      return getCloseDealType();

    case MORTGAGE_FUND_USE_RANGE:
      return getMortgageFundUseRange();

    case EXCHANGE_PRODUCT_ID:
      return getExchangeProductId();

    case UNDERLYING_MULTIPLE:
      return Double.valueOf(getUnderlyingMultiple());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAX_MARKET_ORDER_VOLUME:
      return isSetMaxMarketOrderVolume();
    case MIN_MARKET_ORDER_VOLUME:
      return isSetMinMarketOrderVolume();
    case MAX_LIMIT_ORDER_VOLUME:
      return isSetMaxLimitOrderVolume();
    case MIN_LIMIT_ORDER_VOLUME:
      return isSetMinLimitOrderVolume();
    case POSITION_TYPE:
      return isSetPositionType();
    case POSITION_DATE_TYPE:
      return isSetPositionDateType();
    case CLOSE_DEAL_TYPE:
      return isSetCloseDealType();
    case MORTGAGE_FUND_USE_RANGE:
      return isSetMortgageFundUseRange();
    case EXCHANGE_PRODUCT_ID:
      return isSetExchangeProductId();
    case UNDERLYING_MULTIPLE:
      return isSetUnderlyingMultiple();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CTPCommodityExtra)
      return this.equals((CTPCommodityExtra)that);
    return false;
  }

  public boolean equals(CTPCommodityExtra that) {
    if (that == null)
      return false;

    boolean this_present_maxMarketOrderVolume = true && this.isSetMaxMarketOrderVolume();
    boolean that_present_maxMarketOrderVolume = true && that.isSetMaxMarketOrderVolume();
    if (this_present_maxMarketOrderVolume || that_present_maxMarketOrderVolume) {
      if (!(this_present_maxMarketOrderVolume && that_present_maxMarketOrderVolume))
        return false;
      if (this.maxMarketOrderVolume != that.maxMarketOrderVolume)
        return false;
    }

    boolean this_present_minMarketOrderVolume = true && this.isSetMinMarketOrderVolume();
    boolean that_present_minMarketOrderVolume = true && that.isSetMinMarketOrderVolume();
    if (this_present_minMarketOrderVolume || that_present_minMarketOrderVolume) {
      if (!(this_present_minMarketOrderVolume && that_present_minMarketOrderVolume))
        return false;
      if (this.minMarketOrderVolume != that.minMarketOrderVolume)
        return false;
    }

    boolean this_present_maxLimitOrderVolume = true && this.isSetMaxLimitOrderVolume();
    boolean that_present_maxLimitOrderVolume = true && that.isSetMaxLimitOrderVolume();
    if (this_present_maxLimitOrderVolume || that_present_maxLimitOrderVolume) {
      if (!(this_present_maxLimitOrderVolume && that_present_maxLimitOrderVolume))
        return false;
      if (this.maxLimitOrderVolume != that.maxLimitOrderVolume)
        return false;
    }

    boolean this_present_minLimitOrderVolume = true && this.isSetMinLimitOrderVolume();
    boolean that_present_minLimitOrderVolume = true && that.isSetMinLimitOrderVolume();
    if (this_present_minLimitOrderVolume || that_present_minLimitOrderVolume) {
      if (!(this_present_minLimitOrderVolume && that_present_minLimitOrderVolume))
        return false;
      if (this.minLimitOrderVolume != that.minLimitOrderVolume)
        return false;
    }

    boolean this_present_positionType = true && this.isSetPositionType();
    boolean that_present_positionType = true && that.isSetPositionType();
    if (this_present_positionType || that_present_positionType) {
      if (!(this_present_positionType && that_present_positionType))
        return false;
      if (!this.positionType.equals(that.positionType))
        return false;
    }

    boolean this_present_positionDateType = true && this.isSetPositionDateType();
    boolean that_present_positionDateType = true && that.isSetPositionDateType();
    if (this_present_positionDateType || that_present_positionDateType) {
      if (!(this_present_positionDateType && that_present_positionDateType))
        return false;
      if (!this.positionDateType.equals(that.positionDateType))
        return false;
    }

    boolean this_present_closeDealType = true && this.isSetCloseDealType();
    boolean that_present_closeDealType = true && that.isSetCloseDealType();
    if (this_present_closeDealType || that_present_closeDealType) {
      if (!(this_present_closeDealType && that_present_closeDealType))
        return false;
      if (!this.closeDealType.equals(that.closeDealType))
        return false;
    }

    boolean this_present_mortgageFundUseRange = true && this.isSetMortgageFundUseRange();
    boolean that_present_mortgageFundUseRange = true && that.isSetMortgageFundUseRange();
    if (this_present_mortgageFundUseRange || that_present_mortgageFundUseRange) {
      if (!(this_present_mortgageFundUseRange && that_present_mortgageFundUseRange))
        return false;
      if (!this.mortgageFundUseRange.equals(that.mortgageFundUseRange))
        return false;
    }

    boolean this_present_exchangeProductId = true && this.isSetExchangeProductId();
    boolean that_present_exchangeProductId = true && that.isSetExchangeProductId();
    if (this_present_exchangeProductId || that_present_exchangeProductId) {
      if (!(this_present_exchangeProductId && that_present_exchangeProductId))
        return false;
      if (!this.exchangeProductId.equals(that.exchangeProductId))
        return false;
    }

    boolean this_present_underlyingMultiple = true && this.isSetUnderlyingMultiple();
    boolean that_present_underlyingMultiple = true && that.isSetUnderlyingMultiple();
    if (this_present_underlyingMultiple || that_present_underlyingMultiple) {
      if (!(this_present_underlyingMultiple && that_present_underlyingMultiple))
        return false;
      if (this.underlyingMultiple != that.underlyingMultiple)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CTPCommodityExtra other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMaxMarketOrderVolume()).compareTo(other.isSetMaxMarketOrderVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxMarketOrderVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxMarketOrderVolume, other.maxMarketOrderVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinMarketOrderVolume()).compareTo(other.isSetMinMarketOrderVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinMarketOrderVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minMarketOrderVolume, other.minMarketOrderVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxLimitOrderVolume()).compareTo(other.isSetMaxLimitOrderVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxLimitOrderVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxLimitOrderVolume, other.maxLimitOrderVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinLimitOrderVolume()).compareTo(other.isSetMinLimitOrderVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinLimitOrderVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minLimitOrderVolume, other.minLimitOrderVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionType()).compareTo(other.isSetPositionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionType, other.positionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionDateType()).compareTo(other.isSetPositionDateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionDateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionDateType, other.positionDateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseDealType()).compareTo(other.isSetCloseDealType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseDealType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeDealType, other.closeDealType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageFundUseRange()).compareTo(other.isSetMortgageFundUseRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageFundUseRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageFundUseRange, other.mortgageFundUseRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeProductId()).compareTo(other.isSetExchangeProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeProductId, other.exchangeProductId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnderlyingMultiple()).compareTo(other.isSetUnderlyingMultiple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnderlyingMultiple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.underlyingMultiple, other.underlyingMultiple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CTPCommodityExtra(");
    boolean first = true;

    if (isSetMaxMarketOrderVolume()) {
      sb.append("maxMarketOrderVolume:");
      sb.append(this.maxMarketOrderVolume);
      first = false;
    }
    if (isSetMinMarketOrderVolume()) {
      if (!first) sb.append(", ");
      sb.append("minMarketOrderVolume:");
      sb.append(this.minMarketOrderVolume);
      first = false;
    }
    if (isSetMaxLimitOrderVolume()) {
      if (!first) sb.append(", ");
      sb.append("maxLimitOrderVolume:");
      sb.append(this.maxLimitOrderVolume);
      first = false;
    }
    if (isSetMinLimitOrderVolume()) {
      if (!first) sb.append(", ");
      sb.append("minLimitOrderVolume:");
      sb.append(this.minLimitOrderVolume);
      first = false;
    }
    if (isSetPositionType()) {
      if (!first) sb.append(", ");
      sb.append("positionType:");
      if (this.positionType == null) {
        sb.append("null");
      } else {
        sb.append(this.positionType);
      }
      first = false;
    }
    if (isSetPositionDateType()) {
      if (!first) sb.append(", ");
      sb.append("positionDateType:");
      if (this.positionDateType == null) {
        sb.append("null");
      } else {
        sb.append(this.positionDateType);
      }
      first = false;
    }
    if (isSetCloseDealType()) {
      if (!first) sb.append(", ");
      sb.append("closeDealType:");
      if (this.closeDealType == null) {
        sb.append("null");
      } else {
        sb.append(this.closeDealType);
      }
      first = false;
    }
    if (isSetMortgageFundUseRange()) {
      if (!first) sb.append(", ");
      sb.append("mortgageFundUseRange:");
      if (this.mortgageFundUseRange == null) {
        sb.append("null");
      } else {
        sb.append(this.mortgageFundUseRange);
      }
      first = false;
    }
    if (isSetExchangeProductId()) {
      if (!first) sb.append(", ");
      sb.append("exchangeProductId:");
      if (this.exchangeProductId == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeProductId);
      }
      first = false;
    }
    if (isSetUnderlyingMultiple()) {
      if (!first) sb.append(", ");
      sb.append("underlyingMultiple:");
      sb.append(this.underlyingMultiple);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CTPCommodityExtraStandardSchemeFactory implements SchemeFactory {
    public CTPCommodityExtraStandardScheme getScheme() {
      return new CTPCommodityExtraStandardScheme();
    }
  }

  private static class CTPCommodityExtraStandardScheme extends StandardScheme<CTPCommodityExtra> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CTPCommodityExtra struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAX_MARKET_ORDER_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxMarketOrderVolume = iprot.readI32();
              struct.setMaxMarketOrderVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MIN_MARKET_ORDER_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minMarketOrderVolume = iprot.readI32();
              struct.setMinMarketOrderVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_LIMIT_ORDER_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxLimitOrderVolume = iprot.readI32();
              struct.setMaxLimitOrderVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIN_LIMIT_ORDER_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minLimitOrderVolume = iprot.readI32();
              struct.setMinLimitOrderVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POSITION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positionType = PositionType.findByValue(iprot.readI32());
              struct.setPositionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POSITION_DATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positionDateType = PositionDateType.findByValue(iprot.readI32());
              struct.setPositionDateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CLOSE_DEAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.closeDealType = CloseDealType.findByValue(iprot.readI32());
              struct.setCloseDealTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MORTGAGE_FUND_USE_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mortgageFundUseRange = MortgageFundUseRangeType.findByValue(iprot.readI32());
              struct.setMortgageFundUseRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXCHANGE_PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeProductId = iprot.readString();
              struct.setExchangeProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UNDERLYING_MULTIPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.underlyingMultiple = iprot.readDouble();
              struct.setUnderlyingMultipleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CTPCommodityExtra struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMaxMarketOrderVolume()) {
        oprot.writeFieldBegin(MAX_MARKET_ORDER_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.maxMarketOrderVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinMarketOrderVolume()) {
        oprot.writeFieldBegin(MIN_MARKET_ORDER_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.minMarketOrderVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxLimitOrderVolume()) {
        oprot.writeFieldBegin(MAX_LIMIT_ORDER_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.maxLimitOrderVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinLimitOrderVolume()) {
        oprot.writeFieldBegin(MIN_LIMIT_ORDER_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.minLimitOrderVolume);
        oprot.writeFieldEnd();
      }
      if (struct.positionType != null) {
        if (struct.isSetPositionType()) {
          oprot.writeFieldBegin(POSITION_TYPE_FIELD_DESC);
          oprot.writeI32(struct.positionType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.positionDateType != null) {
        if (struct.isSetPositionDateType()) {
          oprot.writeFieldBegin(POSITION_DATE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.positionDateType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.closeDealType != null) {
        if (struct.isSetCloseDealType()) {
          oprot.writeFieldBegin(CLOSE_DEAL_TYPE_FIELD_DESC);
          oprot.writeI32(struct.closeDealType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.mortgageFundUseRange != null) {
        if (struct.isSetMortgageFundUseRange()) {
          oprot.writeFieldBegin(MORTGAGE_FUND_USE_RANGE_FIELD_DESC);
          oprot.writeI32(struct.mortgageFundUseRange.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchangeProductId != null) {
        if (struct.isSetExchangeProductId()) {
          oprot.writeFieldBegin(EXCHANGE_PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.exchangeProductId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUnderlyingMultiple()) {
        oprot.writeFieldBegin(UNDERLYING_MULTIPLE_FIELD_DESC);
        oprot.writeDouble(struct.underlyingMultiple);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CTPCommodityExtraTupleSchemeFactory implements SchemeFactory {
    public CTPCommodityExtraTupleScheme getScheme() {
      return new CTPCommodityExtraTupleScheme();
    }
  }

  private static class CTPCommodityExtraTupleScheme extends TupleScheme<CTPCommodityExtra> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CTPCommodityExtra struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMaxMarketOrderVolume()) {
        optionals.set(0);
      }
      if (struct.isSetMinMarketOrderVolume()) {
        optionals.set(1);
      }
      if (struct.isSetMaxLimitOrderVolume()) {
        optionals.set(2);
      }
      if (struct.isSetMinLimitOrderVolume()) {
        optionals.set(3);
      }
      if (struct.isSetPositionType()) {
        optionals.set(4);
      }
      if (struct.isSetPositionDateType()) {
        optionals.set(5);
      }
      if (struct.isSetCloseDealType()) {
        optionals.set(6);
      }
      if (struct.isSetMortgageFundUseRange()) {
        optionals.set(7);
      }
      if (struct.isSetExchangeProductId()) {
        optionals.set(8);
      }
      if (struct.isSetUnderlyingMultiple()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetMaxMarketOrderVolume()) {
        oprot.writeI32(struct.maxMarketOrderVolume);
      }
      if (struct.isSetMinMarketOrderVolume()) {
        oprot.writeI32(struct.minMarketOrderVolume);
      }
      if (struct.isSetMaxLimitOrderVolume()) {
        oprot.writeI32(struct.maxLimitOrderVolume);
      }
      if (struct.isSetMinLimitOrderVolume()) {
        oprot.writeI32(struct.minLimitOrderVolume);
      }
      if (struct.isSetPositionType()) {
        oprot.writeI32(struct.positionType.getValue());
      }
      if (struct.isSetPositionDateType()) {
        oprot.writeI32(struct.positionDateType.getValue());
      }
      if (struct.isSetCloseDealType()) {
        oprot.writeI32(struct.closeDealType.getValue());
      }
      if (struct.isSetMortgageFundUseRange()) {
        oprot.writeI32(struct.mortgageFundUseRange.getValue());
      }
      if (struct.isSetExchangeProductId()) {
        oprot.writeString(struct.exchangeProductId);
      }
      if (struct.isSetUnderlyingMultiple()) {
        oprot.writeDouble(struct.underlyingMultiple);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CTPCommodityExtra struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.maxMarketOrderVolume = iprot.readI32();
        struct.setMaxMarketOrderVolumeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.minMarketOrderVolume = iprot.readI32();
        struct.setMinMarketOrderVolumeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.maxLimitOrderVolume = iprot.readI32();
        struct.setMaxLimitOrderVolumeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.minLimitOrderVolume = iprot.readI32();
        struct.setMinLimitOrderVolumeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.positionType = PositionType.findByValue(iprot.readI32());
        struct.setPositionTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.positionDateType = PositionDateType.findByValue(iprot.readI32());
        struct.setPositionDateTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.closeDealType = CloseDealType.findByValue(iprot.readI32());
        struct.setCloseDealTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.mortgageFundUseRange = MortgageFundUseRangeType.findByValue(iprot.readI32());
        struct.setMortgageFundUseRangeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.exchangeProductId = iprot.readString();
        struct.setExchangeProductIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.underlyingMultiple = iprot.readDouble();
        struct.setUnderlyingMultipleIsSet(true);
      }
    }
  }

}

