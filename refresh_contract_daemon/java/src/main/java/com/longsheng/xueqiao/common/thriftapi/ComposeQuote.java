/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.common.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ComposeQuote implements org.apache.thrift.TBase<ComposeQuote, ComposeQuote._Fields>, java.io.Serializable, Cloneable, Comparable<ComposeQuote> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComposeQuote");

  private static final org.apache.thrift.protocol.TField COMPOSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("composeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("open", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField HIGH_FIELD_DESC = new org.apache.thrift.protocol.TField("high", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField LOW_FIELD_DESC = new org.apache.thrift.protocol.TField("low", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ASK1_FIELD_DESC = new org.apache.thrift.protocol.TField("ask1", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField BID1_FIELD_DESC = new org.apache.thrift.protocol.TField("bid1", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ComposeQuoteStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ComposeQuoteTupleSchemeFactory());
  }

  public int composeId; // required
  public double open; // optional
  public double high; // optional
  public double low; // optional
  public double ask1; // optional
  public double bid1; // optional
  public double lastPrice; // optional
  public long timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPOSE_ID((short)1, "composeId"),
    OPEN((short)2, "open"),
    HIGH((short)4, "high"),
    LOW((short)5, "low"),
    ASK1((short)6, "ask1"),
    BID1((short)7, "bid1"),
    LAST_PRICE((short)8, "lastPrice"),
    TIMESTAMP((short)10, "timestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPOSE_ID
          return COMPOSE_ID;
        case 2: // OPEN
          return OPEN;
        case 4: // HIGH
          return HIGH;
        case 5: // LOW
          return LOW;
        case 6: // ASK1
          return ASK1;
        case 7: // BID1
          return BID1;
        case 8: // LAST_PRICE
          return LAST_PRICE;
        case 10: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPOSEID_ISSET_ID = 0;
  private static final int __OPEN_ISSET_ID = 1;
  private static final int __HIGH_ISSET_ID = 2;
  private static final int __LOW_ISSET_ID = 3;
  private static final int __ASK1_ISSET_ID = 4;
  private static final int __BID1_ISSET_ID = 5;
  private static final int __LASTPRICE_ISSET_ID = 6;
  private static final int __TIMESTAMP_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.OPEN,_Fields.HIGH,_Fields.LOW,_Fields.ASK1,_Fields.BID1,_Fields.LAST_PRICE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPOSE_ID, new org.apache.thrift.meta_data.FieldMetaData("composeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPEN, new org.apache.thrift.meta_data.FieldMetaData("open", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HIGH, new org.apache.thrift.meta_data.FieldMetaData("high", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOW, new org.apache.thrift.meta_data.FieldMetaData("low", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASK1, new org.apache.thrift.meta_data.FieldMetaData("ask1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BID1, new org.apache.thrift.meta_data.FieldMetaData("bid1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAST_PRICE, new org.apache.thrift.meta_data.FieldMetaData("lastPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComposeQuote.class, metaDataMap);
  }

  public ComposeQuote() {
  }

  public ComposeQuote(
    int composeId,
    long timestamp)
  {
    this();
    this.composeId = composeId;
    setComposeIdIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ComposeQuote(ComposeQuote other) {
    __isset_bitfield = other.__isset_bitfield;
    this.composeId = other.composeId;
    this.open = other.open;
    this.high = other.high;
    this.low = other.low;
    this.ask1 = other.ask1;
    this.bid1 = other.bid1;
    this.lastPrice = other.lastPrice;
    this.timestamp = other.timestamp;
  }

  public ComposeQuote deepCopy() {
    return new ComposeQuote(this);
  }

  @Override
  public void clear() {
    setComposeIdIsSet(false);
    this.composeId = 0;
    setOpenIsSet(false);
    this.open = 0.0;
    setHighIsSet(false);
    this.high = 0.0;
    setLowIsSet(false);
    this.low = 0.0;
    setAsk1IsSet(false);
    this.ask1 = 0.0;
    setBid1IsSet(false);
    this.bid1 = 0.0;
    setLastPriceIsSet(false);
    this.lastPrice = 0.0;
    setTimestampIsSet(false);
    this.timestamp = 0;
  }

  public int getComposeId() {
    return this.composeId;
  }

  public ComposeQuote setComposeId(int composeId) {
    this.composeId = composeId;
    setComposeIdIsSet(true);
    return this;
  }

  public void unsetComposeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPOSEID_ISSET_ID);
  }

  /** Returns true if field composeId is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPOSEID_ISSET_ID);
  }

  public void setComposeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPOSEID_ISSET_ID, value);
  }

  public double getOpen() {
    return this.open;
  }

  public ComposeQuote setOpen(double open) {
    this.open = open;
    setOpenIsSet(true);
    return this;
  }

  public void unsetOpen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  /** Returns true if field open is set (has been assigned a value) and false otherwise */
  public boolean isSetOpen() {
    return EncodingUtils.testBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  public void setOpenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPEN_ISSET_ID, value);
  }

  public double getHigh() {
    return this.high;
  }

  public ComposeQuote setHigh(double high) {
    this.high = high;
    setHighIsSet(true);
    return this;
  }

  public void unsetHigh() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIGH_ISSET_ID);
  }

  /** Returns true if field high is set (has been assigned a value) and false otherwise */
  public boolean isSetHigh() {
    return EncodingUtils.testBit(__isset_bitfield, __HIGH_ISSET_ID);
  }

  public void setHighIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIGH_ISSET_ID, value);
  }

  public double getLow() {
    return this.low;
  }

  public ComposeQuote setLow(double low) {
    this.low = low;
    setLowIsSet(true);
    return this;
  }

  public void unsetLow() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOW_ISSET_ID);
  }

  /** Returns true if field low is set (has been assigned a value) and false otherwise */
  public boolean isSetLow() {
    return EncodingUtils.testBit(__isset_bitfield, __LOW_ISSET_ID);
  }

  public void setLowIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOW_ISSET_ID, value);
  }

  public double getAsk1() {
    return this.ask1;
  }

  public ComposeQuote setAsk1(double ask1) {
    this.ask1 = ask1;
    setAsk1IsSet(true);
    return this;
  }

  public void unsetAsk1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASK1_ISSET_ID);
  }

  /** Returns true if field ask1 is set (has been assigned a value) and false otherwise */
  public boolean isSetAsk1() {
    return EncodingUtils.testBit(__isset_bitfield, __ASK1_ISSET_ID);
  }

  public void setAsk1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASK1_ISSET_ID, value);
  }

  public double getBid1() {
    return this.bid1;
  }

  public ComposeQuote setBid1(double bid1) {
    this.bid1 = bid1;
    setBid1IsSet(true);
    return this;
  }

  public void unsetBid1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BID1_ISSET_ID);
  }

  /** Returns true if field bid1 is set (has been assigned a value) and false otherwise */
  public boolean isSetBid1() {
    return EncodingUtils.testBit(__isset_bitfield, __BID1_ISSET_ID);
  }

  public void setBid1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BID1_ISSET_ID, value);
  }

  public double getLastPrice() {
    return this.lastPrice;
  }

  public ComposeQuote setLastPrice(double lastPrice) {
    this.lastPrice = lastPrice;
    setLastPriceIsSet(true);
    return this;
  }

  public void unsetLastPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPRICE_ISSET_ID);
  }

  /** Returns true if field lastPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPRICE_ISSET_ID);
  }

  public void setLastPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPRICE_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public ComposeQuote setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPOSE_ID:
      if (value == null) {
        unsetComposeId();
      } else {
        setComposeId((Integer)value);
      }
      break;

    case OPEN:
      if (value == null) {
        unsetOpen();
      } else {
        setOpen((Double)value);
      }
      break;

    case HIGH:
      if (value == null) {
        unsetHigh();
      } else {
        setHigh((Double)value);
      }
      break;

    case LOW:
      if (value == null) {
        unsetLow();
      } else {
        setLow((Double)value);
      }
      break;

    case ASK1:
      if (value == null) {
        unsetAsk1();
      } else {
        setAsk1((Double)value);
      }
      break;

    case BID1:
      if (value == null) {
        unsetBid1();
      } else {
        setBid1((Double)value);
      }
      break;

    case LAST_PRICE:
      if (value == null) {
        unsetLastPrice();
      } else {
        setLastPrice((Double)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPOSE_ID:
      return Integer.valueOf(getComposeId());

    case OPEN:
      return Double.valueOf(getOpen());

    case HIGH:
      return Double.valueOf(getHigh());

    case LOW:
      return Double.valueOf(getLow());

    case ASK1:
      return Double.valueOf(getAsk1());

    case BID1:
      return Double.valueOf(getBid1());

    case LAST_PRICE:
      return Double.valueOf(getLastPrice());

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPOSE_ID:
      return isSetComposeId();
    case OPEN:
      return isSetOpen();
    case HIGH:
      return isSetHigh();
    case LOW:
      return isSetLow();
    case ASK1:
      return isSetAsk1();
    case BID1:
      return isSetBid1();
    case LAST_PRICE:
      return isSetLastPrice();
    case TIMESTAMP:
      return isSetTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ComposeQuote)
      return this.equals((ComposeQuote)that);
    return false;
  }

  public boolean equals(ComposeQuote that) {
    if (that == null)
      return false;

    boolean this_present_composeId = true;
    boolean that_present_composeId = true;
    if (this_present_composeId || that_present_composeId) {
      if (!(this_present_composeId && that_present_composeId))
        return false;
      if (this.composeId != that.composeId)
        return false;
    }

    boolean this_present_open = true && this.isSetOpen();
    boolean that_present_open = true && that.isSetOpen();
    if (this_present_open || that_present_open) {
      if (!(this_present_open && that_present_open))
        return false;
      if (this.open != that.open)
        return false;
    }

    boolean this_present_high = true && this.isSetHigh();
    boolean that_present_high = true && that.isSetHigh();
    if (this_present_high || that_present_high) {
      if (!(this_present_high && that_present_high))
        return false;
      if (this.high != that.high)
        return false;
    }

    boolean this_present_low = true && this.isSetLow();
    boolean that_present_low = true && that.isSetLow();
    if (this_present_low || that_present_low) {
      if (!(this_present_low && that_present_low))
        return false;
      if (this.low != that.low)
        return false;
    }

    boolean this_present_ask1 = true && this.isSetAsk1();
    boolean that_present_ask1 = true && that.isSetAsk1();
    if (this_present_ask1 || that_present_ask1) {
      if (!(this_present_ask1 && that_present_ask1))
        return false;
      if (this.ask1 != that.ask1)
        return false;
    }

    boolean this_present_bid1 = true && this.isSetBid1();
    boolean that_present_bid1 = true && that.isSetBid1();
    if (this_present_bid1 || that_present_bid1) {
      if (!(this_present_bid1 && that_present_bid1))
        return false;
      if (this.bid1 != that.bid1)
        return false;
    }

    boolean this_present_lastPrice = true && this.isSetLastPrice();
    boolean that_present_lastPrice = true && that.isSetLastPrice();
    if (this_present_lastPrice || that_present_lastPrice) {
      if (!(this_present_lastPrice && that_present_lastPrice))
        return false;
      if (this.lastPrice != that.lastPrice)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ComposeQuote other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetComposeId()).compareTo(other.isSetComposeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeId, other.composeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpen()).compareTo(other.isSetOpen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.open, other.open);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHigh()).compareTo(other.isSetHigh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHigh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.high, other.high);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLow()).compareTo(other.isSetLow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.low, other.low);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAsk1()).compareTo(other.isSetAsk1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAsk1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ask1, other.ask1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBid1()).compareTo(other.isSetBid1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBid1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid1, other.bid1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPrice()).compareTo(other.isSetLastPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPrice, other.lastPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ComposeQuote(");
    boolean first = true;

    sb.append("composeId:");
    sb.append(this.composeId);
    first = false;
    if (isSetOpen()) {
      if (!first) sb.append(", ");
      sb.append("open:");
      sb.append(this.open);
      first = false;
    }
    if (isSetHigh()) {
      if (!first) sb.append(", ");
      sb.append("high:");
      sb.append(this.high);
      first = false;
    }
    if (isSetLow()) {
      if (!first) sb.append(", ");
      sb.append("low:");
      sb.append(this.low);
      first = false;
    }
    if (isSetAsk1()) {
      if (!first) sb.append(", ");
      sb.append("ask1:");
      sb.append(this.ask1);
      first = false;
    }
    if (isSetBid1()) {
      if (!first) sb.append(", ");
      sb.append("bid1:");
      sb.append(this.bid1);
      first = false;
    }
    if (isSetLastPrice()) {
      if (!first) sb.append(", ");
      sb.append("lastPrice:");
      sb.append(this.lastPrice);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'composeId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComposeQuoteStandardSchemeFactory implements SchemeFactory {
    public ComposeQuoteStandardScheme getScheme() {
      return new ComposeQuoteStandardScheme();
    }
  }

  private static class ComposeQuoteStandardScheme extends StandardScheme<ComposeQuote> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ComposeQuote struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPOSE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.composeId = iprot.readI32();
              struct.setComposeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.open = iprot.readDouble();
              struct.setOpenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HIGH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.high = iprot.readDouble();
              struct.setHighIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.low = iprot.readDouble();
              struct.setLowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ASK1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ask1 = iprot.readDouble();
              struct.setAsk1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BID1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bid1 = iprot.readDouble();
              struct.setBid1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lastPrice = iprot.readDouble();
              struct.setLastPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetComposeId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'composeId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ComposeQuote struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COMPOSE_ID_FIELD_DESC);
      oprot.writeI32(struct.composeId);
      oprot.writeFieldEnd();
      if (struct.isSetOpen()) {
        oprot.writeFieldBegin(OPEN_FIELD_DESC);
        oprot.writeDouble(struct.open);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHigh()) {
        oprot.writeFieldBegin(HIGH_FIELD_DESC);
        oprot.writeDouble(struct.high);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLow()) {
        oprot.writeFieldBegin(LOW_FIELD_DESC);
        oprot.writeDouble(struct.low);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAsk1()) {
        oprot.writeFieldBegin(ASK1_FIELD_DESC);
        oprot.writeDouble(struct.ask1);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBid1()) {
        oprot.writeFieldBegin(BID1_FIELD_DESC);
        oprot.writeDouble(struct.bid1);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastPrice()) {
        oprot.writeFieldBegin(LAST_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.lastPrice);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComposeQuoteTupleSchemeFactory implements SchemeFactory {
    public ComposeQuoteTupleScheme getScheme() {
      return new ComposeQuoteTupleScheme();
    }
  }

  private static class ComposeQuoteTupleScheme extends TupleScheme<ComposeQuote> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ComposeQuote struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.composeId);
      oprot.writeI64(struct.timestamp);
      BitSet optionals = new BitSet();
      if (struct.isSetOpen()) {
        optionals.set(0);
      }
      if (struct.isSetHigh()) {
        optionals.set(1);
      }
      if (struct.isSetLow()) {
        optionals.set(2);
      }
      if (struct.isSetAsk1()) {
        optionals.set(3);
      }
      if (struct.isSetBid1()) {
        optionals.set(4);
      }
      if (struct.isSetLastPrice()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetOpen()) {
        oprot.writeDouble(struct.open);
      }
      if (struct.isSetHigh()) {
        oprot.writeDouble(struct.high);
      }
      if (struct.isSetLow()) {
        oprot.writeDouble(struct.low);
      }
      if (struct.isSetAsk1()) {
        oprot.writeDouble(struct.ask1);
      }
      if (struct.isSetBid1()) {
        oprot.writeDouble(struct.bid1);
      }
      if (struct.isSetLastPrice()) {
        oprot.writeDouble(struct.lastPrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ComposeQuote struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.composeId = iprot.readI32();
      struct.setComposeIdIsSet(true);
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.open = iprot.readDouble();
        struct.setOpenIsSet(true);
      }
      if (incoming.get(1)) {
        struct.high = iprot.readDouble();
        struct.setHighIsSet(true);
      }
      if (incoming.get(2)) {
        struct.low = iprot.readDouble();
        struct.setLowIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ask1 = iprot.readDouble();
        struct.setAsk1IsSet(true);
      }
      if (incoming.get(4)) {
        struct.bid1 = iprot.readDouble();
        struct.setBid1IsSet(true);
      }
      if (incoming.get(5)) {
        struct.lastPrice = iprot.readDouble();
        struct.setLastPriceIsSet(true);
      }
    }
  }

}

