/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.es_service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EsOrderMatchField implements org.apache.thrift.TBase<EsOrderMatchField, EsOrderMatchField._Fields>, java.io.Serializable, Cloneable, Comparable<EsOrderMatchField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EsOrderMatchField");

  private static final org.apache.thrift.protocol.TField SLED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MATCH_STREAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("matchStreamId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CLIENT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SYSTEM_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("systemNo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MATCH_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("matchNo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MATCH_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("matchMode", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MATCH_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("matchPrice", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField MATCH_VOL_FIELD_DESC = new org.apache.thrift.protocol.TField("matchVol", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField MATCH_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("matchDateTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField MATCH_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("matchFee", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField CURRENCY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyNo", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ADD_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("addOne", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField MANUAL_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("manualFee", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("deleted", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField MATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("matchId", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField COVER_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("coverPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EsOrderMatchFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EsOrderMatchFieldTupleSchemeFactory());
  }

  public String sledId; // required
  public int sledAccountId; // optional
  public int userId; // optional
  public int matchStreamId; // optional
  public String clientNo; // optional
  public String systemNo; // optional
  public String matchNo; // optional
  /**
   * 
   * @see EsMatchModeType
   */
  public EsMatchModeType matchMode; // optional
  /**
   * 
   * @see EsMatchWayType
   */
  public EsMatchWayType matchPrice; // optional
  public int matchVol; // optional
  public long matchDateTime; // optional
  public double matchFee; // optional
  public String currencyNo; // optional
  public boolean addOne; // optional
  public boolean manualFee; // optional
  /**
   * 
   * @see EsDeletedType
   */
  public EsDeletedType deleted; // optional
  public int orderId; // optional
  public int matchId; // optional
  public double coverPrice; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_ID((short)1, "sledId"),
    SLED_ACCOUNT_ID((short)2, "sledAccountId"),
    USER_ID((short)3, "userId"),
    MATCH_STREAM_ID((short)4, "matchStreamId"),
    CLIENT_NO((short)5, "clientNo"),
    SYSTEM_NO((short)6, "systemNo"),
    MATCH_NO((short)7, "matchNo"),
    /**
     * 
     * @see EsMatchModeType
     */
    MATCH_MODE((short)8, "matchMode"),
    /**
     * 
     * @see EsMatchWayType
     */
    MATCH_PRICE((short)9, "matchPrice"),
    MATCH_VOL((short)10, "matchVol"),
    MATCH_DATE_TIME((short)11, "matchDateTime"),
    MATCH_FEE((short)12, "matchFee"),
    CURRENCY_NO((short)13, "currencyNo"),
    ADD_ONE((short)14, "addOne"),
    MANUAL_FEE((short)15, "manualFee"),
    /**
     * 
     * @see EsDeletedType
     */
    DELETED((short)16, "deleted"),
    ORDER_ID((short)17, "orderId"),
    MATCH_ID((short)18, "matchId"),
    COVER_PRICE((short)19, "coverPrice");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_ID
          return SLED_ID;
        case 2: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // MATCH_STREAM_ID
          return MATCH_STREAM_ID;
        case 5: // CLIENT_NO
          return CLIENT_NO;
        case 6: // SYSTEM_NO
          return SYSTEM_NO;
        case 7: // MATCH_NO
          return MATCH_NO;
        case 8: // MATCH_MODE
          return MATCH_MODE;
        case 9: // MATCH_PRICE
          return MATCH_PRICE;
        case 10: // MATCH_VOL
          return MATCH_VOL;
        case 11: // MATCH_DATE_TIME
          return MATCH_DATE_TIME;
        case 12: // MATCH_FEE
          return MATCH_FEE;
        case 13: // CURRENCY_NO
          return CURRENCY_NO;
        case 14: // ADD_ONE
          return ADD_ONE;
        case 15: // MANUAL_FEE
          return MANUAL_FEE;
        case 16: // DELETED
          return DELETED;
        case 17: // ORDER_ID
          return ORDER_ID;
        case 18: // MATCH_ID
          return MATCH_ID;
        case 19: // COVER_PRICE
          return COVER_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDACCOUNTID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __MATCHSTREAMID_ISSET_ID = 2;
  private static final int __MATCHVOL_ISSET_ID = 3;
  private static final int __MATCHDATETIME_ISSET_ID = 4;
  private static final int __MATCHFEE_ISSET_ID = 5;
  private static final int __ADDONE_ISSET_ID = 6;
  private static final int __MANUALFEE_ISSET_ID = 7;
  private static final int __ORDERID_ISSET_ID = 8;
  private static final int __MATCHID_ISSET_ID = 9;
  private static final int __COVERPRICE_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_ACCOUNT_ID,_Fields.USER_ID,_Fields.MATCH_STREAM_ID,_Fields.CLIENT_NO,_Fields.SYSTEM_NO,_Fields.MATCH_NO,_Fields.MATCH_MODE,_Fields.MATCH_PRICE,_Fields.MATCH_VOL,_Fields.MATCH_DATE_TIME,_Fields.MATCH_FEE,_Fields.CURRENCY_NO,_Fields.ADD_ONE,_Fields.MANUAL_FEE,_Fields.DELETED,_Fields.ORDER_ID,_Fields.MATCH_ID,_Fields.COVER_PRICE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_ID, new org.apache.thrift.meta_data.FieldMetaData("sledId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MATCH_STREAM_ID, new org.apache.thrift.meta_data.FieldMetaData("matchStreamId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLIENT_NO, new org.apache.thrift.meta_data.FieldMetaData("clientNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYSTEM_NO, new org.apache.thrift.meta_data.FieldMetaData("systemNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_NO, new org.apache.thrift.meta_data.FieldMetaData("matchNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_MODE, new org.apache.thrift.meta_data.FieldMetaData("matchMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsMatchModeType.class)));
    tmpMap.put(_Fields.MATCH_PRICE, new org.apache.thrift.meta_data.FieldMetaData("matchPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsMatchWayType.class)));
    tmpMap.put(_Fields.MATCH_VOL, new org.apache.thrift.meta_data.FieldMetaData("matchVol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MATCH_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("matchDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MATCH_FEE, new org.apache.thrift.meta_data.FieldMetaData("matchFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY_NO, new org.apache.thrift.meta_data.FieldMetaData("currencyNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADD_ONE, new org.apache.thrift.meta_data.FieldMetaData("addOne", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MANUAL_FEE, new org.apache.thrift.meta_data.FieldMetaData("manualFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DELETED, new org.apache.thrift.meta_data.FieldMetaData("deleted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EsDeletedType.class)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("matchId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COVER_PRICE, new org.apache.thrift.meta_data.FieldMetaData("coverPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EsOrderMatchField.class, metaDataMap);
  }

  public EsOrderMatchField() {
  }

  public EsOrderMatchField(
    String sledId)
  {
    this();
    this.sledId = sledId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EsOrderMatchField(EsOrderMatchField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSledId()) {
      this.sledId = other.sledId;
    }
    this.sledAccountId = other.sledAccountId;
    this.userId = other.userId;
    this.matchStreamId = other.matchStreamId;
    if (other.isSetClientNo()) {
      this.clientNo = other.clientNo;
    }
    if (other.isSetSystemNo()) {
      this.systemNo = other.systemNo;
    }
    if (other.isSetMatchNo()) {
      this.matchNo = other.matchNo;
    }
    if (other.isSetMatchMode()) {
      this.matchMode = other.matchMode;
    }
    if (other.isSetMatchPrice()) {
      this.matchPrice = other.matchPrice;
    }
    this.matchVol = other.matchVol;
    this.matchDateTime = other.matchDateTime;
    this.matchFee = other.matchFee;
    if (other.isSetCurrencyNo()) {
      this.currencyNo = other.currencyNo;
    }
    this.addOne = other.addOne;
    this.manualFee = other.manualFee;
    if (other.isSetDeleted()) {
      this.deleted = other.deleted;
    }
    this.orderId = other.orderId;
    this.matchId = other.matchId;
    this.coverPrice = other.coverPrice;
  }

  public EsOrderMatchField deepCopy() {
    return new EsOrderMatchField(this);
  }

  @Override
  public void clear() {
    this.sledId = null;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setMatchStreamIdIsSet(false);
    this.matchStreamId = 0;
    this.clientNo = null;
    this.systemNo = null;
    this.matchNo = null;
    this.matchMode = null;
    this.matchPrice = null;
    setMatchVolIsSet(false);
    this.matchVol = 0;
    setMatchDateTimeIsSet(false);
    this.matchDateTime = 0;
    setMatchFeeIsSet(false);
    this.matchFee = 0.0;
    this.currencyNo = null;
    setAddOneIsSet(false);
    this.addOne = false;
    setManualFeeIsSet(false);
    this.manualFee = false;
    this.deleted = null;
    setOrderIdIsSet(false);
    this.orderId = 0;
    setMatchIdIsSet(false);
    this.matchId = 0;
    setCoverPriceIsSet(false);
    this.coverPrice = 0.0;
  }

  public String getSledId() {
    return this.sledId;
  }

  public EsOrderMatchField setSledId(String sledId) {
    this.sledId = sledId;
    return this;
  }

  public void unsetSledId() {
    this.sledId = null;
  }

  /** Returns true if field sledId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledId() {
    return this.sledId != null;
  }

  public void setSledIdIsSet(boolean value) {
    if (!value) {
      this.sledId = null;
    }
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public EsOrderMatchField setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public EsOrderMatchField setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getMatchStreamId() {
    return this.matchStreamId;
  }

  public EsOrderMatchField setMatchStreamId(int matchStreamId) {
    this.matchStreamId = matchStreamId;
    setMatchStreamIdIsSet(true);
    return this;
  }

  public void unsetMatchStreamId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHSTREAMID_ISSET_ID);
  }

  /** Returns true if field matchStreamId is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchStreamId() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHSTREAMID_ISSET_ID);
  }

  public void setMatchStreamIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHSTREAMID_ISSET_ID, value);
  }

  public String getClientNo() {
    return this.clientNo;
  }

  public EsOrderMatchField setClientNo(String clientNo) {
    this.clientNo = clientNo;
    return this;
  }

  public void unsetClientNo() {
    this.clientNo = null;
  }

  /** Returns true if field clientNo is set (has been assigned a value) and false otherwise */
  public boolean isSetClientNo() {
    return this.clientNo != null;
  }

  public void setClientNoIsSet(boolean value) {
    if (!value) {
      this.clientNo = null;
    }
  }

  public String getSystemNo() {
    return this.systemNo;
  }

  public EsOrderMatchField setSystemNo(String systemNo) {
    this.systemNo = systemNo;
    return this;
  }

  public void unsetSystemNo() {
    this.systemNo = null;
  }

  /** Returns true if field systemNo is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemNo() {
    return this.systemNo != null;
  }

  public void setSystemNoIsSet(boolean value) {
    if (!value) {
      this.systemNo = null;
    }
  }

  public String getMatchNo() {
    return this.matchNo;
  }

  public EsOrderMatchField setMatchNo(String matchNo) {
    this.matchNo = matchNo;
    return this;
  }

  public void unsetMatchNo() {
    this.matchNo = null;
  }

  /** Returns true if field matchNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchNo() {
    return this.matchNo != null;
  }

  public void setMatchNoIsSet(boolean value) {
    if (!value) {
      this.matchNo = null;
    }
  }

  /**
   * 
   * @see EsMatchModeType
   */
  public EsMatchModeType getMatchMode() {
    return this.matchMode;
  }

  /**
   * 
   * @see EsMatchModeType
   */
  public EsOrderMatchField setMatchMode(EsMatchModeType matchMode) {
    this.matchMode = matchMode;
    return this;
  }

  public void unsetMatchMode() {
    this.matchMode = null;
  }

  /** Returns true if field matchMode is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchMode() {
    return this.matchMode != null;
  }

  public void setMatchModeIsSet(boolean value) {
    if (!value) {
      this.matchMode = null;
    }
  }

  /**
   * 
   * @see EsMatchWayType
   */
  public EsMatchWayType getMatchPrice() {
    return this.matchPrice;
  }

  /**
   * 
   * @see EsMatchWayType
   */
  public EsOrderMatchField setMatchPrice(EsMatchWayType matchPrice) {
    this.matchPrice = matchPrice;
    return this;
  }

  public void unsetMatchPrice() {
    this.matchPrice = null;
  }

  /** Returns true if field matchPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchPrice() {
    return this.matchPrice != null;
  }

  public void setMatchPriceIsSet(boolean value) {
    if (!value) {
      this.matchPrice = null;
    }
  }

  public int getMatchVol() {
    return this.matchVol;
  }

  public EsOrderMatchField setMatchVol(int matchVol) {
    this.matchVol = matchVol;
    setMatchVolIsSet(true);
    return this;
  }

  public void unsetMatchVol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHVOL_ISSET_ID);
  }

  /** Returns true if field matchVol is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchVol() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHVOL_ISSET_ID);
  }

  public void setMatchVolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHVOL_ISSET_ID, value);
  }

  public long getMatchDateTime() {
    return this.matchDateTime;
  }

  public EsOrderMatchField setMatchDateTime(long matchDateTime) {
    this.matchDateTime = matchDateTime;
    setMatchDateTimeIsSet(true);
    return this;
  }

  public void unsetMatchDateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHDATETIME_ISSET_ID);
  }

  /** Returns true if field matchDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchDateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHDATETIME_ISSET_ID);
  }

  public void setMatchDateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHDATETIME_ISSET_ID, value);
  }

  public double getMatchFee() {
    return this.matchFee;
  }

  public EsOrderMatchField setMatchFee(double matchFee) {
    this.matchFee = matchFee;
    setMatchFeeIsSet(true);
    return this;
  }

  public void unsetMatchFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHFEE_ISSET_ID);
  }

  /** Returns true if field matchFee is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchFee() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHFEE_ISSET_ID);
  }

  public void setMatchFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHFEE_ISSET_ID, value);
  }

  public String getCurrencyNo() {
    return this.currencyNo;
  }

  public EsOrderMatchField setCurrencyNo(String currencyNo) {
    this.currencyNo = currencyNo;
    return this;
  }

  public void unsetCurrencyNo() {
    this.currencyNo = null;
  }

  /** Returns true if field currencyNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyNo() {
    return this.currencyNo != null;
  }

  public void setCurrencyNoIsSet(boolean value) {
    if (!value) {
      this.currencyNo = null;
    }
  }

  public boolean isAddOne() {
    return this.addOne;
  }

  public EsOrderMatchField setAddOne(boolean addOne) {
    this.addOne = addOne;
    setAddOneIsSet(true);
    return this;
  }

  public void unsetAddOne() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADDONE_ISSET_ID);
  }

  /** Returns true if field addOne is set (has been assigned a value) and false otherwise */
  public boolean isSetAddOne() {
    return EncodingUtils.testBit(__isset_bitfield, __ADDONE_ISSET_ID);
  }

  public void setAddOneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADDONE_ISSET_ID, value);
  }

  public boolean isManualFee() {
    return this.manualFee;
  }

  public EsOrderMatchField setManualFee(boolean manualFee) {
    this.manualFee = manualFee;
    setManualFeeIsSet(true);
    return this;
  }

  public void unsetManualFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MANUALFEE_ISSET_ID);
  }

  /** Returns true if field manualFee is set (has been assigned a value) and false otherwise */
  public boolean isSetManualFee() {
    return EncodingUtils.testBit(__isset_bitfield, __MANUALFEE_ISSET_ID);
  }

  public void setManualFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MANUALFEE_ISSET_ID, value);
  }

  /**
   * 
   * @see EsDeletedType
   */
  public EsDeletedType getDeleted() {
    return this.deleted;
  }

  /**
   * 
   * @see EsDeletedType
   */
  public EsOrderMatchField setDeleted(EsDeletedType deleted) {
    this.deleted = deleted;
    return this;
  }

  public void unsetDeleted() {
    this.deleted = null;
  }

  /** Returns true if field deleted is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return this.deleted != null;
  }

  public void setDeletedIsSet(boolean value) {
    if (!value) {
      this.deleted = null;
    }
  }

  public int getOrderId() {
    return this.orderId;
  }

  public EsOrderMatchField setOrderId(int orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  public int getMatchId() {
    return this.matchId;
  }

  public EsOrderMatchField setMatchId(int matchId) {
    this.matchId = matchId;
    setMatchIdIsSet(true);
    return this;
  }

  public void unsetMatchId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHID_ISSET_ID);
  }

  /** Returns true if field matchId is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchId() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHID_ISSET_ID);
  }

  public void setMatchIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHID_ISSET_ID, value);
  }

  public double getCoverPrice() {
    return this.coverPrice;
  }

  public EsOrderMatchField setCoverPrice(double coverPrice) {
    this.coverPrice = coverPrice;
    setCoverPriceIsSet(true);
    return this;
  }

  public void unsetCoverPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COVERPRICE_ISSET_ID);
  }

  /** Returns true if field coverPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetCoverPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __COVERPRICE_ISSET_ID);
  }

  public void setCoverPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COVERPRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_ID:
      if (value == null) {
        unsetSledId();
      } else {
        setSledId((String)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case MATCH_STREAM_ID:
      if (value == null) {
        unsetMatchStreamId();
      } else {
        setMatchStreamId((Integer)value);
      }
      break;

    case CLIENT_NO:
      if (value == null) {
        unsetClientNo();
      } else {
        setClientNo((String)value);
      }
      break;

    case SYSTEM_NO:
      if (value == null) {
        unsetSystemNo();
      } else {
        setSystemNo((String)value);
      }
      break;

    case MATCH_NO:
      if (value == null) {
        unsetMatchNo();
      } else {
        setMatchNo((String)value);
      }
      break;

    case MATCH_MODE:
      if (value == null) {
        unsetMatchMode();
      } else {
        setMatchMode((EsMatchModeType)value);
      }
      break;

    case MATCH_PRICE:
      if (value == null) {
        unsetMatchPrice();
      } else {
        setMatchPrice((EsMatchWayType)value);
      }
      break;

    case MATCH_VOL:
      if (value == null) {
        unsetMatchVol();
      } else {
        setMatchVol((Integer)value);
      }
      break;

    case MATCH_DATE_TIME:
      if (value == null) {
        unsetMatchDateTime();
      } else {
        setMatchDateTime((Long)value);
      }
      break;

    case MATCH_FEE:
      if (value == null) {
        unsetMatchFee();
      } else {
        setMatchFee((Double)value);
      }
      break;

    case CURRENCY_NO:
      if (value == null) {
        unsetCurrencyNo();
      } else {
        setCurrencyNo((String)value);
      }
      break;

    case ADD_ONE:
      if (value == null) {
        unsetAddOne();
      } else {
        setAddOne((Boolean)value);
      }
      break;

    case MANUAL_FEE:
      if (value == null) {
        unsetManualFee();
      } else {
        setManualFee((Boolean)value);
      }
      break;

    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((EsDeletedType)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Integer)value);
      }
      break;

    case MATCH_ID:
      if (value == null) {
        unsetMatchId();
      } else {
        setMatchId((Integer)value);
      }
      break;

    case COVER_PRICE:
      if (value == null) {
        unsetCoverPrice();
      } else {
        setCoverPrice((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_ID:
      return getSledId();

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case MATCH_STREAM_ID:
      return Integer.valueOf(getMatchStreamId());

    case CLIENT_NO:
      return getClientNo();

    case SYSTEM_NO:
      return getSystemNo();

    case MATCH_NO:
      return getMatchNo();

    case MATCH_MODE:
      return getMatchMode();

    case MATCH_PRICE:
      return getMatchPrice();

    case MATCH_VOL:
      return Integer.valueOf(getMatchVol());

    case MATCH_DATE_TIME:
      return Long.valueOf(getMatchDateTime());

    case MATCH_FEE:
      return Double.valueOf(getMatchFee());

    case CURRENCY_NO:
      return getCurrencyNo();

    case ADD_ONE:
      return Boolean.valueOf(isAddOne());

    case MANUAL_FEE:
      return Boolean.valueOf(isManualFee());

    case DELETED:
      return getDeleted();

    case ORDER_ID:
      return Integer.valueOf(getOrderId());

    case MATCH_ID:
      return Integer.valueOf(getMatchId());

    case COVER_PRICE:
      return Double.valueOf(getCoverPrice());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_ID:
      return isSetSledId();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    case USER_ID:
      return isSetUserId();
    case MATCH_STREAM_ID:
      return isSetMatchStreamId();
    case CLIENT_NO:
      return isSetClientNo();
    case SYSTEM_NO:
      return isSetSystemNo();
    case MATCH_NO:
      return isSetMatchNo();
    case MATCH_MODE:
      return isSetMatchMode();
    case MATCH_PRICE:
      return isSetMatchPrice();
    case MATCH_VOL:
      return isSetMatchVol();
    case MATCH_DATE_TIME:
      return isSetMatchDateTime();
    case MATCH_FEE:
      return isSetMatchFee();
    case CURRENCY_NO:
      return isSetCurrencyNo();
    case ADD_ONE:
      return isSetAddOne();
    case MANUAL_FEE:
      return isSetManualFee();
    case DELETED:
      return isSetDeleted();
    case ORDER_ID:
      return isSetOrderId();
    case MATCH_ID:
      return isSetMatchId();
    case COVER_PRICE:
      return isSetCoverPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EsOrderMatchField)
      return this.equals((EsOrderMatchField)that);
    return false;
  }

  public boolean equals(EsOrderMatchField that) {
    if (that == null)
      return false;

    boolean this_present_sledId = true && this.isSetSledId();
    boolean that_present_sledId = true && that.isSetSledId();
    if (this_present_sledId || that_present_sledId) {
      if (!(this_present_sledId && that_present_sledId))
        return false;
      if (!this.sledId.equals(that.sledId))
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_matchStreamId = true && this.isSetMatchStreamId();
    boolean that_present_matchStreamId = true && that.isSetMatchStreamId();
    if (this_present_matchStreamId || that_present_matchStreamId) {
      if (!(this_present_matchStreamId && that_present_matchStreamId))
        return false;
      if (this.matchStreamId != that.matchStreamId)
        return false;
    }

    boolean this_present_clientNo = true && this.isSetClientNo();
    boolean that_present_clientNo = true && that.isSetClientNo();
    if (this_present_clientNo || that_present_clientNo) {
      if (!(this_present_clientNo && that_present_clientNo))
        return false;
      if (!this.clientNo.equals(that.clientNo))
        return false;
    }

    boolean this_present_systemNo = true && this.isSetSystemNo();
    boolean that_present_systemNo = true && that.isSetSystemNo();
    if (this_present_systemNo || that_present_systemNo) {
      if (!(this_present_systemNo && that_present_systemNo))
        return false;
      if (!this.systemNo.equals(that.systemNo))
        return false;
    }

    boolean this_present_matchNo = true && this.isSetMatchNo();
    boolean that_present_matchNo = true && that.isSetMatchNo();
    if (this_present_matchNo || that_present_matchNo) {
      if (!(this_present_matchNo && that_present_matchNo))
        return false;
      if (!this.matchNo.equals(that.matchNo))
        return false;
    }

    boolean this_present_matchMode = true && this.isSetMatchMode();
    boolean that_present_matchMode = true && that.isSetMatchMode();
    if (this_present_matchMode || that_present_matchMode) {
      if (!(this_present_matchMode && that_present_matchMode))
        return false;
      if (!this.matchMode.equals(that.matchMode))
        return false;
    }

    boolean this_present_matchPrice = true && this.isSetMatchPrice();
    boolean that_present_matchPrice = true && that.isSetMatchPrice();
    if (this_present_matchPrice || that_present_matchPrice) {
      if (!(this_present_matchPrice && that_present_matchPrice))
        return false;
      if (!this.matchPrice.equals(that.matchPrice))
        return false;
    }

    boolean this_present_matchVol = true && this.isSetMatchVol();
    boolean that_present_matchVol = true && that.isSetMatchVol();
    if (this_present_matchVol || that_present_matchVol) {
      if (!(this_present_matchVol && that_present_matchVol))
        return false;
      if (this.matchVol != that.matchVol)
        return false;
    }

    boolean this_present_matchDateTime = true && this.isSetMatchDateTime();
    boolean that_present_matchDateTime = true && that.isSetMatchDateTime();
    if (this_present_matchDateTime || that_present_matchDateTime) {
      if (!(this_present_matchDateTime && that_present_matchDateTime))
        return false;
      if (this.matchDateTime != that.matchDateTime)
        return false;
    }

    boolean this_present_matchFee = true && this.isSetMatchFee();
    boolean that_present_matchFee = true && that.isSetMatchFee();
    if (this_present_matchFee || that_present_matchFee) {
      if (!(this_present_matchFee && that_present_matchFee))
        return false;
      if (this.matchFee != that.matchFee)
        return false;
    }

    boolean this_present_currencyNo = true && this.isSetCurrencyNo();
    boolean that_present_currencyNo = true && that.isSetCurrencyNo();
    if (this_present_currencyNo || that_present_currencyNo) {
      if (!(this_present_currencyNo && that_present_currencyNo))
        return false;
      if (!this.currencyNo.equals(that.currencyNo))
        return false;
    }

    boolean this_present_addOne = true && this.isSetAddOne();
    boolean that_present_addOne = true && that.isSetAddOne();
    if (this_present_addOne || that_present_addOne) {
      if (!(this_present_addOne && that_present_addOne))
        return false;
      if (this.addOne != that.addOne)
        return false;
    }

    boolean this_present_manualFee = true && this.isSetManualFee();
    boolean that_present_manualFee = true && that.isSetManualFee();
    if (this_present_manualFee || that_present_manualFee) {
      if (!(this_present_manualFee && that_present_manualFee))
        return false;
      if (this.manualFee != that.manualFee)
        return false;
    }

    boolean this_present_deleted = true && this.isSetDeleted();
    boolean that_present_deleted = true && that.isSetDeleted();
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (!this.deleted.equals(that.deleted))
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_matchId = true && this.isSetMatchId();
    boolean that_present_matchId = true && that.isSetMatchId();
    if (this_present_matchId || that_present_matchId) {
      if (!(this_present_matchId && that_present_matchId))
        return false;
      if (this.matchId != that.matchId)
        return false;
    }

    boolean this_present_coverPrice = true && this.isSetCoverPrice();
    boolean that_present_coverPrice = true && that.isSetCoverPrice();
    if (this_present_coverPrice || that_present_coverPrice) {
      if (!(this_present_coverPrice && that_present_coverPrice))
        return false;
      if (this.coverPrice != that.coverPrice)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EsOrderMatchField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledId()).compareTo(other.isSetSledId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledId, other.sledId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchStreamId()).compareTo(other.isSetMatchStreamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchStreamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchStreamId, other.matchStreamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientNo()).compareTo(other.isSetClientNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientNo, other.clientNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemNo()).compareTo(other.isSetSystemNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemNo, other.systemNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchNo()).compareTo(other.isSetMatchNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchNo, other.matchNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchMode()).compareTo(other.isSetMatchMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchMode, other.matchMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchPrice()).compareTo(other.isSetMatchPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchPrice, other.matchPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchVol()).compareTo(other.isSetMatchVol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchVol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchVol, other.matchVol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchDateTime()).compareTo(other.isSetMatchDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchDateTime, other.matchDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchFee()).compareTo(other.isSetMatchFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchFee, other.matchFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyNo()).compareTo(other.isSetCurrencyNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyNo, other.currencyNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddOne()).compareTo(other.isSetAddOne());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddOne()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addOne, other.addOne);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManualFee()).compareTo(other.isSetManualFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManualFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manualFee, other.manualFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted()).compareTo(other.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleted, other.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchId()).compareTo(other.isSetMatchId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchId, other.matchId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoverPrice()).compareTo(other.isSetCoverPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoverPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coverPrice, other.coverPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EsOrderMatchField(");
    boolean first = true;

    sb.append("sledId:");
    if (this.sledId == null) {
      sb.append("null");
    } else {
      sb.append(this.sledId);
    }
    first = false;
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetMatchStreamId()) {
      if (!first) sb.append(", ");
      sb.append("matchStreamId:");
      sb.append(this.matchStreamId);
      first = false;
    }
    if (isSetClientNo()) {
      if (!first) sb.append(", ");
      sb.append("clientNo:");
      if (this.clientNo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientNo);
      }
      first = false;
    }
    if (isSetSystemNo()) {
      if (!first) sb.append(", ");
      sb.append("systemNo:");
      if (this.systemNo == null) {
        sb.append("null");
      } else {
        sb.append(this.systemNo);
      }
      first = false;
    }
    if (isSetMatchNo()) {
      if (!first) sb.append(", ");
      sb.append("matchNo:");
      if (this.matchNo == null) {
        sb.append("null");
      } else {
        sb.append(this.matchNo);
      }
      first = false;
    }
    if (isSetMatchMode()) {
      if (!first) sb.append(", ");
      sb.append("matchMode:");
      if (this.matchMode == null) {
        sb.append("null");
      } else {
        sb.append(this.matchMode);
      }
      first = false;
    }
    if (isSetMatchPrice()) {
      if (!first) sb.append(", ");
      sb.append("matchPrice:");
      if (this.matchPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.matchPrice);
      }
      first = false;
    }
    if (isSetMatchVol()) {
      if (!first) sb.append(", ");
      sb.append("matchVol:");
      sb.append(this.matchVol);
      first = false;
    }
    if (isSetMatchDateTime()) {
      if (!first) sb.append(", ");
      sb.append("matchDateTime:");
      sb.append(this.matchDateTime);
      first = false;
    }
    if (isSetMatchFee()) {
      if (!first) sb.append(", ");
      sb.append("matchFee:");
      sb.append(this.matchFee);
      first = false;
    }
    if (isSetCurrencyNo()) {
      if (!first) sb.append(", ");
      sb.append("currencyNo:");
      if (this.currencyNo == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyNo);
      }
      first = false;
    }
    if (isSetAddOne()) {
      if (!first) sb.append(", ");
      sb.append("addOne:");
      sb.append(this.addOne);
      first = false;
    }
    if (isSetManualFee()) {
      if (!first) sb.append(", ");
      sb.append("manualFee:");
      sb.append(this.manualFee);
      first = false;
    }
    if (isSetDeleted()) {
      if (!first) sb.append(", ");
      sb.append("deleted:");
      if (this.deleted == null) {
        sb.append("null");
      } else {
        sb.append(this.deleted);
      }
      first = false;
    }
    if (isSetOrderId()) {
      if (!first) sb.append(", ");
      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
    }
    if (isSetMatchId()) {
      if (!first) sb.append(", ");
      sb.append("matchId:");
      sb.append(this.matchId);
      first = false;
    }
    if (isSetCoverPrice()) {
      if (!first) sb.append(", ");
      sb.append("coverPrice:");
      sb.append(this.coverPrice);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sledId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sledId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EsOrderMatchFieldStandardSchemeFactory implements SchemeFactory {
    public EsOrderMatchFieldStandardScheme getScheme() {
      return new EsOrderMatchFieldStandardScheme();
    }
  }

  private static class EsOrderMatchFieldStandardScheme extends StandardScheme<EsOrderMatchField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EsOrderMatchField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledId = iprot.readString();
              struct.setSledIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MATCH_STREAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchStreamId = iprot.readI32();
              struct.setMatchStreamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLIENT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientNo = iprot.readString();
              struct.setClientNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SYSTEM_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.systemNo = iprot.readString();
              struct.setSystemNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MATCH_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchNo = iprot.readString();
              struct.setMatchNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MATCH_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchMode = EsMatchModeType.findByValue(iprot.readI32());
              struct.setMatchModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MATCH_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchPrice = EsMatchWayType.findByValue(iprot.readI32());
              struct.setMatchPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MATCH_VOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchVol = iprot.readI32();
              struct.setMatchVolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MATCH_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.matchDateTime = iprot.readI64();
              struct.setMatchDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MATCH_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.matchFee = iprot.readDouble();
              struct.setMatchFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CURRENCY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyNo = iprot.readString();
              struct.setCurrencyNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ADD_ONE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.addOne = iprot.readBool();
              struct.setAddOneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MANUAL_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.manualFee = iprot.readBool();
              struct.setManualFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deleted = EsDeletedType.findByValue(iprot.readI32());
              struct.setDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderId = iprot.readI32();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MATCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchId = iprot.readI32();
              struct.setMatchIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // COVER_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.coverPrice = iprot.readDouble();
              struct.setCoverPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EsOrderMatchField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledId != null) {
        oprot.writeFieldBegin(SLED_ID_FIELD_DESC);
        oprot.writeString(struct.sledId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMatchStreamId()) {
        oprot.writeFieldBegin(MATCH_STREAM_ID_FIELD_DESC);
        oprot.writeI32(struct.matchStreamId);
        oprot.writeFieldEnd();
      }
      if (struct.clientNo != null) {
        if (struct.isSetClientNo()) {
          oprot.writeFieldBegin(CLIENT_NO_FIELD_DESC);
          oprot.writeString(struct.clientNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.systemNo != null) {
        if (struct.isSetSystemNo()) {
          oprot.writeFieldBegin(SYSTEM_NO_FIELD_DESC);
          oprot.writeString(struct.systemNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.matchNo != null) {
        if (struct.isSetMatchNo()) {
          oprot.writeFieldBegin(MATCH_NO_FIELD_DESC);
          oprot.writeString(struct.matchNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.matchMode != null) {
        if (struct.isSetMatchMode()) {
          oprot.writeFieldBegin(MATCH_MODE_FIELD_DESC);
          oprot.writeI32(struct.matchMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.matchPrice != null) {
        if (struct.isSetMatchPrice()) {
          oprot.writeFieldBegin(MATCH_PRICE_FIELD_DESC);
          oprot.writeI32(struct.matchPrice.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMatchVol()) {
        oprot.writeFieldBegin(MATCH_VOL_FIELD_DESC);
        oprot.writeI32(struct.matchVol);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMatchDateTime()) {
        oprot.writeFieldBegin(MATCH_DATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.matchDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMatchFee()) {
        oprot.writeFieldBegin(MATCH_FEE_FIELD_DESC);
        oprot.writeDouble(struct.matchFee);
        oprot.writeFieldEnd();
      }
      if (struct.currencyNo != null) {
        if (struct.isSetCurrencyNo()) {
          oprot.writeFieldBegin(CURRENCY_NO_FIELD_DESC);
          oprot.writeString(struct.currencyNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAddOne()) {
        oprot.writeFieldBegin(ADD_ONE_FIELD_DESC);
        oprot.writeBool(struct.addOne);
        oprot.writeFieldEnd();
      }
      if (struct.isSetManualFee()) {
        oprot.writeFieldBegin(MANUAL_FEE_FIELD_DESC);
        oprot.writeBool(struct.manualFee);
        oprot.writeFieldEnd();
      }
      if (struct.deleted != null) {
        if (struct.isSetDeleted()) {
          oprot.writeFieldBegin(DELETED_FIELD_DESC);
          oprot.writeI32(struct.deleted.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderId()) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI32(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMatchId()) {
        oprot.writeFieldBegin(MATCH_ID_FIELD_DESC);
        oprot.writeI32(struct.matchId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCoverPrice()) {
        oprot.writeFieldBegin(COVER_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.coverPrice);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EsOrderMatchFieldTupleSchemeFactory implements SchemeFactory {
    public EsOrderMatchFieldTupleScheme getScheme() {
      return new EsOrderMatchFieldTupleScheme();
    }
  }

  private static class EsOrderMatchFieldTupleScheme extends TupleScheme<EsOrderMatchField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EsOrderMatchField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sledId);
      BitSet optionals = new BitSet();
      if (struct.isSetSledAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetMatchStreamId()) {
        optionals.set(2);
      }
      if (struct.isSetClientNo()) {
        optionals.set(3);
      }
      if (struct.isSetSystemNo()) {
        optionals.set(4);
      }
      if (struct.isSetMatchNo()) {
        optionals.set(5);
      }
      if (struct.isSetMatchMode()) {
        optionals.set(6);
      }
      if (struct.isSetMatchPrice()) {
        optionals.set(7);
      }
      if (struct.isSetMatchVol()) {
        optionals.set(8);
      }
      if (struct.isSetMatchDateTime()) {
        optionals.set(9);
      }
      if (struct.isSetMatchFee()) {
        optionals.set(10);
      }
      if (struct.isSetCurrencyNo()) {
        optionals.set(11);
      }
      if (struct.isSetAddOne()) {
        optionals.set(12);
      }
      if (struct.isSetManualFee()) {
        optionals.set(13);
      }
      if (struct.isSetDeleted()) {
        optionals.set(14);
      }
      if (struct.isSetOrderId()) {
        optionals.set(15);
      }
      if (struct.isSetMatchId()) {
        optionals.set(16);
      }
      if (struct.isSetCoverPrice()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetMatchStreamId()) {
        oprot.writeI32(struct.matchStreamId);
      }
      if (struct.isSetClientNo()) {
        oprot.writeString(struct.clientNo);
      }
      if (struct.isSetSystemNo()) {
        oprot.writeString(struct.systemNo);
      }
      if (struct.isSetMatchNo()) {
        oprot.writeString(struct.matchNo);
      }
      if (struct.isSetMatchMode()) {
        oprot.writeI32(struct.matchMode.getValue());
      }
      if (struct.isSetMatchPrice()) {
        oprot.writeI32(struct.matchPrice.getValue());
      }
      if (struct.isSetMatchVol()) {
        oprot.writeI32(struct.matchVol);
      }
      if (struct.isSetMatchDateTime()) {
        oprot.writeI64(struct.matchDateTime);
      }
      if (struct.isSetMatchFee()) {
        oprot.writeDouble(struct.matchFee);
      }
      if (struct.isSetCurrencyNo()) {
        oprot.writeString(struct.currencyNo);
      }
      if (struct.isSetAddOne()) {
        oprot.writeBool(struct.addOne);
      }
      if (struct.isSetManualFee()) {
        oprot.writeBool(struct.manualFee);
      }
      if (struct.isSetDeleted()) {
        oprot.writeI32(struct.deleted.getValue());
      }
      if (struct.isSetOrderId()) {
        oprot.writeI32(struct.orderId);
      }
      if (struct.isSetMatchId()) {
        oprot.writeI32(struct.matchId);
      }
      if (struct.isSetCoverPrice()) {
        oprot.writeDouble(struct.coverPrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EsOrderMatchField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sledId = iprot.readString();
      struct.setSledIdIsSet(true);
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.matchStreamId = iprot.readI32();
        struct.setMatchStreamIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.clientNo = iprot.readString();
        struct.setClientNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.systemNo = iprot.readString();
        struct.setSystemNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.matchNo = iprot.readString();
        struct.setMatchNoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.matchMode = EsMatchModeType.findByValue(iprot.readI32());
        struct.setMatchModeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.matchPrice = EsMatchWayType.findByValue(iprot.readI32());
        struct.setMatchPriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.matchVol = iprot.readI32();
        struct.setMatchVolIsSet(true);
      }
      if (incoming.get(9)) {
        struct.matchDateTime = iprot.readI64();
        struct.setMatchDateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.matchFee = iprot.readDouble();
        struct.setMatchFeeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.currencyNo = iprot.readString();
        struct.setCurrencyNoIsSet(true);
      }
      if (incoming.get(12)) {
        struct.addOne = iprot.readBool();
        struct.setAddOneIsSet(true);
      }
      if (incoming.get(13)) {
        struct.manualFee = iprot.readBool();
        struct.setManualFeeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.deleted = EsDeletedType.findByValue(iprot.readI32());
        struct.setDeletedIsSet(true);
      }
      if (incoming.get(15)) {
        struct.orderId = iprot.readI32();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.matchId = iprot.readI32();
        struct.setMatchIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.coverPrice = iprot.readDouble();
        struct.setCoverPriceIsSet(true);
      }
    }
  }

}

